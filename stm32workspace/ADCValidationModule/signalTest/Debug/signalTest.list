
signalTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080c8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800825c  0800825c  0000925c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082b4  080082b4  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  080082b4  080082b4  000092b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082bc  080082bc  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082bc  080082bc  000092bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082c0  080082c0  000092c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  080082c4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001524  200000fc  080083c0  0000a0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001620  080083c0  0000a620  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129e7  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030df  00000000  00000000  0001cb13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  0001fbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc9  00000000  00000000  00020cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188be  00000000  00000000  00021989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b41  00000000  00000000  0003a247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ebd0  00000000  00000000  0004ed88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dd958  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045c8  00000000  00000000  000dd99c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000e1f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008244 	.word	0x08008244

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08008244 	.word	0x08008244

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fcb8 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f82a 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 fa90 	bl	80009f4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004d4:	f000 f892 	bl	80005fc <MX_TIM2_Init>
  MX_TIM3_Init();
 80004d8:	f000 f908 	bl	80006ec <MX_TIM3_Init>
  MX_TIM4_Init();
 80004dc:	f000 f986 	bl	80007ec <MX_TIM4_Init>
  MX_TIM5_Init();
 80004e0:	f000 f9fa 	bl	80008d8 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 80004e4:	f007 f9a8 	bl	8007838 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //ICG
 80004e8:	2100      	movs	r1, #0
 80004ea:	480b      	ldr	r0, [pc, #44]	@ (8000518 <main+0x54>)
 80004ec:	f002 ff5e 	bl	80033ac <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 66);
 80004f0:	4b09      	ldr	r3, [pc, #36]	@ (8000518 <main+0x54>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2242      	movs	r2, #66	@ 0x42
 80004f6:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
 80004f8:	2100      	movs	r1, #0
 80004fa:	4808      	ldr	r0, [pc, #32]	@ (800051c <main+0x58>)
 80004fc:	f002 ff56 	bl	80033ac <HAL_TIM_PWM_Start>
//  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH
 8000500:	2108      	movs	r1, #8
 8000502:	4807      	ldr	r0, [pc, #28]	@ (8000520 <main+0x5c>)
 8000504:	f002 ff52 	bl	80033ac <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim2);
 8000508:	4803      	ldr	r0, [pc, #12]	@ (8000518 <main+0x54>)
 800050a:	f002 fe93 	bl	8003234 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800050e:	4803      	ldr	r0, [pc, #12]	@ (800051c <main+0x58>)
 8000510:	f002 fe90 	bl	8003234 <HAL_TIM_Base_Start_IT>
  while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <main+0x50>
 8000518:	20000118 	.word	0x20000118
 800051c:	20000160 	.word	0x20000160
 8000520:	200001f0 	.word	0x200001f0

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b094      	sub	sp, #80	@ 0x50
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0320 	add.w	r3, r7, #32
 800052e:	2230      	movs	r2, #48	@ 0x30
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f007 fe5a 	bl	80081ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	f107 030c 	add.w	r3, r7, #12
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]
 8000546:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000548:	2300      	movs	r3, #0
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	4b29      	ldr	r3, [pc, #164]	@ (80005f4 <SystemClock_Config+0xd0>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000550:	4a28      	ldr	r2, [pc, #160]	@ (80005f4 <SystemClock_Config+0xd0>)
 8000552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000556:	6413      	str	r3, [r2, #64]	@ 0x40
 8000558:	4b26      	ldr	r3, [pc, #152]	@ (80005f4 <SystemClock_Config+0xd0>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b23      	ldr	r3, [pc, #140]	@ (80005f8 <SystemClock_Config+0xd4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000570:	4a21      	ldr	r2, [pc, #132]	@ (80005f8 <SystemClock_Config+0xd4>)
 8000572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b1f      	ldr	r3, [pc, #124]	@ (80005f8 <SystemClock_Config+0xd4>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	2301      	movs	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000598:	2319      	movs	r3, #25
 800059a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800059c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005a2:	2304      	movs	r3, #4
 80005a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005a6:	2307      	movs	r3, #7
 80005a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 f9c0 	bl	8002934 <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ba:	f000 fa6b 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2302      	movs	r3, #2
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2102      	movs	r1, #2
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fc22 	bl	8002e24 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005e6:	f000 fa55 	bl	8000a94 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	@ 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08e      	sub	sp, #56	@ 0x38
 8000600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000602:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000610:	f107 0320 	add.w	r3, r7, #32
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
 8000628:	615a      	str	r2, [r3, #20]
 800062a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800062c:	4b2d      	ldr	r3, [pc, #180]	@ (80006e4 <MX_TIM2_Init+0xe8>)
 800062e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000632:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000634:	4b2b      	ldr	r3, [pc, #172]	@ (80006e4 <MX_TIM2_Init+0xe8>)
 8000636:	2200      	movs	r2, #0
 8000638:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063a:	4b2a      	ldr	r3, [pc, #168]	@ (80006e4 <MX_TIM2_Init+0xe8>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 525000-1;
 8000640:	4b28      	ldr	r3, [pc, #160]	@ (80006e4 <MX_TIM2_Init+0xe8>)
 8000642:	4a29      	ldr	r2, [pc, #164]	@ (80006e8 <MX_TIM2_Init+0xec>)
 8000644:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000646:	4b27      	ldr	r3, [pc, #156]	@ (80006e4 <MX_TIM2_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800064c:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <MX_TIM2_Init+0xe8>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000652:	4824      	ldr	r0, [pc, #144]	@ (80006e4 <MX_TIM2_Init+0xe8>)
 8000654:	f002 fd9e 	bl	8003194 <HAL_TIM_Base_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800065e:	f000 fa19 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000662:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000666:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000668:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800066c:	4619      	mov	r1, r3
 800066e:	481d      	ldr	r0, [pc, #116]	@ (80006e4 <MX_TIM2_Init+0xe8>)
 8000670:	f003 f8fe 	bl	8003870 <HAL_TIM_ConfigClockSource>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800067a:	f000 fa0b 	bl	8000a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800067e:	4819      	ldr	r0, [pc, #100]	@ (80006e4 <MX_TIM2_Init+0xe8>)
 8000680:	f002 fe3a 	bl	80032f8 <HAL_TIM_PWM_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800068a:	f000 fa03 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800068e:	2310      	movs	r3, #16
 8000690:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000692:	2300      	movs	r3, #0
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	4619      	mov	r1, r3
 800069c:	4811      	ldr	r0, [pc, #68]	@ (80006e4 <MX_TIM2_Init+0xe8>)
 800069e:	f003 fd81 	bl	80041a4 <HAL_TIMEx_MasterConfigSynchronization>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80006a8:	f000 f9f4 	bl	8000a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ac:	2360      	movs	r3, #96	@ 0x60
 80006ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 8820-1;
 80006b0:	f242 2373 	movw	r3, #8819	@ 0x2273
 80006b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	4619      	mov	r1, r3
 80006c4:	4807      	ldr	r0, [pc, #28]	@ (80006e4 <MX_TIM2_Init+0xe8>)
 80006c6:	f003 f811 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80006d0:	f000 f9e0 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006d4:	4803      	ldr	r0, [pc, #12]	@ (80006e4 <MX_TIM2_Init+0xe8>)
 80006d6:	f000 fa7b 	bl	8000bd0 <HAL_TIM_MspPostInit>

}
 80006da:	bf00      	nop
 80006dc:	3738      	adds	r7, #56	@ 0x38
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000118 	.word	0x20000118
 80006e8:	000802c7 	.word	0x000802c7

080006ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08e      	sub	sp, #56	@ 0x38
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
 8000718:	615a      	str	r2, [r3, #20]
 800071a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800071c:	4b31      	ldr	r3, [pc, #196]	@ (80007e4 <MX_TIM3_Init+0xf8>)
 800071e:	4a32      	ldr	r2, [pc, #200]	@ (80007e8 <MX_TIM3_Init+0xfc>)
 8000720:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000722:	4b30      	ldr	r3, [pc, #192]	@ (80007e4 <MX_TIM3_Init+0xf8>)
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000728:	4b2e      	ldr	r3, [pc, #184]	@ (80007e4 <MX_TIM3_Init+0xf8>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168-1;
 800072e:	4b2d      	ldr	r3, [pc, #180]	@ (80007e4 <MX_TIM3_Init+0xf8>)
 8000730:	22a7      	movs	r2, #167	@ 0xa7
 8000732:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000734:	4b2b      	ldr	r3, [pc, #172]	@ (80007e4 <MX_TIM3_Init+0xf8>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073a:	4b2a      	ldr	r3, [pc, #168]	@ (80007e4 <MX_TIM3_Init+0xf8>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000740:	4828      	ldr	r0, [pc, #160]	@ (80007e4 <MX_TIM3_Init+0xf8>)
 8000742:	f002 fd27 	bl	8003194 <HAL_TIM_Base_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800074c:	f000 f9a2 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000750:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000754:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000756:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800075a:	4619      	mov	r1, r3
 800075c:	4821      	ldr	r0, [pc, #132]	@ (80007e4 <MX_TIM3_Init+0xf8>)
 800075e:	f003 f887 	bl	8003870 <HAL_TIM_ConfigClockSource>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000768:	f000 f994 	bl	8000a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800076c:	481d      	ldr	r0, [pc, #116]	@ (80007e4 <MX_TIM3_Init+0xf8>)
 800076e:	f002 fdc3 	bl	80032f8 <HAL_TIM_PWM_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000778:	f000 f98c 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000784:	f107 0320 	add.w	r3, r7, #32
 8000788:	4619      	mov	r1, r3
 800078a:	4816      	ldr	r0, [pc, #88]	@ (80007e4 <MX_TIM3_Init+0xf8>)
 800078c:	f003 fd0a 	bl	80041a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000796:	f000 f97d 	bl	8000a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800079a:	2360      	movs	r3, #96	@ 0x60
 800079c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 84-1;
 800079e:	2353      	movs	r3, #83	@ 0x53
 80007a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	4619      	mov	r1, r3
 80007b0:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <MX_TIM3_Init+0xf8>)
 80007b2:	f002 ff9b 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80007bc:	f000 f96a 	bl	8000a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2204      	movs	r2, #4
 80007c4:	4619      	mov	r1, r3
 80007c6:	4807      	ldr	r0, [pc, #28]	@ (80007e4 <MX_TIM3_Init+0xf8>)
 80007c8:	f002 ff90 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 80007d2:	f000 f95f 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007d6:	4803      	ldr	r0, [pc, #12]	@ (80007e4 <MX_TIM3_Init+0xf8>)
 80007d8:	f000 f9fa 	bl	8000bd0 <HAL_TIM_MspPostInit>

}
 80007dc:	bf00      	nop
 80007de:	3738      	adds	r7, #56	@ 0x38
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000160 	.word	0x20000160
 80007e8:	40000400 	.word	0x40000400

080007ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08e      	sub	sp, #56	@ 0x38
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000800:	f107 0320 	add.w	r3, r7, #32
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
 8000818:	615a      	str	r2, [r3, #20]
 800081a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800081c:	4b2c      	ldr	r3, [pc, #176]	@ (80008d0 <MX_TIM4_Init+0xe4>)
 800081e:	4a2d      	ldr	r2, [pc, #180]	@ (80008d4 <MX_TIM4_Init+0xe8>)
 8000820:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000822:	4b2b      	ldr	r3, [pc, #172]	@ (80008d0 <MX_TIM4_Init+0xe4>)
 8000824:	2200      	movs	r2, #0
 8000826:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000828:	4b29      	ldr	r3, [pc, #164]	@ (80008d0 <MX_TIM4_Init+0xe4>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 168-1;
 800082e:	4b28      	ldr	r3, [pc, #160]	@ (80008d0 <MX_TIM4_Init+0xe4>)
 8000830:	22a7      	movs	r2, #167	@ 0xa7
 8000832:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b26      	ldr	r3, [pc, #152]	@ (80008d0 <MX_TIM4_Init+0xe4>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083a:	4b25      	ldr	r3, [pc, #148]	@ (80008d0 <MX_TIM4_Init+0xe4>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000840:	4823      	ldr	r0, [pc, #140]	@ (80008d0 <MX_TIM4_Init+0xe4>)
 8000842:	f002 fca7 	bl	8003194 <HAL_TIM_Base_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800084c:	f000 f922 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000850:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000856:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800085a:	4619      	mov	r1, r3
 800085c:	481c      	ldr	r0, [pc, #112]	@ (80008d0 <MX_TIM4_Init+0xe4>)
 800085e:	f003 f807 	bl	8003870 <HAL_TIM_ConfigClockSource>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000868:	f000 f914 	bl	8000a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800086c:	4818      	ldr	r0, [pc, #96]	@ (80008d0 <MX_TIM4_Init+0xe4>)
 800086e:	f002 fd43 	bl	80032f8 <HAL_TIM_PWM_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000878:	f000 f90c 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000884:	f107 0320 	add.w	r3, r7, #32
 8000888:	4619      	mov	r1, r3
 800088a:	4811      	ldr	r0, [pc, #68]	@ (80008d0 <MX_TIM4_Init+0xe4>)
 800088c:	f003 fc8a 	bl	80041a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000896:	f000 f8fd 	bl	8000a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089a:	2360      	movs	r3, #96	@ 0x60
 800089c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 84-1;
 800089e:	2353      	movs	r3, #83	@ 0x53
 80008a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	220c      	movs	r2, #12
 80008ae:	4619      	mov	r1, r3
 80008b0:	4807      	ldr	r0, [pc, #28]	@ (80008d0 <MX_TIM4_Init+0xe4>)
 80008b2:	f002 ff1b 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80008bc:	f000 f8ea 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80008c0:	4803      	ldr	r0, [pc, #12]	@ (80008d0 <MX_TIM4_Init+0xe4>)
 80008c2:	f000 f985 	bl	8000bd0 <HAL_TIM_MspPostInit>

}
 80008c6:	bf00      	nop
 80008c8:	3738      	adds	r7, #56	@ 0x38
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200001a8 	.word	0x200001a8
 80008d4:	40000800 	.word	0x40000800

080008d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b092      	sub	sp, #72	@ 0x48
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000906:	463b      	mov	r3, r7
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
 8000914:	615a      	str	r2, [r3, #20]
 8000916:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000918:	4b34      	ldr	r3, [pc, #208]	@ (80009ec <MX_TIM5_Init+0x114>)
 800091a:	4a35      	ldr	r2, [pc, #212]	@ (80009f0 <MX_TIM5_Init+0x118>)
 800091c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800091e:	4b33      	ldr	r3, [pc, #204]	@ (80009ec <MX_TIM5_Init+0x114>)
 8000920:	2200      	movs	r2, #0
 8000922:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000924:	4b31      	ldr	r3, [pc, #196]	@ (80009ec <MX_TIM5_Init+0x114>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 840-1;
 800092a:	4b30      	ldr	r3, [pc, #192]	@ (80009ec <MX_TIM5_Init+0x114>)
 800092c:	f240 3247 	movw	r2, #839	@ 0x347
 8000930:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000932:	4b2e      	ldr	r3, [pc, #184]	@ (80009ec <MX_TIM5_Init+0x114>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000938:	4b2c      	ldr	r3, [pc, #176]	@ (80009ec <MX_TIM5_Init+0x114>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800093e:	482b      	ldr	r0, [pc, #172]	@ (80009ec <MX_TIM5_Init+0x114>)
 8000940:	f002 fc28 	bl	8003194 <HAL_TIM_Base_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800094a:	f000 f8a3 	bl	8000a94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800094e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000952:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000954:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000958:	4619      	mov	r1, r3
 800095a:	4824      	ldr	r0, [pc, #144]	@ (80009ec <MX_TIM5_Init+0x114>)
 800095c:	f002 ff88 	bl	8003870 <HAL_TIM_ConfigClockSource>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000966:	f000 f895 	bl	8000a94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800096a:	4820      	ldr	r0, [pc, #128]	@ (80009ec <MX_TIM5_Init+0x114>)
 800096c:	f002 fcc4 	bl	80032f8 <HAL_TIM_PWM_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM5_Init+0xa2>
  {
    Error_Handler();
 8000976:	f000 f88d 	bl	8000a94 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800097a:	2306      	movs	r3, #6
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800097e:	2300      	movs	r3, #0
 8000980:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000982:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000986:	4619      	mov	r1, r3
 8000988:	4818      	ldr	r0, [pc, #96]	@ (80009ec <MX_TIM5_Init+0x114>)
 800098a:	f003 f838 	bl	80039fe <HAL_TIM_SlaveConfigSynchro>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM5_Init+0xc0>
  {
    Error_Handler();
 8000994:	f000 f87e 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800099c:	2380      	movs	r3, #128	@ 0x80
 800099e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	4811      	ldr	r0, [pc, #68]	@ (80009ec <MX_TIM5_Init+0x114>)
 80009a8:	f003 fbfc 	bl	80041a4 <HAL_TIMEx_MasterConfigSynchronization>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 80009b2:	f000 f86f 	bl	8000a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b6:	2360      	movs	r3, #96	@ 0x60
 80009b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 84-1;
 80009ba:	2353      	movs	r3, #83	@ 0x53
 80009bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009c6:	463b      	mov	r3, r7
 80009c8:	2208      	movs	r2, #8
 80009ca:	4619      	mov	r1, r3
 80009cc:	4807      	ldr	r0, [pc, #28]	@ (80009ec <MX_TIM5_Init+0x114>)
 80009ce:	f002 fe8d 	bl	80036ec <HAL_TIM_PWM_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM5_Init+0x104>
  {
    Error_Handler();
 80009d8:	f000 f85c 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80009dc:	4803      	ldr	r0, [pc, #12]	@ (80009ec <MX_TIM5_Init+0x114>)
 80009de:	f000 f8f7 	bl	8000bd0 <HAL_TIM_MspPostInit>

}
 80009e2:	bf00      	nop
 80009e4:	3748      	adds	r7, #72	@ 0x48
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200001f0 	.word	0x200001f0
 80009f0:	40000c00 	.word	0x40000c00

080009f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	4b17      	ldr	r3, [pc, #92]	@ (8000a5c <MX_GPIO_Init+0x68>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	4a16      	ldr	r2, [pc, #88]	@ (8000a5c <MX_GPIO_Init+0x68>)
 8000a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0a:	4b14      	ldr	r3, [pc, #80]	@ (8000a5c <MX_GPIO_Init+0x68>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <MX_GPIO_Init+0x68>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a5c <MX_GPIO_Init+0x68>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b0d      	ldr	r3, [pc, #52]	@ (8000a5c <MX_GPIO_Init+0x68>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <MX_GPIO_Init+0x68>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	4a08      	ldr	r2, [pc, #32]	@ (8000a5c <MX_GPIO_Init+0x68>)
 8000a3c:	f043 0302 	orr.w	r3, r3, #2
 8000a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a42:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <MX_GPIO_Init+0x68>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	f003 0302 	and.w	r3, r3, #2
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4e:	bf00      	nop
 8000a50:	3714      	adds	r7, #20
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
uint8_t ICGTriggered = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
//	we want to start the timer here
	if (htim->Instance == TIM2) {
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a70:	d107      	bne.n	8000a82 <HAL_TIM_PeriodElapsedCallback+0x22>
//		ICGTriggered = 1;
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000a72:	2104      	movs	r1, #4
 8000a74:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000a76:	f002 fc99 	bl	80033ac <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000a7a:	210c      	movs	r1, #12
 8000a7c:	4804      	ldr	r0, [pc, #16]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000a7e:	f002 fc95 	bl	80033ac <HAL_TIM_PWM_Start>
//	        // Start Timer 4 PWM on Channel 4
//		if(ICGTriggered)
//	        HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
//	}

}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000160 	.word	0x20000160
 8000a90:	200001a8 	.word	0x200001a8

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <Error_Handler+0x8>

08000aa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <HAL_MspInit+0x4c>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	4a0f      	ldr	r2, [pc, #60]	@ (8000aec <HAL_MspInit+0x4c>)
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8000aec <HAL_MspInit+0x4c>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4b09      	ldr	r3, [pc, #36]	@ (8000aec <HAL_MspInit+0x4c>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	4a08      	ldr	r2, [pc, #32]	@ (8000aec <HAL_MspInit+0x4c>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad2:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <HAL_MspInit+0x4c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800

08000af0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b00:	d116      	bne.n	8000b30 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	4b2e      	ldr	r3, [pc, #184]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0a:	4a2d      	ldr	r2, [pc, #180]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b12:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	201c      	movs	r0, #28
 8000b24:	f000 fafb 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b28:	201c      	movs	r0, #28
 8000b2a:	f000 fb14 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000b2e:	e042      	b.n	8000bb6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM3)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a23      	ldr	r2, [pc, #140]	@ (8000bc4 <HAL_TIM_Base_MspInit+0xd4>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d116      	bne.n	8000b68 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
 8000b3e:	4b20      	ldr	r3, [pc, #128]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b42:	4a1f      	ldr	r2, [pc, #124]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2100      	movs	r1, #0
 8000b5a:	201d      	movs	r0, #29
 8000b5c:	f000 fadf 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b60:	201d      	movs	r0, #29
 8000b62:	f000 faf8 	bl	8001156 <HAL_NVIC_EnableIRQ>
}
 8000b66:	e026      	b.n	8000bb6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a16      	ldr	r2, [pc, #88]	@ (8000bc8 <HAL_TIM_Base_MspInit+0xd8>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d10e      	bne.n	8000b90 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	4a11      	ldr	r2, [pc, #68]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b82:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
}
 8000b8e:	e012      	b.n	8000bb6 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <HAL_TIM_Base_MspInit+0xdc>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d10d      	bne.n	8000bb6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	4a07      	ldr	r2, [pc, #28]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000baa:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <HAL_TIM_Base_MspInit+0xd0>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
}
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40000400 	.word	0x40000400
 8000bc8:	40000800 	.word	0x40000800
 8000bcc:	40000c00 	.word	0x40000c00

08000bd0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08c      	sub	sp, #48	@ 0x30
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bf0:	d11e      	bne.n	8000c30 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	4b46      	ldr	r3, [pc, #280]	@ (8000d10 <HAL_TIM_MspPostInit+0x140>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a45      	ldr	r2, [pc, #276]	@ (8000d10 <HAL_TIM_MspPostInit+0x140>)
 8000bfc:	f043 0301 	orr.w	r3, r3, #1
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b43      	ldr	r3, [pc, #268]	@ (8000d10 <HAL_TIM_MspPostInit+0x140>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	61bb      	str	r3, [r7, #24]
 8000c0c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	483a      	ldr	r0, [pc, #232]	@ (8000d14 <HAL_TIM_MspPostInit+0x144>)
 8000c2a:	f000 faaf 	bl	800118c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000c2e:	e06b      	b.n	8000d08 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM3)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a38      	ldr	r2, [pc, #224]	@ (8000d18 <HAL_TIM_MspPostInit+0x148>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d11e      	bne.n	8000c78 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
 8000c3e:	4b34      	ldr	r3, [pc, #208]	@ (8000d10 <HAL_TIM_MspPostInit+0x140>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a33      	ldr	r2, [pc, #204]	@ (8000d10 <HAL_TIM_MspPostInit+0x140>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b31      	ldr	r3, [pc, #196]	@ (8000d10 <HAL_TIM_MspPostInit+0x140>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c56:	23c0      	movs	r3, #192	@ 0xc0
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c66:	2302      	movs	r3, #2
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4828      	ldr	r0, [pc, #160]	@ (8000d14 <HAL_TIM_MspPostInit+0x144>)
 8000c72:	f000 fa8b 	bl	800118c <HAL_GPIO_Init>
}
 8000c76:	e047      	b.n	8000d08 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a27      	ldr	r2, [pc, #156]	@ (8000d1c <HAL_TIM_MspPostInit+0x14c>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d11f      	bne.n	8000cc2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
 8000c86:	4b22      	ldr	r3, [pc, #136]	@ (8000d10 <HAL_TIM_MspPostInit+0x140>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a21      	ldr	r2, [pc, #132]	@ (8000d10 <HAL_TIM_MspPostInit+0x140>)
 8000c8c:	f043 0302 	orr.w	r3, r3, #2
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b1f      	ldr	r3, [pc, #124]	@ (8000d10 <HAL_TIM_MspPostInit+0x140>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4819      	ldr	r0, [pc, #100]	@ (8000d20 <HAL_TIM_MspPostInit+0x150>)
 8000cbc:	f000 fa66 	bl	800118c <HAL_GPIO_Init>
}
 8000cc0:	e022      	b.n	8000d08 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM5)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a17      	ldr	r2, [pc, #92]	@ (8000d24 <HAL_TIM_MspPostInit+0x154>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d11d      	bne.n	8000d08 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <HAL_TIM_MspPostInit+0x140>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd4:	4a0e      	ldr	r2, [pc, #56]	@ (8000d10 <HAL_TIM_MspPostInit+0x140>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d10 <HAL_TIM_MspPostInit+0x140>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ce8:	2304      	movs	r3, #4
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 031c 	add.w	r3, r7, #28
 8000d00:	4619      	mov	r1, r3
 8000d02:	4804      	ldr	r0, [pc, #16]	@ (8000d14 <HAL_TIM_MspPostInit+0x144>)
 8000d04:	f000 fa42 	bl	800118c <HAL_GPIO_Init>
}
 8000d08:	bf00      	nop
 8000d0a:	3730      	adds	r7, #48	@ 0x30
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020000 	.word	0x40020000
 8000d18:	40000400 	.word	0x40000400
 8000d1c:	40000800 	.word	0x40000800
 8000d20:	40020400 	.word	0x40020400
 8000d24:	40000c00 	.word	0x40000c00

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <NMI_Handler+0x4>

08000d30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <MemManage_Handler+0x4>

08000d40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7e:	f000 f8af 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d8c:	4802      	ldr	r0, [pc, #8]	@ (8000d98 <TIM2_IRQHandler+0x10>)
 8000d8e:	f002 fbbd 	bl	800350c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000118 	.word	0x20000118

08000d9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000da0:	4802      	ldr	r0, [pc, #8]	@ (8000dac <TIM3_IRQHandler+0x10>)
 8000da2:	f002 fbb3 	bl	800350c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000160 	.word	0x20000160

08000db0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000db4:	4802      	ldr	r0, [pc, #8]	@ (8000dc0 <OTG_FS_IRQHandler+0x10>)
 8000db6:	f000 fcb1 	bl	800171c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000f1c 	.word	0x20000f1c

08000dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	@ (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dec:	f7ff ffea 	bl	8000dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df0:	480c      	ldr	r0, [pc, #48]	@ (8000e24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000df2:	490d      	ldr	r1, [pc, #52]	@ (8000e28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a0a      	ldr	r2, [pc, #40]	@ (8000e30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e08:	4c0a      	ldr	r4, [pc, #40]	@ (8000e34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e16:	f007 f9f1 	bl	80081fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fb53 	bl	80004c4 <main>
  bx  lr    
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e20:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000e2c:	080082c4 	.word	0x080082c4
  ldr r2, =_sbss
 8000e30:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000e34:	20001620 	.word	0x20001620

08000e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e40:	4b0e      	ldr	r3, [pc, #56]	@ (8000e7c <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0d      	ldr	r2, [pc, #52]	@ (8000e7c <HAL_Init+0x40>)
 8000e46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e7c <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <HAL_Init+0x40>)
 8000e52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e58:	4b08      	ldr	r3, [pc, #32]	@ (8000e7c <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a07      	ldr	r2, [pc, #28]	@ (8000e7c <HAL_Init+0x40>)
 8000e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 f94f 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6a:	200f      	movs	r0, #15
 8000e6c:	f000 f808 	bl	8000e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e70:	f7ff fe16 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023c00 	.word	0x40023c00

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e88:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <HAL_InitTick+0x54>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ed8 <HAL_InitTick+0x58>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f967 	bl	8001172 <HAL_SYSTICK_Config>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00e      	b.n	8000ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d80a      	bhi.n	8000eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f000 f92f 	bl	800111e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec0:	4a06      	ldr	r2, [pc, #24]	@ (8000edc <HAL_InitTick+0x5c>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_IncTick+0x20>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <HAL_IncTick+0x24>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a04      	ldr	r2, [pc, #16]	@ (8000f04 <HAL_IncTick+0x24>)
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000238 	.word	0x20000238

08000f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	@ (8000f1c <HAL_GetTick+0x14>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000238 	.word	0x20000238

08000f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f28:	f7ff ffee 	bl	8000f08 <HAL_GetTick>
 8000f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f38:	d005      	beq.n	8000f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <HAL_Delay+0x44>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f46:	bf00      	nop
 8000f48:	f7ff ffde 	bl	8000f08 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d8f7      	bhi.n	8000f48 <HAL_Delay+0x28>
  {
  }
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008

08000f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f78:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9a:	4a04      	ldr	r2, [pc, #16]	@ (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	60d3      	str	r3, [r2, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	@ (8000fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	f003 0307 	and.w	r3, r3, #7
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	db0b      	blt.n	8000ff6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f003 021f 	and.w	r2, r3, #31
 8000fe4:	4907      	ldr	r1, [pc, #28]	@ (8001004 <__NVIC_EnableIRQ+0x38>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	095b      	lsrs	r3, r3, #5
 8000fec:	2001      	movs	r0, #1
 8000fee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e100 	.word	0xe000e100

08001008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	db0a      	blt.n	8001032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	490c      	ldr	r1, [pc, #48]	@ (8001054 <__NVIC_SetPriority+0x4c>)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	0112      	lsls	r2, r2, #4
 8001028:	b2d2      	uxtb	r2, r2
 800102a:	440b      	add	r3, r1
 800102c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001030:	e00a      	b.n	8001048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4908      	ldr	r1, [pc, #32]	@ (8001058 <__NVIC_SetPriority+0x50>)
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	3b04      	subs	r3, #4
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	b2d2      	uxtb	r2, r2
 8001044:	440b      	add	r3, r1
 8001046:	761a      	strb	r2, [r3, #24]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800105c:	b480      	push	{r7}
 800105e:	b089      	sub	sp, #36	@ 0x24
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	f1c3 0307 	rsb	r3, r3, #7
 8001076:	2b04      	cmp	r3, #4
 8001078:	bf28      	it	cs
 800107a:	2304      	movcs	r3, #4
 800107c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3304      	adds	r3, #4
 8001082:	2b06      	cmp	r3, #6
 8001084:	d902      	bls.n	800108c <NVIC_EncodePriority+0x30>
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3b03      	subs	r3, #3
 800108a:	e000      	b.n	800108e <NVIC_EncodePriority+0x32>
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	f04f 32ff 	mov.w	r2, #4294967295
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43da      	mvns	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	401a      	ands	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a4:	f04f 31ff 	mov.w	r1, #4294967295
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa01 f303 	lsl.w	r3, r1, r3
 80010ae:	43d9      	mvns	r1, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	4313      	orrs	r3, r2
         );
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	@ 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	210f      	movs	r1, #15
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f7ff ff8e 	bl	8001008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff29 	bl	8000f68 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff3e 	bl	8000fb0 <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff8e 	bl	800105c <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5d 	bl	8001008 <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff31 	bl	8000fcc <__NVIC_EnableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffa2 	bl	80010c4 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	@ 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e159      	b.n	800145c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	f040 8148 	bne.w	8001456 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d005      	beq.n	80011de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d130      	bne.n	8001240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 0201 	and.w	r2, r3, #1
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	2b03      	cmp	r3, #3
 800124a:	d017      	beq.n	800127c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	689a      	ldr	r2, [r3, #8]
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d123      	bne.n	80012d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	08da      	lsrs	r2, r3, #3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3208      	adds	r2, #8
 8001290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	08da      	lsrs	r2, r3, #3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3208      	adds	r2, #8
 80012ca:	69b9      	ldr	r1, [r7, #24]
 80012cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0203 	and.w	r2, r3, #3
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80a2 	beq.w	8001456 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b57      	ldr	r3, [pc, #348]	@ (8001474 <HAL_GPIO_Init+0x2e8>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131a:	4a56      	ldr	r2, [pc, #344]	@ (8001474 <HAL_GPIO_Init+0x2e8>)
 800131c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001320:	6453      	str	r3, [r2, #68]	@ 0x44
 8001322:	4b54      	ldr	r3, [pc, #336]	@ (8001474 <HAL_GPIO_Init+0x2e8>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800132e:	4a52      	ldr	r2, [pc, #328]	@ (8001478 <HAL_GPIO_Init+0x2ec>)
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a49      	ldr	r2, [pc, #292]	@ (800147c <HAL_GPIO_Init+0x2f0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d019      	beq.n	800138e <HAL_GPIO_Init+0x202>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a48      	ldr	r2, [pc, #288]	@ (8001480 <HAL_GPIO_Init+0x2f4>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <HAL_GPIO_Init+0x1fe>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a47      	ldr	r2, [pc, #284]	@ (8001484 <HAL_GPIO_Init+0x2f8>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00d      	beq.n	8001386 <HAL_GPIO_Init+0x1fa>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a46      	ldr	r2, [pc, #280]	@ (8001488 <HAL_GPIO_Init+0x2fc>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d007      	beq.n	8001382 <HAL_GPIO_Init+0x1f6>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a45      	ldr	r2, [pc, #276]	@ (800148c <HAL_GPIO_Init+0x300>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_GPIO_Init+0x1f2>
 800137a:	2304      	movs	r3, #4
 800137c:	e008      	b.n	8001390 <HAL_GPIO_Init+0x204>
 800137e:	2307      	movs	r3, #7
 8001380:	e006      	b.n	8001390 <HAL_GPIO_Init+0x204>
 8001382:	2303      	movs	r3, #3
 8001384:	e004      	b.n	8001390 <HAL_GPIO_Init+0x204>
 8001386:	2302      	movs	r3, #2
 8001388:	e002      	b.n	8001390 <HAL_GPIO_Init+0x204>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <HAL_GPIO_Init+0x204>
 800138e:	2300      	movs	r3, #0
 8001390:	69fa      	ldr	r2, [r7, #28]
 8001392:	f002 0203 	and.w	r2, r2, #3
 8001396:	0092      	lsls	r2, r2, #2
 8001398:	4093      	lsls	r3, r2
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a0:	4935      	ldr	r1, [pc, #212]	@ (8001478 <HAL_GPIO_Init+0x2ec>)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	3302      	adds	r3, #2
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ae:	4b38      	ldr	r3, [pc, #224]	@ (8001490 <HAL_GPIO_Init+0x304>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001490 <HAL_GPIO_Init+0x304>)
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001490 <HAL_GPIO_Init+0x304>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013fc:	4a24      	ldr	r2, [pc, #144]	@ (8001490 <HAL_GPIO_Init+0x304>)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001402:	4b23      	ldr	r3, [pc, #140]	@ (8001490 <HAL_GPIO_Init+0x304>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	43db      	mvns	r3, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4013      	ands	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001426:	4a1a      	ldr	r2, [pc, #104]	@ (8001490 <HAL_GPIO_Init+0x304>)
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800142c:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <HAL_GPIO_Init+0x304>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001450:	4a0f      	ldr	r2, [pc, #60]	@ (8001490 <HAL_GPIO_Init+0x304>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3301      	adds	r3, #1
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	2b0f      	cmp	r3, #15
 8001460:	f67f aea2 	bls.w	80011a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3724      	adds	r7, #36	@ 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40013800 	.word	0x40013800
 800147c:	40020000 	.word	0x40020000
 8001480:	40020400 	.word	0x40020400
 8001484:	40020800 	.word	0x40020800
 8001488:	40020c00 	.word	0x40020c00
 800148c:	40021000 	.word	0x40021000
 8001490:	40013c00 	.word	0x40013c00

08001494 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af02      	add	r7, sp, #8
 800149a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e101      	b.n	80016aa <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d106      	bne.n	80014c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f006 fb89 	bl	8007bd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2203      	movs	r2, #3
 80014ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014d4:	d102      	bne.n	80014dc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f002 fff8 	bl	80044d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6818      	ldr	r0, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7c1a      	ldrb	r2, [r3, #16]
 80014ee:	f88d 2000 	strb.w	r2, [sp]
 80014f2:	3304      	adds	r3, #4
 80014f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014f6:	f002 fed7 	bl	80042a8 <USB_CoreInit>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2202      	movs	r2, #2
 8001504:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0ce      	b.n	80016aa <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fff0 	bl	80044f8 <USB_SetCurrentMode>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d005      	beq.n	800152a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2202      	movs	r2, #2
 8001522:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e0bf      	b.n	80016aa <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152a:	2300      	movs	r3, #0
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	e04a      	b.n	80015c6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001530:	7bfa      	ldrb	r2, [r7, #15]
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	3315      	adds	r3, #21
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	3314      	adds	r3, #20
 8001554:	7bfa      	ldrb	r2, [r7, #15]
 8001556:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	b298      	uxth	r0, r3
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	4613      	mov	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	332e      	adds	r3, #46	@ 0x2e
 800156c:	4602      	mov	r2, r0
 800156e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	4413      	add	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	3318      	adds	r3, #24
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4413      	add	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	331c      	adds	r3, #28
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001598:	7bfa      	ldrb	r2, [r7, #15]
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	4613      	mov	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	3320      	adds	r3, #32
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4413      	add	r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	3324      	adds	r3, #36	@ 0x24
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	3301      	adds	r3, #1
 80015c4:	73fb      	strb	r3, [r7, #15]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	791b      	ldrb	r3, [r3, #4]
 80015ca:	7bfa      	ldrb	r2, [r7, #15]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d3af      	bcc.n	8001530 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015d0:	2300      	movs	r3, #0
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	e044      	b.n	8001660 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015d6:	7bfa      	ldrb	r2, [r7, #15]
 80015d8:	6879      	ldr	r1, [r7, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015ec:	7bfa      	ldrb	r2, [r7, #15]
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4413      	add	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001602:	7bfa      	ldrb	r2, [r7, #15]
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4413      	add	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001618:	7bfa      	ldrb	r2, [r7, #15]
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	4413      	add	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800162e:	7bfa      	ldrb	r2, [r7, #15]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	4413      	add	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	440b      	add	r3, r1
 800163c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001644:	7bfa      	ldrb	r2, [r7, #15]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	4413      	add	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	3301      	adds	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	791b      	ldrb	r3, [r3, #4]
 8001664:	7bfa      	ldrb	r2, [r7, #15]
 8001666:	429a      	cmp	r2, r3
 8001668:	d3b5      	bcc.n	80015d6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6818      	ldr	r0, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	7c1a      	ldrb	r2, [r3, #16]
 8001672:	f88d 2000 	strb.w	r2, [sp]
 8001676:	3304      	adds	r3, #4
 8001678:	cb0e      	ldmia	r3, {r1, r2, r3}
 800167a:	f002 ff89 	bl	8004590 <USB_DevInit>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2202      	movs	r2, #2
 8001688:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e00c      	b.n	80016aa <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 ffcd 	bl	8005642 <USB_DevDisconnect>

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d101      	bne.n	80016ce <HAL_PCD_Start+0x1c>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e022      	b.n	8001714 <HAL_PCD_Start+0x62>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d009      	beq.n	80016f6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d105      	bne.n	80016f6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 feda 	bl	80044b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f003 ff7b 	bl	8005600 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3710      	adds	r7, #16
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800171c:	b590      	push	{r4, r7, lr}
 800171e:	b08d      	sub	sp, #52	@ 0x34
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800172a:	6a3b      	ldr	r3, [r7, #32]
 800172c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f004 f839 	bl	80057aa <USB_GetMode>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	f040 848c 	bne.w	8002058 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f003 ff9d 	bl	8005684 <USB_ReadInterrupts>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 8482 	beq.w	8002056 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	0a1b      	lsrs	r3, r3, #8
 800175c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f003 ff8a 	bl	8005684 <USB_ReadInterrupts>
 8001770:	4603      	mov	r3, r0
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b02      	cmp	r3, #2
 8001778:	d107      	bne.n	800178a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f002 0202 	and.w	r2, r2, #2
 8001788:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f003 ff78 	bl	8005684 <USB_ReadInterrupts>
 8001794:	4603      	mov	r3, r0
 8001796:	f003 0310 	and.w	r3, r3, #16
 800179a:	2b10      	cmp	r3, #16
 800179c:	d161      	bne.n	8001862 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	699a      	ldr	r2, [r3, #24]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0210 	bic.w	r2, r2, #16
 80017ac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	f003 020f 	and.w	r2, r3, #15
 80017ba:	4613      	mov	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	4413      	add	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	3304      	adds	r3, #4
 80017cc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	0c5b      	lsrs	r3, r3, #17
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d124      	bne.n	8001824 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80017e0:	4013      	ands	r3, r2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d035      	beq.n	8001852 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80017f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	461a      	mov	r2, r3
 80017f8:	6a38      	ldr	r0, [r7, #32]
 80017fa:	f003 fdaf 	bl	800535c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	091b      	lsrs	r3, r3, #4
 8001806:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800180a:	441a      	add	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	695a      	ldr	r2, [r3, #20]
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800181c:	441a      	add	r2, r3
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	615a      	str	r2, [r3, #20]
 8001822:	e016      	b.n	8001852 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	0c5b      	lsrs	r3, r3, #17
 8001828:	f003 030f 	and.w	r3, r3, #15
 800182c:	2b06      	cmp	r3, #6
 800182e:	d110      	bne.n	8001852 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001836:	2208      	movs	r2, #8
 8001838:	4619      	mov	r1, r3
 800183a:	6a38      	ldr	r0, [r7, #32]
 800183c:	f003 fd8e 	bl	800535c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	695a      	ldr	r2, [r3, #20]
 8001844:	69bb      	ldr	r3, [r7, #24]
 8001846:	091b      	lsrs	r3, r3, #4
 8001848:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800184c:	441a      	add	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	699a      	ldr	r2, [r3, #24]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0210 	orr.w	r2, r2, #16
 8001860:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f003 ff0c 	bl	8005684 <USB_ReadInterrupts>
 800186c:	4603      	mov	r3, r0
 800186e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001872:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001876:	f040 80a7 	bne.w	80019c8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f003 ff11 	bl	80056aa <USB_ReadDevAllOutEpInterrupt>
 8001888:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800188a:	e099      	b.n	80019c0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800188c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 808e 	beq.w	80019b4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	4611      	mov	r1, r2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f003 ff35 	bl	8005712 <USB_ReadDevOutEPInterrupt>
 80018a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00c      	beq.n	80018ce <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80018b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b6:	015a      	lsls	r2, r3, #5
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	4413      	add	r3, r2
 80018bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018c0:	461a      	mov	r2, r3
 80018c2:	2301      	movs	r3, #1
 80018c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80018c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 fea1 	bl	8002610 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00c      	beq.n	80018f2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80018d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018da:	015a      	lsls	r2, r3, #5
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	4413      	add	r3, r2
 80018e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80018e4:	461a      	mov	r2, r3
 80018e6:	2308      	movs	r3, #8
 80018e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80018ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 ff77 	bl	80027e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80018fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fe:	015a      	lsls	r2, r3, #5
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	4413      	add	r3, r2
 8001904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001908:	461a      	mov	r2, r3
 800190a:	2310      	movs	r3, #16
 800190c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d030      	beq.n	800197a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001920:	2b80      	cmp	r3, #128	@ 0x80
 8001922:	d109      	bne.n	8001938 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001932:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001936:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001938:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800193a:	4613      	mov	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	4413      	add	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	4413      	add	r3, r2
 800194a:	3304      	adds	r3, #4
 800194c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	78db      	ldrb	r3, [r3, #3]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d108      	bne.n	8001968 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	2200      	movs	r2, #0
 800195a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800195c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195e:	b2db      	uxtb	r3, r3
 8001960:	4619      	mov	r1, r3
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f006 fa34 	bl	8007dd0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196a:	015a      	lsls	r2, r3, #5
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	4413      	add	r3, r2
 8001970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001974:	461a      	mov	r2, r3
 8001976:	2302      	movs	r3, #2
 8001978:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	f003 0320 	and.w	r3, r3, #32
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001986:	015a      	lsls	r2, r3, #5
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	4413      	add	r3, r2
 800198c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001990:	461a      	mov	r2, r3
 8001992:	2320      	movs	r3, #32
 8001994:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d009      	beq.n	80019b4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a2:	015a      	lsls	r2, r3, #5
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80019ac:	461a      	mov	r2, r3
 80019ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019b2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80019b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b6:	3301      	adds	r3, #1
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80019ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019bc:	085b      	lsrs	r3, r3, #1
 80019be:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80019c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f47f af62 	bne.w	800188c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f003 fe59 	bl	8005684 <USB_ReadInterrupts>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80019dc:	f040 80db 	bne.w	8001b96 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f003 fe7a 	bl	80056de <USB_ReadDevAllInEpInterrupt>
 80019ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80019f0:	e0cd      	b.n	8001b8e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80019f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 80c2 	beq.w	8001b82 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f003 fea0 	bl	800574e <USB_ReadDevInEPInterrupt>
 8001a0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d057      	beq.n	8001aca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	f003 030f 	and.w	r3, r3, #15
 8001a20:	2201      	movs	r2, #1
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001a2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69f9      	ldr	r1, [r7, #28]
 8001a36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a40:	015a      	lsls	r2, r3, #5
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	799b      	ldrb	r3, [r3, #6]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d132      	bne.n	8001abe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4413      	add	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	3320      	adds	r3, #32
 8001a68:	6819      	ldr	r1, [r3, #0]
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a6e:	4613      	mov	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	4413      	add	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4403      	add	r3, r0
 8001a78:	331c      	adds	r3, #28
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4419      	add	r1, r3
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a82:	4613      	mov	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4403      	add	r3, r0
 8001a8c:	3320      	adds	r3, #32
 8001a8e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d113      	bne.n	8001abe <HAL_PCD_IRQHandler+0x3a2>
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	3324      	adds	r3, #36	@ 0x24
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d108      	bne.n	8001abe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	2101      	movs	r1, #1
 8001aba:	f003 fea7 	bl	800580c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f006 f908 	bl	8007cda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d008      	beq.n	8001ae6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad6:	015a      	lsls	r2, r3, #5
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	4413      	add	r3, r2
 8001adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	2308      	movs	r3, #8
 8001ae4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	f003 0310 	and.w	r3, r3, #16
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d008      	beq.n	8001b02 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af2:	015a      	lsls	r2, r3, #5
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	4413      	add	r3, r2
 8001af8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001afc:	461a      	mov	r2, r3
 8001afe:	2310      	movs	r3, #16
 8001b00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0e:	015a      	lsls	r2, r3, #5
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	4413      	add	r3, r2
 8001b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2340      	movs	r3, #64	@ 0x40
 8001b1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d023      	beq.n	8001b70 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001b28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b2a:	6a38      	ldr	r0, [r7, #32]
 8001b2c:	f002 fe94 	bl	8004858 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	3310      	adds	r3, #16
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	3304      	adds	r3, #4
 8001b42:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	78db      	ldrb	r3, [r3, #3]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d108      	bne.n	8001b5e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	4619      	mov	r1, r3
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f006 f94b 	bl	8007df4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	015a      	lsls	r2, r3, #5
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	4413      	add	r3, r2
 8001b66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001b7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 fcbb 	bl	80024f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	3301      	adds	r3, #1
 8001b86:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b8a:	085b      	lsrs	r3, r3, #1
 8001b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f47f af2e 	bne.w	80019f2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 fd72 	bl	8005684 <USB_ReadInterrupts>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001ba6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001baa:	d122      	bne.n	8001bf2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001bba:	f023 0301 	bic.w	r3, r3, #1
 8001bbe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d108      	bne.n	8001bdc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 fea1 	bl	800291c <HAL_PCDEx_LPM_Callback>
 8001bda:	e002      	b.n	8001be2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f006 f8e9 	bl	8007db4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695a      	ldr	r2, [r3, #20]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001bf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 fd44 	bl	8005684 <USB_ReadInterrupts>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c06:	d112      	bne.n	8001c2e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d102      	bne.n	8001c1e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f006 f8a5 	bl	8007d68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	695a      	ldr	r2, [r3, #20]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001c2c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f003 fd26 	bl	8005684 <USB_ReadInterrupts>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c42:	f040 80b7 	bne.w	8001db4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	69fa      	ldr	r2, [r7, #28]
 8001c50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c54:	f023 0301 	bic.w	r3, r3, #1
 8001c58:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2110      	movs	r1, #16
 8001c60:	4618      	mov	r0, r3
 8001c62:	f002 fdf9 	bl	8004858 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c6a:	e046      	b.n	8001cfa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6e:	015a      	lsls	r2, r3, #5
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	4413      	add	r3, r2
 8001c74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001c7e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c82:	015a      	lsls	r2, r3, #5
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	4413      	add	r3, r2
 8001c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c90:	0151      	lsls	r1, r2, #5
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	440a      	add	r2, r1
 8001c96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001c9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001c9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ca2:	015a      	lsls	r2, r3, #5
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cac:	461a      	mov	r2, r3
 8001cae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001cb2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cb6:	015a      	lsls	r2, r3, #5
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cc4:	0151      	lsls	r1, r2, #5
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	440a      	add	r2, r1
 8001cca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001cce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001cd2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ce4:	0151      	lsls	r1, r2, #5
 8001ce6:	69fa      	ldr	r2, [r7, #28]
 8001ce8:	440a      	add	r2, r1
 8001cea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001cee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001cf2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	791b      	ldrb	r3, [r3, #4]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d3b2      	bcc.n	8001c6c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d14:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001d18:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7bdb      	ldrb	r3, [r3, #15]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d016      	beq.n	8001d50 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d32:	f043 030b 	orr.w	r3, r3, #11
 8001d36:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d42:	69fa      	ldr	r2, [r7, #28]
 8001d44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d48:	f043 030b 	orr.w	r3, r3, #11
 8001d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d4e:	e015      	b.n	8001d7c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	69fa      	ldr	r2, [r7, #28]
 8001d5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d5e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d62:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001d66:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d6e:	691b      	ldr	r3, [r3, #16]
 8001d70:	69fa      	ldr	r2, [r7, #28]
 8001d72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d76:	f043 030b 	orr.w	r3, r3, #11
 8001d7a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d8a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001d8e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6818      	ldr	r0, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f003 fd34 	bl	800580c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695a      	ldr	r2, [r3, #20]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001db2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 fc63 	bl	8005684 <USB_ReadInterrupts>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dc8:	d123      	bne.n	8001e12 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f003 fcf9 	bl	80057c6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f002 fdb6 	bl	800494a <USB_GetDevSpeed>
 8001dde:	4603      	mov	r3, r0
 8001de0:	461a      	mov	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681c      	ldr	r4, [r3, #0]
 8001dea:	f001 f9c7 	bl	800317c <HAL_RCC_GetHCLKFreq>
 8001dee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001df4:	461a      	mov	r2, r3
 8001df6:	4620      	mov	r0, r4
 8001df8:	f002 faba 	bl	8004370 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f005 ff94 	bl	8007d2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695a      	ldr	r2, [r3, #20]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001e10:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f003 fc34 	bl	8005684 <USB_ReadInterrupts>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d10a      	bne.n	8001e3c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f005 ff71 	bl	8007d0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f002 0208 	and.w	r2, r2, #8
 8001e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f003 fc1f 	bl	8005684 <USB_ReadInterrupts>
 8001e46:	4603      	mov	r3, r0
 8001e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e4c:	2b80      	cmp	r3, #128	@ 0x80
 8001e4e:	d123      	bne.n	8001e98 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001e50:	6a3b      	ldr	r3, [r7, #32]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e60:	e014      	b.n	8001e8c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d105      	bne.n	8001e86 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	4619      	mov	r1, r3
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f000 fb08 	bl	8002496 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e88:	3301      	adds	r3, #1
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	791b      	ldrb	r3, [r3, #4]
 8001e90:	461a      	mov	r2, r3
 8001e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d3e4      	bcc.n	8001e62 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 fbf1 	bl	8005684 <USB_ReadInterrupts>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ea8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001eac:	d13c      	bne.n	8001f28 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eae:	2301      	movs	r3, #1
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb2:	e02b      	b.n	8001f0c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb6:	015a      	lsls	r2, r3, #5
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	4413      	add	r3, r2
 8001ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	3318      	adds	r3, #24
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d115      	bne.n	8001f06 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001eda:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	da12      	bge.n	8001f06 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4413      	add	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	3317      	adds	r3, #23
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	4619      	mov	r1, r3
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 fac8 	bl	8002496 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	3301      	adds	r3, #1
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	791b      	ldrb	r3, [r3, #4]
 8001f10:	461a      	mov	r2, r3
 8001f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d3cd      	bcc.n	8001eb4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	695a      	ldr	r2, [r3, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8001f26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f003 fba9 	bl	8005684 <USB_ReadInterrupts>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001f3c:	d156      	bne.n	8001fec <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f3e:	2301      	movs	r3, #1
 8001f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f42:	e045      	b.n	8001fd0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	015a      	lsls	r2, r3, #5
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d12e      	bne.n	8001fca <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f6c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	da2b      	bge.n	8001fca <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8001f7e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d121      	bne.n	8001fca <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	4413      	add	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10a      	bne.n	8001fca <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fc6:	6053      	str	r3, [r2, #4]
            break;
 8001fc8:	e008      	b.n	8001fdc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	3301      	adds	r3, #1
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	791b      	ldrb	r3, [r3, #4]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d3b3      	bcc.n	8001f44 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8001fea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f003 fb47 	bl	8005684 <USB_ReadInterrupts>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002000:	d10a      	bne.n	8002018 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f005 ff08 	bl	8007e18 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002016:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f003 fb31 	bl	8005684 <USB_ReadInterrupts>
 8002022:	4603      	mov	r3, r0
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	2b04      	cmp	r3, #4
 800202a:	d115      	bne.n	8002058 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	2b00      	cmp	r3, #0
 800203c:	d002      	beq.n	8002044 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f005 fef8 	bl	8007e34 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6859      	ldr	r1, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	430a      	orrs	r2, r1
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	e000      	b.n	8002058 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002056:	bf00      	nop
    }
  }
}
 8002058:	3734      	adds	r7, #52	@ 0x34
 800205a:	46bd      	mov	sp, r7
 800205c:	bd90      	pop	{r4, r7, pc}

0800205e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	460b      	mov	r3, r1
 8002068:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_PCD_SetAddress+0x1a>
 8002074:	2302      	movs	r3, #2
 8002076:	e012      	b.n	800209e <HAL_PCD_SetAddress+0x40>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	78fa      	ldrb	r2, [r7, #3]
 8002084:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	78fa      	ldrb	r2, [r7, #3]
 800208c:	4611      	mov	r1, r2
 800208e:	4618      	mov	r0, r3
 8002090:	f003 fa90 	bl	80055b4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	4608      	mov	r0, r1
 80020b0:	4611      	mov	r1, r2
 80020b2:	461a      	mov	r2, r3
 80020b4:	4603      	mov	r3, r0
 80020b6:	70fb      	strb	r3, [r7, #3]
 80020b8:	460b      	mov	r3, r1
 80020ba:	803b      	strh	r3, [r7, #0]
 80020bc:	4613      	mov	r3, r2
 80020be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80020c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	da0f      	bge.n	80020ec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	f003 020f 	and.w	r2, r3, #15
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	3310      	adds	r3, #16
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4413      	add	r3, r2
 80020e0:	3304      	adds	r3, #4
 80020e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2201      	movs	r2, #1
 80020e8:	705a      	strb	r2, [r3, #1]
 80020ea:	e00f      	b.n	800210c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	f003 020f 	and.w	r2, r3, #15
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	3304      	adds	r3, #4
 8002104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	b2da      	uxtb	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002118:	883a      	ldrh	r2, [r7, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	78ba      	ldrb	r2, [r7, #2]
 8002122:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	785b      	ldrb	r3, [r3, #1]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d004      	beq.n	8002136 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002136:	78bb      	ldrb	r3, [r7, #2]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d102      	bne.n	8002142 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002148:	2b01      	cmp	r3, #1
 800214a:	d101      	bne.n	8002150 <HAL_PCD_EP_Open+0xaa>
 800214c:	2302      	movs	r3, #2
 800214e:	e00e      	b.n	800216e <HAL_PCD_EP_Open+0xc8>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68f9      	ldr	r1, [r7, #12]
 800215e:	4618      	mov	r0, r3
 8002160:	f002 fc18 	bl	8004994 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800216c:	7afb      	ldrb	r3, [r7, #11]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b084      	sub	sp, #16
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	460b      	mov	r3, r1
 8002180:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002182:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002186:	2b00      	cmp	r3, #0
 8002188:	da0f      	bge.n	80021aa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	f003 020f 	and.w	r2, r3, #15
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	3310      	adds	r3, #16
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	3304      	adds	r3, #4
 80021a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	705a      	strb	r2, [r3, #1]
 80021a8:	e00f      	b.n	80021ca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	f003 020f 	and.w	r2, r3, #15
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	4413      	add	r3, r2
 80021c0:	3304      	adds	r3, #4
 80021c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_PCD_EP_Close+0x6e>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e00e      	b.n	8002202 <HAL_PCD_EP_Close+0x8c>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68f9      	ldr	r1, [r7, #12]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f002 fc56 	bl	8004aa4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	607a      	str	r2, [r7, #4]
 8002214:	603b      	str	r3, [r7, #0]
 8002216:	460b      	mov	r3, r1
 8002218:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800221a:	7afb      	ldrb	r3, [r7, #11]
 800221c:	f003 020f 	and.w	r2, r3, #15
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4413      	add	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	4413      	add	r3, r2
 8002230:	3304      	adds	r3, #4
 8002232:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2200      	movs	r2, #0
 8002244:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2200      	movs	r2, #0
 800224a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800224c:	7afb      	ldrb	r3, [r7, #11]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	b2da      	uxtb	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	799b      	ldrb	r3, [r3, #6]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d102      	bne.n	8002266 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	799b      	ldrb	r3, [r3, #6]
 800226e:	461a      	mov	r2, r3
 8002270:	6979      	ldr	r1, [r7, #20]
 8002272:	f002 fcf3 	bl	8004c5c <USB_EPStartXfer>

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	f003 020f 	and.w	r2, r3, #15
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	603b      	str	r3, [r7, #0]
 80022bc:	460b      	mov	r3, r1
 80022be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022c0:	7afb      	ldrb	r3, [r7, #11]
 80022c2:	f003 020f 	and.w	r2, r3, #15
 80022c6:	4613      	mov	r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	4413      	add	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	3310      	adds	r3, #16
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	3304      	adds	r3, #4
 80022d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	2200      	movs	r2, #0
 80022e8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2201      	movs	r2, #1
 80022ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022f0:	7afb      	ldrb	r3, [r7, #11]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	799b      	ldrb	r3, [r3, #6]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d102      	bne.n	800230a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	799b      	ldrb	r3, [r3, #6]
 8002312:	461a      	mov	r2, r3
 8002314:	6979      	ldr	r1, [r7, #20]
 8002316:	f002 fca1 	bl	8004c5c <USB_EPStartXfer>

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	7912      	ldrb	r2, [r2, #4]
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e04f      	b.n	80023e2 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002346:	2b00      	cmp	r3, #0
 8002348:	da0f      	bge.n	800236a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800234a:	78fb      	ldrb	r3, [r7, #3]
 800234c:	f003 020f 	and.w	r2, r3, #15
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	3310      	adds	r3, #16
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	3304      	adds	r3, #4
 8002360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	705a      	strb	r2, [r3, #1]
 8002368:	e00d      	b.n	8002386 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	4413      	add	r3, r2
 800237c:	3304      	adds	r3, #4
 800237e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	b2da      	uxtb	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_PCD_EP_SetStall+0x82>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e01d      	b.n	80023e2 <HAL_PCD_EP_SetStall+0xbe>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68f9      	ldr	r1, [r7, #12]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f003 f829 	bl	800540c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023ba:	78fb      	ldrb	r3, [r7, #3]
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d109      	bne.n	80023d8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	7999      	ldrb	r1, [r3, #6]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80023d2:	461a      	mov	r2, r3
 80023d4:	f003 fa1a 	bl	800580c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	f003 030f 	and.w	r3, r3, #15
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	7912      	ldrb	r2, [r2, #4]
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e042      	b.n	800248e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800240c:	2b00      	cmp	r3, #0
 800240e:	da0f      	bge.n	8002430 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002410:	78fb      	ldrb	r3, [r7, #3]
 8002412:	f003 020f 	and.w	r2, r3, #15
 8002416:	4613      	mov	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	3310      	adds	r3, #16
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	4413      	add	r3, r2
 8002424:	3304      	adds	r3, #4
 8002426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2201      	movs	r2, #1
 800242c:	705a      	strb	r2, [r3, #1]
 800242e:	e00f      	b.n	8002450 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	f003 020f 	and.w	r2, r3, #15
 8002436:	4613      	mov	r3, r2
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	3304      	adds	r3, #4
 8002448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002456:	78fb      	ldrb	r3, [r7, #3]
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	b2da      	uxtb	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_PCD_EP_ClrStall+0x86>
 800246c:	2302      	movs	r3, #2
 800246e:	e00e      	b.n	800248e <HAL_PCD_EP_ClrStall+0xa4>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68f9      	ldr	r1, [r7, #12]
 800247e:	4618      	mov	r0, r3
 8002480:	f003 f832 	bl	80054e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b084      	sub	sp, #16
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80024a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	da0c      	bge.n	80024c4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	f003 020f 	and.w	r2, r3, #15
 80024b0:	4613      	mov	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	3310      	adds	r3, #16
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	3304      	adds	r3, #4
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	e00c      	b.n	80024de <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	f003 020f 	and.w	r2, r3, #15
 80024ca:	4613      	mov	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	3304      	adds	r3, #4
 80024dc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68f9      	ldr	r1, [r7, #12]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f002 fe51 	bl	800518c <USB_EPStopXfer>
 80024ea:	4603      	mov	r3, r0
 80024ec:	72fb      	strb	r3, [r7, #11]

  return ret;
 80024ee:	7afb      	ldrb	r3, [r7, #11]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	@ 0x28
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	3310      	adds	r3, #16
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	4413      	add	r3, r2
 800251c:	3304      	adds	r3, #4
 800251e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	429a      	cmp	r2, r3
 800252a:	d901      	bls.n	8002530 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e06b      	b.n	8002608 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	429a      	cmp	r2, r3
 8002544:	d902      	bls.n	800254c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	3303      	adds	r3, #3
 8002550:	089b      	lsrs	r3, r3, #2
 8002552:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002554:	e02a      	b.n	80025ac <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	429a      	cmp	r2, r3
 800256a:	d902      	bls.n	8002572 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3303      	adds	r3, #3
 8002576:	089b      	lsrs	r3, r3, #2
 8002578:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	68d9      	ldr	r1, [r3, #12]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	b2da      	uxtb	r2, r3
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	4603      	mov	r3, r0
 800258e:	6978      	ldr	r0, [r7, #20]
 8002590:	f002 fea6 	bl	80052e0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	441a      	add	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	695a      	ldr	r2, [r3, #20]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	441a      	add	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d809      	bhi.n	80025d6 <PCD_WriteEmptyTxFifo+0xde>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d203      	bcs.n	80025d6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1bf      	bne.n	8002556 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d811      	bhi.n	8002606 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	f003 030f 	and.w	r3, r3, #15
 80025e8:	2201      	movs	r2, #1
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	6939      	ldr	r1, [r7, #16]
 80025fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002602:	4013      	ands	r3, r2
 8002604:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3720      	adds	r7, #32
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	333c      	adds	r3, #60	@ 0x3c
 8002628:	3304      	adds	r3, #4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	4413      	add	r3, r2
 8002636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	799b      	ldrb	r3, [r3, #6]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d17b      	bne.n	800273e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b00      	cmp	r3, #0
 800264e:	d015      	beq.n	800267c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	4a61      	ldr	r2, [pc, #388]	@ (80027d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	f240 80b9 	bls.w	80027cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80b3 	beq.w	80027cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	4413      	add	r3, r2
 800266e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002672:	461a      	mov	r2, r3
 8002674:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002678:	6093      	str	r3, [r2, #8]
 800267a:	e0a7      	b.n	80027cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	4413      	add	r3, r2
 800268e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002692:	461a      	mov	r2, r3
 8002694:	2320      	movs	r3, #32
 8002696:	6093      	str	r3, [r2, #8]
 8002698:	e098      	b.n	80027cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f040 8093 	bne.w	80027cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	4a4b      	ldr	r2, [pc, #300]	@ (80027d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d90f      	bls.n	80026ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00a      	beq.n	80026ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026c4:	461a      	mov	r2, r3
 80026c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026ca:	6093      	str	r3, [r2, #8]
 80026cc:	e07e      	b.n	80027cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	4613      	mov	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	4413      	add	r3, r2
 80026e0:	3304      	adds	r3, #4
 80026e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a1a      	ldr	r2, [r3, #32]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	0159      	lsls	r1, r3, #5
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	440b      	add	r3, r1
 80026f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fa:	1ad2      	subs	r2, r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d114      	bne.n	8002730 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d109      	bne.n	8002722 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002718:	461a      	mov	r2, r3
 800271a:	2101      	movs	r1, #1
 800271c:	f003 f876 	bl	800580c <USB_EP0_OutStart>
 8002720:	e006      	b.n	8002730 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	441a      	add	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	b2db      	uxtb	r3, r3
 8002734:	4619      	mov	r1, r3
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f005 fab4 	bl	8007ca4 <HAL_PCD_DataOutStageCallback>
 800273c:	e046      	b.n	80027cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	4a26      	ldr	r2, [pc, #152]	@ (80027dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d124      	bne.n	8002790 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	4413      	add	r3, r2
 8002758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800275c:	461a      	mov	r2, r3
 800275e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002762:	6093      	str	r3, [r2, #8]
 8002764:	e032      	b.n	80027cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	4413      	add	r3, r2
 8002778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800277c:	461a      	mov	r2, r3
 800277e:	2320      	movs	r3, #32
 8002780:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	4619      	mov	r1, r3
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f005 fa8b 	bl	8007ca4 <HAL_PCD_DataOutStageCallback>
 800278e:	e01d      	b.n	80027cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d114      	bne.n	80027c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d108      	bne.n	80027c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80027b8:	461a      	mov	r2, r3
 80027ba:	2100      	movs	r1, #0
 80027bc:	f003 f826 	bl	800580c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	4619      	mov	r1, r3
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f005 fa6c 	bl	8007ca4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3720      	adds	r7, #32
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	4f54300a 	.word	0x4f54300a
 80027dc:	4f54310a 	.word	0x4f54310a

080027e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	333c      	adds	r3, #60	@ 0x3c
 80027f8:	3304      	adds	r3, #4
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4a15      	ldr	r2, [pc, #84]	@ (8002868 <PCD_EP_OutSetupPacket_int+0x88>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d90e      	bls.n	8002834 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800281c:	2b00      	cmp	r3, #0
 800281e:	d009      	beq.n	8002834 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4413      	add	r3, r2
 8002828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800282c:	461a      	mov	r2, r3
 800282e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002832:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f005 fa23 	bl	8007c80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4a0a      	ldr	r2, [pc, #40]	@ (8002868 <PCD_EP_OutSetupPacket_int+0x88>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d90c      	bls.n	800285c <PCD_EP_OutSetupPacket_int+0x7c>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	799b      	ldrb	r3, [r3, #6]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d108      	bne.n	800285c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002854:	461a      	mov	r2, r3
 8002856:	2101      	movs	r1, #1
 8002858:	f002 ffd8 	bl	800580c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	4f54300a 	.word	0x4f54300a

0800286c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	70fb      	strb	r3, [r7, #3]
 8002878:	4613      	mov	r3, r2
 800287a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002882:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d107      	bne.n	800289a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800288a:	883b      	ldrh	r3, [r7, #0]
 800288c:	0419      	lsls	r1, r3, #16
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	430a      	orrs	r2, r1
 8002896:	629a      	str	r2, [r3, #40]	@ 0x28
 8002898:	e028      	b.n	80028ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a0:	0c1b      	lsrs	r3, r3, #16
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	4413      	add	r3, r2
 80028a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	73fb      	strb	r3, [r7, #15]
 80028ac:	e00d      	b.n	80028ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	3340      	adds	r3, #64	@ 0x40
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	0c1b      	lsrs	r3, r3, #16
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	4413      	add	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	3301      	adds	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d3ec      	bcc.n	80028ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80028d4:	883b      	ldrh	r3, [r7, #0]
 80028d6:	0418      	lsls	r0, r3, #16
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6819      	ldr	r1, [r3, #0]
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	3b01      	subs	r3, #1
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	4302      	orrs	r2, r0
 80028e4:	3340      	adds	r3, #64	@ 0x40
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	460b      	mov	r3, r1
 8002904:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	887a      	ldrh	r2, [r7, #2]
 800290c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e267      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d075      	beq.n	8002a3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002952:	4b88      	ldr	r3, [pc, #544]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b04      	cmp	r3, #4
 800295c:	d00c      	beq.n	8002978 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800295e:	4b85      	ldr	r3, [pc, #532]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002966:	2b08      	cmp	r3, #8
 8002968:	d112      	bne.n	8002990 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800296a:	4b82      	ldr	r3, [pc, #520]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002972:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002976:	d10b      	bne.n	8002990 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002978:	4b7e      	ldr	r3, [pc, #504]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d05b      	beq.n	8002a3c <HAL_RCC_OscConfig+0x108>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d157      	bne.n	8002a3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e242      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002998:	d106      	bne.n	80029a8 <HAL_RCC_OscConfig+0x74>
 800299a:	4b76      	ldr	r3, [pc, #472]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a75      	ldr	r2, [pc, #468]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e01d      	b.n	80029e4 <HAL_RCC_OscConfig+0xb0>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029b0:	d10c      	bne.n	80029cc <HAL_RCC_OscConfig+0x98>
 80029b2:	4b70      	ldr	r3, [pc, #448]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a6f      	ldr	r2, [pc, #444]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029bc:	6013      	str	r3, [r2, #0]
 80029be:	4b6d      	ldr	r3, [pc, #436]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a6c      	ldr	r2, [pc, #432]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e00b      	b.n	80029e4 <HAL_RCC_OscConfig+0xb0>
 80029cc:	4b69      	ldr	r3, [pc, #420]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a68      	ldr	r2, [pc, #416]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4b66      	ldr	r3, [pc, #408]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a65      	ldr	r2, [pc, #404]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 80029de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d013      	beq.n	8002a14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7fe fa8c 	bl	8000f08 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029f4:	f7fe fa88 	bl	8000f08 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	@ 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e207      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	4b5b      	ldr	r3, [pc, #364]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0xc0>
 8002a12:	e014      	b.n	8002a3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a14:	f7fe fa78 	bl	8000f08 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a1c:	f7fe fa74 	bl	8000f08 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	@ 0x64
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e1f3      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2e:	4b51      	ldr	r3, [pc, #324]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0xe8>
 8002a3a:	e000      	b.n	8002a3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d063      	beq.n	8002b12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a56:	4b47      	ldr	r3, [pc, #284]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d11c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a62:	4b44      	ldr	r3, [pc, #272]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d116      	bne.n	8002a9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	4b41      	ldr	r3, [pc, #260]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_RCC_OscConfig+0x152>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d001      	beq.n	8002a86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e1c7      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a86:	4b3b      	ldr	r3, [pc, #236]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4937      	ldr	r1, [pc, #220]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9a:	e03a      	b.n	8002b12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d020      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aa4:	4b34      	ldr	r3, [pc, #208]	@ (8002b78 <HAL_RCC_OscConfig+0x244>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aaa:	f7fe fa2d 	bl	8000f08 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab2:	f7fe fa29 	bl	8000f08 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e1a8      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad0:	4b28      	ldr	r3, [pc, #160]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4925      	ldr	r1, [pc, #148]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]
 8002ae4:	e015      	b.n	8002b12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae6:	4b24      	ldr	r3, [pc, #144]	@ (8002b78 <HAL_RCC_OscConfig+0x244>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7fe fa0c 	bl	8000f08 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af4:	f7fe fa08 	bl	8000f08 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e187      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	4b1b      	ldr	r3, [pc, #108]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d036      	beq.n	8002b8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d016      	beq.n	8002b54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b26:	4b15      	ldr	r3, [pc, #84]	@ (8002b7c <HAL_RCC_OscConfig+0x248>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7fe f9ec 	bl	8000f08 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b34:	f7fe f9e8 	bl	8000f08 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e167      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b46:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <HAL_RCC_OscConfig+0x240>)
 8002b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x200>
 8002b52:	e01b      	b.n	8002b8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b54:	4b09      	ldr	r3, [pc, #36]	@ (8002b7c <HAL_RCC_OscConfig+0x248>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5a:	f7fe f9d5 	bl	8000f08 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b60:	e00e      	b.n	8002b80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b62:	f7fe f9d1 	bl	8000f08 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d907      	bls.n	8002b80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e150      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
 8002b74:	40023800 	.word	0x40023800
 8002b78:	42470000 	.word	0x42470000
 8002b7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b80:	4b88      	ldr	r3, [pc, #544]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002b82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1ea      	bne.n	8002b62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8097 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b9e:	4b81      	ldr	r3, [pc, #516]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10f      	bne.n	8002bca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	4b7d      	ldr	r3, [pc, #500]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	4a7c      	ldr	r2, [pc, #496]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bba:	4b7a      	ldr	r3, [pc, #488]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bca:	4b77      	ldr	r3, [pc, #476]	@ (8002da8 <HAL_RCC_OscConfig+0x474>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d118      	bne.n	8002c08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bd6:	4b74      	ldr	r3, [pc, #464]	@ (8002da8 <HAL_RCC_OscConfig+0x474>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a73      	ldr	r2, [pc, #460]	@ (8002da8 <HAL_RCC_OscConfig+0x474>)
 8002bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be2:	f7fe f991 	bl	8000f08 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bea:	f7fe f98d 	bl	8000f08 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e10c      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfc:	4b6a      	ldr	r3, [pc, #424]	@ (8002da8 <HAL_RCC_OscConfig+0x474>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCC_OscConfig+0x2ea>
 8002c10:	4b64      	ldr	r3, [pc, #400]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c14:	4a63      	ldr	r2, [pc, #396]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c1c:	e01c      	b.n	8002c58 <HAL_RCC_OscConfig+0x324>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x30c>
 8002c26:	4b5f      	ldr	r3, [pc, #380]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2a:	4a5e      	ldr	r2, [pc, #376]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	f043 0304 	orr.w	r3, r3, #4
 8002c30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c32:	4b5c      	ldr	r3, [pc, #368]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c36:	4a5b      	ldr	r2, [pc, #364]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCC_OscConfig+0x324>
 8002c40:	4b58      	ldr	r3, [pc, #352]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c44:	4a57      	ldr	r2, [pc, #348]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c46:	f023 0301 	bic.w	r3, r3, #1
 8002c4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c4c:	4b55      	ldr	r3, [pc, #340]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c50:	4a54      	ldr	r2, [pc, #336]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c52:	f023 0304 	bic.w	r3, r3, #4
 8002c56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d015      	beq.n	8002c8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fe f952 	bl	8000f08 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7fe f94e 	bl	8000f08 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e0cb      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7e:	4b49      	ldr	r3, [pc, #292]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0ee      	beq.n	8002c68 <HAL_RCC_OscConfig+0x334>
 8002c8a:	e014      	b.n	8002cb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8c:	f7fe f93c 	bl	8000f08 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c94:	f7fe f938 	bl	8000f08 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e0b5      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002caa:	4b3e      	ldr	r3, [pc, #248]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1ee      	bne.n	8002c94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cb6:	7dfb      	ldrb	r3, [r7, #23]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d105      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cbc:	4b39      	ldr	r3, [pc, #228]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	4a38      	ldr	r2, [pc, #224]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80a1 	beq.w	8002e14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cd2:	4b34      	ldr	r3, [pc, #208]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d05c      	beq.n	8002d98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d141      	bne.n	8002d6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce6:	4b31      	ldr	r3, [pc, #196]	@ (8002dac <HAL_RCC_OscConfig+0x478>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cec:	f7fe f90c 	bl	8000f08 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe f908 	bl	8000f08 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e087      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d06:	4b27      	ldr	r3, [pc, #156]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d20:	019b      	lsls	r3, r3, #6
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d28:	085b      	lsrs	r3, r3, #1
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	041b      	lsls	r3, r3, #16
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d34:	061b      	lsls	r3, r3, #24
 8002d36:	491b      	ldr	r1, [pc, #108]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dac <HAL_RCC_OscConfig+0x478>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7fe f8e1 	bl	8000f08 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d4a:	f7fe f8dd 	bl	8000f08 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e05c      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5c:	4b11      	ldr	r3, [pc, #68]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x416>
 8002d68:	e054      	b.n	8002e14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6a:	4b10      	ldr	r3, [pc, #64]	@ (8002dac <HAL_RCC_OscConfig+0x478>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d70:	f7fe f8ca 	bl	8000f08 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d78:	f7fe f8c6 	bl	8000f08 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e045      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x444>
 8002d96:	e03d      	b.n	8002e14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d107      	bne.n	8002db0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e038      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40007000 	.word	0x40007000
 8002dac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002db0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e20 <HAL_RCC_OscConfig+0x4ec>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d028      	beq.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d121      	bne.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d11a      	bne.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002de0:	4013      	ands	r3, r2
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002de6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d111      	bne.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df6:	085b      	lsrs	r3, r3, #1
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d107      	bne.n	8002e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e000      	b.n	8002e16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800

08002e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0cc      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e38:	4b68      	ldr	r3, [pc, #416]	@ (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d90c      	bls.n	8002e60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b65      	ldr	r3, [pc, #404]	@ (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	b2d2      	uxtb	r2, r2
 8002e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4e:	4b63      	ldr	r3, [pc, #396]	@ (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e0b8      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d020      	beq.n	8002eae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e78:	4b59      	ldr	r3, [pc, #356]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	4a58      	ldr	r2, [pc, #352]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0308 	and.w	r3, r3, #8
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e90:	4b53      	ldr	r3, [pc, #332]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	4a52      	ldr	r2, [pc, #328]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e9c:	4b50      	ldr	r3, [pc, #320]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	494d      	ldr	r1, [pc, #308]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d044      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec2:	4b47      	ldr	r3, [pc, #284]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d119      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e07f      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d003      	beq.n	8002ee2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee2:	4b3f      	ldr	r3, [pc, #252]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d109      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e06f      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e067      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f02:	4b37      	ldr	r3, [pc, #220]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f023 0203 	bic.w	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4934      	ldr	r1, [pc, #208]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f14:	f7fd fff8 	bl	8000f08 <HAL_GetTick>
 8002f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f1c:	f7fd fff4 	bl	8000f08 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e04f      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f32:	4b2b      	ldr	r3, [pc, #172]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 020c 	and.w	r2, r3, #12
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d1eb      	bne.n	8002f1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f44:	4b25      	ldr	r3, [pc, #148]	@ (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d20c      	bcs.n	8002f6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	4b22      	ldr	r3, [pc, #136]	@ (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5a:	4b20      	ldr	r3, [pc, #128]	@ (8002fdc <HAL_RCC_ClockConfig+0x1b8>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e032      	b.n	8002fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f78:	4b19      	ldr	r3, [pc, #100]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4916      	ldr	r1, [pc, #88]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f96:	4b12      	ldr	r3, [pc, #72]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	490e      	ldr	r1, [pc, #56]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002faa:	f000 f821 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	091b      	lsrs	r3, r3, #4
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	490a      	ldr	r1, [pc, #40]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002fbc:	5ccb      	ldrb	r3, [r1, r3]
 8002fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc2:	4a09      	ldr	r2, [pc, #36]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fc6:	4b09      	ldr	r3, [pc, #36]	@ (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd ff58 	bl	8000e80 <HAL_InitTick>

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40023c00 	.word	0x40023c00
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	080082a4 	.word	0x080082a4
 8002fe8:	20000000 	.word	0x20000000
 8002fec:	20000004 	.word	0x20000004

08002ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff4:	b090      	sub	sp, #64	@ 0x40
 8002ff6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003000:	2300      	movs	r3, #0
 8003002:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003008:	4b59      	ldr	r3, [pc, #356]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 030c 	and.w	r3, r3, #12
 8003010:	2b08      	cmp	r3, #8
 8003012:	d00d      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0x40>
 8003014:	2b08      	cmp	r3, #8
 8003016:	f200 80a1 	bhi.w	800315c <HAL_RCC_GetSysClockFreq+0x16c>
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0x34>
 800301e:	2b04      	cmp	r3, #4
 8003020:	d003      	beq.n	800302a <HAL_RCC_GetSysClockFreq+0x3a>
 8003022:	e09b      	b.n	800315c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003024:	4b53      	ldr	r3, [pc, #332]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x184>)
 8003026:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003028:	e09b      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800302a:	4b53      	ldr	r3, [pc, #332]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x188>)
 800302c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800302e:	e098      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003030:	4b4f      	ldr	r3, [pc, #316]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003038:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800303a:	4b4d      	ldr	r3, [pc, #308]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d028      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003046:	4b4a      	ldr	r3, [pc, #296]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	099b      	lsrs	r3, r3, #6
 800304c:	2200      	movs	r2, #0
 800304e:	623b      	str	r3, [r7, #32]
 8003050:	627a      	str	r2, [r7, #36]	@ 0x24
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003058:	2100      	movs	r1, #0
 800305a:	4b47      	ldr	r3, [pc, #284]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x188>)
 800305c:	fb03 f201 	mul.w	r2, r3, r1
 8003060:	2300      	movs	r3, #0
 8003062:	fb00 f303 	mul.w	r3, r0, r3
 8003066:	4413      	add	r3, r2
 8003068:	4a43      	ldr	r2, [pc, #268]	@ (8003178 <HAL_RCC_GetSysClockFreq+0x188>)
 800306a:	fba0 1202 	umull	r1, r2, r0, r2
 800306e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003070:	460a      	mov	r2, r1
 8003072:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003074:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003076:	4413      	add	r3, r2
 8003078:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800307a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800307c:	2200      	movs	r2, #0
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	61fa      	str	r2, [r7, #28]
 8003082:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003086:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800308a:	f7fd f8a3 	bl	80001d4 <__aeabi_uldivmod>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4613      	mov	r3, r2
 8003094:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003096:	e053      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003098:	4b35      	ldr	r3, [pc, #212]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	099b      	lsrs	r3, r3, #6
 800309e:	2200      	movs	r2, #0
 80030a0:	613b      	str	r3, [r7, #16]
 80030a2:	617a      	str	r2, [r7, #20]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030aa:	f04f 0b00 	mov.w	fp, #0
 80030ae:	4652      	mov	r2, sl
 80030b0:	465b      	mov	r3, fp
 80030b2:	f04f 0000 	mov.w	r0, #0
 80030b6:	f04f 0100 	mov.w	r1, #0
 80030ba:	0159      	lsls	r1, r3, #5
 80030bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030c0:	0150      	lsls	r0, r2, #5
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	ebb2 080a 	subs.w	r8, r2, sl
 80030ca:	eb63 090b 	sbc.w	r9, r3, fp
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80030da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80030de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80030e2:	ebb2 0408 	subs.w	r4, r2, r8
 80030e6:	eb63 0509 	sbc.w	r5, r3, r9
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	00eb      	lsls	r3, r5, #3
 80030f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030f8:	00e2      	lsls	r2, r4, #3
 80030fa:	4614      	mov	r4, r2
 80030fc:	461d      	mov	r5, r3
 80030fe:	eb14 030a 	adds.w	r3, r4, sl
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	eb45 030b 	adc.w	r3, r5, fp
 8003108:	607b      	str	r3, [r7, #4]
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003116:	4629      	mov	r1, r5
 8003118:	028b      	lsls	r3, r1, #10
 800311a:	4621      	mov	r1, r4
 800311c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003120:	4621      	mov	r1, r4
 8003122:	028a      	lsls	r2, r1, #10
 8003124:	4610      	mov	r0, r2
 8003126:	4619      	mov	r1, r3
 8003128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800312a:	2200      	movs	r2, #0
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	60fa      	str	r2, [r7, #12]
 8003130:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003134:	f7fd f84e 	bl	80001d4 <__aeabi_uldivmod>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4613      	mov	r3, r2
 800313e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003140:	4b0b      	ldr	r3, [pc, #44]	@ (8003170 <HAL_RCC_GetSysClockFreq+0x180>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	0c1b      	lsrs	r3, r3, #16
 8003146:	f003 0303 	and.w	r3, r3, #3
 800314a:	3301      	adds	r3, #1
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003150:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800315a:	e002      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800315c:	4b05      	ldr	r3, [pc, #20]	@ (8003174 <HAL_RCC_GetSysClockFreq+0x184>)
 800315e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003164:	4618      	mov	r0, r3
 8003166:	3740      	adds	r7, #64	@ 0x40
 8003168:	46bd      	mov	sp, r7
 800316a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800316e:	bf00      	nop
 8003170:	40023800 	.word	0x40023800
 8003174:	00f42400 	.word	0x00f42400
 8003178:	017d7840 	.word	0x017d7840

0800317c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003180:	4b03      	ldr	r3, [pc, #12]	@ (8003190 <HAL_RCC_GetHCLKFreq+0x14>)
 8003182:	681b      	ldr	r3, [r3, #0]
}
 8003184:	4618      	mov	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	20000000 	.word	0x20000000

08003194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e041      	b.n	800322a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fd fc98 	bl	8000af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3304      	adds	r3, #4
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f000 fc7e 	bl	8003ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b01      	cmp	r3, #1
 8003246:	d001      	beq.n	800324c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e044      	b.n	80032d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a1e      	ldr	r2, [pc, #120]	@ (80032e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d018      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x6c>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003276:	d013      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a1a      	ldr	r2, [pc, #104]	@ (80032e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d00e      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a19      	ldr	r2, [pc, #100]	@ (80032ec <HAL_TIM_Base_Start_IT+0xb8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d009      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x6c>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a17      	ldr	r2, [pc, #92]	@ (80032f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d004      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x6c>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a16      	ldr	r2, [pc, #88]	@ (80032f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d111      	bne.n	80032c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b06      	cmp	r3, #6
 80032b0:	d010      	beq.n	80032d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0201 	orr.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c2:	e007      	b.n	80032d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3714      	adds	r7, #20
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40010000 	.word	0x40010000
 80032e8:	40000400 	.word	0x40000400
 80032ec:	40000800 	.word	0x40000800
 80032f0:	40000c00 	.word	0x40000c00
 80032f4:	40014000 	.word	0x40014000

080032f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e041      	b.n	800338e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d106      	bne.n	8003324 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f839 	bl	8003396 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3304      	adds	r3, #4
 8003334:	4619      	mov	r1, r3
 8003336:	4610      	mov	r0, r2
 8003338:	f000 fbcc 	bl	8003ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d109      	bne.n	80033d0 <HAL_TIM_PWM_Start+0x24>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	bf14      	ite	ne
 80033c8:	2301      	movne	r3, #1
 80033ca:	2300      	moveq	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	e022      	b.n	8003416 <HAL_TIM_PWM_Start+0x6a>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d109      	bne.n	80033ea <HAL_TIM_PWM_Start+0x3e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b01      	cmp	r3, #1
 80033e0:	bf14      	ite	ne
 80033e2:	2301      	movne	r3, #1
 80033e4:	2300      	moveq	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	e015      	b.n	8003416 <HAL_TIM_PWM_Start+0x6a>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d109      	bne.n	8003404 <HAL_TIM_PWM_Start+0x58>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	bf14      	ite	ne
 80033fc:	2301      	movne	r3, #1
 80033fe:	2300      	moveq	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e008      	b.n	8003416 <HAL_TIM_PWM_Start+0x6a>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	bf14      	ite	ne
 8003410:	2301      	movne	r3, #1
 8003412:	2300      	moveq	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e068      	b.n	80034f0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d104      	bne.n	800342e <HAL_TIM_PWM_Start+0x82>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2202      	movs	r2, #2
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800342c:	e013      	b.n	8003456 <HAL_TIM_PWM_Start+0xaa>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b04      	cmp	r3, #4
 8003432:	d104      	bne.n	800343e <HAL_TIM_PWM_Start+0x92>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800343c:	e00b      	b.n	8003456 <HAL_TIM_PWM_Start+0xaa>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	2b08      	cmp	r3, #8
 8003442:	d104      	bne.n	800344e <HAL_TIM_PWM_Start+0xa2>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800344c:	e003      	b.n	8003456 <HAL_TIM_PWM_Start+0xaa>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2202      	movs	r2, #2
 8003452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2201      	movs	r2, #1
 800345c:	6839      	ldr	r1, [r7, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fe7b 	bl	800415a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a23      	ldr	r2, [pc, #140]	@ (80034f8 <HAL_TIM_PWM_Start+0x14c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d107      	bne.n	800347e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800347c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1d      	ldr	r2, [pc, #116]	@ (80034f8 <HAL_TIM_PWM_Start+0x14c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d018      	beq.n	80034ba <HAL_TIM_PWM_Start+0x10e>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003490:	d013      	beq.n	80034ba <HAL_TIM_PWM_Start+0x10e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a19      	ldr	r2, [pc, #100]	@ (80034fc <HAL_TIM_PWM_Start+0x150>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d00e      	beq.n	80034ba <HAL_TIM_PWM_Start+0x10e>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a17      	ldr	r2, [pc, #92]	@ (8003500 <HAL_TIM_PWM_Start+0x154>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d009      	beq.n	80034ba <HAL_TIM_PWM_Start+0x10e>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a16      	ldr	r2, [pc, #88]	@ (8003504 <HAL_TIM_PWM_Start+0x158>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d004      	beq.n	80034ba <HAL_TIM_PWM_Start+0x10e>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a14      	ldr	r2, [pc, #80]	@ (8003508 <HAL_TIM_PWM_Start+0x15c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d111      	bne.n	80034de <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b06      	cmp	r3, #6
 80034ca:	d010      	beq.n	80034ee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034dc:	e007      	b.n	80034ee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0201 	orr.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40010000 	.word	0x40010000
 80034fc:	40000400 	.word	0x40000400
 8003500:	40000800 	.word	0x40000800
 8003504:	40000c00 	.word	0x40000c00
 8003508:	40014000 	.word	0x40014000

0800350c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d020      	beq.n	8003570 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d01b      	beq.n	8003570 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f06f 0202 	mvn.w	r2, #2
 8003540:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	2b00      	cmp	r3, #0
 8003554:	d003      	beq.n	800355e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 fa9d 	bl	8003a96 <HAL_TIM_IC_CaptureCallback>
 800355c:	e005      	b.n	800356a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fa8f 	bl	8003a82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 faa0 	bl	8003aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f003 0304 	and.w	r3, r3, #4
 8003576:	2b00      	cmp	r3, #0
 8003578:	d020      	beq.n	80035bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d01b      	beq.n	80035bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0204 	mvn.w	r2, #4
 800358c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2202      	movs	r2, #2
 8003592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 fa77 	bl	8003a96 <HAL_TIM_IC_CaptureCallback>
 80035a8:	e005      	b.n	80035b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fa69 	bl	8003a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 fa7a 	bl	8003aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d020      	beq.n	8003608 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f003 0308 	and.w	r3, r3, #8
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01b      	beq.n	8003608 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f06f 0208 	mvn.w	r2, #8
 80035d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2204      	movs	r2, #4
 80035de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fa51 	bl	8003a96 <HAL_TIM_IC_CaptureCallback>
 80035f4:	e005      	b.n	8003602 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 fa43 	bl	8003a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 fa54 	bl	8003aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	2b00      	cmp	r3, #0
 8003610:	d020      	beq.n	8003654 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01b      	beq.n	8003654 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0210 	mvn.w	r2, #16
 8003624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2208      	movs	r2, #8
 800362a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fa2b 	bl	8003a96 <HAL_TIM_IC_CaptureCallback>
 8003640:	e005      	b.n	800364e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fa1d 	bl	8003a82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 fa2e 	bl	8003aaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00c      	beq.n	8003678 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d007      	beq.n	8003678 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0201 	mvn.w	r2, #1
 8003670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fd f9f4 	bl	8000a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00c      	beq.n	800369c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003688:	2b00      	cmp	r3, #0
 800368a:	d007      	beq.n	800369c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fdfc 	bl	8004294 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00c      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80036b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f9ff 	bl	8003abe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 0320 	and.w	r3, r3, #32
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00c      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0220 	mvn.w	r2, #32
 80036dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fdce 	bl	8004280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036e4:	bf00      	nop
 80036e6:	3710      	adds	r7, #16
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003706:	2302      	movs	r3, #2
 8003708:	e0ae      	b.n	8003868 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b0c      	cmp	r3, #12
 8003716:	f200 809f 	bhi.w	8003858 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800371a:	a201      	add	r2, pc, #4	@ (adr r2, 8003720 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800371c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003720:	08003755 	.word	0x08003755
 8003724:	08003859 	.word	0x08003859
 8003728:	08003859 	.word	0x08003859
 800372c:	08003859 	.word	0x08003859
 8003730:	08003795 	.word	0x08003795
 8003734:	08003859 	.word	0x08003859
 8003738:	08003859 	.word	0x08003859
 800373c:	08003859 	.word	0x08003859
 8003740:	080037d7 	.word	0x080037d7
 8003744:	08003859 	.word	0x08003859
 8003748:	08003859 	.word	0x08003859
 800374c:	08003859 	.word	0x08003859
 8003750:	08003817 	.word	0x08003817
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fa46 	bl	8003bec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	699a      	ldr	r2, [r3, #24]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0208 	orr.w	r2, r2, #8
 800376e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0204 	bic.w	r2, r2, #4
 800377e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6999      	ldr	r1, [r3, #24]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	691a      	ldr	r2, [r3, #16]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	619a      	str	r2, [r3, #24]
      break;
 8003792:	e064      	b.n	800385e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	4618      	mov	r0, r3
 800379c:	f000 fa8c 	bl	8003cb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699a      	ldr	r2, [r3, #24]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	699a      	ldr	r2, [r3, #24]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6999      	ldr	r1, [r3, #24]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	021a      	lsls	r2, r3, #8
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	619a      	str	r2, [r3, #24]
      break;
 80037d4:	e043      	b.n	800385e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fad7 	bl	8003d90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69da      	ldr	r2, [r3, #28]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 0208 	orr.w	r2, r2, #8
 80037f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69da      	ldr	r2, [r3, #28]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0204 	bic.w	r2, r2, #4
 8003800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69d9      	ldr	r1, [r3, #28]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	61da      	str	r2, [r3, #28]
      break;
 8003814:	e023      	b.n	800385e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fb21 	bl	8003e64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69da      	ldr	r2, [r3, #28]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	69da      	ldr	r2, [r3, #28]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	69d9      	ldr	r1, [r3, #28]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	021a      	lsls	r2, r3, #8
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	61da      	str	r2, [r3, #28]
      break;
 8003856:	e002      	b.n	800385e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	75fb      	strb	r3, [r7, #23]
      break;
 800385c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003866:	7dfb      	ldrb	r3, [r7, #23]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_TIM_ConfigClockSource+0x1c>
 8003888:	2302      	movs	r3, #2
 800388a:	e0b4      	b.n	80039f6 <HAL_TIM_ConfigClockSource+0x186>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80038aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038c4:	d03e      	beq.n	8003944 <HAL_TIM_ConfigClockSource+0xd4>
 80038c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ca:	f200 8087 	bhi.w	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 80038ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038d2:	f000 8086 	beq.w	80039e2 <HAL_TIM_ConfigClockSource+0x172>
 80038d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038da:	d87f      	bhi.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 80038dc:	2b70      	cmp	r3, #112	@ 0x70
 80038de:	d01a      	beq.n	8003916 <HAL_TIM_ConfigClockSource+0xa6>
 80038e0:	2b70      	cmp	r3, #112	@ 0x70
 80038e2:	d87b      	bhi.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 80038e4:	2b60      	cmp	r3, #96	@ 0x60
 80038e6:	d050      	beq.n	800398a <HAL_TIM_ConfigClockSource+0x11a>
 80038e8:	2b60      	cmp	r3, #96	@ 0x60
 80038ea:	d877      	bhi.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 80038ec:	2b50      	cmp	r3, #80	@ 0x50
 80038ee:	d03c      	beq.n	800396a <HAL_TIM_ConfigClockSource+0xfa>
 80038f0:	2b50      	cmp	r3, #80	@ 0x50
 80038f2:	d873      	bhi.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 80038f4:	2b40      	cmp	r3, #64	@ 0x40
 80038f6:	d058      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0x13a>
 80038f8:	2b40      	cmp	r3, #64	@ 0x40
 80038fa:	d86f      	bhi.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 80038fc:	2b30      	cmp	r3, #48	@ 0x30
 80038fe:	d064      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x15a>
 8003900:	2b30      	cmp	r3, #48	@ 0x30
 8003902:	d86b      	bhi.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 8003904:	2b20      	cmp	r3, #32
 8003906:	d060      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x15a>
 8003908:	2b20      	cmp	r3, #32
 800390a:	d867      	bhi.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 800390c:	2b00      	cmp	r3, #0
 800390e:	d05c      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x15a>
 8003910:	2b10      	cmp	r3, #16
 8003912:	d05a      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x15a>
 8003914:	e062      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003926:	f000 fbf8 	bl	800411a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003938:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	609a      	str	r2, [r3, #8]
      break;
 8003942:	e04f      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003954:	f000 fbe1 	bl	800411a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003966:	609a      	str	r2, [r3, #8]
      break;
 8003968:	e03c      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003976:	461a      	mov	r2, r3
 8003978:	f000 fb55 	bl	8004026 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2150      	movs	r1, #80	@ 0x50
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fbae 	bl	80040e4 <TIM_ITRx_SetConfig>
      break;
 8003988:	e02c      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003996:	461a      	mov	r2, r3
 8003998:	f000 fb74 	bl	8004084 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2160      	movs	r1, #96	@ 0x60
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fb9e 	bl	80040e4 <TIM_ITRx_SetConfig>
      break;
 80039a8:	e01c      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b6:	461a      	mov	r2, r3
 80039b8:	f000 fb35 	bl	8004026 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2140      	movs	r1, #64	@ 0x40
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fb8e 	bl	80040e4 <TIM_ITRx_SetConfig>
      break;
 80039c8:	e00c      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4619      	mov	r1, r3
 80039d4:	4610      	mov	r0, r2
 80039d6:	f000 fb85 	bl	80040e4 <TIM_ITRx_SetConfig>
      break;
 80039da:	e003      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	73fb      	strb	r3, [r7, #15]
      break;
 80039e0:	e000      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003a12:	2302      	movs	r3, #2
 8003a14:	e031      	b.n	8003a7a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2202      	movs	r2, #2
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003a26:	6839      	ldr	r1, [r7, #0]
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 fa6b 	bl	8003f04 <TIM_SlaveTimer_SetConfig>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d009      	beq.n	8003a48 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e018      	b.n	8003a7a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a56:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a66:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
	...

08003ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a3a      	ldr	r2, [pc, #232]	@ (8003bd0 <TIM_Base_SetConfig+0xfc>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d00f      	beq.n	8003b0c <TIM_Base_SetConfig+0x38>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af2:	d00b      	beq.n	8003b0c <TIM_Base_SetConfig+0x38>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a37      	ldr	r2, [pc, #220]	@ (8003bd4 <TIM_Base_SetConfig+0x100>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d007      	beq.n	8003b0c <TIM_Base_SetConfig+0x38>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a36      	ldr	r2, [pc, #216]	@ (8003bd8 <TIM_Base_SetConfig+0x104>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d003      	beq.n	8003b0c <TIM_Base_SetConfig+0x38>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a35      	ldr	r2, [pc, #212]	@ (8003bdc <TIM_Base_SetConfig+0x108>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d108      	bne.n	8003b1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a2b      	ldr	r2, [pc, #172]	@ (8003bd0 <TIM_Base_SetConfig+0xfc>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01b      	beq.n	8003b5e <TIM_Base_SetConfig+0x8a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b2c:	d017      	beq.n	8003b5e <TIM_Base_SetConfig+0x8a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a28      	ldr	r2, [pc, #160]	@ (8003bd4 <TIM_Base_SetConfig+0x100>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d013      	beq.n	8003b5e <TIM_Base_SetConfig+0x8a>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a27      	ldr	r2, [pc, #156]	@ (8003bd8 <TIM_Base_SetConfig+0x104>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d00f      	beq.n	8003b5e <TIM_Base_SetConfig+0x8a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a26      	ldr	r2, [pc, #152]	@ (8003bdc <TIM_Base_SetConfig+0x108>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00b      	beq.n	8003b5e <TIM_Base_SetConfig+0x8a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a25      	ldr	r2, [pc, #148]	@ (8003be0 <TIM_Base_SetConfig+0x10c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d007      	beq.n	8003b5e <TIM_Base_SetConfig+0x8a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a24      	ldr	r2, [pc, #144]	@ (8003be4 <TIM_Base_SetConfig+0x110>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d003      	beq.n	8003b5e <TIM_Base_SetConfig+0x8a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a23      	ldr	r2, [pc, #140]	@ (8003be8 <TIM_Base_SetConfig+0x114>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d108      	bne.n	8003b70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a0e      	ldr	r2, [pc, #56]	@ (8003bd0 <TIM_Base_SetConfig+0xfc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d103      	bne.n	8003ba4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d105      	bne.n	8003bc2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	f023 0201 	bic.w	r2, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	611a      	str	r2, [r3, #16]
  }
}
 8003bc2:	bf00      	nop
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	40010000 	.word	0x40010000
 8003bd4:	40000400 	.word	0x40000400
 8003bd8:	40000800 	.word	0x40000800
 8003bdc:	40000c00 	.word	0x40000c00
 8003be0:	40014000 	.word	0x40014000
 8003be4:	40014400 	.word	0x40014400
 8003be8:	40014800 	.word	0x40014800

08003bec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f023 0201 	bic.w	r2, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f023 0303 	bic.w	r3, r3, #3
 8003c22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68fa      	ldr	r2, [r7, #12]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f023 0302 	bic.w	r3, r3, #2
 8003c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a1c      	ldr	r2, [pc, #112]	@ (8003cb4 <TIM_OC1_SetConfig+0xc8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d10c      	bne.n	8003c62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f023 0308 	bic.w	r3, r3, #8
 8003c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f023 0304 	bic.w	r3, r3, #4
 8003c60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a13      	ldr	r2, [pc, #76]	@ (8003cb4 <TIM_OC1_SetConfig+0xc8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d111      	bne.n	8003c8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	621a      	str	r2, [r3, #32]
}
 8003ca8:	bf00      	nop
 8003caa:	371c      	adds	r7, #28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	40010000 	.word	0x40010000

08003cb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b087      	sub	sp, #28
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	f023 0210 	bic.w	r2, r3, #16
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f023 0320 	bic.w	r3, r3, #32
 8003d02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a1e      	ldr	r2, [pc, #120]	@ (8003d8c <TIM_OC2_SetConfig+0xd4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d10d      	bne.n	8003d34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a15      	ldr	r2, [pc, #84]	@ (8003d8c <TIM_OC2_SetConfig+0xd4>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d113      	bne.n	8003d64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	621a      	str	r2, [r3, #32]
}
 8003d7e:	bf00      	nop
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40010000 	.word	0x40010000

08003d90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0303 	bic.w	r3, r3, #3
 8003dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	021b      	lsls	r3, r3, #8
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e60 <TIM_OC3_SetConfig+0xd0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d10d      	bne.n	8003e0a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003df4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	021b      	lsls	r3, r3, #8
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a14      	ldr	r2, [pc, #80]	@ (8003e60 <TIM_OC3_SetConfig+0xd0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d113      	bne.n	8003e3a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	621a      	str	r2, [r3, #32]
}
 8003e54:	bf00      	nop
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	40010000 	.word	0x40010000

08003e64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	021b      	lsls	r3, r3, #8
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003eae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	031b      	lsls	r3, r3, #12
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a10      	ldr	r2, [pc, #64]	@ (8003f00 <TIM_OC4_SetConfig+0x9c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d109      	bne.n	8003ed8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003eca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	019b      	lsls	r3, r3, #6
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	621a      	str	r2, [r3, #32]
}
 8003ef2:	bf00      	nop
 8003ef4:	371c      	adds	r7, #28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40010000 	.word	0x40010000

08003f04 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f20:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f023 0307 	bic.w	r3, r3, #7
 8003f32:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b70      	cmp	r3, #112	@ 0x70
 8003f4c:	d01a      	beq.n	8003f84 <TIM_SlaveTimer_SetConfig+0x80>
 8003f4e:	2b70      	cmp	r3, #112	@ 0x70
 8003f50:	d860      	bhi.n	8004014 <TIM_SlaveTimer_SetConfig+0x110>
 8003f52:	2b60      	cmp	r3, #96	@ 0x60
 8003f54:	d054      	beq.n	8004000 <TIM_SlaveTimer_SetConfig+0xfc>
 8003f56:	2b60      	cmp	r3, #96	@ 0x60
 8003f58:	d85c      	bhi.n	8004014 <TIM_SlaveTimer_SetConfig+0x110>
 8003f5a:	2b50      	cmp	r3, #80	@ 0x50
 8003f5c:	d046      	beq.n	8003fec <TIM_SlaveTimer_SetConfig+0xe8>
 8003f5e:	2b50      	cmp	r3, #80	@ 0x50
 8003f60:	d858      	bhi.n	8004014 <TIM_SlaveTimer_SetConfig+0x110>
 8003f62:	2b40      	cmp	r3, #64	@ 0x40
 8003f64:	d019      	beq.n	8003f9a <TIM_SlaveTimer_SetConfig+0x96>
 8003f66:	2b40      	cmp	r3, #64	@ 0x40
 8003f68:	d854      	bhi.n	8004014 <TIM_SlaveTimer_SetConfig+0x110>
 8003f6a:	2b30      	cmp	r3, #48	@ 0x30
 8003f6c:	d055      	beq.n	800401a <TIM_SlaveTimer_SetConfig+0x116>
 8003f6e:	2b30      	cmp	r3, #48	@ 0x30
 8003f70:	d850      	bhi.n	8004014 <TIM_SlaveTimer_SetConfig+0x110>
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	d051      	beq.n	800401a <TIM_SlaveTimer_SetConfig+0x116>
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	d84c      	bhi.n	8004014 <TIM_SlaveTimer_SetConfig+0x110>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d04d      	beq.n	800401a <TIM_SlaveTimer_SetConfig+0x116>
 8003f7e:	2b10      	cmp	r3, #16
 8003f80:	d04b      	beq.n	800401a <TIM_SlaveTimer_SetConfig+0x116>
 8003f82:	e047      	b.n	8004014 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003f94:	f000 f8c1 	bl	800411a <TIM_ETR_SetConfig>
      break;
 8003f98:	e040      	b.n	800401c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b05      	cmp	r3, #5
 8003fa0:	d101      	bne.n	8003fa6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e03b      	b.n	800401e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6a1a      	ldr	r2, [r3, #32]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0201 	bic.w	r2, r2, #1
 8003fbc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003fcc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	621a      	str	r2, [r3, #32]
      break;
 8003fea:	e017      	b.n	800401c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	f000 f814 	bl	8004026 <TIM_TI1_ConfigInputStage>
      break;
 8003ffe:	e00d      	b.n	800401c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800400c:	461a      	mov	r2, r3
 800400e:	f000 f839 	bl	8004084 <TIM_TI2_ConfigInputStage>
      break;
 8004012:	e003      	b.n	800401c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	75fb      	strb	r3, [r7, #23]
      break;
 8004018:	e000      	b.n	800401c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800401a:	bf00      	nop
  }

  return status;
 800401c:	7dfb      	ldrb	r3, [r7, #23]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004026:	b480      	push	{r7}
 8004028:	b087      	sub	sp, #28
 800402a:	af00      	add	r7, sp, #0
 800402c:	60f8      	str	r0, [r7, #12]
 800402e:	60b9      	str	r1, [r7, #8]
 8004030:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	f023 0201 	bic.w	r2, r3, #1
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004050:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f023 030a 	bic.w	r3, r3, #10
 8004062:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	621a      	str	r2, [r3, #32]
}
 8004078:	bf00      	nop
 800407a:	371c      	adds	r7, #28
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	f023 0210 	bic.w	r2, r3, #16
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	031b      	lsls	r3, r3, #12
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80040c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	621a      	str	r2, [r3, #32]
}
 80040d8:	bf00      	nop
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4313      	orrs	r3, r2
 8004102:	f043 0307 	orr.w	r3, r3, #7
 8004106:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	609a      	str	r2, [r3, #8]
}
 800410e:	bf00      	nop
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800411a:	b480      	push	{r7}
 800411c:	b087      	sub	sp, #28
 800411e:	af00      	add	r7, sp, #0
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	607a      	str	r2, [r7, #4]
 8004126:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004134:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	021a      	lsls	r2, r3, #8
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	431a      	orrs	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	4313      	orrs	r3, r2
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	609a      	str	r2, [r3, #8]
}
 800414e:	bf00      	nop
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800415a:	b480      	push	{r7}
 800415c:	b087      	sub	sp, #28
 800415e:	af00      	add	r7, sp, #0
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	2201      	movs	r2, #1
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a1a      	ldr	r2, [r3, #32]
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	43db      	mvns	r3, r3
 800417c:	401a      	ands	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a1a      	ldr	r2, [r3, #32]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	fa01 f303 	lsl.w	r3, r1, r3
 8004192:	431a      	orrs	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	621a      	str	r2, [r3, #32]
}
 8004198:	bf00      	nop
 800419a:	371c      	adds	r7, #28
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e050      	b.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2202      	movs	r2, #2
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a1c      	ldr	r2, [pc, #112]	@ (800426c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d018      	beq.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004208:	d013      	beq.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a18      	ldr	r2, [pc, #96]	@ (8004270 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00e      	beq.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a16      	ldr	r2, [pc, #88]	@ (8004274 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d009      	beq.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a15      	ldr	r2, [pc, #84]	@ (8004278 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d004      	beq.n	8004232 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a13      	ldr	r2, [pc, #76]	@ (800427c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d10c      	bne.n	800424c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004238:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	4313      	orrs	r3, r2
 8004242:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	40010000 	.word	0x40010000
 8004270:	40000400 	.word	0x40000400
 8004274:	40000800 	.word	0x40000800
 8004278:	40000c00 	.word	0x40000c00
 800427c:	40014000 	.word	0x40014000

08004280 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800429c:	bf00      	nop
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80042a8:	b084      	sub	sp, #16
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
 80042b2:	f107 001c 	add.w	r0, r7, #28
 80042b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80042ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d123      	bne.n	800430a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80042d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80042ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d105      	bne.n	80042fe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f001 fae2 	bl	80058c8 <USB_CoreReset>
 8004304:	4603      	mov	r3, r0
 8004306:	73fb      	strb	r3, [r7, #15]
 8004308:	e01b      	b.n	8004342 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f001 fad6 	bl	80058c8 <USB_CoreReset>
 800431c:	4603      	mov	r3, r0
 800431e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004320:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004324:	2b00      	cmp	r3, #0
 8004326:	d106      	bne.n	8004336 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	639a      	str	r2, [r3, #56]	@ 0x38
 8004334:	e005      	b.n	8004342 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004342:	7fbb      	ldrb	r3, [r7, #30]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d10b      	bne.n	8004360 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f043 0206 	orr.w	r2, r3, #6
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f043 0220 	orr.w	r2, r3, #32
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004360:	7bfb      	ldrb	r3, [r7, #15]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800436c:	b004      	add	sp, #16
 800436e:	4770      	bx	lr

08004370 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	4613      	mov	r3, r2
 800437c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800437e:	79fb      	ldrb	r3, [r7, #7]
 8004380:	2b02      	cmp	r3, #2
 8004382:	d165      	bne.n	8004450 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4a41      	ldr	r2, [pc, #260]	@ (800448c <USB_SetTurnaroundTime+0x11c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d906      	bls.n	800439a <USB_SetTurnaroundTime+0x2a>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4a40      	ldr	r2, [pc, #256]	@ (8004490 <USB_SetTurnaroundTime+0x120>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d202      	bcs.n	800439a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004394:	230f      	movs	r3, #15
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	e062      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	4a3c      	ldr	r2, [pc, #240]	@ (8004490 <USB_SetTurnaroundTime+0x120>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d306      	bcc.n	80043b0 <USB_SetTurnaroundTime+0x40>
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	4a3b      	ldr	r2, [pc, #236]	@ (8004494 <USB_SetTurnaroundTime+0x124>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d202      	bcs.n	80043b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80043aa:	230e      	movs	r3, #14
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	e057      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4a38      	ldr	r2, [pc, #224]	@ (8004494 <USB_SetTurnaroundTime+0x124>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d306      	bcc.n	80043c6 <USB_SetTurnaroundTime+0x56>
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4a37      	ldr	r2, [pc, #220]	@ (8004498 <USB_SetTurnaroundTime+0x128>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d202      	bcs.n	80043c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80043c0:	230d      	movs	r3, #13
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	e04c      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	4a33      	ldr	r2, [pc, #204]	@ (8004498 <USB_SetTurnaroundTime+0x128>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d306      	bcc.n	80043dc <USB_SetTurnaroundTime+0x6c>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	4a32      	ldr	r2, [pc, #200]	@ (800449c <USB_SetTurnaroundTime+0x12c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d802      	bhi.n	80043dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80043d6:	230c      	movs	r3, #12
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	e041      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4a2f      	ldr	r2, [pc, #188]	@ (800449c <USB_SetTurnaroundTime+0x12c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d906      	bls.n	80043f2 <USB_SetTurnaroundTime+0x82>
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	4a2e      	ldr	r2, [pc, #184]	@ (80044a0 <USB_SetTurnaroundTime+0x130>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d802      	bhi.n	80043f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80043ec:	230b      	movs	r3, #11
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	e036      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	4a2a      	ldr	r2, [pc, #168]	@ (80044a0 <USB_SetTurnaroundTime+0x130>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d906      	bls.n	8004408 <USB_SetTurnaroundTime+0x98>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4a29      	ldr	r2, [pc, #164]	@ (80044a4 <USB_SetTurnaroundTime+0x134>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d802      	bhi.n	8004408 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004402:	230a      	movs	r3, #10
 8004404:	617b      	str	r3, [r7, #20]
 8004406:	e02b      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4a26      	ldr	r2, [pc, #152]	@ (80044a4 <USB_SetTurnaroundTime+0x134>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d906      	bls.n	800441e <USB_SetTurnaroundTime+0xae>
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4a25      	ldr	r2, [pc, #148]	@ (80044a8 <USB_SetTurnaroundTime+0x138>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d202      	bcs.n	800441e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004418:	2309      	movs	r3, #9
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	e020      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	4a21      	ldr	r2, [pc, #132]	@ (80044a8 <USB_SetTurnaroundTime+0x138>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d306      	bcc.n	8004434 <USB_SetTurnaroundTime+0xc4>
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	4a20      	ldr	r2, [pc, #128]	@ (80044ac <USB_SetTurnaroundTime+0x13c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d802      	bhi.n	8004434 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800442e:	2308      	movs	r3, #8
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	e015      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	4a1d      	ldr	r2, [pc, #116]	@ (80044ac <USB_SetTurnaroundTime+0x13c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d906      	bls.n	800444a <USB_SetTurnaroundTime+0xda>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	4a1c      	ldr	r2, [pc, #112]	@ (80044b0 <USB_SetTurnaroundTime+0x140>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d202      	bcs.n	800444a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004444:	2307      	movs	r3, #7
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	e00a      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800444a:	2306      	movs	r3, #6
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	e007      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d102      	bne.n	800445c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004456:	2309      	movs	r3, #9
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	e001      	b.n	8004460 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800445c:	2309      	movs	r3, #9
 800445e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	029b      	lsls	r3, r3, #10
 8004474:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004478:	431a      	orrs	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	371c      	adds	r7, #28
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	00d8acbf 	.word	0x00d8acbf
 8004490:	00e4e1c0 	.word	0x00e4e1c0
 8004494:	00f42400 	.word	0x00f42400
 8004498:	01067380 	.word	0x01067380
 800449c:	011a499f 	.word	0x011a499f
 80044a0:	01312cff 	.word	0x01312cff
 80044a4:	014ca43f 	.word	0x014ca43f
 80044a8:	016e3600 	.word	0x016e3600
 80044ac:	01a6ab1f 	.word	0x01a6ab1f
 80044b0:	01e84800 	.word	0x01e84800

080044b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f043 0201 	orr.w	r2, r3, #1
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f023 0201 	bic.w	r2, r3, #1
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d115      	bne.n	8004546 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004526:	200a      	movs	r0, #10
 8004528:	f7fc fcfa 	bl	8000f20 <HAL_Delay>
      ms += 10U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	330a      	adds	r3, #10
 8004530:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f001 f939 	bl	80057aa <USB_GetMode>
 8004538:	4603      	mov	r3, r0
 800453a:	2b01      	cmp	r3, #1
 800453c:	d01e      	beq.n	800457c <USB_SetCurrentMode+0x84>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2bc7      	cmp	r3, #199	@ 0xc7
 8004542:	d9f0      	bls.n	8004526 <USB_SetCurrentMode+0x2e>
 8004544:	e01a      	b.n	800457c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004546:	78fb      	ldrb	r3, [r7, #3]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d115      	bne.n	8004578 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004558:	200a      	movs	r0, #10
 800455a:	f7fc fce1 	bl	8000f20 <HAL_Delay>
      ms += 10U;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	330a      	adds	r3, #10
 8004562:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f001 f920 	bl	80057aa <USB_GetMode>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <USB_SetCurrentMode+0x84>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2bc7      	cmp	r3, #199	@ 0xc7
 8004574:	d9f0      	bls.n	8004558 <USB_SetCurrentMode+0x60>
 8004576:	e001      	b.n	800457c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e005      	b.n	8004588 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2bc8      	cmp	r3, #200	@ 0xc8
 8004580:	d101      	bne.n	8004586 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004590:	b084      	sub	sp, #16
 8004592:	b580      	push	{r7, lr}
 8004594:	b086      	sub	sp, #24
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800459e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045aa:	2300      	movs	r3, #0
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	e009      	b.n	80045c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	3340      	adds	r3, #64	@ 0x40
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	2200      	movs	r2, #0
 80045bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	3301      	adds	r3, #1
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b0e      	cmp	r3, #14
 80045c8:	d9f2      	bls.n	80045b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d11c      	bne.n	800460c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045e0:	f043 0302 	orr.w	r3, r3, #2
 80045e4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004602:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	639a      	str	r2, [r3, #56]	@ 0x38
 800460a:	e00b      	b.n	8004624 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004610:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800461c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800462a:	461a      	mov	r2, r3
 800462c:	2300      	movs	r3, #0
 800462e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004630:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004634:	2b01      	cmp	r3, #1
 8004636:	d10d      	bne.n	8004654 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004638:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800463c:	2b00      	cmp	r3, #0
 800463e:	d104      	bne.n	800464a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004640:	2100      	movs	r1, #0
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f968 	bl	8004918 <USB_SetDevSpeed>
 8004648:	e008      	b.n	800465c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800464a:	2101      	movs	r1, #1
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f963 	bl	8004918 <USB_SetDevSpeed>
 8004652:	e003      	b.n	800465c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004654:	2103      	movs	r1, #3
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f95e 	bl	8004918 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800465c:	2110      	movs	r1, #16
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f8fa 	bl	8004858 <USB_FlushTxFifo>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f924 	bl	80048bc <USB_FlushRxFifo>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004684:	461a      	mov	r2, r3
 8004686:	2300      	movs	r3, #0
 8004688:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004690:	461a      	mov	r2, r3
 8004692:	2300      	movs	r3, #0
 8004694:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800469c:	461a      	mov	r2, r3
 800469e:	2300      	movs	r3, #0
 80046a0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	e043      	b.n	8004730 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80046ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046be:	d118      	bne.n	80046f2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10a      	bne.n	80046dc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046d2:	461a      	mov	r2, r3
 80046d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	e013      	b.n	8004704 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e8:	461a      	mov	r2, r3
 80046ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046ee:	6013      	str	r3, [r2, #0]
 80046f0:	e008      	b.n	8004704 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046fe:	461a      	mov	r2, r3
 8004700:	2300      	movs	r3, #0
 8004702:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004710:	461a      	mov	r2, r3
 8004712:	2300      	movs	r3, #0
 8004714:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004722:	461a      	mov	r2, r3
 8004724:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004728:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	3301      	adds	r3, #1
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004734:	461a      	mov	r2, r3
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4293      	cmp	r3, r2
 800473a:	d3b5      	bcc.n	80046a8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800473c:	2300      	movs	r3, #0
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	e043      	b.n	80047ca <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004754:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004758:	d118      	bne.n	800478c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10a      	bne.n	8004776 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800476c:	461a      	mov	r2, r3
 800476e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004772:	6013      	str	r3, [r2, #0]
 8004774:	e013      	b.n	800479e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004782:	461a      	mov	r2, r3
 8004784:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	e008      	b.n	800479e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004798:	461a      	mov	r2, r3
 800479a:	2300      	movs	r3, #0
 800479c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047aa:	461a      	mov	r2, r3
 80047ac:	2300      	movs	r3, #0
 80047ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047bc:	461a      	mov	r2, r3
 80047be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80047c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	3301      	adds	r3, #1
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80047ce:	461a      	mov	r2, r3
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d3b5      	bcc.n	8004742 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047e8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80047f6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80047f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d105      	bne.n	800480c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	f043 0210 	orr.w	r2, r3, #16
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699a      	ldr	r2, [r3, #24]
 8004810:	4b10      	ldr	r3, [pc, #64]	@ (8004854 <USB_DevInit+0x2c4>)
 8004812:	4313      	orrs	r3, r2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004818:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	f043 0208 	orr.w	r2, r3, #8
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800482c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004830:	2b01      	cmp	r3, #1
 8004832:	d107      	bne.n	8004844 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800483c:	f043 0304 	orr.w	r3, r3, #4
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004844:	7dfb      	ldrb	r3, [r7, #23]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004850:	b004      	add	sp, #16
 8004852:	4770      	bx	lr
 8004854:	803c3800 	.word	0x803c3800

08004858 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3301      	adds	r3, #1
 800486a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004872:	d901      	bls.n	8004878 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e01b      	b.n	80048b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	2b00      	cmp	r3, #0
 800487e:	daf2      	bge.n	8004866 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	019b      	lsls	r3, r3, #6
 8004888:	f043 0220 	orr.w	r2, r3, #32
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3301      	adds	r3, #1
 8004894:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800489c:	d901      	bls.n	80048a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e006      	b.n	80048b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d0f0      	beq.n	8004890 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3301      	adds	r3, #1
 80048cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048d4:	d901      	bls.n	80048da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e018      	b.n	800490c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	daf2      	bge.n	80048c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2210      	movs	r2, #16
 80048ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3301      	adds	r3, #1
 80048f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80048f8:	d901      	bls.n	80048fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e006      	b.n	800490c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	2b10      	cmp	r3, #16
 8004908:	d0f0      	beq.n	80048ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	460b      	mov	r3, r1
 8004922:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	78fb      	ldrb	r3, [r7, #3]
 8004932:	68f9      	ldr	r1, [r7, #12]
 8004934:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004938:	4313      	orrs	r3, r2
 800493a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800494a:	b480      	push	{r7}
 800494c:	b087      	sub	sp, #28
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 0306 	and.w	r3, r3, #6
 8004962:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d102      	bne.n	8004970 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800496a:	2300      	movs	r3, #0
 800496c:	75fb      	strb	r3, [r7, #23]
 800496e:	e00a      	b.n	8004986 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d002      	beq.n	800497c <USB_GetDevSpeed+0x32>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b06      	cmp	r3, #6
 800497a:	d102      	bne.n	8004982 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800497c:	2302      	movs	r3, #2
 800497e:	75fb      	strb	r3, [r7, #23]
 8004980:	e001      	b.n	8004986 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004982:	230f      	movs	r3, #15
 8004984:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004986:	7dfb      	ldrb	r3, [r7, #23]
}
 8004988:	4618      	mov	r0, r3
 800498a:	371c      	adds	r7, #28
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	785b      	ldrb	r3, [r3, #1]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d13a      	bne.n	8004a26 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049b6:	69da      	ldr	r2, [r3, #28]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	2101      	movs	r1, #1
 80049c2:	fa01 f303 	lsl.w	r3, r1, r3
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	68f9      	ldr	r1, [r7, #12]
 80049ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049ce:	4313      	orrs	r3, r2
 80049d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d155      	bne.n	8004a94 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	791b      	ldrb	r3, [r3, #4]
 8004a02:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a04:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	059b      	lsls	r3, r3, #22
 8004a0a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	0151      	lsls	r1, r2, #5
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	440a      	add	r2, r1
 8004a16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	e036      	b.n	8004a94 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a2c:	69da      	ldr	r2, [r3, #28]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	2101      	movs	r1, #1
 8004a38:	fa01 f303 	lsl.w	r3, r1, r3
 8004a3c:	041b      	lsls	r3, r3, #16
 8004a3e:	68f9      	ldr	r1, [r7, #12]
 8004a40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a44:	4313      	orrs	r3, r2
 8004a46:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d11a      	bne.n	8004a94 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	791b      	ldrb	r3, [r3, #4]
 8004a78:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	0151      	lsls	r1, r2, #5
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	440a      	add	r2, r1
 8004a86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a92:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	785b      	ldrb	r3, [r3, #1]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d161      	bne.n	8004b84 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ad6:	d11f      	bne.n	8004b18 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	0151      	lsls	r1, r2, #5
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	440a      	add	r2, r1
 8004aee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004af2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004af6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	0151      	lsls	r1, r2, #5
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	440a      	add	r2, r1
 8004b0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	f003 030f 	and.w	r3, r3, #15
 8004b28:	2101      	movs	r1, #1
 8004b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	43db      	mvns	r3, r3
 8004b32:	68f9      	ldr	r1, [r7, #12]
 8004b34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b38:	4013      	ands	r3, r2
 8004b3a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	43db      	mvns	r3, r3
 8004b56:	68f9      	ldr	r1, [r7, #12]
 8004b58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	0159      	lsls	r1, r3, #5
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	440b      	add	r3, r1
 8004b76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4b35      	ldr	r3, [pc, #212]	@ (8004c54 <USB_DeactivateEndpoint+0x1b0>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	600b      	str	r3, [r1, #0]
 8004b82:	e060      	b.n	8004c46 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b9a:	d11f      	bne.n	8004bdc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	0151      	lsls	r1, r2, #5
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	440a      	add	r2, r1
 8004bb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bb6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004bba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	0151      	lsls	r1, r2, #5
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	440a      	add	r2, r1
 8004bd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004bda:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004be2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	f003 030f 	and.w	r3, r3, #15
 8004bec:	2101      	movs	r1, #1
 8004bee:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf2:	041b      	lsls	r3, r3, #16
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	68f9      	ldr	r1, [r7, #12]
 8004bf8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c06:	69da      	ldr	r2, [r3, #28]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	f003 030f 	and.w	r3, r3, #15
 8004c10:	2101      	movs	r1, #1
 8004c12:	fa01 f303 	lsl.w	r3, r1, r3
 8004c16:	041b      	lsls	r3, r3, #16
 8004c18:	43db      	mvns	r3, r3
 8004c1a:	68f9      	ldr	r1, [r7, #12]
 8004c1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c20:	4013      	ands	r3, r2
 8004c22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	0159      	lsls	r1, r3, #5
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	440b      	add	r3, r1
 8004c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4b05      	ldr	r3, [pc, #20]	@ (8004c58 <USB_DeactivateEndpoint+0x1b4>)
 8004c42:	4013      	ands	r3, r2
 8004c44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr
 8004c54:	ec337800 	.word	0xec337800
 8004c58:	eff37800 	.word	0xeff37800

08004c5c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08a      	sub	sp, #40	@ 0x28
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	4613      	mov	r3, r2
 8004c68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	785b      	ldrb	r3, [r3, #1]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	f040 817a 	bne.w	8004f72 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d132      	bne.n	8004cec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	0151      	lsls	r1, r2, #5
 8004c98:	69fa      	ldr	r2, [r7, #28]
 8004c9a:	440a      	add	r2, r1
 8004c9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ca0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004ca4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004ca8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	0151      	lsls	r1, r2, #5
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	440a      	add	r2, r1
 8004cc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cc4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004cc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	0151      	lsls	r1, r2, #5
 8004cdc:	69fa      	ldr	r2, [r7, #28]
 8004cde:	440a      	add	r2, r1
 8004ce0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ce4:	0cdb      	lsrs	r3, r3, #19
 8004ce6:	04db      	lsls	r3, r3, #19
 8004ce8:	6113      	str	r3, [r2, #16]
 8004cea:	e092      	b.n	8004e12 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	0151      	lsls	r1, r2, #5
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	440a      	add	r2, r1
 8004d02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d06:	0cdb      	lsrs	r3, r3, #19
 8004d08:	04db      	lsls	r3, r3, #19
 8004d0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	0151      	lsls	r1, r2, #5
 8004d1e:	69fa      	ldr	r2, [r7, #28]
 8004d20:	440a      	add	r2, r1
 8004d22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d26:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004d2a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004d2e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d11a      	bne.n	8004d6c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	691a      	ldr	r2, [r3, #16]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d903      	bls.n	8004d4a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	0151      	lsls	r1, r2, #5
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	440a      	add	r2, r1
 8004d60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d68:	6113      	str	r3, [r2, #16]
 8004d6a:	e01b      	b.n	8004da4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d78:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	6919      	ldr	r1, [r3, #16]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	440b      	add	r3, r1
 8004d84:	1e59      	subs	r1, r3, #1
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d8e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d90:	4ba2      	ldr	r3, [pc, #648]	@ (800501c <USB_EPStartXfer+0x3c0>)
 8004d92:	400b      	ands	r3, r1
 8004d94:	69b9      	ldr	r1, [r7, #24]
 8004d96:	0148      	lsls	r0, r1, #5
 8004d98:	69f9      	ldr	r1, [r7, #28]
 8004d9a:	4401      	add	r1, r0
 8004d9c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004da0:	4313      	orrs	r3, r2
 8004da2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004db0:	691a      	ldr	r2, [r3, #16]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dba:	69b9      	ldr	r1, [r7, #24]
 8004dbc:	0148      	lsls	r0, r1, #5
 8004dbe:	69f9      	ldr	r1, [r7, #28]
 8004dc0:	4401      	add	r1, r0
 8004dc2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	791b      	ldrb	r3, [r3, #4]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d11f      	bne.n	8004e12 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	0151      	lsls	r1, r2, #5
 8004de4:	69fa      	ldr	r2, [r7, #28]
 8004de6:	440a      	add	r2, r1
 8004de8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dec:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004df0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	0151      	lsls	r1, r2, #5
 8004e04:	69fa      	ldr	r2, [r7, #28]
 8004e06:	440a      	add	r2, r1
 8004e08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e0c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e10:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e12:	79fb      	ldrb	r3, [r7, #7]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d14b      	bne.n	8004eb0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d009      	beq.n	8004e34 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	791b      	ldrb	r3, [r3, #4]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d128      	bne.n	8004e8e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d110      	bne.n	8004e6e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	0151      	lsls	r1, r2, #5
 8004e5e:	69fa      	ldr	r2, [r7, #28]
 8004e60:	440a      	add	r2, r1
 8004e62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e66:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	e00f      	b.n	8004e8e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	0151      	lsls	r1, r2, #5
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	440a      	add	r2, r1
 8004e84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e8c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	0151      	lsls	r1, r2, #5
 8004ea0:	69fa      	ldr	r2, [r7, #28]
 8004ea2:	440a      	add	r2, r1
 8004ea4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ea8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	e165      	b.n	800517c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	0151      	lsls	r1, r2, #5
 8004ec2:	69fa      	ldr	r2, [r7, #28]
 8004ec4:	440a      	add	r2, r1
 8004ec6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004eca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004ece:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	791b      	ldrb	r3, [r3, #4]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d015      	beq.n	8004f04 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 814d 	beq.w	800517c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ee8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ef8:	69f9      	ldr	r1, [r7, #28]
 8004efa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004efe:	4313      	orrs	r3, r2
 8004f00:	634b      	str	r3, [r1, #52]	@ 0x34
 8004f02:	e13b      	b.n	800517c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d110      	bne.n	8004f36 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	0151      	lsls	r1, r2, #5
 8004f26:	69fa      	ldr	r2, [r7, #28]
 8004f28:	440a      	add	r2, r1
 8004f2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f2e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	e00f      	b.n	8004f56 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	0151      	lsls	r1, r2, #5
 8004f48:	69fa      	ldr	r2, [r7, #28]
 8004f4a:	440a      	add	r2, r1
 8004f4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f54:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	68d9      	ldr	r1, [r3, #12]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	781a      	ldrb	r2, [r3, #0]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	b298      	uxth	r0, r3
 8004f64:	79fb      	ldrb	r3, [r7, #7]
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	4603      	mov	r3, r0
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 f9b8 	bl	80052e0 <USB_WritePacket>
 8004f70:	e104      	b.n	800517c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	0151      	lsls	r1, r2, #5
 8004f84:	69fa      	ldr	r2, [r7, #28]
 8004f86:	440a      	add	r2, r1
 8004f88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f8c:	0cdb      	lsrs	r3, r3, #19
 8004f8e:	04db      	lsls	r3, r3, #19
 8004f90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	0151      	lsls	r1, r2, #5
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	440a      	add	r2, r1
 8004fa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fac:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004fb0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004fb4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d131      	bne.n	8005020 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe0:	691a      	ldr	r2, [r3, #16]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fea:	69b9      	ldr	r1, [r7, #24]
 8004fec:	0148      	lsls	r0, r1, #5
 8004fee:	69f9      	ldr	r1, [r7, #28]
 8004ff0:	4401      	add	r1, r0
 8004ff2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	0151      	lsls	r1, r2, #5
 800500c:	69fa      	ldr	r2, [r7, #28]
 800500e:	440a      	add	r2, r1
 8005010:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005014:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005018:	6113      	str	r3, [r2, #16]
 800501a:	e061      	b.n	80050e0 <USB_EPStartXfer+0x484>
 800501c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d123      	bne.n	8005070 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005034:	691a      	ldr	r2, [r3, #16]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800503e:	69b9      	ldr	r1, [r7, #24]
 8005040:	0148      	lsls	r0, r1, #5
 8005042:	69f9      	ldr	r1, [r7, #28]
 8005044:	4401      	add	r1, r0
 8005046:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800504a:	4313      	orrs	r3, r2
 800504c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	0151      	lsls	r1, r2, #5
 8005060:	69fa      	ldr	r2, [r7, #28]
 8005062:	440a      	add	r2, r1
 8005064:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005068:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800506c:	6113      	str	r3, [r2, #16]
 800506e:	e037      	b.n	80050e0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	691a      	ldr	r2, [r3, #16]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	4413      	add	r3, r2
 800507a:	1e5a      	subs	r2, r3, #1
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	fbb2 f3f3 	udiv	r3, r2, r3
 8005084:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	8afa      	ldrh	r2, [r7, #22]
 800508c:	fb03 f202 	mul.w	r2, r3, r2
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	8afb      	ldrh	r3, [r7, #22]
 80050a4:	04d9      	lsls	r1, r3, #19
 80050a6:	4b38      	ldr	r3, [pc, #224]	@ (8005188 <USB_EPStartXfer+0x52c>)
 80050a8:	400b      	ands	r3, r1
 80050aa:	69b9      	ldr	r1, [r7, #24]
 80050ac:	0148      	lsls	r0, r1, #5
 80050ae:	69f9      	ldr	r1, [r7, #28]
 80050b0:	4401      	add	r1, r0
 80050b2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80050b6:	4313      	orrs	r3, r2
 80050b8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050d0:	69b9      	ldr	r1, [r7, #24]
 80050d2:	0148      	lsls	r0, r1, #5
 80050d4:	69f9      	ldr	r1, [r7, #28]
 80050d6:	4401      	add	r1, r0
 80050d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80050dc:	4313      	orrs	r3, r2
 80050de:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d10d      	bne.n	8005102 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d009      	beq.n	8005102 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	68d9      	ldr	r1, [r3, #12]
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	015a      	lsls	r2, r3, #5
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	4413      	add	r3, r2
 80050fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050fe:	460a      	mov	r2, r1
 8005100:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	791b      	ldrb	r3, [r3, #4]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d128      	bne.n	800515c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005116:	2b00      	cmp	r3, #0
 8005118:	d110      	bne.n	800513c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	0151      	lsls	r1, r2, #5
 800512c:	69fa      	ldr	r2, [r7, #28]
 800512e:	440a      	add	r2, r1
 8005130:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005134:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	e00f      	b.n	800515c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	0151      	lsls	r1, r2, #5
 800514e:	69fa      	ldr	r2, [r7, #28]
 8005150:	440a      	add	r2, r1
 8005152:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005156:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800515a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	0151      	lsls	r1, r2, #5
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	440a      	add	r2, r1
 8005172:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005176:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800517a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3720      	adds	r7, #32
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	1ff80000 	.word	0x1ff80000

0800518c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	785b      	ldrb	r3, [r3, #1]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d14a      	bne.n	8005240 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051c2:	f040 8086 	bne.w	80052d2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	683a      	ldr	r2, [r7, #0]
 80051d8:	7812      	ldrb	r2, [r2, #0]
 80051da:	0151      	lsls	r1, r2, #5
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	440a      	add	r2, r1
 80051e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051e8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	7812      	ldrb	r2, [r2, #0]
 80051fe:	0151      	lsls	r1, r2, #5
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	440a      	add	r2, r1
 8005204:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005208:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800520c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3301      	adds	r3, #1
 8005212:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f242 7210 	movw	r2, #10000	@ 0x2710
 800521a:	4293      	cmp	r3, r2
 800521c:	d902      	bls.n	8005224 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	75fb      	strb	r3, [r7, #23]
          break;
 8005222:	e056      	b.n	80052d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005238:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800523c:	d0e7      	beq.n	800520e <USB_EPStopXfer+0x82>
 800523e:	e048      	b.n	80052d2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005254:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005258:	d13b      	bne.n	80052d2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	4413      	add	r3, r2
 8005264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	7812      	ldrb	r2, [r2, #0]
 800526e:	0151      	lsls	r1, r2, #5
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	440a      	add	r2, r1
 8005274:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005278:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800527c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	7812      	ldrb	r2, [r2, #0]
 8005292:	0151      	lsls	r1, r2, #5
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	440a      	add	r2, r1
 8005298:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800529c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80052a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	3301      	adds	r3, #1
 80052a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d902      	bls.n	80052b8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	75fb      	strb	r3, [r7, #23]
          break;
 80052b6:	e00c      	b.n	80052d2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052d0:	d0e7      	beq.n	80052a2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80052d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	371c      	adds	r7, #28
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b089      	sub	sp, #36	@ 0x24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	4611      	mov	r1, r2
 80052ec:	461a      	mov	r2, r3
 80052ee:	460b      	mov	r3, r1
 80052f0:	71fb      	strb	r3, [r7, #7]
 80052f2:	4613      	mov	r3, r2
 80052f4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80052fe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005302:	2b00      	cmp	r3, #0
 8005304:	d123      	bne.n	800534e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005306:	88bb      	ldrh	r3, [r7, #4]
 8005308:	3303      	adds	r3, #3
 800530a:	089b      	lsrs	r3, r3, #2
 800530c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800530e:	2300      	movs	r3, #0
 8005310:	61bb      	str	r3, [r7, #24]
 8005312:	e018      	b.n	8005346 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005314:	79fb      	ldrb	r3, [r7, #7]
 8005316:	031a      	lsls	r2, r3, #12
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	4413      	add	r3, r2
 800531c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005320:	461a      	mov	r2, r3
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	3301      	adds	r3, #1
 800532c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	3301      	adds	r3, #1
 8005332:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	3301      	adds	r3, #1
 8005338:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	3301      	adds	r3, #1
 800533e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	3301      	adds	r3, #1
 8005344:	61bb      	str	r3, [r7, #24]
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	429a      	cmp	r2, r3
 800534c:	d3e2      	bcc.n	8005314 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3724      	adds	r7, #36	@ 0x24
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800535c:	b480      	push	{r7}
 800535e:	b08b      	sub	sp, #44	@ 0x2c
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	4613      	mov	r3, r2
 8005368:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	089b      	lsrs	r3, r3, #2
 8005376:	b29b      	uxth	r3, r3
 8005378:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800537a:	88fb      	ldrh	r3, [r7, #6]
 800537c:	f003 0303 	and.w	r3, r3, #3
 8005380:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005382:	2300      	movs	r3, #0
 8005384:	623b      	str	r3, [r7, #32]
 8005386:	e014      	b.n	80053b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005392:	601a      	str	r2, [r3, #0]
    pDest++;
 8005394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005396:	3301      	adds	r3, #1
 8005398:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	3301      	adds	r3, #1
 800539e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80053a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a2:	3301      	adds	r3, #1
 80053a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80053a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a8:	3301      	adds	r3, #1
 80053aa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	3301      	adds	r3, #1
 80053b0:	623b      	str	r3, [r7, #32]
 80053b2:	6a3a      	ldr	r2, [r7, #32]
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d3e6      	bcc.n	8005388 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80053ba:	8bfb      	ldrh	r3, [r7, #30]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d01e      	beq.n	80053fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80053ca:	461a      	mov	r2, r3
 80053cc:	f107 0310 	add.w	r3, r7, #16
 80053d0:	6812      	ldr	r2, [r2, #0]
 80053d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	fa22 f303 	lsr.w	r3, r2, r3
 80053e0:	b2da      	uxtb	r2, r3
 80053e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e4:	701a      	strb	r2, [r3, #0]
      i++;
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	3301      	adds	r3, #1
 80053ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80053ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ee:	3301      	adds	r3, #1
 80053f0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80053f2:	8bfb      	ldrh	r3, [r7, #30]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80053f8:	8bfb      	ldrh	r3, [r7, #30]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1ea      	bne.n	80053d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80053fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005400:	4618      	mov	r0, r3
 8005402:	372c      	adds	r7, #44	@ 0x2c
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	785b      	ldrb	r3, [r3, #1]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d12c      	bne.n	8005482 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	015a      	lsls	r2, r3, #5
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	db12      	blt.n	8005460 <USB_EPSetStall+0x54>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00f      	beq.n	8005460 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	0151      	lsls	r1, r2, #5
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	440a      	add	r2, r1
 8005456:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800545a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800545e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	0151      	lsls	r1, r2, #5
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	440a      	add	r2, r1
 8005476:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800547a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	e02b      	b.n	80054da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	db12      	blt.n	80054ba <USB_EPSetStall+0xae>
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00f      	beq.n	80054ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	0151      	lsls	r1, r2, #5
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	440a      	add	r2, r1
 80054b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80054d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	785b      	ldrb	r3, [r3, #1]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d128      	bne.n	8005556 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	440a      	add	r2, r1
 800551a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800551e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005522:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	791b      	ldrb	r3, [r3, #4]
 8005528:	2b03      	cmp	r3, #3
 800552a:	d003      	beq.n	8005534 <USB_EPClearStall+0x4c>
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	791b      	ldrb	r3, [r3, #4]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d138      	bne.n	80055a6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	0151      	lsls	r1, r2, #5
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	440a      	add	r2, r1
 800554a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800554e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	e027      	b.n	80055a6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	0151      	lsls	r1, r2, #5
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	440a      	add	r2, r1
 800556c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005570:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005574:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	791b      	ldrb	r3, [r3, #4]
 800557a:	2b03      	cmp	r3, #3
 800557c:	d003      	beq.n	8005586 <USB_EPClearStall+0x9e>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	791b      	ldrb	r3, [r3, #4]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d10f      	bne.n	80055a6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	0151      	lsls	r1, r2, #5
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	440a      	add	r2, r1
 800559c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055a4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055d2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80055d6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	78fb      	ldrb	r3, [r7, #3]
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80055e8:	68f9      	ldr	r1, [r7, #12]
 80055ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055ee:	4313      	orrs	r3, r2
 80055f0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800561a:	f023 0303 	bic.w	r3, r3, #3
 800561e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800562e:	f023 0302 	bic.w	r3, r3, #2
 8005632:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005642:	b480      	push	{r7}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800565c:	f023 0303 	bic.w	r3, r3, #3
 8005660:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005670:	f043 0302 	orr.w	r3, r3, #2
 8005674:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	4013      	ands	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800569c:	68fb      	ldr	r3, [r7, #12]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b085      	sub	sp, #20
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	4013      	ands	r3, r2
 80056cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	0c1b      	lsrs	r3, r3, #16
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80056de:	b480      	push	{r7}
 80056e0:	b085      	sub	sp, #20
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	4013      	ands	r3, r2
 8005700:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	b29b      	uxth	r3, r3
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005712:	b480      	push	{r7}
 8005714:	b085      	sub	sp, #20
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	460b      	mov	r3, r1
 800571c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005722:	78fb      	ldrb	r3, [r7, #3]
 8005724:	015a      	lsls	r2, r3, #5
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4413      	add	r3, r2
 800572a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	4013      	ands	r3, r2
 800573e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005740:	68bb      	ldr	r3, [r7, #8]
}
 8005742:	4618      	mov	r0, r3
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800574e:	b480      	push	{r7}
 8005750:	b087      	sub	sp, #28
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	460b      	mov	r3, r1
 8005758:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800576e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005770:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005772:	78fb      	ldrb	r3, [r7, #3]
 8005774:	f003 030f 	and.w	r3, r3, #15
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	fa22 f303 	lsr.w	r3, r2, r3
 800577e:	01db      	lsls	r3, r3, #7
 8005780:	b2db      	uxtb	r3, r3
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4313      	orrs	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005788:	78fb      	ldrb	r3, [r7, #3]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	4013      	ands	r3, r2
 800579a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800579c:	68bb      	ldr	r3, [r7, #8]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b083      	sub	sp, #12
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	f003 0301 	and.w	r3, r3, #1
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b085      	sub	sp, #20
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80057e4:	f023 0307 	bic.w	r3, r3, #7
 80057e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80057f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	460b      	mov	r3, r1
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	333c      	adds	r3, #60	@ 0x3c
 8005822:	3304      	adds	r3, #4
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	4a26      	ldr	r2, [pc, #152]	@ (80058c4 <USB_EP0_OutStart+0xb8>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d90a      	bls.n	8005846 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800583c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005840:	d101      	bne.n	8005846 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	e037      	b.n	80058b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800584c:	461a      	mov	r2, r3
 800584e:	2300      	movs	r3, #0
 8005850:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005860:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005864:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005874:	f043 0318 	orr.w	r3, r3, #24
 8005878:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005888:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800588c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800588e:	7afb      	ldrb	r3, [r7, #11]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d10f      	bne.n	80058b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800589a:	461a      	mov	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058ae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80058b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	371c      	adds	r7, #28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	4f54300a 	.word	0x4f54300a

080058c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3301      	adds	r3, #1
 80058d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058e0:	d901      	bls.n	80058e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e01b      	b.n	800591e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	daf2      	bge.n	80058d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f043 0201 	orr.w	r2, r3, #1
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3301      	adds	r3, #1
 8005902:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800590a:	d901      	bls.n	8005910 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e006      	b.n	800591e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b01      	cmp	r3, #1
 800591a:	d0f0      	beq.n	80058fe <USB_CoreReset+0x36>

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005938:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800593c:	f002 fc12 	bl	8008164 <USBD_static_malloc>
 8005940:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d109      	bne.n	800595c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	32b0      	adds	r2, #176	@ 0xb0
 8005952:	2100      	movs	r1, #0
 8005954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005958:	2302      	movs	r3, #2
 800595a:	e0d4      	b.n	8005b06 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800595c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005960:	2100      	movs	r1, #0
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f002 fc42 	bl	80081ec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	32b0      	adds	r2, #176	@ 0xb0
 8005972:	68f9      	ldr	r1, [r7, #12]
 8005974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	32b0      	adds	r2, #176	@ 0xb0
 8005982:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	7c1b      	ldrb	r3, [r3, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d138      	bne.n	8005a06 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005994:	4b5e      	ldr	r3, [pc, #376]	@ (8005b10 <USBD_CDC_Init+0x1e4>)
 8005996:	7819      	ldrb	r1, [r3, #0]
 8005998:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800599c:	2202      	movs	r2, #2
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f002 fabd 	bl	8007f1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80059a4:	4b5a      	ldr	r3, [pc, #360]	@ (8005b10 <USBD_CDC_Init+0x1e4>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	f003 020f 	and.w	r2, r3, #15
 80059ac:	6879      	ldr	r1, [r7, #4]
 80059ae:	4613      	mov	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	4413      	add	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	440b      	add	r3, r1
 80059b8:	3324      	adds	r3, #36	@ 0x24
 80059ba:	2201      	movs	r2, #1
 80059bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80059be:	4b55      	ldr	r3, [pc, #340]	@ (8005b14 <USBD_CDC_Init+0x1e8>)
 80059c0:	7819      	ldrb	r1, [r3, #0]
 80059c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059c6:	2202      	movs	r2, #2
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f002 faa8 	bl	8007f1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80059ce:	4b51      	ldr	r3, [pc, #324]	@ (8005b14 <USBD_CDC_Init+0x1e8>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	f003 020f 	and.w	r2, r3, #15
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80059e6:	2201      	movs	r2, #1
 80059e8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80059ea:	4b4b      	ldr	r3, [pc, #300]	@ (8005b18 <USBD_CDC_Init+0x1ec>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	f003 020f 	and.w	r2, r3, #15
 80059f2:	6879      	ldr	r1, [r7, #4]
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	3326      	adds	r3, #38	@ 0x26
 8005a00:	2210      	movs	r2, #16
 8005a02:	801a      	strh	r2, [r3, #0]
 8005a04:	e035      	b.n	8005a72 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005a06:	4b42      	ldr	r3, [pc, #264]	@ (8005b10 <USBD_CDC_Init+0x1e4>)
 8005a08:	7819      	ldrb	r1, [r3, #0]
 8005a0a:	2340      	movs	r3, #64	@ 0x40
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f002 fa85 	bl	8007f1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005a14:	4b3e      	ldr	r3, [pc, #248]	@ (8005b10 <USBD_CDC_Init+0x1e4>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	f003 020f 	and.w	r2, r3, #15
 8005a1c:	6879      	ldr	r1, [r7, #4]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	440b      	add	r3, r1
 8005a28:	3324      	adds	r3, #36	@ 0x24
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005a2e:	4b39      	ldr	r3, [pc, #228]	@ (8005b14 <USBD_CDC_Init+0x1e8>)
 8005a30:	7819      	ldrb	r1, [r3, #0]
 8005a32:	2340      	movs	r3, #64	@ 0x40
 8005a34:	2202      	movs	r2, #2
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f002 fa71 	bl	8007f1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005a3c:	4b35      	ldr	r3, [pc, #212]	@ (8005b14 <USBD_CDC_Init+0x1e8>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	f003 020f 	and.w	r2, r3, #15
 8005a44:	6879      	ldr	r1, [r7, #4]
 8005a46:	4613      	mov	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	440b      	add	r3, r1
 8005a50:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005a54:	2201      	movs	r2, #1
 8005a56:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005a58:	4b2f      	ldr	r3, [pc, #188]	@ (8005b18 <USBD_CDC_Init+0x1ec>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	f003 020f 	and.w	r2, r3, #15
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	4613      	mov	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	3326      	adds	r3, #38	@ 0x26
 8005a6e:	2210      	movs	r2, #16
 8005a70:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005a72:	4b29      	ldr	r3, [pc, #164]	@ (8005b18 <USBD_CDC_Init+0x1ec>)
 8005a74:	7819      	ldrb	r1, [r3, #0]
 8005a76:	2308      	movs	r3, #8
 8005a78:	2203      	movs	r2, #3
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f002 fa4f 	bl	8007f1e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005a80:	4b25      	ldr	r3, [pc, #148]	@ (8005b18 <USBD_CDC_Init+0x1ec>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	f003 020f 	and.w	r2, r3, #15
 8005a88:	6879      	ldr	r1, [r7, #4]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	440b      	add	r3, r1
 8005a94:	3324      	adds	r3, #36	@ 0x24
 8005a96:	2201      	movs	r2, #1
 8005a98:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	33b0      	adds	r3, #176	@ 0xb0
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	e018      	b.n	8005b06 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	7c1b      	ldrb	r3, [r3, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10a      	bne.n	8005af2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005adc:	4b0d      	ldr	r3, [pc, #52]	@ (8005b14 <USBD_CDC_Init+0x1e8>)
 8005ade:	7819      	ldrb	r1, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ae6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f002 fb06 	bl	80080fc <USBD_LL_PrepareReceive>
 8005af0:	e008      	b.n	8005b04 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005af2:	4b08      	ldr	r3, [pc, #32]	@ (8005b14 <USBD_CDC_Init+0x1e8>)
 8005af4:	7819      	ldrb	r1, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005afc:	2340      	movs	r3, #64	@ 0x40
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f002 fafc 	bl	80080fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	20000093 	.word	0x20000093
 8005b14:	20000094 	.word	0x20000094
 8005b18:	20000095 	.word	0x20000095

08005b1c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	460b      	mov	r3, r1
 8005b26:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005b28:	4b3a      	ldr	r3, [pc, #232]	@ (8005c14 <USBD_CDC_DeInit+0xf8>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f002 fa1b 	bl	8007f6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005b34:	4b37      	ldr	r3, [pc, #220]	@ (8005c14 <USBD_CDC_DeInit+0xf8>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	f003 020f 	and.w	r2, r3, #15
 8005b3c:	6879      	ldr	r1, [r7, #4]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	4413      	add	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	440b      	add	r3, r1
 8005b48:	3324      	adds	r3, #36	@ 0x24
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005b4e:	4b32      	ldr	r3, [pc, #200]	@ (8005c18 <USBD_CDC_DeInit+0xfc>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	4619      	mov	r1, r3
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f002 fa08 	bl	8007f6a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8005c18 <USBD_CDC_DeInit+0xfc>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	f003 020f 	and.w	r2, r3, #15
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005b72:	2200      	movs	r2, #0
 8005b74:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005b76:	4b29      	ldr	r3, [pc, #164]	@ (8005c1c <USBD_CDC_DeInit+0x100>)
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f002 f9f4 	bl	8007f6a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005b82:	4b26      	ldr	r3, [pc, #152]	@ (8005c1c <USBD_CDC_DeInit+0x100>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	f003 020f 	and.w	r2, r3, #15
 8005b8a:	6879      	ldr	r1, [r7, #4]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	440b      	add	r3, r1
 8005b96:	3324      	adds	r3, #36	@ 0x24
 8005b98:	2200      	movs	r2, #0
 8005b9a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8005c1c <USBD_CDC_DeInit+0x100>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	f003 020f 	and.w	r2, r3, #15
 8005ba4:	6879      	ldr	r1, [r7, #4]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	440b      	add	r3, r1
 8005bb0:	3326      	adds	r3, #38	@ 0x26
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	32b0      	adds	r2, #176	@ 0xb0
 8005bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d01f      	beq.n	8005c08 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	33b0      	adds	r3, #176	@ 0xb0
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	32b0      	adds	r2, #176	@ 0xb0
 8005be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f002 fac8 	bl	8008180 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	32b0      	adds	r2, #176	@ 0xb0
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	20000093 	.word	0x20000093
 8005c18:	20000094 	.word	0x20000094
 8005c1c:	20000095 	.word	0x20000095

08005c20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	32b0      	adds	r2, #176	@ 0xb0
 8005c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c38:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e0bf      	b.n	8005dd0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d050      	beq.n	8005cfe <USBD_CDC_Setup+0xde>
 8005c5c:	2b20      	cmp	r3, #32
 8005c5e:	f040 80af 	bne.w	8005dc0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	88db      	ldrh	r3, [r3, #6]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d03a      	beq.n	8005ce0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	b25b      	sxtb	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	da1b      	bge.n	8005cac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	33b0      	adds	r3, #176	@ 0xb0
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005c8a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	88d2      	ldrh	r2, [r2, #6]
 8005c90:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	88db      	ldrh	r3, [r3, #6]
 8005c96:	2b07      	cmp	r3, #7
 8005c98:	bf28      	it	cs
 8005c9a:	2307      	movcs	r3, #7
 8005c9c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	89fa      	ldrh	r2, [r7, #14]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f001 fd47 	bl	8007738 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005caa:	e090      	b.n	8005dce <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	785a      	ldrb	r2, [r3, #1]
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	88db      	ldrh	r3, [r3, #6]
 8005cba:	2b3f      	cmp	r3, #63	@ 0x3f
 8005cbc:	d803      	bhi.n	8005cc6 <USBD_CDC_Setup+0xa6>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	88db      	ldrh	r3, [r3, #6]
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	e000      	b.n	8005cc8 <USBD_CDC_Setup+0xa8>
 8005cc6:	2240      	movs	r2, #64	@ 0x40
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005cce:	6939      	ldr	r1, [r7, #16]
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f001 fd59 	bl	8007790 <USBD_CtlPrepareRx>
      break;
 8005cde:	e076      	b.n	8005dce <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	33b0      	adds	r3, #176	@ 0xb0
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	7850      	ldrb	r0, [r2, #1]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	6839      	ldr	r1, [r7, #0]
 8005cfa:	4798      	blx	r3
      break;
 8005cfc:	e067      	b.n	8005dce <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	785b      	ldrb	r3, [r3, #1]
 8005d02:	2b0b      	cmp	r3, #11
 8005d04:	d851      	bhi.n	8005daa <USBD_CDC_Setup+0x18a>
 8005d06:	a201      	add	r2, pc, #4	@ (adr r2, 8005d0c <USBD_CDC_Setup+0xec>)
 8005d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0c:	08005d3d 	.word	0x08005d3d
 8005d10:	08005db9 	.word	0x08005db9
 8005d14:	08005dab 	.word	0x08005dab
 8005d18:	08005dab 	.word	0x08005dab
 8005d1c:	08005dab 	.word	0x08005dab
 8005d20:	08005dab 	.word	0x08005dab
 8005d24:	08005dab 	.word	0x08005dab
 8005d28:	08005dab 	.word	0x08005dab
 8005d2c:	08005dab 	.word	0x08005dab
 8005d30:	08005dab 	.word	0x08005dab
 8005d34:	08005d67 	.word	0x08005d67
 8005d38:	08005d91 	.word	0x08005d91
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d107      	bne.n	8005d58 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d48:	f107 030a 	add.w	r3, r7, #10
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	4619      	mov	r1, r3
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 fcf1 	bl	8007738 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d56:	e032      	b.n	8005dbe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d58:	6839      	ldr	r1, [r7, #0]
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f001 fc7b 	bl	8007656 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d60:	2303      	movs	r3, #3
 8005d62:	75fb      	strb	r3, [r7, #23]
          break;
 8005d64:	e02b      	b.n	8005dbe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b03      	cmp	r3, #3
 8005d70:	d107      	bne.n	8005d82 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005d72:	f107 030d 	add.w	r3, r7, #13
 8005d76:	2201      	movs	r2, #1
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f001 fcdc 	bl	8007738 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d80:	e01d      	b.n	8005dbe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f001 fc66 	bl	8007656 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	75fb      	strb	r3, [r7, #23]
          break;
 8005d8e:	e016      	b.n	8005dbe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	d00f      	beq.n	8005dbc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f001 fc59 	bl	8007656 <USBD_CtlError>
            ret = USBD_FAIL;
 8005da4:	2303      	movs	r3, #3
 8005da6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005da8:	e008      	b.n	8005dbc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005daa:	6839      	ldr	r1, [r7, #0]
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f001 fc52 	bl	8007656 <USBD_CtlError>
          ret = USBD_FAIL;
 8005db2:	2303      	movs	r3, #3
 8005db4:	75fb      	strb	r3, [r7, #23]
          break;
 8005db6:	e002      	b.n	8005dbe <USBD_CDC_Setup+0x19e>
          break;
 8005db8:	bf00      	nop
 8005dba:	e008      	b.n	8005dce <USBD_CDC_Setup+0x1ae>
          break;
 8005dbc:	bf00      	nop
      }
      break;
 8005dbe:	e006      	b.n	8005dce <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f001 fc47 	bl	8007656 <USBD_CtlError>
      ret = USBD_FAIL;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	75fb      	strb	r3, [r7, #23]
      break;
 8005dcc:	bf00      	nop
  }

  return (uint8_t)ret;
 8005dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	460b      	mov	r3, r1
 8005de2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005dea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	32b0      	adds	r2, #176	@ 0xb0
 8005df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e065      	b.n	8005ece <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	32b0      	adds	r2, #176	@ 0xb0
 8005e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e10:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005e12:	78fb      	ldrb	r3, [r7, #3]
 8005e14:	f003 020f 	and.w	r2, r3, #15
 8005e18:	6879      	ldr	r1, [r7, #4]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	440b      	add	r3, r1
 8005e24:	3318      	adds	r3, #24
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d02f      	beq.n	8005e8c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005e2c:	78fb      	ldrb	r3, [r7, #3]
 8005e2e:	f003 020f 	and.w	r2, r3, #15
 8005e32:	6879      	ldr	r1, [r7, #4]
 8005e34:	4613      	mov	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	440b      	add	r3, r1
 8005e3e:	3318      	adds	r3, #24
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	78fb      	ldrb	r3, [r7, #3]
 8005e44:	f003 010f 	and.w	r1, r3, #15
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	440b      	add	r3, r1
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4403      	add	r3, r0
 8005e54:	331c      	adds	r3, #28
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	fbb2 f1f3 	udiv	r1, r2, r3
 8005e5c:	fb01 f303 	mul.w	r3, r1, r3
 8005e60:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d112      	bne.n	8005e8c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005e66:	78fb      	ldrb	r3, [r7, #3]
 8005e68:	f003 020f 	and.w	r2, r3, #15
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	440b      	add	r3, r1
 8005e78:	3318      	adds	r3, #24
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005e7e:	78f9      	ldrb	r1, [r7, #3]
 8005e80:	2300      	movs	r3, #0
 8005e82:	2200      	movs	r2, #0
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f002 f918 	bl	80080ba <USBD_LL_Transmit>
 8005e8a:	e01f      	b.n	8005ecc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	33b0      	adds	r3, #176	@ 0xb0
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d010      	beq.n	8005ecc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	33b0      	adds	r3, #176	@ 0xb0
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	68ba      	ldr	r2, [r7, #8]
 8005ebe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005ec8:	78fa      	ldrb	r2, [r7, #3]
 8005eca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b084      	sub	sp, #16
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	460b      	mov	r3, r1
 8005ee0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	32b0      	adds	r2, #176	@ 0xb0
 8005eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	32b0      	adds	r2, #176	@ 0xb0
 8005efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e01a      	b.n	8005f3e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f002 f916 	bl	800813e <USBD_LL_GetRxDataSize>
 8005f12:	4602      	mov	r2, r0
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	33b0      	adds	r3, #176	@ 0xb0
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005f38:	4611      	mov	r1, r2
 8005f3a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b084      	sub	sp, #16
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	32b0      	adds	r2, #176	@ 0xb0
 8005f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e024      	b.n	8005fb2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	33b0      	adds	r3, #176	@ 0xb0
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d019      	beq.n	8005fb0 <USBD_CDC_EP0_RxReady+0x6a>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005f82:	2bff      	cmp	r3, #255	@ 0xff
 8005f84:	d014      	beq.n	8005fb0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	33b0      	adds	r3, #176	@ 0xb0
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005f9e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005fa6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	22ff      	movs	r2, #255	@ 0xff
 8005fac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
	...

08005fbc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005fc4:	2182      	movs	r1, #130	@ 0x82
 8005fc6:	4818      	ldr	r0, [pc, #96]	@ (8006028 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005fc8:	f000 fd0f 	bl	80069ea <USBD_GetEpDesc>
 8005fcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005fce:	2101      	movs	r1, #1
 8005fd0:	4815      	ldr	r0, [pc, #84]	@ (8006028 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005fd2:	f000 fd0a 	bl	80069ea <USBD_GetEpDesc>
 8005fd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005fd8:	2181      	movs	r1, #129	@ 0x81
 8005fda:	4813      	ldr	r0, [pc, #76]	@ (8006028 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005fdc:	f000 fd05 	bl	80069ea <USBD_GetEpDesc>
 8005fe0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	2210      	movs	r2, #16
 8005fec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d006      	beq.n	8006002 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ffc:	711a      	strb	r2, [r3, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d006      	beq.n	8006016 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006010:	711a      	strb	r2, [r3, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2243      	movs	r2, #67	@ 0x43
 800601a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800601c:	4b02      	ldr	r3, [pc, #8]	@ (8006028 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	20000050 	.word	0x20000050

0800602c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006034:	2182      	movs	r1, #130	@ 0x82
 8006036:	4818      	ldr	r0, [pc, #96]	@ (8006098 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006038:	f000 fcd7 	bl	80069ea <USBD_GetEpDesc>
 800603c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800603e:	2101      	movs	r1, #1
 8006040:	4815      	ldr	r0, [pc, #84]	@ (8006098 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006042:	f000 fcd2 	bl	80069ea <USBD_GetEpDesc>
 8006046:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006048:	2181      	movs	r1, #129	@ 0x81
 800604a:	4813      	ldr	r0, [pc, #76]	@ (8006098 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800604c:	f000 fccd 	bl	80069ea <USBD_GetEpDesc>
 8006050:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	2210      	movs	r2, #16
 800605c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d006      	beq.n	8006072 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	2200      	movs	r2, #0
 8006068:	711a      	strb	r2, [r3, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f042 0202 	orr.w	r2, r2, #2
 8006070:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d006      	beq.n	8006086 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	711a      	strb	r2, [r3, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f042 0202 	orr.w	r2, r2, #2
 8006084:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2243      	movs	r2, #67	@ 0x43
 800608a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800608c:	4b02      	ldr	r3, [pc, #8]	@ (8006098 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800608e:	4618      	mov	r0, r3
 8006090:	3718      	adds	r7, #24
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000050 	.word	0x20000050

0800609c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80060a4:	2182      	movs	r1, #130	@ 0x82
 80060a6:	4818      	ldr	r0, [pc, #96]	@ (8006108 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80060a8:	f000 fc9f 	bl	80069ea <USBD_GetEpDesc>
 80060ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80060ae:	2101      	movs	r1, #1
 80060b0:	4815      	ldr	r0, [pc, #84]	@ (8006108 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80060b2:	f000 fc9a 	bl	80069ea <USBD_GetEpDesc>
 80060b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80060b8:	2181      	movs	r1, #129	@ 0x81
 80060ba:	4813      	ldr	r0, [pc, #76]	@ (8006108 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80060bc:	f000 fc95 	bl	80069ea <USBD_GetEpDesc>
 80060c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d002      	beq.n	80060ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	2210      	movs	r2, #16
 80060cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d006      	beq.n	80060e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060dc:	711a      	strb	r2, [r3, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d006      	beq.n	80060f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060f0:	711a      	strb	r2, [r3, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2243      	movs	r2, #67	@ 0x43
 80060fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80060fc:	4b02      	ldr	r3, [pc, #8]	@ (8006108 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20000050 	.word	0x20000050

0800610c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	220a      	movs	r2, #10
 8006118:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800611a:	4b03      	ldr	r3, [pc, #12]	@ (8006128 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800611c:	4618      	mov	r0, r3
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	2000000c 	.word	0x2000000c

0800612c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800613c:	2303      	movs	r3, #3
 800613e:	e009      	b.n	8006154 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	33b0      	adds	r3, #176	@ 0xb0
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006160:	b480      	push	{r7}
 8006162:	b087      	sub	sp, #28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	32b0      	adds	r2, #176	@ 0xb0
 8006176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800617a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006182:	2303      	movs	r3, #3
 8006184:	e008      	b.n	8006198 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	68ba      	ldr	r2, [r7, #8]
 800618a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	371c      	adds	r7, #28
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	32b0      	adds	r2, #176	@ 0xb0
 80061b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e004      	b.n	80061d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
	...

080061e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	32b0      	adds	r2, #176	@ 0xb0
 80061f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	32b0      	adds	r2, #176	@ 0xb0
 8006202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800620a:	2303      	movs	r3, #3
 800620c:	e018      	b.n	8006240 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	7c1b      	ldrb	r3, [r3, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10a      	bne.n	800622c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006216:	4b0c      	ldr	r3, [pc, #48]	@ (8006248 <USBD_CDC_ReceivePacket+0x68>)
 8006218:	7819      	ldrb	r1, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006220:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f001 ff69 	bl	80080fc <USBD_LL_PrepareReceive>
 800622a:	e008      	b.n	800623e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800622c:	4b06      	ldr	r3, [pc, #24]	@ (8006248 <USBD_CDC_ReceivePacket+0x68>)
 800622e:	7819      	ldrb	r1, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006236:	2340      	movs	r3, #64	@ 0x40
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 ff5f 	bl	80080fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	20000094 	.word	0x20000094

0800624c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	4613      	mov	r3, r2
 8006258:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006260:	2303      	movs	r3, #3
 8006262:	e01f      	b.n	80062a4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	79fa      	ldrb	r2, [r7, #7]
 8006296:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f001 fdd9 	bl	8007e50 <USBD_LL_Init>
 800629e:	4603      	mov	r3, r0
 80062a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80062a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e025      	b.n	8006310 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	32ae      	adds	r2, #174	@ 0xae
 80062d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00f      	beq.n	8006300 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	32ae      	adds	r2, #174	@ 0xae
 80062ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f0:	f107 020e 	add.w	r2, r7, #14
 80062f4:	4610      	mov	r0, r2
 80062f6:	4798      	blx	r3
 80062f8:	4602      	mov	r2, r0
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006306:	1c5a      	adds	r2, r3, #1
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f001 fde1 	bl	8007ee8 <USBD_LL_Start>
 8006326:	4603      	mov	r3, r0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006338:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800633a:	4618      	mov	r0, r3
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b084      	sub	sp, #16
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
 800634e:	460b      	mov	r3, r1
 8006350:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800635c:	2b00      	cmp	r3, #0
 800635e:	d009      	beq.n	8006374 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	78fa      	ldrb	r2, [r7, #3]
 800636a:	4611      	mov	r1, r2
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	4798      	blx	r3
 8006370:	4603      	mov	r3, r0
 8006372:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006374:	7bfb      	ldrb	r3, [r7, #15]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b084      	sub	sp, #16
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	460b      	mov	r3, r1
 8006388:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	78fa      	ldrb	r2, [r7, #3]
 8006398:	4611      	mov	r1, r2
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	4798      	blx	r3
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80063a4:	2303      	movs	r3, #3
 80063a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b084      	sub	sp, #16
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80063c2:	6839      	ldr	r1, [r7, #0]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f001 f90c 	bl	80075e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80063d8:	461a      	mov	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80063e6:	f003 031f 	and.w	r3, r3, #31
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d01a      	beq.n	8006424 <USBD_LL_SetupStage+0x72>
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d822      	bhi.n	8006438 <USBD_LL_SetupStage+0x86>
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <USBD_LL_SetupStage+0x4a>
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d00a      	beq.n	8006410 <USBD_LL_SetupStage+0x5e>
 80063fa:	e01d      	b.n	8006438 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 fb63 	bl	8006ad0 <USBD_StdDevReq>
 800640a:	4603      	mov	r3, r0
 800640c:	73fb      	strb	r3, [r7, #15]
      break;
 800640e:	e020      	b.n	8006452 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fbcb 	bl	8006bb4 <USBD_StdItfReq>
 800641e:	4603      	mov	r3, r0
 8006420:	73fb      	strb	r3, [r7, #15]
      break;
 8006422:	e016      	b.n	8006452 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800642a:	4619      	mov	r1, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fc2d 	bl	8006c8c <USBD_StdEPReq>
 8006432:	4603      	mov	r3, r0
 8006434:	73fb      	strb	r3, [r7, #15]
      break;
 8006436:	e00c      	b.n	8006452 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800643e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006442:	b2db      	uxtb	r3, r3
 8006444:	4619      	mov	r1, r3
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f001 fdae 	bl	8007fa8 <USBD_LL_StallEP>
 800644c:	4603      	mov	r3, r0
 800644e:	73fb      	strb	r3, [r7, #15]
      break;
 8006450:	bf00      	nop
  }

  return ret;
 8006452:	7bfb      	ldrb	r3, [r7, #15]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	460b      	mov	r3, r1
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800646e:	7afb      	ldrb	r3, [r7, #11]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d16e      	bne.n	8006552 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800647a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006482:	2b03      	cmp	r3, #3
 8006484:	f040 8098 	bne.w	80065b8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	689a      	ldr	r2, [r3, #8]
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	429a      	cmp	r2, r3
 8006492:	d913      	bls.n	80064bc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	689a      	ldr	r2, [r3, #8]
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	1ad2      	subs	r2, r2, r3
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	4293      	cmp	r3, r2
 80064ac:	bf28      	it	cs
 80064ae:	4613      	movcs	r3, r2
 80064b0:	461a      	mov	r2, r3
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f001 f988 	bl	80077ca <USBD_CtlContinueRx>
 80064ba:	e07d      	b.n	80065b8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80064c2:	f003 031f 	and.w	r3, r3, #31
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d014      	beq.n	80064f4 <USBD_LL_DataOutStage+0x98>
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d81d      	bhi.n	800650a <USBD_LL_DataOutStage+0xae>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d002      	beq.n	80064d8 <USBD_LL_DataOutStage+0x7c>
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d003      	beq.n	80064de <USBD_LL_DataOutStage+0x82>
 80064d6:	e018      	b.n	800650a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	75bb      	strb	r3, [r7, #22]
            break;
 80064dc:	e018      	b.n	8006510 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	4619      	mov	r1, r3
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 fa64 	bl	80069b6 <USBD_CoreFindIF>
 80064ee:	4603      	mov	r3, r0
 80064f0:	75bb      	strb	r3, [r7, #22]
            break;
 80064f2:	e00d      	b.n	8006510 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	4619      	mov	r1, r3
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 fa66 	bl	80069d0 <USBD_CoreFindEP>
 8006504:	4603      	mov	r3, r0
 8006506:	75bb      	strb	r3, [r7, #22]
            break;
 8006508:	e002      	b.n	8006510 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800650a:	2300      	movs	r3, #0
 800650c:	75bb      	strb	r3, [r7, #22]
            break;
 800650e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006510:	7dbb      	ldrb	r3, [r7, #22]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d119      	bne.n	800654a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b03      	cmp	r3, #3
 8006520:	d113      	bne.n	800654a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006522:	7dba      	ldrb	r2, [r7, #22]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	32ae      	adds	r2, #174	@ 0xae
 8006528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800652c:	691b      	ldr	r3, [r3, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00b      	beq.n	800654a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006532:	7dba      	ldrb	r2, [r7, #22]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800653a:	7dba      	ldrb	r2, [r7, #22]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	32ae      	adds	r2, #174	@ 0xae
 8006540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f001 f94e 	bl	80077ec <USBD_CtlSendStatus>
 8006550:	e032      	b.n	80065b8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006552:	7afb      	ldrb	r3, [r7, #11]
 8006554:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006558:	b2db      	uxtb	r3, r3
 800655a:	4619      	mov	r1, r3
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f000 fa37 	bl	80069d0 <USBD_CoreFindEP>
 8006562:	4603      	mov	r3, r0
 8006564:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006566:	7dbb      	ldrb	r3, [r7, #22]
 8006568:	2bff      	cmp	r3, #255	@ 0xff
 800656a:	d025      	beq.n	80065b8 <USBD_LL_DataOutStage+0x15c>
 800656c:	7dbb      	ldrb	r3, [r7, #22]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d122      	bne.n	80065b8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b03      	cmp	r3, #3
 800657c:	d117      	bne.n	80065ae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800657e:	7dba      	ldrb	r2, [r7, #22]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	32ae      	adds	r2, #174	@ 0xae
 8006584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00f      	beq.n	80065ae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800658e:	7dba      	ldrb	r2, [r7, #22]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006596:	7dba      	ldrb	r2, [r7, #22]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	32ae      	adds	r2, #174	@ 0xae
 800659c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	7afa      	ldrb	r2, [r7, #11]
 80065a4:	4611      	mov	r1, r2
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	4798      	blx	r3
 80065aa:	4603      	mov	r3, r0
 80065ac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80065ae:	7dfb      	ldrb	r3, [r7, #23]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80065b4:	7dfb      	ldrb	r3, [r7, #23]
 80065b6:	e000      	b.n	80065ba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3718      	adds	r7, #24
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b086      	sub	sp, #24
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	60f8      	str	r0, [r7, #12]
 80065ca:	460b      	mov	r3, r1
 80065cc:	607a      	str	r2, [r7, #4]
 80065ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80065d0:	7afb      	ldrb	r3, [r7, #11]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d16f      	bne.n	80066b6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3314      	adds	r3, #20
 80065da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d15a      	bne.n	800669c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	689a      	ldr	r2, [r3, #8]
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d914      	bls.n	800661c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	689a      	ldr	r2, [r3, #8]
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	1ad2      	subs	r2, r2, r3
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	461a      	mov	r2, r3
 8006606:	6879      	ldr	r1, [r7, #4]
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f001 f8b0 	bl	800776e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800660e:	2300      	movs	r3, #0
 8006610:	2200      	movs	r2, #0
 8006612:	2100      	movs	r1, #0
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f001 fd71 	bl	80080fc <USBD_LL_PrepareReceive>
 800661a:	e03f      	b.n	800669c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	68da      	ldr	r2, [r3, #12]
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	429a      	cmp	r2, r3
 8006626:	d11c      	bne.n	8006662 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006630:	429a      	cmp	r2, r3
 8006632:	d316      	bcc.n	8006662 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	685a      	ldr	r2, [r3, #4]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800663e:	429a      	cmp	r2, r3
 8006640:	d20f      	bcs.n	8006662 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006642:	2200      	movs	r2, #0
 8006644:	2100      	movs	r1, #0
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f001 f891 	bl	800776e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006654:	2300      	movs	r3, #0
 8006656:	2200      	movs	r2, #0
 8006658:	2100      	movs	r1, #0
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f001 fd4e 	bl	80080fc <USBD_LL_PrepareReceive>
 8006660:	e01c      	b.n	800669c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b03      	cmp	r3, #3
 800666c:	d10f      	bne.n	800668e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d009      	beq.n	800668e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800668e:	2180      	movs	r1, #128	@ 0x80
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f001 fc89 	bl	8007fa8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f001 f8bb 	bl	8007812 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d03a      	beq.n	800671c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f7ff fe42 	bl	8006330 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80066b4:	e032      	b.n	800671c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80066b6:	7afb      	ldrb	r3, [r7, #11]
 80066b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	4619      	mov	r1, r3
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 f985 	bl	80069d0 <USBD_CoreFindEP>
 80066c6:	4603      	mov	r3, r0
 80066c8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066ca:	7dfb      	ldrb	r3, [r7, #23]
 80066cc:	2bff      	cmp	r3, #255	@ 0xff
 80066ce:	d025      	beq.n	800671c <USBD_LL_DataInStage+0x15a>
 80066d0:	7dfb      	ldrb	r3, [r7, #23]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d122      	bne.n	800671c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	2b03      	cmp	r3, #3
 80066e0:	d11c      	bne.n	800671c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80066e2:	7dfa      	ldrb	r2, [r7, #23]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	32ae      	adds	r2, #174	@ 0xae
 80066e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d014      	beq.n	800671c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80066f2:	7dfa      	ldrb	r2, [r7, #23]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80066fa:	7dfa      	ldrb	r2, [r7, #23]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	32ae      	adds	r2, #174	@ 0xae
 8006700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	7afa      	ldrb	r2, [r7, #11]
 8006708:	4611      	mov	r1, r2
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	4798      	blx	r3
 800670e:	4603      	mov	r3, r0
 8006710:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006712:	7dbb      	ldrb	r3, [r7, #22]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006718:	7dbb      	ldrb	r3, [r7, #22]
 800671a:	e000      	b.n	800671e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3718      	adds	r7, #24
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800672e:	2300      	movs	r3, #0
 8006730:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800675e:	2b00      	cmp	r3, #0
 8006760:	d014      	beq.n	800678c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00e      	beq.n	800678c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	6852      	ldr	r2, [r2, #4]
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	4611      	mov	r1, r2
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	4798      	blx	r3
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006788:	2303      	movs	r3, #3
 800678a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800678c:	2340      	movs	r3, #64	@ 0x40
 800678e:	2200      	movs	r2, #0
 8006790:	2100      	movs	r1, #0
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f001 fbc3 	bl	8007f1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2240      	movs	r2, #64	@ 0x40
 80067a4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067a8:	2340      	movs	r3, #64	@ 0x40
 80067aa:	2200      	movs	r2, #0
 80067ac:	2180      	movs	r1, #128	@ 0x80
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f001 fbb5 	bl	8007f1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2240      	movs	r2, #64	@ 0x40
 80067be:	621a      	str	r2, [r3, #32]

  return ret;
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	460b      	mov	r3, r1
 80067d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	78fa      	ldrb	r2, [r7, #3]
 80067da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d006      	beq.n	800680c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006804:	b2da      	uxtb	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2204      	movs	r2, #4
 8006810:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b04      	cmp	r3, #4
 8006834:	d106      	bne.n	8006844 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800683c:	b2da      	uxtb	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006852:	b580      	push	{r7, lr}
 8006854:	b082      	sub	sp, #8
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b03      	cmp	r3, #3
 8006864:	d110      	bne.n	8006888 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00b      	beq.n	8006888 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d005      	beq.n	8006888 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b082      	sub	sp, #8
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	460b      	mov	r3, r1
 800689c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	32ae      	adds	r2, #174	@ 0xae
 80068a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e01c      	b.n	80068ee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b03      	cmp	r3, #3
 80068be:	d115      	bne.n	80068ec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	32ae      	adds	r2, #174	@ 0xae
 80068ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00b      	beq.n	80068ec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	32ae      	adds	r2, #174	@ 0xae
 80068de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	78fa      	ldrb	r2, [r7, #3]
 80068e6:	4611      	mov	r1, r2
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b082      	sub	sp, #8
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	460b      	mov	r3, r1
 8006900:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	32ae      	adds	r2, #174	@ 0xae
 800690c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006914:	2303      	movs	r3, #3
 8006916:	e01c      	b.n	8006952 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b03      	cmp	r3, #3
 8006922:	d115      	bne.n	8006950 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	32ae      	adds	r2, #174	@ 0xae
 800692e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00b      	beq.n	8006950 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	32ae      	adds	r2, #174	@ 0xae
 8006942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006948:	78fa      	ldrb	r2, [r7, #3]
 800694a:	4611      	mov	r1, r2
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006950:	2300      	movs	r3, #0
}
 8006952:	4618      	mov	r0, r3
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800695a:	b480      	push	{r7}
 800695c:	b083      	sub	sp, #12
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr

08006970 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006978:	2300      	movs	r3, #0
 800697a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00e      	beq.n	80069ac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	6852      	ldr	r2, [r2, #4]
 800699a:	b2d2      	uxtb	r2, r2
 800699c:	4611      	mov	r1, r2
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	4798      	blx	r3
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80069a8:	2303      	movs	r3, #3
 80069aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b083      	sub	sp, #12
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	460b      	mov	r3, r1
 80069c0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069c2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	460b      	mov	r3, r1
 80069da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069de:	4618      	mov	r0, r3
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b086      	sub	sp, #24
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	460b      	mov	r3, r1
 80069f4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80069fe:	2300      	movs	r3, #0
 8006a00:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	885b      	ldrh	r3, [r3, #2]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	7812      	ldrb	r2, [r2, #0]
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d91f      	bls.n	8006a50 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006a16:	e013      	b.n	8006a40 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006a18:	f107 030a 	add.w	r3, r7, #10
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6978      	ldr	r0, [r7, #20]
 8006a20:	f000 f81b 	bl	8006a5a <USBD_GetNextDesc>
 8006a24:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	785b      	ldrb	r3, [r3, #1]
 8006a2a:	2b05      	cmp	r3, #5
 8006a2c:	d108      	bne.n	8006a40 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	789b      	ldrb	r3, [r3, #2]
 8006a36:	78fa      	ldrb	r2, [r7, #3]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d008      	beq.n	8006a4e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	885b      	ldrh	r3, [r3, #2]
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	897b      	ldrh	r3, [r7, #10]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d8e5      	bhi.n	8006a18 <USBD_GetEpDesc+0x2e>
 8006a4c:	e000      	b.n	8006a50 <USBD_GetEpDesc+0x66>
          break;
 8006a4e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006a50:	693b      	ldr	r3, [r7, #16]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b085      	sub	sp, #20
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	7812      	ldrb	r2, [r2, #0]
 8006a70:	4413      	add	r3, r2
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4413      	add	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006a84:	68fb      	ldr	r3, [r7, #12]
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b087      	sub	sp, #28
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006ab0:	8a3b      	ldrh	r3, [r7, #16]
 8006ab2:	021b      	lsls	r3, r3, #8
 8006ab4:	b21a      	sxth	r2, r3
 8006ab6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	b21b      	sxth	r3, r3
 8006abe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006ac0:	89fb      	ldrh	r3, [r7, #14]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	371c      	adds	r7, #28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
	...

08006ad0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ae6:	2b40      	cmp	r3, #64	@ 0x40
 8006ae8:	d005      	beq.n	8006af6 <USBD_StdDevReq+0x26>
 8006aea:	2b40      	cmp	r3, #64	@ 0x40
 8006aec:	d857      	bhi.n	8006b9e <USBD_StdDevReq+0xce>
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00f      	beq.n	8006b12 <USBD_StdDevReq+0x42>
 8006af2:	2b20      	cmp	r3, #32
 8006af4:	d153      	bne.n	8006b9e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	32ae      	adds	r2, #174	@ 0xae
 8006b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	4798      	blx	r3
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b10:	e04a      	b.n	8006ba8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	785b      	ldrb	r3, [r3, #1]
 8006b16:	2b09      	cmp	r3, #9
 8006b18:	d83b      	bhi.n	8006b92 <USBD_StdDevReq+0xc2>
 8006b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b20 <USBD_StdDevReq+0x50>)
 8006b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b20:	08006b75 	.word	0x08006b75
 8006b24:	08006b89 	.word	0x08006b89
 8006b28:	08006b93 	.word	0x08006b93
 8006b2c:	08006b7f 	.word	0x08006b7f
 8006b30:	08006b93 	.word	0x08006b93
 8006b34:	08006b53 	.word	0x08006b53
 8006b38:	08006b49 	.word	0x08006b49
 8006b3c:	08006b93 	.word	0x08006b93
 8006b40:	08006b6b 	.word	0x08006b6b
 8006b44:	08006b5d 	.word	0x08006b5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fa3c 	bl	8006fc8 <USBD_GetDescriptor>
          break;
 8006b50:	e024      	b.n	8006b9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b52:	6839      	ldr	r1, [r7, #0]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fba1 	bl	800729c <USBD_SetAddress>
          break;
 8006b5a:	e01f      	b.n	8006b9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fbe0 	bl	8007324 <USBD_SetConfig>
 8006b64:	4603      	mov	r3, r0
 8006b66:	73fb      	strb	r3, [r7, #15]
          break;
 8006b68:	e018      	b.n	8006b9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fc83 	bl	8007478 <USBD_GetConfig>
          break;
 8006b72:	e013      	b.n	8006b9c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b74:	6839      	ldr	r1, [r7, #0]
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 fcb4 	bl	80074e4 <USBD_GetStatus>
          break;
 8006b7c:	e00e      	b.n	8006b9c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fce3 	bl	800754c <USBD_SetFeature>
          break;
 8006b86:	e009      	b.n	8006b9c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 fd07 	bl	800759e <USBD_ClrFeature>
          break;
 8006b90:	e004      	b.n	8006b9c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fd5e 	bl	8007656 <USBD_CtlError>
          break;
 8006b9a:	bf00      	nop
      }
      break;
 8006b9c:	e004      	b.n	8006ba8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fd58 	bl	8007656 <USBD_CtlError>
      break;
 8006ba6:	bf00      	nop
  }

  return ret;
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3710      	adds	r7, #16
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop

08006bb4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006bca:	2b40      	cmp	r3, #64	@ 0x40
 8006bcc:	d005      	beq.n	8006bda <USBD_StdItfReq+0x26>
 8006bce:	2b40      	cmp	r3, #64	@ 0x40
 8006bd0:	d852      	bhi.n	8006c78 <USBD_StdItfReq+0xc4>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <USBD_StdItfReq+0x26>
 8006bd6:	2b20      	cmp	r3, #32
 8006bd8:	d14e      	bne.n	8006c78 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	3b01      	subs	r3, #1
 8006be4:	2b02      	cmp	r3, #2
 8006be6:	d840      	bhi.n	8006c6a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	889b      	ldrh	r3, [r3, #4]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d836      	bhi.n	8006c60 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	889b      	ldrh	r3, [r3, #4]
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff fedb 	bl	80069b6 <USBD_CoreFindIF>
 8006c00:	4603      	mov	r3, r0
 8006c02:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c04:	7bbb      	ldrb	r3, [r7, #14]
 8006c06:	2bff      	cmp	r3, #255	@ 0xff
 8006c08:	d01d      	beq.n	8006c46 <USBD_StdItfReq+0x92>
 8006c0a:	7bbb      	ldrb	r3, [r7, #14]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d11a      	bne.n	8006c46 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006c10:	7bba      	ldrb	r2, [r7, #14]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	32ae      	adds	r2, #174	@ 0xae
 8006c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d00f      	beq.n	8006c40 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006c20:	7bba      	ldrb	r2, [r7, #14]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c28:	7bba      	ldrb	r2, [r7, #14]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	32ae      	adds	r2, #174	@ 0xae
 8006c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	6839      	ldr	r1, [r7, #0]
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	4798      	blx	r3
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c3e:	e004      	b.n	8006c4a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006c40:	2303      	movs	r3, #3
 8006c42:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c44:	e001      	b.n	8006c4a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006c46:	2303      	movs	r3, #3
 8006c48:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	88db      	ldrh	r3, [r3, #6]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d110      	bne.n	8006c74 <USBD_StdItfReq+0xc0>
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10d      	bne.n	8006c74 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 fdc7 	bl	80077ec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c5e:	e009      	b.n	8006c74 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006c60:	6839      	ldr	r1, [r7, #0]
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fcf7 	bl	8007656 <USBD_CtlError>
          break;
 8006c68:	e004      	b.n	8006c74 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fcf2 	bl	8007656 <USBD_CtlError>
          break;
 8006c72:	e000      	b.n	8006c76 <USBD_StdItfReq+0xc2>
          break;
 8006c74:	bf00      	nop
      }
      break;
 8006c76:	e004      	b.n	8006c82 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fceb 	bl	8007656 <USBD_CtlError>
      break;
 8006c80:	bf00      	nop
  }

  return ret;
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c96:	2300      	movs	r3, #0
 8006c98:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	889b      	ldrh	r3, [r3, #4]
 8006c9e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006ca8:	2b40      	cmp	r3, #64	@ 0x40
 8006caa:	d007      	beq.n	8006cbc <USBD_StdEPReq+0x30>
 8006cac:	2b40      	cmp	r3, #64	@ 0x40
 8006cae:	f200 817f 	bhi.w	8006fb0 <USBD_StdEPReq+0x324>
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d02a      	beq.n	8006d0c <USBD_StdEPReq+0x80>
 8006cb6:	2b20      	cmp	r3, #32
 8006cb8:	f040 817a 	bne.w	8006fb0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006cbc:	7bbb      	ldrb	r3, [r7, #14]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7ff fe85 	bl	80069d0 <USBD_CoreFindEP>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cca:	7b7b      	ldrb	r3, [r7, #13]
 8006ccc:	2bff      	cmp	r3, #255	@ 0xff
 8006cce:	f000 8174 	beq.w	8006fba <USBD_StdEPReq+0x32e>
 8006cd2:	7b7b      	ldrb	r3, [r7, #13]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f040 8170 	bne.w	8006fba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006cda:	7b7a      	ldrb	r2, [r7, #13]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006ce2:	7b7a      	ldrb	r2, [r7, #13]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	32ae      	adds	r2, #174	@ 0xae
 8006ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 8163 	beq.w	8006fba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006cf4:	7b7a      	ldrb	r2, [r7, #13]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	32ae      	adds	r2, #174	@ 0xae
 8006cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	4798      	blx	r3
 8006d06:	4603      	mov	r3, r0
 8006d08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d0a:	e156      	b.n	8006fba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	785b      	ldrb	r3, [r3, #1]
 8006d10:	2b03      	cmp	r3, #3
 8006d12:	d008      	beq.n	8006d26 <USBD_StdEPReq+0x9a>
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	f300 8145 	bgt.w	8006fa4 <USBD_StdEPReq+0x318>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	f000 809b 	beq.w	8006e56 <USBD_StdEPReq+0x1ca>
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d03c      	beq.n	8006d9e <USBD_StdEPReq+0x112>
 8006d24:	e13e      	b.n	8006fa4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d002      	beq.n	8006d38 <USBD_StdEPReq+0xac>
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d016      	beq.n	8006d64 <USBD_StdEPReq+0xd8>
 8006d36:	e02c      	b.n	8006d92 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d38:	7bbb      	ldrb	r3, [r7, #14]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00d      	beq.n	8006d5a <USBD_StdEPReq+0xce>
 8006d3e:	7bbb      	ldrb	r3, [r7, #14]
 8006d40:	2b80      	cmp	r3, #128	@ 0x80
 8006d42:	d00a      	beq.n	8006d5a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
 8006d46:	4619      	mov	r1, r3
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f001 f92d 	bl	8007fa8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d4e:	2180      	movs	r1, #128	@ 0x80
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f001 f929 	bl	8007fa8 <USBD_LL_StallEP>
 8006d56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d58:	e020      	b.n	8006d9c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006d5a:	6839      	ldr	r1, [r7, #0]
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 fc7a 	bl	8007656 <USBD_CtlError>
              break;
 8006d62:	e01b      	b.n	8006d9c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	885b      	ldrh	r3, [r3, #2]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10e      	bne.n	8006d8a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00b      	beq.n	8006d8a <USBD_StdEPReq+0xfe>
 8006d72:	7bbb      	ldrb	r3, [r7, #14]
 8006d74:	2b80      	cmp	r3, #128	@ 0x80
 8006d76:	d008      	beq.n	8006d8a <USBD_StdEPReq+0xfe>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	88db      	ldrh	r3, [r3, #6]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d104      	bne.n	8006d8a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d80:	7bbb      	ldrb	r3, [r7, #14]
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f001 f90f 	bl	8007fa8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fd2e 	bl	80077ec <USBD_CtlSendStatus>

              break;
 8006d90:	e004      	b.n	8006d9c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006d92:	6839      	ldr	r1, [r7, #0]
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fc5e 	bl	8007656 <USBD_CtlError>
              break;
 8006d9a:	bf00      	nop
          }
          break;
 8006d9c:	e107      	b.n	8006fae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d002      	beq.n	8006db0 <USBD_StdEPReq+0x124>
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d016      	beq.n	8006ddc <USBD_StdEPReq+0x150>
 8006dae:	e04b      	b.n	8006e48 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006db0:	7bbb      	ldrb	r3, [r7, #14]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00d      	beq.n	8006dd2 <USBD_StdEPReq+0x146>
 8006db6:	7bbb      	ldrb	r3, [r7, #14]
 8006db8:	2b80      	cmp	r3, #128	@ 0x80
 8006dba:	d00a      	beq.n	8006dd2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 f8f1 	bl	8007fa8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dc6:	2180      	movs	r1, #128	@ 0x80
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f001 f8ed 	bl	8007fa8 <USBD_LL_StallEP>
 8006dce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006dd0:	e040      	b.n	8006e54 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fc3e 	bl	8007656 <USBD_CtlError>
              break;
 8006dda:	e03b      	b.n	8006e54 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	885b      	ldrh	r3, [r3, #2]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d136      	bne.n	8006e52 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006de4:	7bbb      	ldrb	r3, [r7, #14]
 8006de6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d004      	beq.n	8006df8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006dee:	7bbb      	ldrb	r3, [r7, #14]
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 f8f7 	bl	8007fe6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fcf7 	bl	80077ec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006dfe:	7bbb      	ldrb	r3, [r7, #14]
 8006e00:	4619      	mov	r1, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff fde4 	bl	80069d0 <USBD_CoreFindEP>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e0c:	7b7b      	ldrb	r3, [r7, #13]
 8006e0e:	2bff      	cmp	r3, #255	@ 0xff
 8006e10:	d01f      	beq.n	8006e52 <USBD_StdEPReq+0x1c6>
 8006e12:	7b7b      	ldrb	r3, [r7, #13]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d11c      	bne.n	8006e52 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006e18:	7b7a      	ldrb	r2, [r7, #13]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006e20:	7b7a      	ldrb	r2, [r7, #13]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	32ae      	adds	r2, #174	@ 0xae
 8006e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d010      	beq.n	8006e52 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e30:	7b7a      	ldrb	r2, [r7, #13]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	32ae      	adds	r2, #174	@ 0xae
 8006e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	6839      	ldr	r1, [r7, #0]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	4798      	blx	r3
 8006e42:	4603      	mov	r3, r0
 8006e44:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006e46:	e004      	b.n	8006e52 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006e48:	6839      	ldr	r1, [r7, #0]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fc03 	bl	8007656 <USBD_CtlError>
              break;
 8006e50:	e000      	b.n	8006e54 <USBD_StdEPReq+0x1c8>
              break;
 8006e52:	bf00      	nop
          }
          break;
 8006e54:	e0ab      	b.n	8006fae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d002      	beq.n	8006e68 <USBD_StdEPReq+0x1dc>
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d032      	beq.n	8006ecc <USBD_StdEPReq+0x240>
 8006e66:	e097      	b.n	8006f98 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d007      	beq.n	8006e7e <USBD_StdEPReq+0x1f2>
 8006e6e:	7bbb      	ldrb	r3, [r7, #14]
 8006e70:	2b80      	cmp	r3, #128	@ 0x80
 8006e72:	d004      	beq.n	8006e7e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fbed 	bl	8007656 <USBD_CtlError>
                break;
 8006e7c:	e091      	b.n	8006fa2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	da0b      	bge.n	8006e9e <USBD_StdEPReq+0x212>
 8006e86:	7bbb      	ldrb	r3, [r7, #14]
 8006e88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	3310      	adds	r3, #16
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	4413      	add	r3, r2
 8006e9a:	3304      	adds	r3, #4
 8006e9c:	e00b      	b.n	8006eb6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ea0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fc37 	bl	8007738 <USBD_CtlSendData>
              break;
 8006eca:	e06a      	b.n	8006fa2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ecc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	da11      	bge.n	8006ef8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ed4:	7bbb      	ldrb	r3, [r7, #14]
 8006ed6:	f003 020f 	and.w	r2, r3, #15
 8006eda:	6879      	ldr	r1, [r7, #4]
 8006edc:	4613      	mov	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	440b      	add	r3, r1
 8006ee6:	3324      	adds	r3, #36	@ 0x24
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d117      	bne.n	8006f1e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 fbb0 	bl	8007656 <USBD_CtlError>
                  break;
 8006ef6:	e054      	b.n	8006fa2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ef8:	7bbb      	ldrb	r3, [r7, #14]
 8006efa:	f003 020f 	and.w	r2, r3, #15
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	4613      	mov	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	440b      	add	r3, r1
 8006f0a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d104      	bne.n	8006f1e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fb9d 	bl	8007656 <USBD_CtlError>
                  break;
 8006f1c:	e041      	b.n	8006fa2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	da0b      	bge.n	8006f3e <USBD_StdEPReq+0x2b2>
 8006f26:	7bbb      	ldrb	r3, [r7, #14]
 8006f28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	3310      	adds	r3, #16
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	4413      	add	r3, r2
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	e00b      	b.n	8006f56 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f3e:	7bbb      	ldrb	r3, [r7, #14]
 8006f40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f44:	4613      	mov	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	4413      	add	r3, r2
 8006f54:	3304      	adds	r3, #4
 8006f56:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f58:	7bbb      	ldrb	r3, [r7, #14]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <USBD_StdEPReq+0x2d8>
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	2b80      	cmp	r3, #128	@ 0x80
 8006f62:	d103      	bne.n	8006f6c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	2200      	movs	r2, #0
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	e00e      	b.n	8006f8a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f6c:	7bbb      	ldrb	r3, [r7, #14]
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f001 f857 	bl	8008024 <USBD_LL_IsStallEP>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d003      	beq.n	8006f84 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	e002      	b.n	8006f8a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2200      	movs	r2, #0
 8006f88:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fbd1 	bl	8007738 <USBD_CtlSendData>
              break;
 8006f96:	e004      	b.n	8006fa2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006f98:	6839      	ldr	r1, [r7, #0]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fb5b 	bl	8007656 <USBD_CtlError>
              break;
 8006fa0:	bf00      	nop
          }
          break;
 8006fa2:	e004      	b.n	8006fae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fb55 	bl	8007656 <USBD_CtlError>
          break;
 8006fac:	bf00      	nop
      }
      break;
 8006fae:	e005      	b.n	8006fbc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fb4f 	bl	8007656 <USBD_CtlError>
      break;
 8006fb8:	e000      	b.n	8006fbc <USBD_StdEPReq+0x330>
      break;
 8006fba:	bf00      	nop
  }

  return ret;
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
	...

08006fc8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	885b      	ldrh	r3, [r3, #2]
 8006fe2:	0a1b      	lsrs	r3, r3, #8
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	2b06      	cmp	r3, #6
 8006fea:	f200 8128 	bhi.w	800723e <USBD_GetDescriptor+0x276>
 8006fee:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff4 <USBD_GetDescriptor+0x2c>)
 8006ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff4:	08007011 	.word	0x08007011
 8006ff8:	08007029 	.word	0x08007029
 8006ffc:	08007069 	.word	0x08007069
 8007000:	0800723f 	.word	0x0800723f
 8007004:	0800723f 	.word	0x0800723f
 8007008:	080071df 	.word	0x080071df
 800700c:	0800720b 	.word	0x0800720b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	7c12      	ldrb	r2, [r2, #16]
 800701c:	f107 0108 	add.w	r1, r7, #8
 8007020:	4610      	mov	r0, r2
 8007022:	4798      	blx	r3
 8007024:	60f8      	str	r0, [r7, #12]
      break;
 8007026:	e112      	b.n	800724e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	7c1b      	ldrb	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10d      	bne.n	800704c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007038:	f107 0208 	add.w	r2, r7, #8
 800703c:	4610      	mov	r0, r2
 800703e:	4798      	blx	r3
 8007040:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3301      	adds	r3, #1
 8007046:	2202      	movs	r2, #2
 8007048:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800704a:	e100      	b.n	800724e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007054:	f107 0208 	add.w	r2, r7, #8
 8007058:	4610      	mov	r0, r2
 800705a:	4798      	blx	r3
 800705c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3301      	adds	r3, #1
 8007062:	2202      	movs	r2, #2
 8007064:	701a      	strb	r2, [r3, #0]
      break;
 8007066:	e0f2      	b.n	800724e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	885b      	ldrh	r3, [r3, #2]
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b05      	cmp	r3, #5
 8007070:	f200 80ac 	bhi.w	80071cc <USBD_GetDescriptor+0x204>
 8007074:	a201      	add	r2, pc, #4	@ (adr r2, 800707c <USBD_GetDescriptor+0xb4>)
 8007076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707a:	bf00      	nop
 800707c:	08007095 	.word	0x08007095
 8007080:	080070c9 	.word	0x080070c9
 8007084:	080070fd 	.word	0x080070fd
 8007088:	08007131 	.word	0x08007131
 800708c:	08007165 	.word	0x08007165
 8007090:	08007199 	.word	0x08007199
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00b      	beq.n	80070b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	7c12      	ldrb	r2, [r2, #16]
 80070ac:	f107 0108 	add.w	r1, r7, #8
 80070b0:	4610      	mov	r0, r2
 80070b2:	4798      	blx	r3
 80070b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070b6:	e091      	b.n	80071dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 facb 	bl	8007656 <USBD_CtlError>
            err++;
 80070c0:	7afb      	ldrb	r3, [r7, #11]
 80070c2:	3301      	adds	r3, #1
 80070c4:	72fb      	strb	r3, [r7, #11]
          break;
 80070c6:	e089      	b.n	80071dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00b      	beq.n	80070ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	7c12      	ldrb	r2, [r2, #16]
 80070e0:	f107 0108 	add.w	r1, r7, #8
 80070e4:	4610      	mov	r0, r2
 80070e6:	4798      	blx	r3
 80070e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ea:	e077      	b.n	80071dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070ec:	6839      	ldr	r1, [r7, #0]
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fab1 	bl	8007656 <USBD_CtlError>
            err++;
 80070f4:	7afb      	ldrb	r3, [r7, #11]
 80070f6:	3301      	adds	r3, #1
 80070f8:	72fb      	strb	r3, [r7, #11]
          break;
 80070fa:	e06f      	b.n	80071dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00b      	beq.n	8007120 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	7c12      	ldrb	r2, [r2, #16]
 8007114:	f107 0108 	add.w	r1, r7, #8
 8007118:	4610      	mov	r0, r2
 800711a:	4798      	blx	r3
 800711c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800711e:	e05d      	b.n	80071dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007120:	6839      	ldr	r1, [r7, #0]
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fa97 	bl	8007656 <USBD_CtlError>
            err++;
 8007128:	7afb      	ldrb	r3, [r7, #11]
 800712a:	3301      	adds	r3, #1
 800712c:	72fb      	strb	r3, [r7, #11]
          break;
 800712e:	e055      	b.n	80071dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00b      	beq.n	8007154 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	7c12      	ldrb	r2, [r2, #16]
 8007148:	f107 0108 	add.w	r1, r7, #8
 800714c:	4610      	mov	r0, r2
 800714e:	4798      	blx	r3
 8007150:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007152:	e043      	b.n	80071dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fa7d 	bl	8007656 <USBD_CtlError>
            err++;
 800715c:	7afb      	ldrb	r3, [r7, #11]
 800715e:	3301      	adds	r3, #1
 8007160:	72fb      	strb	r3, [r7, #11]
          break;
 8007162:	e03b      	b.n	80071dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00b      	beq.n	8007188 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	7c12      	ldrb	r2, [r2, #16]
 800717c:	f107 0108 	add.w	r1, r7, #8
 8007180:	4610      	mov	r0, r2
 8007182:	4798      	blx	r3
 8007184:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007186:	e029      	b.n	80071dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007188:	6839      	ldr	r1, [r7, #0]
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fa63 	bl	8007656 <USBD_CtlError>
            err++;
 8007190:	7afb      	ldrb	r3, [r7, #11]
 8007192:	3301      	adds	r3, #1
 8007194:	72fb      	strb	r3, [r7, #11]
          break;
 8007196:	e021      	b.n	80071dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800719e:	699b      	ldr	r3, [r3, #24]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00b      	beq.n	80071bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	7c12      	ldrb	r2, [r2, #16]
 80071b0:	f107 0108 	add.w	r1, r7, #8
 80071b4:	4610      	mov	r0, r2
 80071b6:	4798      	blx	r3
 80071b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ba:	e00f      	b.n	80071dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fa49 	bl	8007656 <USBD_CtlError>
            err++;
 80071c4:	7afb      	ldrb	r3, [r7, #11]
 80071c6:	3301      	adds	r3, #1
 80071c8:	72fb      	strb	r3, [r7, #11]
          break;
 80071ca:	e007      	b.n	80071dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fa41 	bl	8007656 <USBD_CtlError>
          err++;
 80071d4:	7afb      	ldrb	r3, [r7, #11]
 80071d6:	3301      	adds	r3, #1
 80071d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80071da:	bf00      	nop
      }
      break;
 80071dc:	e037      	b.n	800724e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	7c1b      	ldrb	r3, [r3, #16]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d109      	bne.n	80071fa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071ee:	f107 0208 	add.w	r2, r7, #8
 80071f2:	4610      	mov	r0, r2
 80071f4:	4798      	blx	r3
 80071f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071f8:	e029      	b.n	800724e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80071fa:	6839      	ldr	r1, [r7, #0]
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fa2a 	bl	8007656 <USBD_CtlError>
        err++;
 8007202:	7afb      	ldrb	r3, [r7, #11]
 8007204:	3301      	adds	r3, #1
 8007206:	72fb      	strb	r3, [r7, #11]
      break;
 8007208:	e021      	b.n	800724e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	7c1b      	ldrb	r3, [r3, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10d      	bne.n	800722e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800721a:	f107 0208 	add.w	r2, r7, #8
 800721e:	4610      	mov	r0, r2
 8007220:	4798      	blx	r3
 8007222:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	3301      	adds	r3, #1
 8007228:	2207      	movs	r2, #7
 800722a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800722c:	e00f      	b.n	800724e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fa10 	bl	8007656 <USBD_CtlError>
        err++;
 8007236:	7afb      	ldrb	r3, [r7, #11]
 8007238:	3301      	adds	r3, #1
 800723a:	72fb      	strb	r3, [r7, #11]
      break;
 800723c:	e007      	b.n	800724e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fa08 	bl	8007656 <USBD_CtlError>
      err++;
 8007246:	7afb      	ldrb	r3, [r7, #11]
 8007248:	3301      	adds	r3, #1
 800724a:	72fb      	strb	r3, [r7, #11]
      break;
 800724c:	bf00      	nop
  }

  if (err != 0U)
 800724e:	7afb      	ldrb	r3, [r7, #11]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d11e      	bne.n	8007292 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	88db      	ldrh	r3, [r3, #6]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d016      	beq.n	800728a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800725c:	893b      	ldrh	r3, [r7, #8]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00e      	beq.n	8007280 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	88da      	ldrh	r2, [r3, #6]
 8007266:	893b      	ldrh	r3, [r7, #8]
 8007268:	4293      	cmp	r3, r2
 800726a:	bf28      	it	cs
 800726c:	4613      	movcs	r3, r2
 800726e:	b29b      	uxth	r3, r3
 8007270:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007272:	893b      	ldrh	r3, [r7, #8]
 8007274:	461a      	mov	r2, r3
 8007276:	68f9      	ldr	r1, [r7, #12]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fa5d 	bl	8007738 <USBD_CtlSendData>
 800727e:	e009      	b.n	8007294 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f9e7 	bl	8007656 <USBD_CtlError>
 8007288:	e004      	b.n	8007294 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 faae 	bl	80077ec <USBD_CtlSendStatus>
 8007290:	e000      	b.n	8007294 <USBD_GetDescriptor+0x2cc>
    return;
 8007292:	bf00      	nop
  }
}
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop

0800729c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	889b      	ldrh	r3, [r3, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d131      	bne.n	8007312 <USBD_SetAddress+0x76>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	88db      	ldrh	r3, [r3, #6]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d12d      	bne.n	8007312 <USBD_SetAddress+0x76>
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	885b      	ldrh	r3, [r3, #2]
 80072ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80072bc:	d829      	bhi.n	8007312 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	885b      	ldrh	r3, [r3, #2]
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d104      	bne.n	80072e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80072d6:	6839      	ldr	r1, [r7, #0]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f9bc 	bl	8007656 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072de:	e01d      	b.n	800731c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	7bfa      	ldrb	r2, [r7, #15]
 80072e4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f000 fec5 	bl	800807c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fa7a 	bl	80077ec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d004      	beq.n	8007308 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2202      	movs	r2, #2
 8007302:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007306:	e009      	b.n	800731c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007310:	e004      	b.n	800731c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007312:	6839      	ldr	r1, [r7, #0]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f99e 	bl	8007656 <USBD_CtlError>
  }
}
 800731a:	bf00      	nop
 800731c:	bf00      	nop
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	885b      	ldrh	r3, [r3, #2]
 8007336:	b2da      	uxtb	r2, r3
 8007338:	4b4e      	ldr	r3, [pc, #312]	@ (8007474 <USBD_SetConfig+0x150>)
 800733a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800733c:	4b4d      	ldr	r3, [pc, #308]	@ (8007474 <USBD_SetConfig+0x150>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d905      	bls.n	8007350 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f985 	bl	8007656 <USBD_CtlError>
    return USBD_FAIL;
 800734c:	2303      	movs	r3, #3
 800734e:	e08c      	b.n	800746a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b02      	cmp	r3, #2
 800735a:	d002      	beq.n	8007362 <USBD_SetConfig+0x3e>
 800735c:	2b03      	cmp	r3, #3
 800735e:	d029      	beq.n	80073b4 <USBD_SetConfig+0x90>
 8007360:	e075      	b.n	800744e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007362:	4b44      	ldr	r3, [pc, #272]	@ (8007474 <USBD_SetConfig+0x150>)
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d020      	beq.n	80073ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800736a:	4b42      	ldr	r3, [pc, #264]	@ (8007474 <USBD_SetConfig+0x150>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007374:	4b3f      	ldr	r3, [pc, #252]	@ (8007474 <USBD_SetConfig+0x150>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	4619      	mov	r1, r3
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7fe ffe3 	bl	8006346 <USBD_SetClassConfig>
 8007380:	4603      	mov	r3, r0
 8007382:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007384:	7bfb      	ldrb	r3, [r7, #15]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d008      	beq.n	800739c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800738a:	6839      	ldr	r1, [r7, #0]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f962 	bl	8007656 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2202      	movs	r2, #2
 8007396:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800739a:	e065      	b.n	8007468 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fa25 	bl	80077ec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2203      	movs	r2, #3
 80073a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80073aa:	e05d      	b.n	8007468 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 fa1d 	bl	80077ec <USBD_CtlSendStatus>
      break;
 80073b2:	e059      	b.n	8007468 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80073b4:	4b2f      	ldr	r3, [pc, #188]	@ (8007474 <USBD_SetConfig+0x150>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d112      	bne.n	80073e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2202      	movs	r2, #2
 80073c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80073c4:	4b2b      	ldr	r3, [pc, #172]	@ (8007474 <USBD_SetConfig+0x150>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	461a      	mov	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073ce:	4b29      	ldr	r3, [pc, #164]	@ (8007474 <USBD_SetConfig+0x150>)
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7fe ffd2 	bl	800637e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fa06 	bl	80077ec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073e0:	e042      	b.n	8007468 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80073e2:	4b24      	ldr	r3, [pc, #144]	@ (8007474 <USBD_SetConfig+0x150>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	461a      	mov	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d02a      	beq.n	8007446 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7fe ffc0 	bl	800637e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80073fe:	4b1d      	ldr	r3, [pc, #116]	@ (8007474 <USBD_SetConfig+0x150>)
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007408:	4b1a      	ldr	r3, [pc, #104]	@ (8007474 <USBD_SetConfig+0x150>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	4619      	mov	r1, r3
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f7fe ff99 	bl	8006346 <USBD_SetClassConfig>
 8007414:	4603      	mov	r3, r0
 8007416:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007418:	7bfb      	ldrb	r3, [r7, #15]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00f      	beq.n	800743e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f918 	bl	8007656 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	b2db      	uxtb	r3, r3
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7fe ffa5 	bl	800637e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2202      	movs	r2, #2
 8007438:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800743c:	e014      	b.n	8007468 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f9d4 	bl	80077ec <USBD_CtlSendStatus>
      break;
 8007444:	e010      	b.n	8007468 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 f9d0 	bl	80077ec <USBD_CtlSendStatus>
      break;
 800744c:	e00c      	b.n	8007468 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f900 	bl	8007656 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007456:	4b07      	ldr	r3, [pc, #28]	@ (8007474 <USBD_SetConfig+0x150>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7fe ff8e 	bl	800637e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007462:	2303      	movs	r3, #3
 8007464:	73fb      	strb	r3, [r7, #15]
      break;
 8007466:	bf00      	nop
  }

  return ret;
 8007468:	7bfb      	ldrb	r3, [r7, #15]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	2000023c 	.word	0x2000023c

08007478 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	88db      	ldrh	r3, [r3, #6]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d004      	beq.n	8007494 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800748a:	6839      	ldr	r1, [r7, #0]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f8e2 	bl	8007656 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007492:	e023      	b.n	80074dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b02      	cmp	r3, #2
 800749e:	dc02      	bgt.n	80074a6 <USBD_GetConfig+0x2e>
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	dc03      	bgt.n	80074ac <USBD_GetConfig+0x34>
 80074a4:	e015      	b.n	80074d2 <USBD_GetConfig+0x5a>
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d00b      	beq.n	80074c2 <USBD_GetConfig+0x4a>
 80074aa:	e012      	b.n	80074d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3308      	adds	r3, #8
 80074b6:	2201      	movs	r2, #1
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f93c 	bl	8007738 <USBD_CtlSendData>
        break;
 80074c0:	e00c      	b.n	80074dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	3304      	adds	r3, #4
 80074c6:	2201      	movs	r2, #1
 80074c8:	4619      	mov	r1, r3
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f934 	bl	8007738 <USBD_CtlSendData>
        break;
 80074d0:	e004      	b.n	80074dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 f8be 	bl	8007656 <USBD_CtlError>
        break;
 80074da:	bf00      	nop
}
 80074dc:	bf00      	nop
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	3b01      	subs	r3, #1
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d81e      	bhi.n	800753a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	88db      	ldrh	r3, [r3, #6]
 8007500:	2b02      	cmp	r3, #2
 8007502:	d004      	beq.n	800750e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f8a5 	bl	8007656 <USBD_CtlError>
        break;
 800750c:	e01a      	b.n	8007544 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800751a:	2b00      	cmp	r3, #0
 800751c:	d005      	beq.n	800752a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f043 0202 	orr.w	r2, r3, #2
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	330c      	adds	r3, #12
 800752e:	2202      	movs	r2, #2
 8007530:	4619      	mov	r1, r3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f900 	bl	8007738 <USBD_CtlSendData>
      break;
 8007538:	e004      	b.n	8007544 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 f88a 	bl	8007656 <USBD_CtlError>
      break;
 8007542:	bf00      	nop
  }
}
 8007544:	bf00      	nop
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	885b      	ldrh	r3, [r3, #2]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d107      	bne.n	800756e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f940 	bl	80077ec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800756c:	e013      	b.n	8007596 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	885b      	ldrh	r3, [r3, #2]
 8007572:	2b02      	cmp	r3, #2
 8007574:	d10b      	bne.n	800758e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	889b      	ldrh	r3, [r3, #4]
 800757a:	0a1b      	lsrs	r3, r3, #8
 800757c:	b29b      	uxth	r3, r3
 800757e:	b2da      	uxtb	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f930 	bl	80077ec <USBD_CtlSendStatus>
}
 800758c:	e003      	b.n	8007596 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 f860 	bl	8007656 <USBD_CtlError>
}
 8007596:	bf00      	nop
 8007598:	3708      	adds	r7, #8
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b082      	sub	sp, #8
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
 80075a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	3b01      	subs	r3, #1
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d80b      	bhi.n	80075ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	885b      	ldrh	r3, [r3, #2]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d10c      	bne.n	80075d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f910 	bl	80077ec <USBD_CtlSendStatus>
      }
      break;
 80075cc:	e004      	b.n	80075d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f840 	bl	8007656 <USBD_CtlError>
      break;
 80075d6:	e000      	b.n	80075da <USBD_ClrFeature+0x3c>
      break;
 80075d8:	bf00      	nop
  }
}
 80075da:	bf00      	nop
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	781a      	ldrb	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	3301      	adds	r3, #1
 80075fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	781a      	ldrb	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	3301      	adds	r3, #1
 800760a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f7ff fa40 	bl	8006a92 <SWAPBYTE>
 8007612:	4603      	mov	r3, r0
 8007614:	461a      	mov	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	3301      	adds	r3, #1
 800761e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	3301      	adds	r3, #1
 8007624:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f7ff fa33 	bl	8006a92 <SWAPBYTE>
 800762c:	4603      	mov	r3, r0
 800762e:	461a      	mov	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3301      	adds	r3, #1
 8007638:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3301      	adds	r3, #1
 800763e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f7ff fa26 	bl	8006a92 <SWAPBYTE>
 8007646:	4603      	mov	r3, r0
 8007648:	461a      	mov	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	80da      	strh	r2, [r3, #6]
}
 800764e:	bf00      	nop
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b082      	sub	sp, #8
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
 800765e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007660:	2180      	movs	r1, #128	@ 0x80
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 fca0 	bl	8007fa8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007668:	2100      	movs	r1, #0
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fc9c 	bl	8007fa8 <USBD_LL_StallEP>
}
 8007670:	bf00      	nop
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d036      	beq.n	80076fc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007692:	6938      	ldr	r0, [r7, #16]
 8007694:	f000 f836 	bl	8007704 <USBD_GetLen>
 8007698:	4603      	mov	r3, r0
 800769a:	3301      	adds	r3, #1
 800769c:	b29b      	uxth	r3, r3
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80076a6:	7dfb      	ldrb	r3, [r7, #23]
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	4413      	add	r3, r2
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	7812      	ldrb	r2, [r2, #0]
 80076b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80076b2:	7dfb      	ldrb	r3, [r7, #23]
 80076b4:	3301      	adds	r3, #1
 80076b6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80076b8:	7dfb      	ldrb	r3, [r7, #23]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	4413      	add	r3, r2
 80076be:	2203      	movs	r2, #3
 80076c0:	701a      	strb	r2, [r3, #0]
  idx++;
 80076c2:	7dfb      	ldrb	r3, [r7, #23]
 80076c4:	3301      	adds	r3, #1
 80076c6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80076c8:	e013      	b.n	80076f2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80076ca:	7dfb      	ldrb	r3, [r7, #23]
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	4413      	add	r3, r2
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	7812      	ldrb	r2, [r2, #0]
 80076d4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	3301      	adds	r3, #1
 80076da:	613b      	str	r3, [r7, #16]
    idx++;
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
 80076de:	3301      	adds	r3, #1
 80076e0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	4413      	add	r3, r2
 80076e8:	2200      	movs	r2, #0
 80076ea:	701a      	strb	r2, [r3, #0]
    idx++;
 80076ec:	7dfb      	ldrb	r3, [r7, #23]
 80076ee:	3301      	adds	r3, #1
 80076f0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1e7      	bne.n	80076ca <USBD_GetString+0x52>
 80076fa:	e000      	b.n	80076fe <USBD_GetString+0x86>
    return;
 80076fc:	bf00      	nop
  }
}
 80076fe:	3718      	adds	r7, #24
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800770c:	2300      	movs	r3, #0
 800770e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007714:	e005      	b.n	8007722 <USBD_GetLen+0x1e>
  {
    len++;
 8007716:	7bfb      	ldrb	r3, [r7, #15]
 8007718:	3301      	adds	r3, #1
 800771a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	3301      	adds	r3, #1
 8007720:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1f5      	bne.n	8007716 <USBD_GetLen+0x12>
  }

  return len;
 800772a:	7bfb      	ldrb	r3, [r7, #15]
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2202      	movs	r2, #2
 8007748:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	2100      	movs	r1, #0
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f000 fcab 	bl	80080ba <USBD_LL_Transmit>

  return USBD_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b084      	sub	sp, #16
 8007772:	af00      	add	r7, sp, #0
 8007774:	60f8      	str	r0, [r7, #12]
 8007776:	60b9      	str	r1, [r7, #8]
 8007778:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68ba      	ldr	r2, [r7, #8]
 800777e:	2100      	movs	r1, #0
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f000 fc9a 	bl	80080ba <USBD_LL_Transmit>

  return USBD_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2203      	movs	r2, #3
 80077a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	2100      	movs	r1, #0
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f000 fc9e 	bl	80080fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b084      	sub	sp, #16
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	2100      	movs	r1, #0
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f000 fc8d 	bl	80080fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2204      	movs	r2, #4
 80077f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80077fc:	2300      	movs	r3, #0
 80077fe:	2200      	movs	r2, #0
 8007800:	2100      	movs	r1, #0
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fc59 	bl	80080ba <USBD_LL_Transmit>

  return USBD_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b082      	sub	sp, #8
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2205      	movs	r2, #5
 800781e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007822:	2300      	movs	r3, #0
 8007824:	2200      	movs	r2, #0
 8007826:	2100      	movs	r1, #0
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fc67 	bl	80080fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800783c:	2200      	movs	r2, #0
 800783e:	4912      	ldr	r1, [pc, #72]	@ (8007888 <MX_USB_DEVICE_Init+0x50>)
 8007840:	4812      	ldr	r0, [pc, #72]	@ (800788c <MX_USB_DEVICE_Init+0x54>)
 8007842:	f7fe fd03 	bl	800624c <USBD_Init>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800784c:	f7f9 f922 	bl	8000a94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007850:	490f      	ldr	r1, [pc, #60]	@ (8007890 <MX_USB_DEVICE_Init+0x58>)
 8007852:	480e      	ldr	r0, [pc, #56]	@ (800788c <MX_USB_DEVICE_Init+0x54>)
 8007854:	f7fe fd2a 	bl	80062ac <USBD_RegisterClass>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800785e:	f7f9 f919 	bl	8000a94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007862:	490c      	ldr	r1, [pc, #48]	@ (8007894 <MX_USB_DEVICE_Init+0x5c>)
 8007864:	4809      	ldr	r0, [pc, #36]	@ (800788c <MX_USB_DEVICE_Init+0x54>)
 8007866:	f7fe fc61 	bl	800612c <USBD_CDC_RegisterInterface>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007870:	f7f9 f910 	bl	8000a94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007874:	4805      	ldr	r0, [pc, #20]	@ (800788c <MX_USB_DEVICE_Init+0x54>)
 8007876:	f7fe fd4f 	bl	8006318 <USBD_Start>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007880:	f7f9 f908 	bl	8000a94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007884:	bf00      	nop
 8007886:	bd80      	pop	{r7, pc}
 8007888:	200000ac 	.word	0x200000ac
 800788c:	20000240 	.word	0x20000240
 8007890:	20000018 	.word	0x20000018
 8007894:	20000098 	.word	0x20000098

08007898 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800789c:	2200      	movs	r2, #0
 800789e:	4905      	ldr	r1, [pc, #20]	@ (80078b4 <CDC_Init_FS+0x1c>)
 80078a0:	4805      	ldr	r0, [pc, #20]	@ (80078b8 <CDC_Init_FS+0x20>)
 80078a2:	f7fe fc5d 	bl	8006160 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80078a6:	4905      	ldr	r1, [pc, #20]	@ (80078bc <CDC_Init_FS+0x24>)
 80078a8:	4803      	ldr	r0, [pc, #12]	@ (80078b8 <CDC_Init_FS+0x20>)
 80078aa:	f7fe fc7b 	bl	80061a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80078ae:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	2000091c 	.word	0x2000091c
 80078b8:	20000240 	.word	0x20000240
 80078bc:	2000051c 	.word	0x2000051c

080078c0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80078c0:	b480      	push	{r7}
 80078c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80078c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	4603      	mov	r3, r0
 80078d8:	6039      	str	r1, [r7, #0]
 80078da:	71fb      	strb	r3, [r7, #7]
 80078dc:	4613      	mov	r3, r2
 80078de:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80078e0:	79fb      	ldrb	r3, [r7, #7]
 80078e2:	2b23      	cmp	r3, #35	@ 0x23
 80078e4:	d84a      	bhi.n	800797c <CDC_Control_FS+0xac>
 80078e6:	a201      	add	r2, pc, #4	@ (adr r2, 80078ec <CDC_Control_FS+0x1c>)
 80078e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ec:	0800797d 	.word	0x0800797d
 80078f0:	0800797d 	.word	0x0800797d
 80078f4:	0800797d 	.word	0x0800797d
 80078f8:	0800797d 	.word	0x0800797d
 80078fc:	0800797d 	.word	0x0800797d
 8007900:	0800797d 	.word	0x0800797d
 8007904:	0800797d 	.word	0x0800797d
 8007908:	0800797d 	.word	0x0800797d
 800790c:	0800797d 	.word	0x0800797d
 8007910:	0800797d 	.word	0x0800797d
 8007914:	0800797d 	.word	0x0800797d
 8007918:	0800797d 	.word	0x0800797d
 800791c:	0800797d 	.word	0x0800797d
 8007920:	0800797d 	.word	0x0800797d
 8007924:	0800797d 	.word	0x0800797d
 8007928:	0800797d 	.word	0x0800797d
 800792c:	0800797d 	.word	0x0800797d
 8007930:	0800797d 	.word	0x0800797d
 8007934:	0800797d 	.word	0x0800797d
 8007938:	0800797d 	.word	0x0800797d
 800793c:	0800797d 	.word	0x0800797d
 8007940:	0800797d 	.word	0x0800797d
 8007944:	0800797d 	.word	0x0800797d
 8007948:	0800797d 	.word	0x0800797d
 800794c:	0800797d 	.word	0x0800797d
 8007950:	0800797d 	.word	0x0800797d
 8007954:	0800797d 	.word	0x0800797d
 8007958:	0800797d 	.word	0x0800797d
 800795c:	0800797d 	.word	0x0800797d
 8007960:	0800797d 	.word	0x0800797d
 8007964:	0800797d 	.word	0x0800797d
 8007968:	0800797d 	.word	0x0800797d
 800796c:	0800797d 	.word	0x0800797d
 8007970:	0800797d 	.word	0x0800797d
 8007974:	0800797d 	.word	0x0800797d
 8007978:	0800797d 	.word	0x0800797d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800797c:	bf00      	nop
  }

  return (USBD_OK);
 800797e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007980:	4618      	mov	r0, r3
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007996:	6879      	ldr	r1, [r7, #4]
 8007998:	4805      	ldr	r0, [pc, #20]	@ (80079b0 <CDC_Receive_FS+0x24>)
 800799a:	f7fe fc03 	bl	80061a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800799e:	4804      	ldr	r0, [pc, #16]	@ (80079b0 <CDC_Receive_FS+0x24>)
 80079a0:	f7fe fc1e 	bl	80061e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80079a4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	20000240 	.word	0x20000240

080079b4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	4613      	mov	r3, r2
 80079c0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80079c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	371c      	adds	r7, #28
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
	...

080079d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	4603      	mov	r3, r0
 80079e0:	6039      	str	r1, [r7, #0]
 80079e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	2212      	movs	r2, #18
 80079e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80079ea:	4b03      	ldr	r3, [pc, #12]	@ (80079f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr
 80079f8:	200000c8 	.word	0x200000c8

080079fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	4603      	mov	r3, r0
 8007a04:	6039      	str	r1, [r7, #0]
 8007a06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2204      	movs	r2, #4
 8007a0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a0e:	4b03      	ldr	r3, [pc, #12]	@ (8007a1c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	200000dc 	.word	0x200000dc

08007a20 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	4603      	mov	r3, r0
 8007a28:	6039      	str	r1, [r7, #0]
 8007a2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a2c:	79fb      	ldrb	r3, [r7, #7]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d105      	bne.n	8007a3e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	4907      	ldr	r1, [pc, #28]	@ (8007a54 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a36:	4808      	ldr	r0, [pc, #32]	@ (8007a58 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a38:	f7ff fe1e 	bl	8007678 <USBD_GetString>
 8007a3c:	e004      	b.n	8007a48 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	4904      	ldr	r1, [pc, #16]	@ (8007a54 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a42:	4805      	ldr	r0, [pc, #20]	@ (8007a58 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a44:	f7ff fe18 	bl	8007678 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a48:	4b02      	ldr	r3, [pc, #8]	@ (8007a54 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	20000d1c 	.word	0x20000d1c
 8007a58:	0800825c 	.word	0x0800825c

08007a5c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	4603      	mov	r3, r0
 8007a64:	6039      	str	r1, [r7, #0]
 8007a66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	4904      	ldr	r1, [pc, #16]	@ (8007a7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a6c:	4804      	ldr	r0, [pc, #16]	@ (8007a80 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a6e:	f7ff fe03 	bl	8007678 <USBD_GetString>
  return USBD_StrDesc;
 8007a72:	4b02      	ldr	r3, [pc, #8]	@ (8007a7c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	20000d1c 	.word	0x20000d1c
 8007a80:	08008274 	.word	0x08008274

08007a84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	6039      	str	r1, [r7, #0]
 8007a8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	221a      	movs	r2, #26
 8007a94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007a96:	f000 f843 	bl	8007b20 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007a9a:	4b02      	ldr	r3, [pc, #8]	@ (8007aa4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	200000e0 	.word	0x200000e0

08007aa8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	4603      	mov	r3, r0
 8007ab0:	6039      	str	r1, [r7, #0]
 8007ab2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ab4:	79fb      	ldrb	r3, [r7, #7]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d105      	bne.n	8007ac6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007aba:	683a      	ldr	r2, [r7, #0]
 8007abc:	4907      	ldr	r1, [pc, #28]	@ (8007adc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007abe:	4808      	ldr	r0, [pc, #32]	@ (8007ae0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ac0:	f7ff fdda 	bl	8007678 <USBD_GetString>
 8007ac4:	e004      	b.n	8007ad0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ac6:	683a      	ldr	r2, [r7, #0]
 8007ac8:	4904      	ldr	r1, [pc, #16]	@ (8007adc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007aca:	4805      	ldr	r0, [pc, #20]	@ (8007ae0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007acc:	f7ff fdd4 	bl	8007678 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ad0:	4b02      	ldr	r3, [pc, #8]	@ (8007adc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	20000d1c 	.word	0x20000d1c
 8007ae0:	08008288 	.word	0x08008288

08007ae4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	4603      	mov	r3, r0
 8007aec:	6039      	str	r1, [r7, #0]
 8007aee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007af0:	79fb      	ldrb	r3, [r7, #7]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d105      	bne.n	8007b02 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	4907      	ldr	r1, [pc, #28]	@ (8007b18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007afa:	4808      	ldr	r0, [pc, #32]	@ (8007b1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007afc:	f7ff fdbc 	bl	8007678 <USBD_GetString>
 8007b00:	e004      	b.n	8007b0c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	4904      	ldr	r1, [pc, #16]	@ (8007b18 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007b06:	4805      	ldr	r0, [pc, #20]	@ (8007b1c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007b08:	f7ff fdb6 	bl	8007678 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b0c:	4b02      	ldr	r3, [pc, #8]	@ (8007b18 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20000d1c 	.word	0x20000d1c
 8007b1c:	08008294 	.word	0x08008294

08007b20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d009      	beq.n	8007b48 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b34:	2208      	movs	r2, #8
 8007b36:	4906      	ldr	r1, [pc, #24]	@ (8007b50 <Get_SerialNum+0x30>)
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f000 f80d 	bl	8007b58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b3e:	2204      	movs	r2, #4
 8007b40:	4904      	ldr	r1, [pc, #16]	@ (8007b54 <Get_SerialNum+0x34>)
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 f808 	bl	8007b58 <IntToUnicode>
  }
}
 8007b48:	bf00      	nop
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	200000e2 	.word	0x200000e2
 8007b54:	200000f2 	.word	0x200000f2

08007b58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	4613      	mov	r3, r2
 8007b64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007b66:	2300      	movs	r3, #0
 8007b68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	75fb      	strb	r3, [r7, #23]
 8007b6e:	e027      	b.n	8007bc0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	0f1b      	lsrs	r3, r3, #28
 8007b74:	2b09      	cmp	r3, #9
 8007b76:	d80b      	bhi.n	8007b90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	0f1b      	lsrs	r3, r3, #28
 8007b7c:	b2da      	uxtb	r2, r3
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
 8007b80:	005b      	lsls	r3, r3, #1
 8007b82:	4619      	mov	r1, r3
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	440b      	add	r3, r1
 8007b88:	3230      	adds	r2, #48	@ 0x30
 8007b8a:	b2d2      	uxtb	r2, r2
 8007b8c:	701a      	strb	r2, [r3, #0]
 8007b8e:	e00a      	b.n	8007ba6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	0f1b      	lsrs	r3, r3, #28
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	005b      	lsls	r3, r3, #1
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	440b      	add	r3, r1
 8007ba0:	3237      	adds	r2, #55	@ 0x37
 8007ba2:	b2d2      	uxtb	r2, r2
 8007ba4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	011b      	lsls	r3, r3, #4
 8007baa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007bac:	7dfb      	ldrb	r3, [r7, #23]
 8007bae:	005b      	lsls	r3, r3, #1
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	75fb      	strb	r3, [r7, #23]
 8007bc0:	7dfa      	ldrb	r2, [r7, #23]
 8007bc2:	79fb      	ldrb	r3, [r7, #7]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d3d3      	bcc.n	8007b70 <IntToUnicode+0x18>
  }
}
 8007bc8:	bf00      	nop
 8007bca:	bf00      	nop
 8007bcc:	371c      	adds	r7, #28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
	...

08007bd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08a      	sub	sp, #40	@ 0x28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007be0:	f107 0314 	add.w	r3, r7, #20
 8007be4:	2200      	movs	r2, #0
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	605a      	str	r2, [r3, #4]
 8007bea:	609a      	str	r2, [r3, #8]
 8007bec:	60da      	str	r2, [r3, #12]
 8007bee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007bf8:	d13a      	bne.n	8007c70 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	613b      	str	r3, [r7, #16]
 8007bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8007c78 <HAL_PCD_MspInit+0xa0>)
 8007c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c02:	4a1d      	ldr	r2, [pc, #116]	@ (8007c78 <HAL_PCD_MspInit+0xa0>)
 8007c04:	f043 0301 	orr.w	r3, r3, #1
 8007c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8007c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8007c78 <HAL_PCD_MspInit+0xa0>)
 8007c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	613b      	str	r3, [r7, #16]
 8007c14:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007c16:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c20:	2300      	movs	r3, #0
 8007c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c24:	2303      	movs	r3, #3
 8007c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007c28:	230a      	movs	r3, #10
 8007c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c2c:	f107 0314 	add.w	r3, r7, #20
 8007c30:	4619      	mov	r1, r3
 8007c32:	4812      	ldr	r0, [pc, #72]	@ (8007c7c <HAL_PCD_MspInit+0xa4>)
 8007c34:	f7f9 faaa 	bl	800118c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007c38:	4b0f      	ldr	r3, [pc, #60]	@ (8007c78 <HAL_PCD_MspInit+0xa0>)
 8007c3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c3c:	4a0e      	ldr	r2, [pc, #56]	@ (8007c78 <HAL_PCD_MspInit+0xa0>)
 8007c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c42:	6353      	str	r3, [r2, #52]	@ 0x34
 8007c44:	2300      	movs	r3, #0
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	4b0b      	ldr	r3, [pc, #44]	@ (8007c78 <HAL_PCD_MspInit+0xa0>)
 8007c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8007c78 <HAL_PCD_MspInit+0xa0>)
 8007c4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c52:	6453      	str	r3, [r2, #68]	@ 0x44
 8007c54:	4b08      	ldr	r3, [pc, #32]	@ (8007c78 <HAL_PCD_MspInit+0xa0>)
 8007c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c5c:	60fb      	str	r3, [r7, #12]
 8007c5e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007c60:	2200      	movs	r2, #0
 8007c62:	2100      	movs	r1, #0
 8007c64:	2043      	movs	r0, #67	@ 0x43
 8007c66:	f7f9 fa5a 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007c6a:	2043      	movs	r0, #67	@ 0x43
 8007c6c:	f7f9 fa73 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007c70:	bf00      	nop
 8007c72:	3728      	adds	r7, #40	@ 0x28
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	40023800 	.word	0x40023800
 8007c7c:	40020000 	.word	0x40020000

08007c80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007c94:	4619      	mov	r1, r3
 8007c96:	4610      	mov	r0, r2
 8007c98:	f7fe fb8b 	bl	80063b2 <USBD_LL_SetupStage>
}
 8007c9c:	bf00      	nop
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007cb6:	78fa      	ldrb	r2, [r7, #3]
 8007cb8:	6879      	ldr	r1, [r7, #4]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	00db      	lsls	r3, r3, #3
 8007cbe:	4413      	add	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	440b      	add	r3, r1
 8007cc4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	78fb      	ldrb	r3, [r7, #3]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	f7fe fbc5 	bl	800645c <USBD_LL_DataOutStage>
}
 8007cd2:	bf00      	nop
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b082      	sub	sp, #8
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007cec:	78fa      	ldrb	r2, [r7, #3]
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	00db      	lsls	r3, r3, #3
 8007cf4:	4413      	add	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	440b      	add	r3, r1
 8007cfa:	3320      	adds	r3, #32
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	78fb      	ldrb	r3, [r7, #3]
 8007d00:	4619      	mov	r1, r3
 8007d02:	f7fe fc5e 	bl	80065c2 <USBD_LL_DataInStage>
}
 8007d06:	bf00      	nop
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b082      	sub	sp, #8
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7fe fd98 	bl	8006852 <USBD_LL_SOF>
}
 8007d22:	bf00      	nop
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b084      	sub	sp, #16
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d32:	2301      	movs	r3, #1
 8007d34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	79db      	ldrb	r3, [r3, #7]
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d001      	beq.n	8007d42 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007d3e:	f7f8 fea9 	bl	8000a94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d48:	7bfa      	ldrb	r2, [r7, #15]
 8007d4a:	4611      	mov	r1, r2
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fe fd3c 	bl	80067ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fe fce4 	bl	8006726 <USBD_LL_Reset>
}
 8007d5e:	bf00      	nop
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
	...

08007d68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fe fd37 	bl	80067ea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	6812      	ldr	r2, [r2, #0]
 8007d8a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007d8e:	f043 0301 	orr.w	r3, r3, #1
 8007d92:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	7adb      	ldrb	r3, [r3, #11]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d005      	beq.n	8007da8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007d9c:	4b04      	ldr	r3, [pc, #16]	@ (8007db0 <HAL_PCD_SuspendCallback+0x48>)
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	4a03      	ldr	r2, [pc, #12]	@ (8007db0 <HAL_PCD_SuspendCallback+0x48>)
 8007da2:	f043 0306 	orr.w	r3, r3, #6
 8007da6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007da8:	bf00      	nop
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	e000ed00 	.word	0xe000ed00

08007db4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fe fd2d 	bl	8006822 <USBD_LL_Resume>
}
 8007dc8:	bf00      	nop
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007de2:	78fa      	ldrb	r2, [r7, #3]
 8007de4:	4611      	mov	r1, r2
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fe fd85 	bl	80068f6 <USBD_LL_IsoOUTIncomplete>
}
 8007dec:	bf00      	nop
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e06:	78fa      	ldrb	r2, [r7, #3]
 8007e08:	4611      	mov	r1, r2
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fe fd41 	bl	8006892 <USBD_LL_IsoINIncomplete>
}
 8007e10:	bf00      	nop
 8007e12:	3708      	adds	r7, #8
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fe fd97 	bl	800695a <USBD_LL_DevConnected>
}
 8007e2c:	bf00      	nop
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fe fd94 	bl	8006970 <USBD_LL_DevDisconnected>
}
 8007e48:	bf00      	nop
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d13c      	bne.n	8007eda <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007e60:	4a20      	ldr	r2, [pc, #128]	@ (8007ee4 <USBD_LL_Init+0x94>)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ee4 <USBD_LL_Init+0x94>)
 8007e6c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007e70:	4b1c      	ldr	r3, [pc, #112]	@ (8007ee4 <USBD_LL_Init+0x94>)
 8007e72:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007e76:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007e78:	4b1a      	ldr	r3, [pc, #104]	@ (8007ee4 <USBD_LL_Init+0x94>)
 8007e7a:	2204      	movs	r2, #4
 8007e7c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007e7e:	4b19      	ldr	r3, [pc, #100]	@ (8007ee4 <USBD_LL_Init+0x94>)
 8007e80:	2202      	movs	r2, #2
 8007e82:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007e84:	4b17      	ldr	r3, [pc, #92]	@ (8007ee4 <USBD_LL_Init+0x94>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007e8a:	4b16      	ldr	r3, [pc, #88]	@ (8007ee4 <USBD_LL_Init+0x94>)
 8007e8c:	2202      	movs	r2, #2
 8007e8e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007e90:	4b14      	ldr	r3, [pc, #80]	@ (8007ee4 <USBD_LL_Init+0x94>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007e96:	4b13      	ldr	r3, [pc, #76]	@ (8007ee4 <USBD_LL_Init+0x94>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007e9c:	4b11      	ldr	r3, [pc, #68]	@ (8007ee4 <USBD_LL_Init+0x94>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007ea2:	4b10      	ldr	r3, [pc, #64]	@ (8007ee4 <USBD_LL_Init+0x94>)
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8007ee4 <USBD_LL_Init+0x94>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007eae:	480d      	ldr	r0, [pc, #52]	@ (8007ee4 <USBD_LL_Init+0x94>)
 8007eb0:	f7f9 faf0 	bl	8001494 <HAL_PCD_Init>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007eba:	f7f8 fdeb 	bl	8000a94 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007ebe:	2180      	movs	r1, #128	@ 0x80
 8007ec0:	4808      	ldr	r0, [pc, #32]	@ (8007ee4 <USBD_LL_Init+0x94>)
 8007ec2:	f7fa fd1a 	bl	80028fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007ec6:	2240      	movs	r2, #64	@ 0x40
 8007ec8:	2100      	movs	r1, #0
 8007eca:	4806      	ldr	r0, [pc, #24]	@ (8007ee4 <USBD_LL_Init+0x94>)
 8007ecc:	f7fa fcce 	bl	800286c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007ed0:	2280      	movs	r2, #128	@ 0x80
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	4803      	ldr	r0, [pc, #12]	@ (8007ee4 <USBD_LL_Init+0x94>)
 8007ed6:	f7fa fcc9 	bl	800286c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	20000f1c 	.word	0x20000f1c

08007ee8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7f9 fbd7 	bl	80016b2 <HAL_PCD_Start>
 8007f04:	4603      	mov	r3, r0
 8007f06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f08:	7bfb      	ldrb	r3, [r7, #15]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 f942 	bl	8008194 <USBD_Get_USB_Status>
 8007f10:	4603      	mov	r3, r0
 8007f12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b084      	sub	sp, #16
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
 8007f26:	4608      	mov	r0, r1
 8007f28:	4611      	mov	r1, r2
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	70fb      	strb	r3, [r7, #3]
 8007f30:	460b      	mov	r3, r1
 8007f32:	70bb      	strb	r3, [r7, #2]
 8007f34:	4613      	mov	r3, r2
 8007f36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007f46:	78bb      	ldrb	r3, [r7, #2]
 8007f48:	883a      	ldrh	r2, [r7, #0]
 8007f4a:	78f9      	ldrb	r1, [r7, #3]
 8007f4c:	f7fa f8ab 	bl	80020a6 <HAL_PCD_EP_Open>
 8007f50:	4603      	mov	r3, r0
 8007f52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f000 f91c 	bl	8008194 <USBD_Get_USB_Status>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f60:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	460b      	mov	r3, r1
 8007f74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f84:	78fa      	ldrb	r2, [r7, #3]
 8007f86:	4611      	mov	r1, r2
 8007f88:	4618      	mov	r0, r3
 8007f8a:	f7fa f8f4 	bl	8002176 <HAL_PCD_EP_Close>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 f8fd 	bl	8008194 <USBD_Get_USB_Status>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3710      	adds	r7, #16
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007fc2:	78fa      	ldrb	r2, [r7, #3]
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fa f9ac 	bl	8002324 <HAL_PCD_EP_SetStall>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 f8de 	bl	8008194 <USBD_Get_USB_Status>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	460b      	mov	r3, r1
 8007ff0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008000:	78fa      	ldrb	r2, [r7, #3]
 8008002:	4611      	mov	r1, r2
 8008004:	4618      	mov	r0, r3
 8008006:	f7fa f9f0 	bl	80023ea <HAL_PCD_EP_ClrStall>
 800800a:	4603      	mov	r3, r0
 800800c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800800e:	7bfb      	ldrb	r3, [r7, #15]
 8008010:	4618      	mov	r0, r3
 8008012:	f000 f8bf 	bl	8008194 <USBD_Get_USB_Status>
 8008016:	4603      	mov	r3, r0
 8008018:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800801a:	7bbb      	ldrb	r3, [r7, #14]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	460b      	mov	r3, r1
 800802e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008036:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008038:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800803c:	2b00      	cmp	r3, #0
 800803e:	da0b      	bge.n	8008058 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008040:	78fb      	ldrb	r3, [r7, #3]
 8008042:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008046:	68f9      	ldr	r1, [r7, #12]
 8008048:	4613      	mov	r3, r2
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	4413      	add	r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	440b      	add	r3, r1
 8008052:	3316      	adds	r3, #22
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	e00b      	b.n	8008070 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008058:	78fb      	ldrb	r3, [r7, #3]
 800805a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800805e:	68f9      	ldr	r1, [r7, #12]
 8008060:	4613      	mov	r3, r2
 8008062:	00db      	lsls	r3, r3, #3
 8008064:	4413      	add	r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	440b      	add	r3, r1
 800806a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800806e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	460b      	mov	r3, r1
 8008086:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008096:	78fa      	ldrb	r2, [r7, #3]
 8008098:	4611      	mov	r1, r2
 800809a:	4618      	mov	r0, r3
 800809c:	f7f9 ffdf 	bl	800205e <HAL_PCD_SetAddress>
 80080a0:	4603      	mov	r3, r0
 80080a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 f874 	bl	8008194 <USBD_Get_USB_Status>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b086      	sub	sp, #24
 80080be:	af00      	add	r7, sp, #0
 80080c0:	60f8      	str	r0, [r7, #12]
 80080c2:	607a      	str	r2, [r7, #4]
 80080c4:	603b      	str	r3, [r7, #0]
 80080c6:	460b      	mov	r3, r1
 80080c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ca:	2300      	movs	r3, #0
 80080cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80080d8:	7af9      	ldrb	r1, [r7, #11]
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	f7fa f8e7 	bl	80022b0 <HAL_PCD_EP_Transmit>
 80080e2:	4603      	mov	r3, r0
 80080e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080e6:	7dfb      	ldrb	r3, [r7, #23]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 f853 	bl	8008194 <USBD_Get_USB_Status>
 80080ee:	4603      	mov	r3, r0
 80080f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80080f2:	7dbb      	ldrb	r3, [r7, #22]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3718      	adds	r7, #24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	607a      	str	r2, [r7, #4]
 8008106:	603b      	str	r3, [r7, #0]
 8008108:	460b      	mov	r3, r1
 800810a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800810c:	2300      	movs	r3, #0
 800810e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008110:	2300      	movs	r3, #0
 8008112:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800811a:	7af9      	ldrb	r1, [r7, #11]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	687a      	ldr	r2, [r7, #4]
 8008120:	f7fa f873 	bl	800220a <HAL_PCD_EP_Receive>
 8008124:	4603      	mov	r3, r0
 8008126:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008128:	7dfb      	ldrb	r3, [r7, #23]
 800812a:	4618      	mov	r0, r3
 800812c:	f000 f832 	bl	8008194 <USBD_Get_USB_Status>
 8008130:	4603      	mov	r3, r0
 8008132:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008134:	7dbb      	ldrb	r3, [r7, #22]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3718      	adds	r7, #24
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b082      	sub	sp, #8
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
 8008146:	460b      	mov	r3, r1
 8008148:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008150:	78fa      	ldrb	r2, [r7, #3]
 8008152:	4611      	mov	r1, r2
 8008154:	4618      	mov	r0, r3
 8008156:	f7fa f893 	bl	8002280 <HAL_PCD_EP_GetRxCount>
 800815a:	4603      	mov	r3, r0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800816c:	4b03      	ldr	r3, [pc, #12]	@ (800817c <USBD_static_malloc+0x18>)
}
 800816e:	4618      	mov	r0, r3
 8008170:	370c      	adds	r7, #12
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	20001400 	.word	0x20001400

08008180 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]

}
 8008188:	bf00      	nop
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081a2:	79fb      	ldrb	r3, [r7, #7]
 80081a4:	2b03      	cmp	r3, #3
 80081a6:	d817      	bhi.n	80081d8 <USBD_Get_USB_Status+0x44>
 80081a8:	a201      	add	r2, pc, #4	@ (adr r2, 80081b0 <USBD_Get_USB_Status+0x1c>)
 80081aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ae:	bf00      	nop
 80081b0:	080081c1 	.word	0x080081c1
 80081b4:	080081c7 	.word	0x080081c7
 80081b8:	080081cd 	.word	0x080081cd
 80081bc:	080081d3 	.word	0x080081d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	73fb      	strb	r3, [r7, #15]
    break;
 80081c4:	e00b      	b.n	80081de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081c6:	2303      	movs	r3, #3
 80081c8:	73fb      	strb	r3, [r7, #15]
    break;
 80081ca:	e008      	b.n	80081de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081cc:	2301      	movs	r3, #1
 80081ce:	73fb      	strb	r3, [r7, #15]
    break;
 80081d0:	e005      	b.n	80081de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081d2:	2303      	movs	r3, #3
 80081d4:	73fb      	strb	r3, [r7, #15]
    break;
 80081d6:	e002      	b.n	80081de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80081d8:	2303      	movs	r3, #3
 80081da:	73fb      	strb	r3, [r7, #15]
    break;
 80081dc:	bf00      	nop
  }
  return usb_status;
 80081de:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3714      	adds	r7, #20
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <memset>:
 80081ec:	4402      	add	r2, r0
 80081ee:	4603      	mov	r3, r0
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d100      	bne.n	80081f6 <memset+0xa>
 80081f4:	4770      	bx	lr
 80081f6:	f803 1b01 	strb.w	r1, [r3], #1
 80081fa:	e7f9      	b.n	80081f0 <memset+0x4>

080081fc <__libc_init_array>:
 80081fc:	b570      	push	{r4, r5, r6, lr}
 80081fe:	4d0d      	ldr	r5, [pc, #52]	@ (8008234 <__libc_init_array+0x38>)
 8008200:	4c0d      	ldr	r4, [pc, #52]	@ (8008238 <__libc_init_array+0x3c>)
 8008202:	1b64      	subs	r4, r4, r5
 8008204:	10a4      	asrs	r4, r4, #2
 8008206:	2600      	movs	r6, #0
 8008208:	42a6      	cmp	r6, r4
 800820a:	d109      	bne.n	8008220 <__libc_init_array+0x24>
 800820c:	4d0b      	ldr	r5, [pc, #44]	@ (800823c <__libc_init_array+0x40>)
 800820e:	4c0c      	ldr	r4, [pc, #48]	@ (8008240 <__libc_init_array+0x44>)
 8008210:	f000 f818 	bl	8008244 <_init>
 8008214:	1b64      	subs	r4, r4, r5
 8008216:	10a4      	asrs	r4, r4, #2
 8008218:	2600      	movs	r6, #0
 800821a:	42a6      	cmp	r6, r4
 800821c:	d105      	bne.n	800822a <__libc_init_array+0x2e>
 800821e:	bd70      	pop	{r4, r5, r6, pc}
 8008220:	f855 3b04 	ldr.w	r3, [r5], #4
 8008224:	4798      	blx	r3
 8008226:	3601      	adds	r6, #1
 8008228:	e7ee      	b.n	8008208 <__libc_init_array+0xc>
 800822a:	f855 3b04 	ldr.w	r3, [r5], #4
 800822e:	4798      	blx	r3
 8008230:	3601      	adds	r6, #1
 8008232:	e7f2      	b.n	800821a <__libc_init_array+0x1e>
 8008234:	080082bc 	.word	0x080082bc
 8008238:	080082bc 	.word	0x080082bc
 800823c:	080082bc 	.word	0x080082bc
 8008240:	080082c0 	.word	0x080082c0

08008244 <_init>:
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	bf00      	nop
 8008248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800824a:	bc08      	pop	{r3}
 800824c:	469e      	mov	lr, r3
 800824e:	4770      	bx	lr

08008250 <_fini>:
 8008250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008252:	bf00      	nop
 8008254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008256:	bc08      	pop	{r3}
 8008258:	469e      	mov	lr, r3
 800825a:	4770      	bx	lr
