
tcddriver2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad48  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  0800aee8  0800aee8  0000bee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b220  0800b220  0000d184  2**0
                  CONTENTS
  4 .ARM          00000008  0800b220  0800b220  0000c220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b228  0800b228  0000d184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b228  0800b228  0000c228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b22c  0800b22c  0000c22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  0800b230  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046e8  20000184  0800b3b4  0000d184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000486c  0800b3b4  0000d86c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001507e  00000000  00000000  0000d1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000387f  00000000  00000000  00022232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  00025ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000efc  00000000  00000000  00026e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afbc  00000000  00000000  00027d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184db  00000000  00000000  00042cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cd2a  00000000  00000000  0005b1a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7ecd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ca0  00000000  00000000  000f7f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000fdbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000184 	.word	0x20000184
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800aed0 	.word	0x0800aed0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000188 	.word	0x20000188
 80001dc:	0800aed0 	.word	0x0800aed0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f001 f8e2 	bl	800175c <HAL_Init>

  /* USER CODE BEGIN Init */
  InitializeHeaderFooter();
 8000598:	f000 fc70 	bl	8000e7c <InitializeHeaderFooter>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f854 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 fb22 	bl	8000be8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 fb00 	bl	8000ba8 <MX_DMA_Init>
  MX_TIM2_Init();
 80005a8:	f000 f90c 	bl	80007c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005ac:	f000 f982 	bl	80008b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005b0:	f000 f9f6 	bl	80009a0 <MX_TIM4_Init>
  MX_TIM5_Init();
 80005b4:	f000 fa68 	bl	8000a88 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 80005b8:	f008 fd04 	bl	8008fc4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80005bc:	f000 f8b0 	bl	8000720 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //ICG
 80005c0:	2100      	movs	r1, #0
 80005c2:	4818      	ldr	r0, [pc, #96]	@ (8000624 <main+0x94>)
 80005c4:	f004 fb40 	bl	8004c48 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay
 80005c8:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <main+0x94>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2242      	movs	r2, #66	@ 0x42
 80005ce:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
 80005d0:	2100      	movs	r1, #0
 80005d2:	4815      	ldr	r0, [pc, #84]	@ (8000628 <main+0x98>)
 80005d4:	f004 fb38 	bl	8004c48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
 80005d8:	210c      	movs	r1, #12
 80005da:	4814      	ldr	r0, [pc, #80]	@ (800062c <main+0x9c>)
 80005dc:	f004 fb34 	bl	8004c48 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH
 80005e0:	2108      	movs	r1, #8
 80005e2:	4813      	ldr	r0, [pc, #76]	@ (8000630 <main+0xa0>)
 80005e4:	f004 fb30 	bl	8004c48 <HAL_TIM_PWM_Start>

  if (!start_command_received) {
 80005e8:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <main+0xa4>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d107      	bne.n	8000602 <main+0x72>
  CDC_Transmit_FS("Target Ready\r\n",14);
 80005f2:	210e      	movs	r1, #14
 80005f4:	4810      	ldr	r0, [pc, #64]	@ (8000638 <main+0xa8>)
 80005f6:	f008 fda9 	bl	800914c <CDC_Transmit_FS>
  HAL_Delay(1000);}
 80005fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005fe:	f001 f91f 	bl	8001840 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) CCDPixelBuffer, CCD_PIXEL_BUFFER_SIZE);

	  if (start_command_received || continuous_enabled) {
 8000602:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <main+0xa4>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	2b00      	cmp	r3, #0
 800060a:	d104      	bne.n	8000616 <main+0x86>
 800060c:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <main+0xac>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0f5      	beq.n	8000602 <main+0x72>
		  //if the user sends a start string it will initiate the dma
	    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)CCDPixelBuffer, CCD_PIXEL_BUFFER_SIZE);
 8000616:	f241 7270 	movw	r2, #6000	@ 0x1770
 800061a:	4909      	ldr	r1, [pc, #36]	@ (8000640 <main+0xb0>)
 800061c:	4809      	ldr	r0, [pc, #36]	@ (8000644 <main+0xb4>)
 800061e:	f001 f977 	bl	8001910 <HAL_ADC_Start_DMA>
	  if (start_command_received || continuous_enabled) {
 8000622:	e7ee      	b.n	8000602 <main+0x72>
 8000624:	20000248 	.word	0x20000248
 8000628:	20000290 	.word	0x20000290
 800062c:	200002d8 	.word	0x200002d8
 8000630:	20000320 	.word	0x20000320
 8000634:	20003330 	.word	0x20003330
 8000638:	0800aee8 	.word	0x0800aee8
 800063c:	20003331 	.word	0x20003331
 8000640:	20000450 	.word	0x20000450
 8000644:	200001a0 	.word	0x200001a0

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	@ 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f009 fb7b 	bl	8009d52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <SystemClock_Config+0xd0>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	4a28      	ldr	r2, [pc, #160]	@ (8000718 <SystemClock_Config+0xd0>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	@ 0x40
 800067c:	4b26      	ldr	r3, [pc, #152]	@ (8000718 <SystemClock_Config+0xd0>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b23      	ldr	r3, [pc, #140]	@ (800071c <SystemClock_Config+0xd4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000694:	4a21      	ldr	r2, [pc, #132]	@ (800071c <SystemClock_Config+0xd4>)
 8000696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1f      	ldr	r3, [pc, #124]	@ (800071c <SystemClock_Config+0xd4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a8:	2301      	movs	r3, #1
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006bc:	2319      	movs	r3, #25
 80006be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ca:	2307      	movs	r3, #7
 80006cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 fde0 	bl	8004298 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006de:	f000 fd6d 	bl	80011bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f004 f842 	bl	8004788 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800070a:	f000 fd57 	bl	80011bc <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	@ 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000726:	463b      	mov	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000732:	4b22      	ldr	r3, [pc, #136]	@ (80007bc <MX_ADC1_Init+0x9c>)
 8000734:	4a22      	ldr	r2, [pc, #136]	@ (80007c0 <MX_ADC1_Init+0xa0>)
 8000736:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000738:	4b20      	ldr	r3, [pc, #128]	@ (80007bc <MX_ADC1_Init+0x9c>)
 800073a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800073e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000740:	4b1e      	ldr	r3, [pc, #120]	@ (80007bc <MX_ADC1_Init+0x9c>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <MX_ADC1_Init+0x9c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800074c:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <MX_ADC1_Init+0x9c>)
 800074e:	2200      	movs	r2, #0
 8000750:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000752:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <MX_ADC1_Init+0x9c>)
 8000754:	2200      	movs	r2, #0
 8000756:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800075a:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <MX_ADC1_Init+0x9c>)
 800075c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000760:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8000762:	4b16      	ldr	r3, [pc, #88]	@ (80007bc <MX_ADC1_Init+0x9c>)
 8000764:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 8000768:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800076a:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <MX_ADC1_Init+0x9c>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <MX_ADC1_Init+0x9c>)
 8000772:	2201      	movs	r2, #1
 8000774:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_ADC1_Init+0x9c>)
 8000778:	2201      	movs	r2, #1
 800077a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800077e:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_ADC1_Init+0x9c>)
 8000780:	2201      	movs	r2, #1
 8000782:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000784:	480d      	ldr	r0, [pc, #52]	@ (80007bc <MX_ADC1_Init+0x9c>)
 8000786:	f001 f87f 	bl	8001888 <HAL_ADC_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000790:	f000 fd14 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000794:	2303      	movs	r3, #3
 8000796:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000798:	2301      	movs	r3, #1
 800079a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a0:	463b      	mov	r3, r7
 80007a2:	4619      	mov	r1, r3
 80007a4:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_ADC1_Init+0x9c>)
 80007a6:	f001 fa11 	bl	8001bcc <HAL_ADC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80007b0:	f000 fd04 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200001a0 	.word	0x200001a0
 80007c0:	40012000 	.word	0x40012000

080007c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08e      	sub	sp, #56	@ 0x38
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d8:	f107 0320 	add.w	r3, r7, #32
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
 80007f0:	615a      	str	r2, [r3, #20]
 80007f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f4:	4b2d      	ldr	r3, [pc, #180]	@ (80008ac <MX_TIM2_Init+0xe8>)
 80007f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007fc:	4b2b      	ldr	r3, [pc, #172]	@ (80008ac <MX_TIM2_Init+0xe8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b2a      	ldr	r3, [pc, #168]	@ (80008ac <MX_TIM2_Init+0xe8>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 525000-1;
 8000808:	4b28      	ldr	r3, [pc, #160]	@ (80008ac <MX_TIM2_Init+0xe8>)
 800080a:	4a29      	ldr	r2, [pc, #164]	@ (80008b0 <MX_TIM2_Init+0xec>)
 800080c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080e:	4b27      	ldr	r3, [pc, #156]	@ (80008ac <MX_TIM2_Init+0xe8>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000814:	4b25      	ldr	r3, [pc, #148]	@ (80008ac <MX_TIM2_Init+0xe8>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800081a:	4824      	ldr	r0, [pc, #144]	@ (80008ac <MX_TIM2_Init+0xe8>)
 800081c:	f004 f96c 	bl	8004af8 <HAL_TIM_Base_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000826:	f000 fcc9 	bl	80011bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800082e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000830:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000834:	4619      	mov	r1, r3
 8000836:	481d      	ldr	r0, [pc, #116]	@ (80008ac <MX_TIM2_Init+0xe8>)
 8000838:	f004 fbdc 	bl	8004ff4 <HAL_TIM_ConfigClockSource>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000842:	f000 fcbb 	bl	80011bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000846:	4819      	ldr	r0, [pc, #100]	@ (80008ac <MX_TIM2_Init+0xe8>)
 8000848:	f004 f9a5 	bl	8004b96 <HAL_TIM_PWM_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000852:	f000 fcb3 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8000856:	2310      	movs	r3, #16
 8000858:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800085a:	2380      	movs	r3, #128	@ 0x80
 800085c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	4619      	mov	r1, r3
 8000864:	4811      	ldr	r0, [pc, #68]	@ (80008ac <MX_TIM2_Init+0xe8>)
 8000866:	f005 f837 	bl	80058d8 <HAL_TIMEx_MasterConfigSynchronization>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000870:	f000 fca4 	bl	80011bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000874:	2360      	movs	r3, #96	@ 0x60
 8000876:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 8820-1;
 8000878:	f242 2373 	movw	r3, #8819	@ 0x2273
 800087c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2200      	movs	r2, #0
 800088a:	4619      	mov	r1, r3
 800088c:	4807      	ldr	r0, [pc, #28]	@ (80008ac <MX_TIM2_Init+0xe8>)
 800088e:	f004 faef 	bl	8004e70 <HAL_TIM_PWM_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000898:	f000 fc90 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800089c:	4803      	ldr	r0, [pc, #12]	@ (80008ac <MX_TIM2_Init+0xe8>)
 800089e:	f000 fd93 	bl	80013c8 <HAL_TIM_MspPostInit>

}
 80008a2:	bf00      	nop
 80008a4:	3738      	adds	r7, #56	@ 0x38
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000248 	.word	0x20000248
 80008b0:	000802c7 	.word	0x000802c7

080008b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08e      	sub	sp, #56	@ 0x38
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c8:	f107 0320 	add.w	r3, r7, #32
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
 80008e0:	615a      	str	r2, [r3, #20]
 80008e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000998 <MX_TIM3_Init+0xe4>)
 80008e6:	4a2d      	ldr	r2, [pc, #180]	@ (800099c <MX_TIM3_Init+0xe8>)
 80008e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000998 <MX_TIM3_Init+0xe4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f0:	4b29      	ldr	r3, [pc, #164]	@ (8000998 <MX_TIM3_Init+0xe4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168-1;
 80008f6:	4b28      	ldr	r3, [pc, #160]	@ (8000998 <MX_TIM3_Init+0xe4>)
 80008f8:	22a7      	movs	r2, #167	@ 0xa7
 80008fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fc:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <MX_TIM3_Init+0xe4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000902:	4b25      	ldr	r3, [pc, #148]	@ (8000998 <MX_TIM3_Init+0xe4>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000908:	4823      	ldr	r0, [pc, #140]	@ (8000998 <MX_TIM3_Init+0xe4>)
 800090a:	f004 f8f5 	bl	8004af8 <HAL_TIM_Base_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000914:	f000 fc52 	bl	80011bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000918:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800091e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000922:	4619      	mov	r1, r3
 8000924:	481c      	ldr	r0, [pc, #112]	@ (8000998 <MX_TIM3_Init+0xe4>)
 8000926:	f004 fb65 	bl	8004ff4 <HAL_TIM_ConfigClockSource>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000930:	f000 fc44 	bl	80011bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000934:	4818      	ldr	r0, [pc, #96]	@ (8000998 <MX_TIM3_Init+0xe4>)
 8000936:	f004 f92e 	bl	8004b96 <HAL_TIM_PWM_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000940:	f000 fc3c 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800094c:	f107 0320 	add.w	r3, r7, #32
 8000950:	4619      	mov	r1, r3
 8000952:	4811      	ldr	r0, [pc, #68]	@ (8000998 <MX_TIM3_Init+0xe4>)
 8000954:	f004 ffc0 	bl	80058d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800095e:	f000 fc2d 	bl	80011bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000962:	2360      	movs	r3, #96	@ 0x60
 8000964:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 84-1;
 8000966:	2353      	movs	r3, #83	@ 0x53
 8000968:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	4619      	mov	r1, r3
 8000978:	4807      	ldr	r0, [pc, #28]	@ (8000998 <MX_TIM3_Init+0xe4>)
 800097a:	f004 fa79 	bl	8004e70 <HAL_TIM_PWM_ConfigChannel>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000984:	f000 fc1a 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000988:	4803      	ldr	r0, [pc, #12]	@ (8000998 <MX_TIM3_Init+0xe4>)
 800098a:	f000 fd1d 	bl	80013c8 <HAL_TIM_MspPostInit>

}
 800098e:	bf00      	nop
 8000990:	3738      	adds	r7, #56	@ 0x38
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000290 	.word	0x20000290
 800099c:	40000400 	.word	0x40000400

080009a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08e      	sub	sp, #56	@ 0x38
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	f107 0320 	add.w	r3, r7, #32
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
 80009cc:	615a      	str	r2, [r3, #20]
 80009ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a80 <MX_TIM4_Init+0xe0>)
 80009d2:	4a2c      	ldr	r2, [pc, #176]	@ (8000a84 <MX_TIM4_Init+0xe4>)
 80009d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a80 <MX_TIM4_Init+0xe0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009dc:	4b28      	ldr	r3, [pc, #160]	@ (8000a80 <MX_TIM4_Init+0xe0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 336-1;
 80009e2:	4b27      	ldr	r3, [pc, #156]	@ (8000a80 <MX_TIM4_Init+0xe0>)
 80009e4:	f240 124f 	movw	r2, #335	@ 0x14f
 80009e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ea:	4b25      	ldr	r3, [pc, #148]	@ (8000a80 <MX_TIM4_Init+0xe0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f0:	4b23      	ldr	r3, [pc, #140]	@ (8000a80 <MX_TIM4_Init+0xe0>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009f6:	4822      	ldr	r0, [pc, #136]	@ (8000a80 <MX_TIM4_Init+0xe0>)
 80009f8:	f004 f87e 	bl	8004af8 <HAL_TIM_Base_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000a02:	f000 fbdb 	bl	80011bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a0c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a10:	4619      	mov	r1, r3
 8000a12:	481b      	ldr	r0, [pc, #108]	@ (8000a80 <MX_TIM4_Init+0xe0>)
 8000a14:	f004 faee 	bl	8004ff4 <HAL_TIM_ConfigClockSource>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000a1e:	f000 fbcd 	bl	80011bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a22:	4817      	ldr	r0, [pc, #92]	@ (8000a80 <MX_TIM4_Init+0xe0>)
 8000a24:	f004 f8b7 	bl	8004b96 <HAL_TIM_PWM_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000a2e:	f000 fbc5 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a3a:	f107 0320 	add.w	r3, r7, #32
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480f      	ldr	r0, [pc, #60]	@ (8000a80 <MX_TIM4_Init+0xe0>)
 8000a42:	f004 ff49 	bl	80058d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000a4c:	f000 fbb6 	bl	80011bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a50:	2360      	movs	r3, #96	@ 0x60
 8000a52:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 168-1;
 8000a54:	23a7      	movs	r3, #167	@ 0xa7
 8000a56:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	220c      	movs	r2, #12
 8000a64:	4619      	mov	r1, r3
 8000a66:	4806      	ldr	r0, [pc, #24]	@ (8000a80 <MX_TIM4_Init+0xe0>)
 8000a68:	f004 fa02 	bl	8004e70 <HAL_TIM_PWM_ConfigChannel>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000a72:	f000 fba3 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	3738      	adds	r7, #56	@ 0x38
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200002d8 	.word	0x200002d8
 8000a84:	40000800 	.word	0x40000800

08000a88 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b092      	sub	sp, #72	@ 0x48
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a8e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
 8000ac4:	615a      	str	r2, [r3, #20]
 8000ac6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ac8:	4b34      	ldr	r3, [pc, #208]	@ (8000b9c <MX_TIM5_Init+0x114>)
 8000aca:	4a35      	ldr	r2, [pc, #212]	@ (8000ba0 <MX_TIM5_Init+0x118>)
 8000acc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000ace:	4b33      	ldr	r3, [pc, #204]	@ (8000b9c <MX_TIM5_Init+0x114>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad4:	4b31      	ldr	r3, [pc, #196]	@ (8000b9c <MX_TIM5_Init+0x114>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 525000-1;
 8000ada:	4b30      	ldr	r3, [pc, #192]	@ (8000b9c <MX_TIM5_Init+0x114>)
 8000adc:	4a31      	ldr	r2, [pc, #196]	@ (8000ba4 <MX_TIM5_Init+0x11c>)
 8000ade:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b9c <MX_TIM5_Init+0x114>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b9c <MX_TIM5_Init+0x114>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000aec:	482b      	ldr	r0, [pc, #172]	@ (8000b9c <MX_TIM5_Init+0x114>)
 8000aee:	f004 f803 	bl	8004af8 <HAL_TIM_Base_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000af8:	f000 fb60 	bl	80011bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000afc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b00:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000b02:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b06:	4619      	mov	r1, r3
 8000b08:	4824      	ldr	r0, [pc, #144]	@ (8000b9c <MX_TIM5_Init+0x114>)
 8000b0a:	f004 fa73 	bl	8004ff4 <HAL_TIM_ConfigClockSource>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000b14:	f000 fb52 	bl	80011bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000b18:	4820      	ldr	r0, [pc, #128]	@ (8000b9c <MX_TIM5_Init+0x114>)
 8000b1a:	f004 f83c 	bl	8004b96 <HAL_TIM_PWM_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000b24:	f000 fb4a 	bl	80011bc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000b28:	2306      	movs	r3, #6
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000b30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	4819      	ldr	r0, [pc, #100]	@ (8000b9c <MX_TIM5_Init+0x114>)
 8000b38:	f004 fb23 	bl	8005182 <HAL_TIM_SlaveConfigSynchro>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM5_Init+0xbe>
  {
    Error_Handler();
 8000b42:	f000 fb3b 	bl	80011bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000b4a:	2380      	movs	r3, #128	@ 0x80
 8000b4c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	4811      	ldr	r0, [pc, #68]	@ (8000b9c <MX_TIM5_Init+0x114>)
 8000b56:	f004 febf 	bl	80058d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8000b60:	f000 fb2c 	bl	80011bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b64:	2360      	movs	r3, #96	@ 0x60
 8000b66:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 8347-1;
 8000b68:	f242 039a 	movw	r3, #8346	@ 0x209a
 8000b6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b76:	463b      	mov	r3, r7
 8000b78:	2208      	movs	r2, #8
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4807      	ldr	r0, [pc, #28]	@ (8000b9c <MX_TIM5_Init+0x114>)
 8000b7e:	f004 f977 	bl	8004e70 <HAL_TIM_PWM_ConfigChannel>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM5_Init+0x104>
  {
    Error_Handler();
 8000b88:	f000 fb18 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000b8c:	4803      	ldr	r0, [pc, #12]	@ (8000b9c <MX_TIM5_Init+0x114>)
 8000b8e:	f000 fc1b 	bl	80013c8 <HAL_TIM_MspPostInit>

}
 8000b92:	bf00      	nop
 8000b94:	3748      	adds	r7, #72	@ 0x48
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000320 	.word	0x20000320
 8000ba0:	40000c00 	.word	0x40000c00
 8000ba4:	000802c7 	.word	0x000802c7

08000ba8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <MX_DMA_Init+0x3c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a0b      	ldr	r2, [pc, #44]	@ (8000be4 <MX_DMA_Init+0x3c>)
 8000bb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b09      	ldr	r3, [pc, #36]	@ (8000be4 <MX_DMA_Init+0x3c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2038      	movs	r0, #56	@ 0x38
 8000bd0:	f001 fb77 	bl	80022c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bd4:	2038      	movs	r0, #56	@ 0x38
 8000bd6:	f001 fb90 	bl	80022fa <HAL_NVIC_EnableIRQ>

}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800

08000be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <MX_GPIO_Init+0x4c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c34 <MX_GPIO_Init+0x4c>)
 8000bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <MX_GPIO_Init+0x4c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <MX_GPIO_Init+0x4c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a08      	ldr	r2, [pc, #32]	@ (8000c34 <MX_GPIO_Init+0x4c>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <MX_GPIO_Init+0x4c>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800

08000c38 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	if(start_command_received == 1 && continuous_enabled == 0){
 8000c40:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <HAL_ADC_ConvCpltCallback+0x68>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d116      	bne.n	8000c78 <HAL_ADC_ConvCpltCallback+0x40>
 8000c4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d111      	bne.n	8000c78 <HAL_ADC_ConvCpltCallback+0x40>
		HAL_ADC_Stop_DMA(&hadc1); //stop the dma
 8000c54:	4814      	ldr	r0, [pc, #80]	@ (8000ca8 <HAL_ADC_ConvCpltCallback+0x70>)
 8000c56:	f000 ff4b 	bl	8001af0 <HAL_ADC_Stop_DMA>
		encodeData(CCDPixelBuffer,CCD_PIXEL_BUFFER_SIZE);
 8000c5a:	f241 7170 	movw	r1, #6000	@ 0x1770
 8000c5e:	4813      	ldr	r0, [pc, #76]	@ (8000cac <HAL_ADC_ConvCpltCallback+0x74>)
 8000c60:	f000 f968 	bl	8000f34 <encodeData>
		//CDC_Transmit_FS((uint8_t*)header,strlen(header));
		//memcpy((void*)headertest, (const void*)header, 200);
		//CDC_Transmit_FS((uint8_t*)headertest,200);
		CDC_Transmit_FS((uint8_t*) CCDPixelBuffer, CCD_PIXEL_BUFFER_SIZE);
 8000c64:	f241 7170 	movw	r1, #6000	@ 0x1770
 8000c68:	4810      	ldr	r0, [pc, #64]	@ (8000cac <HAL_ADC_ConvCpltCallback+0x74>)
 8000c6a:	f008 fa6f 	bl	800914c <CDC_Transmit_FS>
		//CDC_Transmit_FS((uint8_t*)footer, strlen(footer));
		//IdentifySpectrum(CCDPixelBuffer, CCD_PIXEL_BUFFER_SIZE, 3100);// the last value is the threshold
		start_command_received = 0; // Set the flag
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <HAL_ADC_ConvCpltCallback+0x68>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
	if(start_command_received == 1 && continuous_enabled == 0){
 8000c74:	bf00      	nop
	}
	else if(start_command_received == 0 && continuous_enabled == 1){
		CDC_Transmit_FS((uint8_t*) CCDPixelBuffer, CCD_PIXEL_BUFFER_SIZE);
	}
}
 8000c76:	e00e      	b.n	8000c96 <HAL_ADC_ConvCpltCallback+0x5e>
	else if(start_command_received == 0 && continuous_enabled == 1){
 8000c78:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <HAL_ADC_ConvCpltCallback+0x68>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d109      	bne.n	8000c96 <HAL_ADC_ConvCpltCallback+0x5e>
 8000c82:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d104      	bne.n	8000c96 <HAL_ADC_ConvCpltCallback+0x5e>
		CDC_Transmit_FS((uint8_t*) CCDPixelBuffer, CCD_PIXEL_BUFFER_SIZE);
 8000c8c:	f241 7170 	movw	r1, #6000	@ 0x1770
 8000c90:	4806      	ldr	r0, [pc, #24]	@ (8000cac <HAL_ADC_ConvCpltCallback+0x74>)
 8000c92:	f008 fa5b 	bl	800914c <CDC_Transmit_FS>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20003330 	.word	0x20003330
 8000ca4:	20003331 	.word	0x20003331
 8000ca8:	200001a0 	.word	0x200001a0
 8000cac:	20000450 	.word	0x20000450

08000cb0 <CDCReceiveCallback>:

//when the stm receives anything, it checks if it is the string start
void CDCReceiveCallback(uint8_t* Buf, uint32_t Len) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	@ 0x30
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
    // Ensure the buffer is null-terminated
    Buf[Len] = '\0';
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]

    // Check for the "start" command
    if (strncmp((char*)Buf, "start", 5) == 0) {
 8000cc4:	2205      	movs	r2, #5
 8000cc6:	4957      	ldr	r1, [pc, #348]	@ (8000e24 <CDCReceiveCallback+0x174>)
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f009 f84a 	bl	8009d62 <strncmp>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d106      	bne.n	8000ce2 <CDCReceiveCallback+0x32>
        start_command_received = 1; // Set the flag
 8000cd4:	4b54      	ldr	r3, [pc, #336]	@ (8000e28 <CDCReceiveCallback+0x178>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
        continuous_enabled = 0;
 8000cda:	4b54      	ldr	r3, [pc, #336]	@ (8000e2c <CDCReceiveCallback+0x17c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
            else if (strcmp(command, "IT") == 0) {
                CalculateAndSetIntegrationTime(param);
            }
        }
    }
}
 8000ce0:	e09c      	b.n	8000e1c <CDCReceiveCallback+0x16c>
    } else if(strncmp((char*)Buf, "STOP", 5) == 0) {
 8000ce2:	4953      	ldr	r1, [pc, #332]	@ (8000e30 <CDCReceiveCallback+0x180>)
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff fa7b 	bl	80001e0 <strcmp>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d109      	bne.n	8000d04 <CDCReceiveCallback+0x54>
        start_command_received = 0; // Set the flag
 8000cf0:	4b4d      	ldr	r3, [pc, #308]	@ (8000e28 <CDCReceiveCallback+0x178>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
        continuous_enabled = 0;
 8000cf6:	4b4d      	ldr	r3, [pc, #308]	@ (8000e2c <CDCReceiveCallback+0x17c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
        HAL_ADC_Stop_DMA(&hadc1);
 8000cfc:	484d      	ldr	r0, [pc, #308]	@ (8000e34 <CDCReceiveCallback+0x184>)
 8000cfe:	f000 fef7 	bl	8001af0 <HAL_ADC_Stop_DMA>
}
 8000d02:	e08b      	b.n	8000e1c <CDCReceiveCallback+0x16c>
        char *command = strtok((char*)Buf, ":");
 8000d04:	494c      	ldr	r1, [pc, #304]	@ (8000e38 <CDCReceiveCallback+0x188>)
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f009 f83e 	bl	8009d88 <strtok>
 8000d0c:	62f8      	str	r0, [r7, #44]	@ 0x2c
        char *param_str = strtok(NULL, ":");
 8000d0e:	494a      	ldr	r1, [pc, #296]	@ (8000e38 <CDCReceiveCallback+0x188>)
 8000d10:	2000      	movs	r0, #0
 8000d12:	f009 f839 	bl	8009d88 <strtok>
 8000d16:	62b8      	str	r0, [r7, #40]	@ 0x28
        if (command && param_str) {
 8000d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d07e      	beq.n	8000e1c <CDCReceiveCallback+0x16c>
 8000d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d07b      	beq.n	8000e1c <CDCReceiveCallback+0x16c>
            uint32_t param = atoi(param_str);
 8000d24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000d26:	f008 fe53 	bl	80099d0 <atoi>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24
            if (strcmp(command, "CONT") == 0) {
 8000d2e:	4943      	ldr	r1, [pc, #268]	@ (8000e3c <CDCReceiveCallback+0x18c>)
 8000d30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000d32:	f7ff fa55 	bl	80001e0 <strcmp>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d109      	bne.n	8000d50 <CDCReceiveCallback+0xa0>
                        	CalculateAndSetIntegrationTime(param);
 8000d3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d3e:	f000 f889 	bl	8000e54 <CalculateAndSetIntegrationTime>
                        	continuous_enabled = 1;
 8000d42:	4b3a      	ldr	r3, [pc, #232]	@ (8000e2c <CDCReceiveCallback+0x17c>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	701a      	strb	r2, [r3, #0]
                        	start_command_received = 0;
 8000d48:	4b37      	ldr	r3, [pc, #220]	@ (8000e28 <CDCReceiveCallback+0x178>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
}
 8000d4e:	e065      	b.n	8000e1c <CDCReceiveCallback+0x16c>
            else if (strcmp(command, "SH") == 0) {
 8000d50:	493b      	ldr	r1, [pc, #236]	@ (8000e40 <CDCReceiveCallback+0x190>)
 8000d52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000d54:	f7ff fa44 	bl	80001e0 <strcmp>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d111      	bne.n	8000d82 <CDCReceiveCallback+0xd2>
                char *pulse_str = strtok(NULL, ":");
 8000d5e:	4936      	ldr	r1, [pc, #216]	@ (8000e38 <CDCReceiveCallback+0x188>)
 8000d60:	2000      	movs	r0, #0
 8000d62:	f009 f811 	bl	8009d88 <strtok>
 8000d66:	6138      	str	r0, [r7, #16]
                if (pulse_str) {
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d056      	beq.n	8000e1c <CDCReceiveCallback+0x16c>
                    uint32_t pulse = atoi(pulse_str);
 8000d6e:	6938      	ldr	r0, [r7, #16]
 8000d70:	f008 fe2e 	bl	80099d0 <atoi>
 8000d74:	4603      	mov	r3, r0
 8000d76:	60fb      	str	r3, [r7, #12]
                    Configure_SH_Signal(param, pulse);
 8000d78:	68f9      	ldr	r1, [r7, #12]
 8000d7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d7c:	f000 f8f8 	bl	8000f70 <Configure_SH_Signal>
}
 8000d80:	e04c      	b.n	8000e1c <CDCReceiveCallback+0x16c>
            } else if (strcmp(command, "ICG") == 0) {
 8000d82:	4930      	ldr	r1, [pc, #192]	@ (8000e44 <CDCReceiveCallback+0x194>)
 8000d84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000d86:	f7ff fa2b 	bl	80001e0 <strcmp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d111      	bne.n	8000db4 <CDCReceiveCallback+0x104>
                char *pulse_str = strtok(NULL, ":");
 8000d90:	4929      	ldr	r1, [pc, #164]	@ (8000e38 <CDCReceiveCallback+0x188>)
 8000d92:	2000      	movs	r0, #0
 8000d94:	f008 fff8 	bl	8009d88 <strtok>
 8000d98:	61b8      	str	r0, [r7, #24]
                if (pulse_str) {
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d03d      	beq.n	8000e1c <CDCReceiveCallback+0x16c>
                    uint32_t pulse = atoi(pulse_str);
 8000da0:	69b8      	ldr	r0, [r7, #24]
 8000da2:	f008 fe15 	bl	80099d0 <atoi>
 8000da6:	4603      	mov	r3, r0
 8000da8:	617b      	str	r3, [r7, #20]
                    Configure_ICG_Signal(param, pulse);
 8000daa:	6979      	ldr	r1, [r7, #20]
 8000dac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000dae:	f000 f941 	bl	8001034 <Configure_ICG_Signal>
}
 8000db2:	e033      	b.n	8000e1c <CDCReceiveCallback+0x16c>
            } else if (strcmp(command, "MC") == 0) {  // Assuming MC for Master Clock
 8000db4:	4924      	ldr	r1, [pc, #144]	@ (8000e48 <CDCReceiveCallback+0x198>)
 8000db6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000db8:	f7ff fa12 	bl	80001e0 <strcmp>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d111      	bne.n	8000de6 <CDCReceiveCallback+0x136>
                char *pulse_str = strtok(NULL, ":");
 8000dc2:	491d      	ldr	r1, [pc, #116]	@ (8000e38 <CDCReceiveCallback+0x188>)
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f008 ffdf 	bl	8009d88 <strtok>
 8000dca:	6238      	str	r0, [r7, #32]
                if (pulse_str) {
 8000dcc:	6a3b      	ldr	r3, [r7, #32]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d024      	beq.n	8000e1c <CDCReceiveCallback+0x16c>
                    uint32_t pulse = atoi(pulse_str);
 8000dd2:	6a38      	ldr	r0, [r7, #32]
 8000dd4:	f008 fdfc 	bl	80099d0 <atoi>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	61fb      	str	r3, [r7, #28]
                    Configure_MasterClock_Signal(param, pulse);
 8000ddc:	69f9      	ldr	r1, [r7, #28]
 8000dde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000de0:	f000 f98a 	bl	80010f8 <Configure_MasterClock_Signal>
}
 8000de4:	e01a      	b.n	8000e1c <CDCReceiveCallback+0x16c>
            else if (strcmp(command, "START") == 0) {
 8000de6:	4919      	ldr	r1, [pc, #100]	@ (8000e4c <CDCReceiveCallback+0x19c>)
 8000de8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000dea:	f7ff f9f9 	bl	80001e0 <strcmp>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d109      	bne.n	8000e08 <CDCReceiveCallback+0x158>
                        	CalculateAndSetIntegrationTime(param);
 8000df4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000df6:	f000 f82d 	bl	8000e54 <CalculateAndSetIntegrationTime>
                            start_command_received = 1; // Set the flag
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <CDCReceiveCallback+0x178>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	701a      	strb	r2, [r3, #0]
                            continuous_enabled = 0;
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <CDCReceiveCallback+0x17c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
}
 8000e06:	e009      	b.n	8000e1c <CDCReceiveCallback+0x16c>
            else if (strcmp(command, "IT") == 0) {
 8000e08:	4911      	ldr	r1, [pc, #68]	@ (8000e50 <CDCReceiveCallback+0x1a0>)
 8000e0a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000e0c:	f7ff f9e8 	bl	80001e0 <strcmp>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d102      	bne.n	8000e1c <CDCReceiveCallback+0x16c>
                CalculateAndSetIntegrationTime(param);
 8000e16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e18:	f000 f81c 	bl	8000e54 <CalculateAndSetIntegrationTime>
}
 8000e1c:	bf00      	nop
 8000e1e:	3730      	adds	r7, #48	@ 0x30
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	0800aef8 	.word	0x0800aef8
 8000e28:	20003330 	.word	0x20003330
 8000e2c:	20003331 	.word	0x20003331
 8000e30:	0800af00 	.word	0x0800af00
 8000e34:	200001a0 	.word	0x200001a0
 8000e38:	0800af08 	.word	0x0800af08
 8000e3c:	0800af0c 	.word	0x0800af0c
 8000e40:	0800af14 	.word	0x0800af14
 8000e44:	0800af18 	.word	0x0800af18
 8000e48:	0800af1c 	.word	0x0800af1c
 8000e4c:	0800af20 	.word	0x0800af20
 8000e50:	0800af28 	.word	0x0800af28

08000e54 <CalculateAndSetIntegrationTime>:

void CalculateAndSetIntegrationTime(uint32_t integration_time_us) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
    // Calculate the SH period (T_SH) in timer ticks
    uint32_t T_SH_ticks = (84 * integration_time_us);  // Convert microseconds to timer ticks
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2254      	movs	r2, #84	@ 0x54
 8000e60:	fb02 f303 	mul.w	r3, r2, r3
 8000e64:	60fb      	str	r3, [r7, #12]

    // Minimum SH pulse width is 1 µs, which translates to 84 timer ticks at 84 MHz
    uint32_t SH_pulse_ticks = 84;
 8000e66:	2354      	movs	r3, #84	@ 0x54
 8000e68:	60bb      	str	r3, [r7, #8]

    // Configure the SH signal with the calculated period and pulse width
    Configure_SH_Signal(T_SH_ticks, SH_pulse_ticks);
 8000e6a:	68b9      	ldr	r1, [r7, #8]
 8000e6c:	68f8      	ldr	r0, [r7, #12]
 8000e6e:	f000 f87f 	bl	8000f70 <Configure_SH_Signal>
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <InitializeHeaderFooter>:


void InitializeHeaderFooter(void) {
 8000e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e7e:	b093      	sub	sp, #76	@ 0x4c
 8000e80:	af0c      	add	r7, sp, #48	@ 0x30
    // Construct the header
    snprintf(header, HEADER_SIZE,
 8000e82:	4b1e      	ldr	r3, [pc, #120]	@ (8000efc <InitializeHeaderFooter+0x80>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	4a1d      	ldr	r2, [pc, #116]	@ (8000f00 <InitializeHeaderFooter+0x84>)
 8000e8a:	6812      	ldr	r2, [r2, #0]
 8000e8c:	491d      	ldr	r1, [pc, #116]	@ (8000f04 <InitializeHeaderFooter+0x88>)
 8000e8e:	6809      	ldr	r1, [r1, #0]
 8000e90:	481d      	ldr	r0, [pc, #116]	@ (8000f08 <InitializeHeaderFooter+0x8c>)
 8000e92:	6800      	ldr	r0, [r0, #0]
 8000e94:	4c1d      	ldr	r4, [pc, #116]	@ (8000f0c <InitializeHeaderFooter+0x90>)
 8000e96:	6824      	ldr	r4, [r4, #0]
 8000e98:	4d1c      	ldr	r5, [pc, #112]	@ (8000f0c <InitializeHeaderFooter+0x90>)
 8000e9a:	686d      	ldr	r5, [r5, #4]
 8000e9c:	4e1b      	ldr	r6, [pc, #108]	@ (8000f0c <InitializeHeaderFooter+0x90>)
 8000e9e:	68b6      	ldr	r6, [r6, #8]
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <InitializeHeaderFooter+0x90>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f10 <InitializeHeaderFooter+0x94>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <InitializeHeaderFooter+0x98>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <InitializeHeaderFooter+0x9c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <InitializeHeaderFooter+0xa0>)
 8000eba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	930a      	str	r3, [sp, #40]	@ 0x28
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	9308      	str	r3, [sp, #32]
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	9307      	str	r3, [sp, #28]
 8000ecc:	9606      	str	r6, [sp, #24]
 8000ece:	9505      	str	r5, [sp, #20]
 8000ed0:	9404      	str	r4, [sp, #16]
 8000ed2:	9003      	str	r0, [sp, #12]
 8000ed4:	9102      	str	r1, [sp, #8]
 8000ed6:	9201      	str	r2, [sp, #4]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <InitializeHeaderFooter+0xa4>)
 8000ede:	4a11      	ldr	r2, [pc, #68]	@ (8000f24 <InitializeHeaderFooter+0xa8>)
 8000ee0:	21c8      	movs	r1, #200	@ 0xc8
 8000ee2:	4811      	ldr	r0, [pc, #68]	@ (8000f28 <InitializeHeaderFooter+0xac>)
 8000ee4:	f008 febe 	bl	8009c64 <sniprintf>
        VersionNo, MajorVersion, FileFormatNo, CustomizationNo, CameraType,
        DataInfo[0], DataInfo[1], DataInfo[2], DataInfo[3],
        MeasureMode, SheetData, Profile, ScaleUnitChars);

    // Construct the footer (this example just uses a simple footer, customize as needed)
    snprintf(footer, FOOTER_SIZE, "\n");
 8000ee8:	4a10      	ldr	r2, [pc, #64]	@ (8000f2c <InitializeHeaderFooter+0xb0>)
 8000eea:	2102      	movs	r1, #2
 8000eec:	4810      	ldr	r0, [pc, #64]	@ (8000f30 <InitializeHeaderFooter+0xb4>)
 8000eee:	f008 feb9 	bl	8009c64 <sniprintf>
}
 8000ef2:	bf00      	nop
 8000ef4:	371c      	adds	r7, #28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000004 	.word	0x20000004
 8000f00:	20000368 	.word	0x20000368
 8000f04:	20000008 	.word	0x20000008
 8000f08:	2000000c 	.word	0x2000000c
 8000f0c:	2000036c 	.word	0x2000036c
 8000f10:	20000010 	.word	0x20000010
 8000f14:	20000380 	.word	0x20000380
 8000f18:	20000014 	.word	0x20000014
 8000f1c:	20000018 	.word	0x20000018
 8000f20:	20000000 	.word	0x20000000
 8000f24:	0800af2c 	.word	0x0800af2c
 8000f28:	20000384 	.word	0x20000384
 8000f2c:	0800afd8 	.word	0x0800afd8
 8000f30:	2000044c 	.word	0x2000044c

08000f34 <encodeData>:

// Function to shift data and add header and footer
void encodeData(uint16_t* data_buffer, uint32_t data_size) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]

	// Copy the header to the start of the buffer
	    memcpy((void*)CCDPixelBuffer, (const void*)header, HEADER_SIZE);
 8000f3e:	4a09      	ldr	r2, [pc, #36]	@ (8000f64 <encodeData+0x30>)
 8000f40:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <encodeData+0x34>)
 8000f42:	4610      	mov	r0, r2
 8000f44:	4619      	mov	r1, r3
 8000f46:	23c8      	movs	r3, #200	@ 0xc8
 8000f48:	461a      	mov	r2, r3
 8000f4a:	f008 ffec 	bl	8009f26 <memcpy>

	    // Copy the footer to the end of the data
	    memcpy((void*)&CCDPixelBuffer[CCD_PIXEL_BUFFER_SIZE - FOOTER_SIZE], (const void*)footer, FOOTER_SIZE);
 8000f4e:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <encodeData+0x38>)
 8000f50:	881a      	ldrh	r2, [r3, #0]
 8000f52:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <encodeData+0x30>)
 8000f54:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000f58:	f8a3 2edc 	strh.w	r2, [r3, #3804]	@ 0xedc
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000450 	.word	0x20000450
 8000f68:	20000384 	.word	0x20000384
 8000f6c:	2000044c 	.word	0x2000044c

08000f70 <Configure_SH_Signal>:

void Configure_SH_Signal(uint32_t period, uint32_t pulse) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	@ 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);
 8000f7a:	2108      	movs	r1, #8
 8000f7c:	482a      	ldr	r0, [pc, #168]	@ (8001028 <Configure_SH_Signal+0xb8>)
 8000f7e:	f003 ff13 	bl	8004da8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000f82:	2100      	movs	r1, #0
 8000f84:	4829      	ldr	r0, [pc, #164]	@ (800102c <Configure_SH_Signal+0xbc>)
 8000f86:	f003 ff0f 	bl	8004da8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4828      	ldr	r0, [pc, #160]	@ (8001030 <Configure_SH_Signal+0xc0>)
 8000f8e:	f003 ff0b 	bl	8004da8 <HAL_TIM_PWM_Stop>
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000f92:	f107 030c 	add.w	r3, r7, #12
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]
 8000fa2:	615a      	str	r2, [r3, #20]
 8000fa4:	619a      	str	r2, [r3, #24]

    htim5.Init.Prescaler = 1-1;
 8000fa6:	4b20      	ldr	r3, [pc, #128]	@ (8001028 <Configure_SH_Signal+0xb8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fac:	4b1e      	ldr	r3, [pc, #120]	@ (8001028 <Configure_SH_Signal+0xb8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
    htim5.Init.Period = period-1;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001028 <Configure_SH_Signal+0xb8>)
 8000fb8:	60d3      	str	r3, [r2, #12]
    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fba:	4b1b      	ldr	r3, [pc, #108]	@ (8001028 <Configure_SH_Signal+0xb8>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
    htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc0:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <Configure_SH_Signal+0xb8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 8000fc6:	4818      	ldr	r0, [pc, #96]	@ (8001028 <Configure_SH_Signal+0xb8>)
 8000fc8:	f003 fde5 	bl	8004b96 <HAL_TIM_PWM_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <Configure_SH_Signal+0x66>
        // Initialization Error
        Error_Handler();
 8000fd2:	f000 f8f3 	bl	80011bc <Error_Handler>
    }

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd6:	2360      	movs	r3, #96	@ 0x60
 8000fd8:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = pulse;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
    if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000fe6:	f107 030c 	add.w	r3, r7, #12
 8000fea:	2208      	movs	r2, #8
 8000fec:	4619      	mov	r1, r3
 8000fee:	480e      	ldr	r0, [pc, #56]	@ (8001028 <Configure_SH_Signal+0xb8>)
 8000ff0:	f003 ff3e 	bl	8004e70 <HAL_TIM_PWM_ConfigChannel>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <Configure_SH_Signal+0x8e>
        // Configuration Error
        Error_Handler();
 8000ffa:	f000 f8df 	bl	80011bc <Error_Handler>
    }

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //ICG
 8000ffe:	2100      	movs	r1, #0
 8001000:	480a      	ldr	r0, [pc, #40]	@ (800102c <Configure_SH_Signal+0xbc>)
 8001002:	f003 fe21 	bl	8004c48 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay
 8001006:	4b09      	ldr	r3, [pc, #36]	@ (800102c <Configure_SH_Signal+0xbc>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2242      	movs	r2, #66	@ 0x42
 800100c:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
 800100e:	2100      	movs	r1, #0
 8001010:	4807      	ldr	r0, [pc, #28]	@ (8001030 <Configure_SH_Signal+0xc0>)
 8001012:	f003 fe19 	bl	8004c48 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH
 8001016:	2108      	movs	r1, #8
 8001018:	4803      	ldr	r0, [pc, #12]	@ (8001028 <Configure_SH_Signal+0xb8>)
 800101a:	f003 fe15 	bl	8004c48 <HAL_TIM_PWM_Start>
}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	@ 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000320 	.word	0x20000320
 800102c:	20000248 	.word	0x20000248
 8001030:	20000290 	.word	0x20000290

08001034 <Configure_ICG_Signal>:

void Configure_ICG_Signal(uint32_t period, uint32_t pulse) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	@ 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);
 800103e:	2108      	movs	r1, #8
 8001040:	482a      	ldr	r0, [pc, #168]	@ (80010ec <Configure_ICG_Signal+0xb8>)
 8001042:	f003 feb1 	bl	8004da8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001046:	2100      	movs	r1, #0
 8001048:	4829      	ldr	r0, [pc, #164]	@ (80010f0 <Configure_ICG_Signal+0xbc>)
 800104a:	f003 fead 	bl	8004da8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800104e:	2100      	movs	r1, #0
 8001050:	4828      	ldr	r0, [pc, #160]	@ (80010f4 <Configure_ICG_Signal+0xc0>)
 8001052:	f003 fea9 	bl	8004da8 <HAL_TIM_PWM_Stop>
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]
 8001066:	615a      	str	r2, [r3, #20]
 8001068:	619a      	str	r2, [r3, #24]

    htim2.Init.Prescaler = 1-1;
 800106a:	4b21      	ldr	r3, [pc, #132]	@ (80010f0 <Configure_ICG_Signal+0xbc>)
 800106c:	2200      	movs	r2, #0
 800106e:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <Configure_ICG_Signal+0xbc>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = period-1;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3b01      	subs	r3, #1
 800107a:	4a1d      	ldr	r2, [pc, #116]	@ (80010f0 <Configure_ICG_Signal+0xbc>)
 800107c:	60d3      	str	r3, [r2, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107e:	4b1c      	ldr	r3, [pc, #112]	@ (80010f0 <Configure_ICG_Signal+0xbc>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001084:	4b1a      	ldr	r3, [pc, #104]	@ (80010f0 <Configure_ICG_Signal+0xbc>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800108a:	4819      	ldr	r0, [pc, #100]	@ (80010f0 <Configure_ICG_Signal+0xbc>)
 800108c:	f003 fd83 	bl	8004b96 <HAL_TIM_PWM_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <Configure_ICG_Signal+0x66>
        // Initialization Error
        Error_Handler();
 8001096:	f000 f891 	bl	80011bc <Error_Handler>
    }

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800109a:	2360      	movs	r3, #96	@ 0x60
 800109c:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = pulse;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	2200      	movs	r2, #0
 80010b0:	4619      	mov	r1, r3
 80010b2:	480f      	ldr	r0, [pc, #60]	@ (80010f0 <Configure_ICG_Signal+0xbc>)
 80010b4:	f003 fedc 	bl	8004e70 <HAL_TIM_PWM_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <Configure_ICG_Signal+0x8e>
        // Configuration Error
        Error_Handler();
 80010be:	f000 f87d 	bl	80011bc <Error_Handler>
    }

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //ICG
 80010c2:	2100      	movs	r1, #0
 80010c4:	480a      	ldr	r0, [pc, #40]	@ (80010f0 <Configure_ICG_Signal+0xbc>)
 80010c6:	f003 fdbf 	bl	8004c48 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay
 80010ca:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <Configure_ICG_Signal+0xbc>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2242      	movs	r2, #66	@ 0x42
 80010d0:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
 80010d2:	2100      	movs	r1, #0
 80010d4:	4807      	ldr	r0, [pc, #28]	@ (80010f4 <Configure_ICG_Signal+0xc0>)
 80010d6:	f003 fdb7 	bl	8004c48 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH
 80010da:	2108      	movs	r1, #8
 80010dc:	4803      	ldr	r0, [pc, #12]	@ (80010ec <Configure_ICG_Signal+0xb8>)
 80010de:	f003 fdb3 	bl	8004c48 <HAL_TIM_PWM_Start>
}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	@ 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000320 	.word	0x20000320
 80010f0:	20000248 	.word	0x20000248
 80010f4:	20000290 	.word	0x20000290

080010f8 <Configure_MasterClock_Signal>:

void Configure_MasterClock_Signal(uint32_t period, uint32_t pulse) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	@ 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);
 8001102:	2108      	movs	r1, #8
 8001104:	482a      	ldr	r0, [pc, #168]	@ (80011b0 <Configure_MasterClock_Signal+0xb8>)
 8001106:	f003 fe4f 	bl	8004da8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800110a:	2100      	movs	r1, #0
 800110c:	4829      	ldr	r0, [pc, #164]	@ (80011b4 <Configure_MasterClock_Signal+0xbc>)
 800110e:	f003 fe4b 	bl	8004da8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001112:	2100      	movs	r1, #0
 8001114:	4828      	ldr	r0, [pc, #160]	@ (80011b8 <Configure_MasterClock_Signal+0xc0>)
 8001116:	f003 fe47 	bl	8004da8 <HAL_TIM_PWM_Stop>
    TIM_OC_InitTypeDef sConfigOC = {0};
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]
 800112a:	615a      	str	r2, [r3, #20]
 800112c:	619a      	str	r2, [r3, #24]

    htim3.Init.Prescaler = 1-1;
 800112e:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <Configure_MasterClock_Signal+0xc0>)
 8001130:	2200      	movs	r2, #0
 8001132:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001134:	4b20      	ldr	r3, [pc, #128]	@ (80011b8 <Configure_MasterClock_Signal+0xc0>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = period-1;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3b01      	subs	r3, #1
 800113e:	4a1e      	ldr	r2, [pc, #120]	@ (80011b8 <Configure_MasterClock_Signal+0xc0>)
 8001140:	60d3      	str	r3, [r2, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001142:	4b1d      	ldr	r3, [pc, #116]	@ (80011b8 <Configure_MasterClock_Signal+0xc0>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001148:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <Configure_MasterClock_Signal+0xc0>)
 800114a:	2200      	movs	r2, #0
 800114c:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800114e:	481a      	ldr	r0, [pc, #104]	@ (80011b8 <Configure_MasterClock_Signal+0xc0>)
 8001150:	f003 fd21 	bl	8004b96 <HAL_TIM_PWM_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <Configure_MasterClock_Signal+0x66>
        // Initialization Error
        Error_Handler();
 800115a:	f000 f82f 	bl	80011bc <Error_Handler>
    }

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800115e:	2360      	movs	r3, #96	@ 0x60
 8001160:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = pulse;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	2200      	movs	r2, #0
 8001174:	4619      	mov	r1, r3
 8001176:	4810      	ldr	r0, [pc, #64]	@ (80011b8 <Configure_MasterClock_Signal+0xc0>)
 8001178:	f003 fe7a 	bl	8004e70 <HAL_TIM_PWM_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <Configure_MasterClock_Signal+0x8e>
        // Configuration Error
        Error_Handler();
 8001182:	f000 f81b 	bl	80011bc <Error_Handler>
    }

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //ICG
 8001186:	2100      	movs	r1, #0
 8001188:	480a      	ldr	r0, [pc, #40]	@ (80011b4 <Configure_MasterClock_Signal+0xbc>)
 800118a:	f003 fd5d 	bl	8004c48 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <Configure_MasterClock_Signal+0xbc>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2242      	movs	r2, #66	@ 0x42
 8001194:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
 8001196:	2100      	movs	r1, #0
 8001198:	4807      	ldr	r0, [pc, #28]	@ (80011b8 <Configure_MasterClock_Signal+0xc0>)
 800119a:	f003 fd55 	bl	8004c48 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH
 800119e:	2108      	movs	r1, #8
 80011a0:	4803      	ldr	r0, [pc, #12]	@ (80011b0 <Configure_MasterClock_Signal+0xb8>)
 80011a2:	f003 fd51 	bl	8004c48 <HAL_TIM_PWM_Start>
}
 80011a6:	bf00      	nop
 80011a8:	3728      	adds	r7, #40	@ 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000320 	.word	0x20000320
 80011b4:	20000248 	.word	0x20000248
 80011b8:	20000290 	.word	0x20000290

080011bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c0:	b672      	cpsid	i
}
 80011c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <Error_Handler+0x8>

080011c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	4b10      	ldr	r3, [pc, #64]	@ (8001214 <HAL_MspInit+0x4c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001214 <HAL_MspInit+0x4c>)
 80011d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011de:	4b0d      	ldr	r3, [pc, #52]	@ (8001214 <HAL_MspInit+0x4c>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	603b      	str	r3, [r7, #0]
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <HAL_MspInit+0x4c>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f2:	4a08      	ldr	r2, [pc, #32]	@ (8001214 <HAL_MspInit+0x4c>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_MspInit+0x4c>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800

08001218 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	@ 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a2e      	ldr	r2, [pc, #184]	@ (80012f0 <HAL_ADC_MspInit+0xd8>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d156      	bne.n	80012e8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b2d      	ldr	r3, [pc, #180]	@ (80012f4 <HAL_ADC_MspInit+0xdc>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	4a2c      	ldr	r2, [pc, #176]	@ (80012f4 <HAL_ADC_MspInit+0xdc>)
 8001244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001248:	6453      	str	r3, [r2, #68]	@ 0x44
 800124a:	4b2a      	ldr	r3, [pc, #168]	@ (80012f4 <HAL_ADC_MspInit+0xdc>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b26      	ldr	r3, [pc, #152]	@ (80012f4 <HAL_ADC_MspInit+0xdc>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a25      	ldr	r2, [pc, #148]	@ (80012f4 <HAL_ADC_MspInit+0xdc>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b23      	ldr	r3, [pc, #140]	@ (80012f4 <HAL_ADC_MspInit+0xdc>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001272:	2308      	movs	r3, #8
 8001274:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001276:	2303      	movs	r3, #3
 8001278:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	481c      	ldr	r0, [pc, #112]	@ (80012f8 <HAL_ADC_MspInit+0xe0>)
 8001286:	f001 fc33 	bl	8002af0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800128a:	4b1c      	ldr	r3, [pc, #112]	@ (80012fc <HAL_ADC_MspInit+0xe4>)
 800128c:	4a1c      	ldr	r2, [pc, #112]	@ (8001300 <HAL_ADC_MspInit+0xe8>)
 800128e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001290:	4b1a      	ldr	r3, [pc, #104]	@ (80012fc <HAL_ADC_MspInit+0xe4>)
 8001292:	2200      	movs	r2, #0
 8001294:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001296:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <HAL_ADC_MspInit+0xe4>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800129c:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <HAL_ADC_MspInit+0xe4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012a2:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <HAL_ADC_MspInit+0xe4>)
 80012a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012aa:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <HAL_ADC_MspInit+0xe4>)
 80012ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012b2:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <HAL_ADC_MspInit+0xe4>)
 80012b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80012ba:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <HAL_ADC_MspInit+0xe4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012c0:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <HAL_ADC_MspInit+0xe4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <HAL_ADC_MspInit+0xe4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012cc:	480b      	ldr	r0, [pc, #44]	@ (80012fc <HAL_ADC_MspInit+0xe4>)
 80012ce:	f001 f82f 	bl	8002330 <HAL_DMA_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80012d8:	f7ff ff70 	bl	80011bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a07      	ldr	r2, [pc, #28]	@ (80012fc <HAL_ADC_MspInit+0xe4>)
 80012e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80012e2:	4a06      	ldr	r2, [pc, #24]	@ (80012fc <HAL_ADC_MspInit+0xe4>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	@ 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40012000 	.word	0x40012000
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020000 	.word	0x40020000
 80012fc:	200001e8 	.word	0x200001e8
 8001300:	40026410 	.word	0x40026410

08001304 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001314:	d10e      	bne.n	8001334 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	4b27      	ldr	r3, [pc, #156]	@ (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	4a26      	ldr	r2, [pc, #152]	@ (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6413      	str	r3, [r2, #64]	@ 0x40
 8001326:	4b24      	ldr	r3, [pc, #144]	@ (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001332:	e03a      	b.n	80013aa <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a20      	ldr	r2, [pc, #128]	@ (80013bc <HAL_TIM_Base_MspInit+0xb8>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d10e      	bne.n	800135c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b1d      	ldr	r3, [pc, #116]	@ (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	4a1c      	ldr	r2, [pc, #112]	@ (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	6413      	str	r3, [r2, #64]	@ 0x40
 800134e:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]
}
 800135a:	e026      	b.n	80013aa <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a17      	ldr	r2, [pc, #92]	@ (80013c0 <HAL_TIM_Base_MspInit+0xbc>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d10e      	bne.n	8001384 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b13      	ldr	r3, [pc, #76]	@ (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	4a12      	ldr	r2, [pc, #72]	@ (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	6413      	str	r3, [r2, #64]	@ 0x40
 8001376:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
}
 8001382:	e012      	b.n	80013aa <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0e      	ldr	r2, [pc, #56]	@ (80013c4 <HAL_TIM_Base_MspInit+0xc0>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d10d      	bne.n	80013aa <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	4a08      	ldr	r2, [pc, #32]	@ (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 8001398:	f043 0308 	orr.w	r3, r3, #8
 800139c:	6413      	str	r3, [r2, #64]	@ 0x40
 800139e:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <HAL_TIM_Base_MspInit+0xb4>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
}
 80013aa:	bf00      	nop
 80013ac:	371c      	adds	r7, #28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40000400 	.word	0x40000400
 80013c0:	40000800 	.word	0x40000800
 80013c4:	40000c00 	.word	0x40000c00

080013c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	@ 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013e8:	d11e      	bne.n	8001428 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	4b34      	ldr	r3, [pc, #208]	@ (80014c0 <HAL_TIM_MspPostInit+0xf8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a33      	ldr	r2, [pc, #204]	@ (80014c0 <HAL_TIM_MspPostInit+0xf8>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b31      	ldr	r3, [pc, #196]	@ (80014c0 <HAL_TIM_MspPostInit+0xf8>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001406:	2301      	movs	r3, #1
 8001408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001416:	2301      	movs	r3, #1
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 0314 	add.w	r3, r7, #20
 800141e:	4619      	mov	r1, r3
 8001420:	4828      	ldr	r0, [pc, #160]	@ (80014c4 <HAL_TIM_MspPostInit+0xfc>)
 8001422:	f001 fb65 	bl	8002af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001426:	e046      	b.n	80014b6 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a26      	ldr	r2, [pc, #152]	@ (80014c8 <HAL_TIM_MspPostInit+0x100>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d11e      	bne.n	8001470 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b22      	ldr	r3, [pc, #136]	@ (80014c0 <HAL_TIM_MspPostInit+0xf8>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a21      	ldr	r2, [pc, #132]	@ (80014c0 <HAL_TIM_MspPostInit+0xf8>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b1f      	ldr	r3, [pc, #124]	@ (80014c0 <HAL_TIM_MspPostInit+0xf8>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800144e:	2340      	movs	r3, #64	@ 0x40
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800145e:	2302      	movs	r3, #2
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	4816      	ldr	r0, [pc, #88]	@ (80014c4 <HAL_TIM_MspPostInit+0xfc>)
 800146a:	f001 fb41 	bl	8002af0 <HAL_GPIO_Init>
}
 800146e:	e022      	b.n	80014b6 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM5)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a15      	ldr	r2, [pc, #84]	@ (80014cc <HAL_TIM_MspPostInit+0x104>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d11d      	bne.n	80014b6 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <HAL_TIM_MspPostInit+0xf8>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	4a0f      	ldr	r2, [pc, #60]	@ (80014c0 <HAL_TIM_MspPostInit+0xf8>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	@ 0x30
 800148a:	4b0d      	ldr	r3, [pc, #52]	@ (80014c0 <HAL_TIM_MspPostInit+0xf8>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001496:	2304      	movs	r3, #4
 8001498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80014a6:	2302      	movs	r3, #2
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	4804      	ldr	r0, [pc, #16]	@ (80014c4 <HAL_TIM_MspPostInit+0xfc>)
 80014b2:	f001 fb1d 	bl	8002af0 <HAL_GPIO_Init>
}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	@ 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020000 	.word	0x40020000
 80014c8:	40000400 	.word	0x40000400
 80014cc:	40000c00 	.word	0x40000c00

080014d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <NMI_Handler+0x4>

080014d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <HardFault_Handler+0x4>

080014e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <MemManage_Handler+0x4>

080014e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <BusFault_Handler+0x4>

080014f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <UsageFault_Handler+0x4>

080014f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001526:	f000 f96b 	bl	8001800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001534:	4802      	ldr	r0, [pc, #8]	@ (8001540 <DMA2_Stream0_IRQHandler+0x10>)
 8001536:	f001 f871 	bl	800261c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200001e8 	.word	0x200001e8

08001544 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001548:	4802      	ldr	r0, [pc, #8]	@ (8001554 <OTG_FS_IRQHandler+0x10>)
 800154a:	f001 fd99 	bl	8003080 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2000401c 	.word	0x2000401c

08001558 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return 1;
 800155c:	2301      	movs	r3, #1
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_kill>:

int _kill(int pid, int sig)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001572:	f008 fcab 	bl	8009ecc <__errno>
 8001576:	4603      	mov	r3, r0
 8001578:	2216      	movs	r2, #22
 800157a:	601a      	str	r2, [r3, #0]
  return -1;
 800157c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001580:	4618      	mov	r0, r3
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <_exit>:

void _exit (int status)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001590:	f04f 31ff 	mov.w	r1, #4294967295
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ffe7 	bl	8001568 <_kill>
  while (1) {}    /* Make sure we hang here */
 800159a:	bf00      	nop
 800159c:	e7fd      	b.n	800159a <_exit+0x12>

0800159e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	e00a      	b.n	80015c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015b0:	f3af 8000 	nop.w
 80015b4:	4601      	mov	r1, r0
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	60ba      	str	r2, [r7, #8]
 80015bc:	b2ca      	uxtb	r2, r1
 80015be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3301      	adds	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbf0      	blt.n	80015b0 <_read+0x12>
  }

  return len;
 80015ce:	687b      	ldr	r3, [r7, #4]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
 80015e8:	e009      	b.n	80015fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	60ba      	str	r2, [r7, #8]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3301      	adds	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	429a      	cmp	r2, r3
 8001604:	dbf1      	blt.n	80015ea <_write+0x12>
  }
  return len;
 8001606:	687b      	ldr	r3, [r7, #4]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <_close>:

int _close(int file)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001638:	605a      	str	r2, [r3, #4]
  return 0;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <_isatty>:

int _isatty(int file)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001650:	2301      	movs	r3, #1
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800165e:	b480      	push	{r7}
 8001660:	b085      	sub	sp, #20
 8001662:	af00      	add	r7, sp, #0
 8001664:	60f8      	str	r0, [r7, #12]
 8001666:	60b9      	str	r1, [r7, #8]
 8001668:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001680:	4a14      	ldr	r2, [pc, #80]	@ (80016d4 <_sbrk+0x5c>)
 8001682:	4b15      	ldr	r3, [pc, #84]	@ (80016d8 <_sbrk+0x60>)
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800168c:	4b13      	ldr	r3, [pc, #76]	@ (80016dc <_sbrk+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <_sbrk+0x64>)
 8001696:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <_sbrk+0x68>)
 8001698:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <_sbrk+0x64>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4413      	add	r3, r2
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d207      	bcs.n	80016b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a8:	f008 fc10 	bl	8009ecc <__errno>
 80016ac:	4603      	mov	r3, r0
 80016ae:	220c      	movs	r2, #12
 80016b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	e009      	b.n	80016cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016be:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <_sbrk+0x64>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4413      	add	r3, r2
 80016c6:	4a05      	ldr	r2, [pc, #20]	@ (80016dc <_sbrk+0x64>)
 80016c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ca:	68fb      	ldr	r3, [r7, #12]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20010000 	.word	0x20010000
 80016d8:	00000400 	.word	0x00000400
 80016dc:	20003334 	.word	0x20003334
 80016e0:	20004870 	.word	0x20004870

080016e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016e8:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <SystemInit+0x20>)
 80016ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ee:	4a05      	ldr	r2, [pc, #20]	@ (8001704 <SystemInit+0x20>)
 80016f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001708:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001740 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800170c:	f7ff ffea 	bl	80016e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001710:	480c      	ldr	r0, [pc, #48]	@ (8001744 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001712:	490d      	ldr	r1, [pc, #52]	@ (8001748 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001714:	4a0d      	ldr	r2, [pc, #52]	@ (800174c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001718:	e002      	b.n	8001720 <LoopCopyDataInit>

0800171a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800171c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171e:	3304      	adds	r3, #4

08001720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001724:	d3f9      	bcc.n	800171a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001726:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001728:	4c0a      	ldr	r4, [pc, #40]	@ (8001754 <LoopFillZerobss+0x22>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800172c:	e001      	b.n	8001732 <LoopFillZerobss>

0800172e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001730:	3204      	adds	r2, #4

08001732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001734:	d3fb      	bcc.n	800172e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001736:	f008 fbcf 	bl	8009ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800173a:	f7fe ff29 	bl	8000590 <main>
  bx  lr    
 800173e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001740:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001748:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800174c:	0800b230 	.word	0x0800b230
  ldr r2, =_sbss
 8001750:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001754:	2000486c 	.word	0x2000486c

08001758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001758:	e7fe      	b.n	8001758 <ADC_IRQHandler>
	...

0800175c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001760:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0d      	ldr	r2, [pc, #52]	@ (800179c <HAL_Init+0x40>)
 8001766:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800176a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800176c:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <HAL_Init+0x40>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a0a      	ldr	r2, [pc, #40]	@ (800179c <HAL_Init+0x40>)
 8001772:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001776:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001778:	4b08      	ldr	r3, [pc, #32]	@ (800179c <HAL_Init+0x40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a07      	ldr	r2, [pc, #28]	@ (800179c <HAL_Init+0x40>)
 800177e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001782:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001784:	2003      	movs	r0, #3
 8001786:	f000 fd91 	bl	80022ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800178a:	200f      	movs	r0, #15
 800178c:	f000 f808 	bl	80017a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001790:	f7ff fd1a 	bl	80011c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023c00 	.word	0x40023c00

080017a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017a8:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <HAL_InitTick+0x54>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <HAL_InitTick+0x58>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	4619      	mov	r1, r3
 80017b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 fda9 	bl	8002316 <HAL_SYSTICK_Config>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e00e      	b.n	80017ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b0f      	cmp	r3, #15
 80017d2:	d80a      	bhi.n	80017ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d4:	2200      	movs	r2, #0
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	f04f 30ff 	mov.w	r0, #4294967295
 80017dc:	f000 fd71 	bl	80022c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e0:	4a06      	ldr	r2, [pc, #24]	@ (80017fc <HAL_InitTick+0x5c>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e000      	b.n	80017ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	2000002c 	.word	0x2000002c
 80017f8:	20000034 	.word	0x20000034
 80017fc:	20000030 	.word	0x20000030

08001800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_IncTick+0x20>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_IncTick+0x24>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4413      	add	r3, r2
 8001810:	4a04      	ldr	r2, [pc, #16]	@ (8001824 <HAL_IncTick+0x24>)
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20000034 	.word	0x20000034
 8001824:	20003338 	.word	0x20003338

08001828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return uwTick;
 800182c:	4b03      	ldr	r3, [pc, #12]	@ (800183c <HAL_GetTick+0x14>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20003338 	.word	0x20003338

08001840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001848:	f7ff ffee 	bl	8001828 <HAL_GetTick>
 800184c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001858:	d005      	beq.n	8001866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800185a:	4b0a      	ldr	r3, [pc, #40]	@ (8001884 <HAL_Delay+0x44>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4413      	add	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001866:	bf00      	nop
 8001868:	f7ff ffde 	bl	8001828 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	429a      	cmp	r2, r3
 8001876:	d8f7      	bhi.n	8001868 <HAL_Delay+0x28>
  {
  }
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000034 	.word	0x20000034

08001888 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e033      	b.n	8001906 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff fcb6 	bl	8001218 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d118      	bne.n	80018f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80018ce:	f023 0302 	bic.w	r3, r3, #2
 80018d2:	f043 0202 	orr.w	r2, r3, #2
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 fa98 	bl	8001e10 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	f023 0303 	bic.w	r3, r3, #3
 80018ee:	f043 0201 	orr.w	r2, r3, #1
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	641a      	str	r2, [r3, #64]	@ 0x40
 80018f6:	e001      	b.n	80018fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001904:	7bfb      	ldrb	r3, [r7, #15]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_ADC_Start_DMA+0x1e>
 800192a:	2302      	movs	r3, #2
 800192c:	e0ce      	b.n	8001acc <HAL_ADC_Start_DMA+0x1bc>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b01      	cmp	r3, #1
 8001942:	d018      	beq.n	8001976 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0201 	orr.w	r2, r2, #1
 8001952:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001954:	4b5f      	ldr	r3, [pc, #380]	@ (8001ad4 <HAL_ADC_Start_DMA+0x1c4>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a5f      	ldr	r2, [pc, #380]	@ (8001ad8 <HAL_ADC_Start_DMA+0x1c8>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	0c9a      	lsrs	r2, r3, #18
 8001960:	4613      	mov	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001968:	e002      	b.n	8001970 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	3b01      	subs	r3, #1
 800196e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f9      	bne.n	800196a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001980:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001984:	d107      	bne.n	8001996 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001994:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	f040 8086 	bne.w	8001ab2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d007      	beq.n	80019d8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019cc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019d0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019e4:	d106      	bne.n	80019f4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ea:	f023 0206 	bic.w	r2, r3, #6
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	645a      	str	r2, [r3, #68]	@ 0x44
 80019f2:	e002      	b.n	80019fa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a02:	4b36      	ldr	r3, [pc, #216]	@ (8001adc <HAL_ADC_Start_DMA+0x1cc>)
 8001a04:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a0a:	4a35      	ldr	r2, [pc, #212]	@ (8001ae0 <HAL_ADC_Start_DMA+0x1d0>)
 8001a0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a12:	4a34      	ldr	r2, [pc, #208]	@ (8001ae4 <HAL_ADC_Start_DMA+0x1d4>)
 8001a14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a1a:	4a33      	ldr	r2, [pc, #204]	@ (8001ae8 <HAL_ADC_Start_DMA+0x1d8>)
 8001a1c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a26:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001a36:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a46:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	334c      	adds	r3, #76	@ 0x4c
 8001a52:	4619      	mov	r1, r3
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f000 fd18 	bl	800248c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10f      	bne.n	8001a88 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d129      	bne.n	8001aca <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a84:	609a      	str	r2, [r3, #8]
 8001a86:	e020      	b.n	8001aca <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a17      	ldr	r2, [pc, #92]	@ (8001aec <HAL_ADC_Start_DMA+0x1dc>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d11b      	bne.n	8001aca <HAL_ADC_Start_DMA+0x1ba>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d114      	bne.n	8001aca <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	e00b      	b.n	8001aca <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	f043 0210 	orr.w	r2, r3, #16
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac2:	f043 0201 	orr.w	r2, r3, #1
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	2000002c 	.word	0x2000002c
 8001ad8:	431bde83 	.word	0x431bde83
 8001adc:	40012300 	.word	0x40012300
 8001ae0:	08002009 	.word	0x08002009
 8001ae4:	080020c3 	.word	0x080020c3
 8001ae8:	080020df 	.word	0x080020df
 8001aec:	40012000 	.word	0x40012000

08001af0 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d101      	bne.n	8001b0a <HAL_ADC_Stop_DMA+0x1a>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e048      	b.n	8001b9c <HAL_ADC_Stop_DMA+0xac>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0201 	bic.w	r2, r2, #1
 8001b20:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d130      	bne.n	8001b92 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b3e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d10f      	bne.n	8001b6e <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 fcf2 	bl	800253c <HAL_DMA_Abort>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d005      	beq.n	8001b6e <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001b7c:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b86:	f023 0301 	bic.w	r3, r3, #1
 8001b8a:	f043 0201 	orr.w	r2, r3, #1
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x1c>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e105      	b.n	8001df4 <HAL_ADC_ConfigChannel+0x228>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b09      	cmp	r3, #9
 8001bf6:	d925      	bls.n	8001c44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68d9      	ldr	r1, [r3, #12]
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	461a      	mov	r2, r3
 8001c06:	4613      	mov	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3b1e      	subs	r3, #30
 8001c0e:	2207      	movs	r2, #7
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43da      	mvns	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	400a      	ands	r2, r1
 8001c1c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68d9      	ldr	r1, [r3, #12]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	4603      	mov	r3, r0
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4403      	add	r3, r0
 8001c36:	3b1e      	subs	r3, #30
 8001c38:	409a      	lsls	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	e022      	b.n	8001c8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6919      	ldr	r1, [r3, #16]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	2207      	movs	r2, #7
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43da      	mvns	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	400a      	ands	r2, r1
 8001c66:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6919      	ldr	r1, [r3, #16]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4403      	add	r3, r0
 8001c80:	409a      	lsls	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d824      	bhi.n	8001cdc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3b05      	subs	r3, #5
 8001ca4:	221f      	movs	r2, #31
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	4413      	add	r3, r2
 8001ccc:	3b05      	subs	r3, #5
 8001cce:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cda:	e04c      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b0c      	cmp	r3, #12
 8001ce2:	d824      	bhi.n	8001d2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3b23      	subs	r3, #35	@ 0x23
 8001cf6:	221f      	movs	r2, #31
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43da      	mvns	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	400a      	ands	r2, r1
 8001d04:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3b23      	subs	r3, #35	@ 0x23
 8001d20:	fa00 f203 	lsl.w	r2, r0, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d2c:	e023      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3b41      	subs	r3, #65	@ 0x41
 8001d40:	221f      	movs	r2, #31
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43da      	mvns	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	3b41      	subs	r3, #65	@ 0x41
 8001d6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d76:	4b22      	ldr	r3, [pc, #136]	@ (8001e00 <HAL_ADC_ConfigChannel+0x234>)
 8001d78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a21      	ldr	r2, [pc, #132]	@ (8001e04 <HAL_ADC_ConfigChannel+0x238>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d109      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x1cc>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b12      	cmp	r3, #18
 8001d8a:	d105      	bne.n	8001d98 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a19      	ldr	r2, [pc, #100]	@ (8001e04 <HAL_ADC_ConfigChannel+0x238>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d123      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x21e>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b10      	cmp	r3, #16
 8001da8:	d003      	beq.n	8001db2 <HAL_ADC_ConfigChannel+0x1e6>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b11      	cmp	r3, #17
 8001db0:	d11b      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b10      	cmp	r3, #16
 8001dc4:	d111      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001dc6:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <HAL_ADC_ConfigChannel+0x23c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a10      	ldr	r2, [pc, #64]	@ (8001e0c <HAL_ADC_ConfigChannel+0x240>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	0c9a      	lsrs	r2, r3, #18
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ddc:	e002      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	3b01      	subs	r3, #1
 8001de2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f9      	bne.n	8001dde <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	40012300 	.word	0x40012300
 8001e04:	40012000 	.word	0x40012000
 8001e08:	2000002c 	.word	0x2000002c
 8001e0c:	431bde83 	.word	0x431bde83

08001e10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e18:	4b79      	ldr	r3, [pc, #484]	@ (8002000 <ADC_Init+0x1f0>)
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	431a      	orrs	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	021a      	lsls	r2, r3, #8
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6859      	ldr	r1, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6899      	ldr	r1, [r3, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ea2:	4a58      	ldr	r2, [pc, #352]	@ (8002004 <ADC_Init+0x1f4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d022      	beq.n	8001eee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001eb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6899      	ldr	r1, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ed8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6899      	ldr	r1, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	e00f      	b.n	8001f0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001efc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f0c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0202 	bic.w	r2, r2, #2
 8001f1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6899      	ldr	r1, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	7e1b      	ldrb	r3, [r3, #24]
 8001f28:	005a      	lsls	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d01b      	beq.n	8001f74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f4a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001f5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6859      	ldr	r1, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f66:	3b01      	subs	r3, #1
 8001f68:	035a      	lsls	r2, r3, #13
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	e007      	b.n	8001f84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f82:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	051a      	lsls	r2, r3, #20
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001fb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6899      	ldr	r1, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001fc6:	025a      	lsls	r2, r3, #9
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6899      	ldr	r1, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	029a      	lsls	r2, r3, #10
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	609a      	str	r2, [r3, #8]
}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	40012300 	.word	0x40012300
 8002004:	0f000001 	.word	0x0f000001

08002008 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002014:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800201e:	2b00      	cmp	r3, #0
 8002020:	d13c      	bne.n	800209c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d12b      	bne.n	8002094 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002040:	2b00      	cmp	r3, #0
 8002042:	d127      	bne.n	8002094 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800204e:	2b00      	cmp	r3, #0
 8002050:	d006      	beq.n	8002060 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800205c:	2b00      	cmp	r3, #0
 800205e:	d119      	bne.n	8002094 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0220 	bic.w	r2, r2, #32
 800206e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d105      	bne.n	8002094 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	f043 0201 	orr.w	r2, r3, #1
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f7fe fdcf 	bl	8000c38 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800209a:	e00e      	b.n	80020ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a0:	f003 0310 	and.w	r3, r3, #16
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f7ff fd85 	bl	8001bb8 <HAL_ADC_ErrorCallback>
}
 80020ae:	e004      	b.n	80020ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	4798      	blx	r3
}
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b084      	sub	sp, #16
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ce:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f7ff fd67 	bl	8001ba4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020ea:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2240      	movs	r2, #64	@ 0x40
 80020f0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f6:	f043 0204 	orr.w	r2, r3, #4
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f7ff fd5a 	bl	8001bb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002104:	bf00      	nop
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800211c:	4b0c      	ldr	r3, [pc, #48]	@ (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002128:	4013      	ands	r3, r2
 800212a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002134:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800213c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800213e:	4a04      	ldr	r2, [pc, #16]	@ (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	60d3      	str	r3, [r2, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002158:	4b04      	ldr	r3, [pc, #16]	@ (800216c <__NVIC_GetPriorityGrouping+0x18>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	f003 0307 	and.w	r3, r3, #7
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	2b00      	cmp	r3, #0
 8002180:	db0b      	blt.n	800219a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	f003 021f 	and.w	r2, r3, #31
 8002188:	4907      	ldr	r1, [pc, #28]	@ (80021a8 <__NVIC_EnableIRQ+0x38>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	2001      	movs	r0, #1
 8002192:	fa00 f202 	lsl.w	r2, r0, r2
 8002196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000e100 	.word	0xe000e100

080021ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	6039      	str	r1, [r7, #0]
 80021b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	db0a      	blt.n	80021d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	490c      	ldr	r1, [pc, #48]	@ (80021f8 <__NVIC_SetPriority+0x4c>)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	0112      	lsls	r2, r2, #4
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	440b      	add	r3, r1
 80021d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d4:	e00a      	b.n	80021ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4908      	ldr	r1, [pc, #32]	@ (80021fc <__NVIC_SetPriority+0x50>)
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	3b04      	subs	r3, #4
 80021e4:	0112      	lsls	r2, r2, #4
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	440b      	add	r3, r1
 80021ea:	761a      	strb	r2, [r3, #24]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000e100 	.word	0xe000e100
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	@ 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f1c3 0307 	rsb	r3, r3, #7
 800221a:	2b04      	cmp	r3, #4
 800221c:	bf28      	it	cs
 800221e:	2304      	movcs	r3, #4
 8002220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3304      	adds	r3, #4
 8002226:	2b06      	cmp	r3, #6
 8002228:	d902      	bls.n	8002230 <NVIC_EncodePriority+0x30>
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3b03      	subs	r3, #3
 800222e:	e000      	b.n	8002232 <NVIC_EncodePriority+0x32>
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	f04f 32ff 	mov.w	r2, #4294967295
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43da      	mvns	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	401a      	ands	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002248:	f04f 31ff 	mov.w	r1, #4294967295
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	fa01 f303 	lsl.w	r3, r1, r3
 8002252:	43d9      	mvns	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	4313      	orrs	r3, r2
         );
}
 800225a:	4618      	mov	r0, r3
 800225c:	3724      	adds	r7, #36	@ 0x24
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3b01      	subs	r3, #1
 8002274:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002278:	d301      	bcc.n	800227e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800227a:	2301      	movs	r3, #1
 800227c:	e00f      	b.n	800229e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227e:	4a0a      	ldr	r2, [pc, #40]	@ (80022a8 <SysTick_Config+0x40>)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3b01      	subs	r3, #1
 8002284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002286:	210f      	movs	r1, #15
 8002288:	f04f 30ff 	mov.w	r0, #4294967295
 800228c:	f7ff ff8e 	bl	80021ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002290:	4b05      	ldr	r3, [pc, #20]	@ (80022a8 <SysTick_Config+0x40>)
 8002292:	2200      	movs	r2, #0
 8002294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002296:	4b04      	ldr	r3, [pc, #16]	@ (80022a8 <SysTick_Config+0x40>)
 8002298:	2207      	movs	r2, #7
 800229a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	e000e010 	.word	0xe000e010

080022ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff ff29 	bl	800210c <__NVIC_SetPriorityGrouping>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b086      	sub	sp, #24
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022d4:	f7ff ff3e 	bl	8002154 <__NVIC_GetPriorityGrouping>
 80022d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	6978      	ldr	r0, [r7, #20]
 80022e0:	f7ff ff8e 	bl	8002200 <NVIC_EncodePriority>
 80022e4:	4602      	mov	r2, r0
 80022e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ea:	4611      	mov	r1, r2
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff5d 	bl	80021ac <__NVIC_SetPriority>
}
 80022f2:	bf00      	nop
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4603      	mov	r3, r0
 8002302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff31 	bl	8002170 <__NVIC_EnableIRQ>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff ffa2 	bl	8002268 <SysTick_Config>
 8002324:	4603      	mov	r3, r0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff fa74 	bl	8001828 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e099      	b.n	8002480 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800236c:	e00f      	b.n	800238e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800236e:	f7ff fa5b 	bl	8001828 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	2b05      	cmp	r3, #5
 800237a:	d908      	bls.n	800238e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2220      	movs	r2, #32
 8002380:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2203      	movs	r2, #3
 8002386:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e078      	b.n	8002480 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1e8      	bne.n	800236e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	4b38      	ldr	r3, [pc, #224]	@ (8002488 <HAL_DMA_Init+0x158>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4313      	orrs	r3, r2
 80023de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d107      	bne.n	80023f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f0:	4313      	orrs	r3, r2
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f023 0307 	bic.w	r3, r3, #7
 800240e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	4313      	orrs	r3, r2
 8002418:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241e:	2b04      	cmp	r3, #4
 8002420:	d117      	bne.n	8002452 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	4313      	orrs	r3, r2
 800242a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00e      	beq.n	8002452 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 fadf 	bl	80029f8 <DMA_CheckFifoParam>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2240      	movs	r2, #64	@ 0x40
 8002444:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800244e:	2301      	movs	r3, #1
 8002450:	e016      	b.n	8002480 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 fa96 	bl	800298c <DMA_CalcBaseAndBitshift>
 8002460:	4603      	mov	r3, r0
 8002462:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002468:	223f      	movs	r2, #63	@ 0x3f
 800246a:	409a      	lsls	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	f010803f 	.word	0xf010803f

0800248c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <HAL_DMA_Start_IT+0x26>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e040      	b.n	8002534 <HAL_DMA_Start_IT+0xa8>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d12f      	bne.n	8002526 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2202      	movs	r2, #2
 80024ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 fa28 	bl	8002930 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e4:	223f      	movs	r2, #63	@ 0x3f
 80024e6:	409a      	lsls	r2, r3
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0216 	orr.w	r2, r2, #22
 80024fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	2b00      	cmp	r3, #0
 8002502:	d007      	beq.n	8002514 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0208 	orr.w	r2, r2, #8
 8002512:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	e005      	b.n	8002532 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800252e:	2302      	movs	r3, #2
 8002530:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002532:	7dfb      	ldrb	r3, [r7, #23]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002548:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800254a:	f7ff f96d 	bl	8001828 <HAL_GetTick>
 800254e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d008      	beq.n	800256e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2280      	movs	r2, #128	@ 0x80
 8002560:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e052      	b.n	8002614 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 0216 	bic.w	r2, r2, #22
 800257c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695a      	ldr	r2, [r3, #20]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800258c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002592:	2b00      	cmp	r3, #0
 8002594:	d103      	bne.n	800259e <HAL_DMA_Abort+0x62>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800259a:	2b00      	cmp	r3, #0
 800259c:	d007      	beq.n	80025ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0208 	bic.w	r2, r2, #8
 80025ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0201 	bic.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025be:	e013      	b.n	80025e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025c0:	f7ff f932 	bl	8001828 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b05      	cmp	r3, #5
 80025cc:	d90c      	bls.n	80025e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2220      	movs	r2, #32
 80025d2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2203      	movs	r2, #3
 80025d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e015      	b.n	8002614 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1e4      	bne.n	80025c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fa:	223f      	movs	r2, #63	@ 0x3f
 80025fc:	409a      	lsls	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002628:	4b8e      	ldr	r3, [pc, #568]	@ (8002864 <HAL_DMA_IRQHandler+0x248>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a8e      	ldr	r2, [pc, #568]	@ (8002868 <HAL_DMA_IRQHandler+0x24c>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	0a9b      	lsrs	r3, r3, #10
 8002634:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002646:	2208      	movs	r2, #8
 8002648:	409a      	lsls	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d01a      	beq.n	8002688 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d013      	beq.n	8002688 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0204 	bic.w	r2, r2, #4
 800266e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002674:	2208      	movs	r2, #8
 8002676:	409a      	lsls	r2, r3
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002680:	f043 0201 	orr.w	r2, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268c:	2201      	movs	r2, #1
 800268e:	409a      	lsls	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d012      	beq.n	80026be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00b      	beq.n	80026be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026aa:	2201      	movs	r2, #1
 80026ac:	409a      	lsls	r2, r3
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b6:	f043 0202 	orr.w	r2, r3, #2
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c2:	2204      	movs	r2, #4
 80026c4:	409a      	lsls	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4013      	ands	r3, r2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d012      	beq.n	80026f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00b      	beq.n	80026f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e0:	2204      	movs	r2, #4
 80026e2:	409a      	lsls	r2, r3
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ec:	f043 0204 	orr.w	r2, r3, #4
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f8:	2210      	movs	r2, #16
 80026fa:	409a      	lsls	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d043      	beq.n	800278c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d03c      	beq.n	800278c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002716:	2210      	movs	r2, #16
 8002718:	409a      	lsls	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d018      	beq.n	800275e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d108      	bne.n	800274c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d024      	beq.n	800278c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	4798      	blx	r3
 800274a:	e01f      	b.n	800278c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002750:	2b00      	cmp	r3, #0
 8002752:	d01b      	beq.n	800278c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	4798      	blx	r3
 800275c:	e016      	b.n	800278c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d107      	bne.n	800277c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0208 	bic.w	r2, r2, #8
 800277a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002790:	2220      	movs	r2, #32
 8002792:	409a      	lsls	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 808f 	beq.w	80028bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0310 	and.w	r3, r3, #16
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 8087 	beq.w	80028bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b2:	2220      	movs	r2, #32
 80027b4:	409a      	lsls	r2, r3
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b05      	cmp	r3, #5
 80027c4:	d136      	bne.n	8002834 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0216 	bic.w	r2, r2, #22
 80027d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695a      	ldr	r2, [r3, #20]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d103      	bne.n	80027f6 <HAL_DMA_IRQHandler+0x1da>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0208 	bic.w	r2, r2, #8
 8002804:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800280a:	223f      	movs	r2, #63	@ 0x3f
 800280c:	409a      	lsls	r2, r3
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002826:	2b00      	cmp	r3, #0
 8002828:	d07e      	beq.n	8002928 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	4798      	blx	r3
        }
        return;
 8002832:	e079      	b.n	8002928 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d01d      	beq.n	800287e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10d      	bne.n	800286c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002854:	2b00      	cmp	r3, #0
 8002856:	d031      	beq.n	80028bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3
 8002860:	e02c      	b.n	80028bc <HAL_DMA_IRQHandler+0x2a0>
 8002862:	bf00      	nop
 8002864:	2000002c 	.word	0x2000002c
 8002868:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002870:	2b00      	cmp	r3, #0
 8002872:	d023      	beq.n	80028bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	4798      	blx	r3
 800287c:	e01e      	b.n	80028bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10f      	bne.n	80028ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0210 	bic.w	r2, r2, #16
 800289a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d003      	beq.n	80028bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d032      	beq.n	800292a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d022      	beq.n	8002916 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2205      	movs	r2, #5
 80028d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	3301      	adds	r3, #1
 80028ec:	60bb      	str	r3, [r7, #8]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d307      	bcc.n	8002904 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f2      	bne.n	80028e8 <HAL_DMA_IRQHandler+0x2cc>
 8002902:	e000      	b.n	8002906 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002904:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	4798      	blx	r3
 8002926:	e000      	b.n	800292a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002928:	bf00      	nop
    }
  }
}
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800294c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b40      	cmp	r3, #64	@ 0x40
 800295c:	d108      	bne.n	8002970 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800296e:	e007      	b.n	8002980 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	60da      	str	r2, [r3, #12]
}
 8002980:	bf00      	nop
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	3b10      	subs	r3, #16
 800299c:	4a14      	ldr	r2, [pc, #80]	@ (80029f0 <DMA_CalcBaseAndBitshift+0x64>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	091b      	lsrs	r3, r3, #4
 80029a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029a6:	4a13      	ldr	r2, [pc, #76]	@ (80029f4 <DMA_CalcBaseAndBitshift+0x68>)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4413      	add	r3, r2
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	d909      	bls.n	80029ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029c2:	f023 0303 	bic.w	r3, r3, #3
 80029c6:	1d1a      	adds	r2, r3, #4
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	659a      	str	r2, [r3, #88]	@ 0x58
 80029cc:	e007      	b.n	80029de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80029d6:	f023 0303 	bic.w	r3, r3, #3
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	aaaaaaab 	.word	0xaaaaaaab
 80029f4:	0800b034 	.word	0x0800b034

080029f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d11f      	bne.n	8002a52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d856      	bhi.n	8002ac6 <DMA_CheckFifoParam+0xce>
 8002a18:	a201      	add	r2, pc, #4	@ (adr r2, 8002a20 <DMA_CheckFifoParam+0x28>)
 8002a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1e:	bf00      	nop
 8002a20:	08002a31 	.word	0x08002a31
 8002a24:	08002a43 	.word	0x08002a43
 8002a28:	08002a31 	.word	0x08002a31
 8002a2c:	08002ac7 	.word	0x08002ac7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d046      	beq.n	8002aca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a40:	e043      	b.n	8002aca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a46:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a4a:	d140      	bne.n	8002ace <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a50:	e03d      	b.n	8002ace <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a5a:	d121      	bne.n	8002aa0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d837      	bhi.n	8002ad2 <DMA_CheckFifoParam+0xda>
 8002a62:	a201      	add	r2, pc, #4	@ (adr r2, 8002a68 <DMA_CheckFifoParam+0x70>)
 8002a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a68:	08002a79 	.word	0x08002a79
 8002a6c:	08002a7f 	.word	0x08002a7f
 8002a70:	08002a79 	.word	0x08002a79
 8002a74:	08002a91 	.word	0x08002a91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a7c:	e030      	b.n	8002ae0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d025      	beq.n	8002ad6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a8e:	e022      	b.n	8002ad6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a94:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002a98:	d11f      	bne.n	8002ada <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a9e:	e01c      	b.n	8002ada <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d903      	bls.n	8002aae <DMA_CheckFifoParam+0xb6>
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d003      	beq.n	8002ab4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002aac:	e018      	b.n	8002ae0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab2:	e015      	b.n	8002ae0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00e      	beq.n	8002ade <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac4:	e00b      	b.n	8002ade <DMA_CheckFifoParam+0xe6>
      break;
 8002ac6:	bf00      	nop
 8002ac8:	e00a      	b.n	8002ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8002aca:	bf00      	nop
 8002acc:	e008      	b.n	8002ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ace:	bf00      	nop
 8002ad0:	e006      	b.n	8002ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad2:	bf00      	nop
 8002ad4:	e004      	b.n	8002ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e002      	b.n	8002ae0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ada:	bf00      	nop
 8002adc:	e000      	b.n	8002ae0 <DMA_CheckFifoParam+0xe8>
      break;
 8002ade:	bf00      	nop
    }
  } 
  
  return status; 
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop

08002af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b089      	sub	sp, #36	@ 0x24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	e159      	b.n	8002dc0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	f040 8148 	bne.w	8002dba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d005      	beq.n	8002b42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d130      	bne.n	8002ba4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b78:	2201      	movs	r2, #1
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	091b      	lsrs	r3, r3, #4
 8002b8e:	f003 0201 	and.w	r2, r3, #1
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 0303 	and.w	r3, r3, #3
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d017      	beq.n	8002be0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	2203      	movs	r2, #3
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d123      	bne.n	8002c34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	08da      	lsrs	r2, r3, #3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3208      	adds	r2, #8
 8002bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	220f      	movs	r2, #15
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f003 0307 	and.w	r3, r3, #7
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	08da      	lsrs	r2, r3, #3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3208      	adds	r2, #8
 8002c2e:	69b9      	ldr	r1, [r7, #24]
 8002c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	2203      	movs	r2, #3
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0203 	and.w	r2, r3, #3
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 80a2 	beq.w	8002dba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	4b57      	ldr	r3, [pc, #348]	@ (8002dd8 <HAL_GPIO_Init+0x2e8>)
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7e:	4a56      	ldr	r2, [pc, #344]	@ (8002dd8 <HAL_GPIO_Init+0x2e8>)
 8002c80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c86:	4b54      	ldr	r3, [pc, #336]	@ (8002dd8 <HAL_GPIO_Init+0x2e8>)
 8002c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c92:	4a52      	ldr	r2, [pc, #328]	@ (8002ddc <HAL_GPIO_Init+0x2ec>)
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	3302      	adds	r3, #2
 8002c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	220f      	movs	r2, #15
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a49      	ldr	r2, [pc, #292]	@ (8002de0 <HAL_GPIO_Init+0x2f0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d019      	beq.n	8002cf2 <HAL_GPIO_Init+0x202>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a48      	ldr	r2, [pc, #288]	@ (8002de4 <HAL_GPIO_Init+0x2f4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d013      	beq.n	8002cee <HAL_GPIO_Init+0x1fe>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a47      	ldr	r2, [pc, #284]	@ (8002de8 <HAL_GPIO_Init+0x2f8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00d      	beq.n	8002cea <HAL_GPIO_Init+0x1fa>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a46      	ldr	r2, [pc, #280]	@ (8002dec <HAL_GPIO_Init+0x2fc>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d007      	beq.n	8002ce6 <HAL_GPIO_Init+0x1f6>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a45      	ldr	r2, [pc, #276]	@ (8002df0 <HAL_GPIO_Init+0x300>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d101      	bne.n	8002ce2 <HAL_GPIO_Init+0x1f2>
 8002cde:	2304      	movs	r3, #4
 8002ce0:	e008      	b.n	8002cf4 <HAL_GPIO_Init+0x204>
 8002ce2:	2307      	movs	r3, #7
 8002ce4:	e006      	b.n	8002cf4 <HAL_GPIO_Init+0x204>
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e004      	b.n	8002cf4 <HAL_GPIO_Init+0x204>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e002      	b.n	8002cf4 <HAL_GPIO_Init+0x204>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_GPIO_Init+0x204>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	69fa      	ldr	r2, [r7, #28]
 8002cf6:	f002 0203 	and.w	r2, r2, #3
 8002cfa:	0092      	lsls	r2, r2, #2
 8002cfc:	4093      	lsls	r3, r2
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d04:	4935      	ldr	r1, [pc, #212]	@ (8002ddc <HAL_GPIO_Init+0x2ec>)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	089b      	lsrs	r3, r3, #2
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d12:	4b38      	ldr	r3, [pc, #224]	@ (8002df4 <HAL_GPIO_Init+0x304>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d36:	4a2f      	ldr	r2, [pc, #188]	@ (8002df4 <HAL_GPIO_Init+0x304>)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002df4 <HAL_GPIO_Init+0x304>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d60:	4a24      	ldr	r2, [pc, #144]	@ (8002df4 <HAL_GPIO_Init+0x304>)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d66:	4b23      	ldr	r3, [pc, #140]	@ (8002df4 <HAL_GPIO_Init+0x304>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d8a:	4a1a      	ldr	r2, [pc, #104]	@ (8002df4 <HAL_GPIO_Init+0x304>)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d90:	4b18      	ldr	r3, [pc, #96]	@ (8002df4 <HAL_GPIO_Init+0x304>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	43db      	mvns	r3, r3
 8002d9a:	69ba      	ldr	r2, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002db4:	4a0f      	ldr	r2, [pc, #60]	@ (8002df4 <HAL_GPIO_Init+0x304>)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	61fb      	str	r3, [r7, #28]
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	2b0f      	cmp	r3, #15
 8002dc4:	f67f aea2 	bls.w	8002b0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dc8:	bf00      	nop
 8002dca:	bf00      	nop
 8002dcc:	3724      	adds	r7, #36	@ 0x24
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40013800 	.word	0x40013800
 8002de0:	40020000 	.word	0x40020000
 8002de4:	40020400 	.word	0x40020400
 8002de8:	40020800 	.word	0x40020800
 8002dec:	40020c00 	.word	0x40020c00
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40013c00 	.word	0x40013c00

08002df8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e101      	b.n	800300e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d106      	bne.n	8002e2a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f006 fac9 	bl	80093bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e38:	d102      	bne.n	8002e40 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 fecc 	bl	8005be2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	7c1a      	ldrb	r2, [r3, #16]
 8002e52:	f88d 2000 	strb.w	r2, [sp]
 8002e56:	3304      	adds	r3, #4
 8002e58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e5a:	f002 fdab 	bl	80059b4 <USB_CoreInit>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0ce      	b.n	800300e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2100      	movs	r1, #0
 8002e76:	4618      	mov	r0, r3
 8002e78:	f002 fec4 	bl	8005c04 <USB_SetCurrentMode>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d005      	beq.n	8002e8e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2202      	movs	r2, #2
 8002e86:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e0bf      	b.n	800300e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e8e:	2300      	movs	r3, #0
 8002e90:	73fb      	strb	r3, [r7, #15]
 8002e92:	e04a      	b.n	8002f2a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e94:	7bfa      	ldrb	r2, [r7, #15]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3315      	adds	r3, #21
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3314      	adds	r3, #20
 8002eb8:	7bfa      	ldrb	r2, [r7, #15]
 8002eba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	7bfb      	ldrb	r3, [r7, #15]
 8002ec0:	b298      	uxth	r0, r3
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	332e      	adds	r3, #46	@ 0x2e
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ed4:	7bfa      	ldrb	r2, [r7, #15]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	3318      	adds	r3, #24
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ee8:	7bfa      	ldrb	r2, [r7, #15]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	331c      	adds	r3, #28
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002efc:	7bfa      	ldrb	r2, [r7, #15]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	3320      	adds	r3, #32
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	3324      	adds	r3, #36	@ 0x24
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
 8002f26:	3301      	adds	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	791b      	ldrb	r3, [r3, #4]
 8002f2e:	7bfa      	ldrb	r2, [r7, #15]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d3af      	bcc.n	8002e94 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f34:	2300      	movs	r3, #0
 8002f36:	73fb      	strb	r3, [r7, #15]
 8002f38:	e044      	b.n	8002fc4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f3a:	7bfa      	ldrb	r2, [r7, #15]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	00db      	lsls	r3, r3, #3
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f50:	7bfa      	ldrb	r2, [r7, #15]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002f62:	7bfa      	ldrb	r2, [r7, #15]
 8002f64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f66:	7bfa      	ldrb	r2, [r7, #15]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f7c:	7bfa      	ldrb	r2, [r7, #15]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f92:	7bfa      	ldrb	r2, [r7, #15]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fa8:	7bfa      	ldrb	r2, [r7, #15]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	73fb      	strb	r3, [r7, #15]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	791b      	ldrb	r3, [r3, #4]
 8002fc8:	7bfa      	ldrb	r2, [r7, #15]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d3b5      	bcc.n	8002f3a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	7c1a      	ldrb	r2, [r3, #16]
 8002fd6:	f88d 2000 	strb.w	r2, [sp]
 8002fda:	3304      	adds	r3, #4
 8002fdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fde:	f002 fe5d 	bl	8005c9c <USB_DevInit>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e00c      	b.n	800300e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f003 fea1 	bl	8006d4e <USB_DevDisconnect>

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_PCD_Start+0x1c>
 800302e:	2302      	movs	r3, #2
 8003030:	e022      	b.n	8003078 <HAL_PCD_Start+0x62>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800304a:	2b01      	cmp	r3, #1
 800304c:	d105      	bne.n	800305a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003052:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f002 fdae 	bl	8005bc0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f003 fe4f 	bl	8006d0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003080:	b590      	push	{r4, r7, lr}
 8003082:	b08d      	sub	sp, #52	@ 0x34
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f003 ff0d 	bl	8006eb6 <USB_GetMode>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f040 848c 	bne.w	80039bc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f003 fe71 	bl	8006d90 <USB_ReadInterrupts>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 8482 	beq.w	80039ba <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	0a1b      	lsrs	r3, r3, #8
 80030c0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f003 fe5e 	bl	8006d90 <USB_ReadInterrupts>
 80030d4:	4603      	mov	r3, r0
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d107      	bne.n	80030ee <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695a      	ldr	r2, [r3, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f002 0202 	and.w	r2, r2, #2
 80030ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f003 fe4c 	bl	8006d90 <USB_ReadInterrupts>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	2b10      	cmp	r3, #16
 8003100:	d161      	bne.n	80031c6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	699a      	ldr	r2, [r3, #24]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0210 	bic.w	r2, r2, #16
 8003110:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	f003 020f 	and.w	r2, r3, #15
 800311e:	4613      	mov	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	3304      	adds	r3, #4
 8003130:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	0c5b      	lsrs	r3, r3, #17
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	2b02      	cmp	r3, #2
 800313c:	d124      	bne.n	8003188 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003144:	4013      	ands	r3, r2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d035      	beq.n	80031b6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003154:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003158:	b29b      	uxth	r3, r3
 800315a:	461a      	mov	r2, r3
 800315c:	6a38      	ldr	r0, [r7, #32]
 800315e:	f003 fc83 	bl	8006a68 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800316e:	441a      	add	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	695a      	ldr	r2, [r3, #20]
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	091b      	lsrs	r3, r3, #4
 800317c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003180:	441a      	add	r2, r3
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	615a      	str	r2, [r3, #20]
 8003186:	e016      	b.n	80031b6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	0c5b      	lsrs	r3, r3, #17
 800318c:	f003 030f 	and.w	r3, r3, #15
 8003190:	2b06      	cmp	r3, #6
 8003192:	d110      	bne.n	80031b6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800319a:	2208      	movs	r2, #8
 800319c:	4619      	mov	r1, r3
 800319e:	6a38      	ldr	r0, [r7, #32]
 80031a0:	f003 fc62 	bl	8006a68 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031b0:	441a      	add	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699a      	ldr	r2, [r3, #24]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0210 	orr.w	r2, r2, #16
 80031c4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f003 fde0 	bl	8006d90 <USB_ReadInterrupts>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031da:	f040 80a7 	bne.w	800332c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80031de:	2300      	movs	r3, #0
 80031e0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f003 fde5 	bl	8006db6 <USB_ReadDevAllOutEpInterrupt>
 80031ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80031ee:	e099      	b.n	8003324 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 808e 	beq.w	8003318 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f003 fe09 	bl	8006e1e <USB_ReadDevOutEPInterrupt>
 800320c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00c      	beq.n	8003232 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	4413      	add	r3, r2
 8003220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003224:	461a      	mov	r2, r3
 8003226:	2301      	movs	r3, #1
 8003228:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800322a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fea1 	bl	8003f74 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00c      	beq.n	8003256 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800323c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	4413      	add	r3, r2
 8003244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003248:	461a      	mov	r2, r3
 800324a:	2308      	movs	r3, #8
 800324c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800324e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 ff77 	bl	8004144 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b00      	cmp	r3, #0
 800325e:	d008      	beq.n	8003272 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	4413      	add	r3, r2
 8003268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800326c:	461a      	mov	r2, r3
 800326e:	2310      	movs	r3, #16
 8003270:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d030      	beq.n	80032de <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003284:	2b80      	cmp	r3, #128	@ 0x80
 8003286:	d109      	bne.n	800329c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	69fa      	ldr	r2, [r7, #28]
 8003292:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003296:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800329a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800329c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	3304      	adds	r3, #4
 80032b0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	78db      	ldrb	r3, [r3, #3]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d108      	bne.n	80032cc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2200      	movs	r2, #0
 80032be:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80032c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	4619      	mov	r1, r3
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f006 f974 	bl	80095b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80032cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032d8:	461a      	mov	r2, r3
 80032da:	2302      	movs	r3, #2
 80032dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032f4:	461a      	mov	r2, r3
 80032f6:	2320      	movs	r3, #32
 80032f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d009      	beq.n	8003318 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003310:	461a      	mov	r2, r3
 8003312:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003316:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331a:	3301      	adds	r3, #1
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800331e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003326:	2b00      	cmp	r3, #0
 8003328:	f47f af62 	bne.w	80031f0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f003 fd2d 	bl	8006d90 <USB_ReadInterrupts>
 8003336:	4603      	mov	r3, r0
 8003338:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800333c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003340:	f040 80db 	bne.w	80034fa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f003 fd4e 	bl	8006dea <USB_ReadDevAllInEpInterrupt>
 800334e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003354:	e0cd      	b.n	80034f2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 80c2 	beq.w	80034e6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	4611      	mov	r1, r2
 800336c:	4618      	mov	r0, r3
 800336e:	f003 fd74 	bl	8006e5a <USB_ReadDevInEPInterrupt>
 8003372:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d057      	beq.n	800342e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800337e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003380:	f003 030f 	and.w	r3, r3, #15
 8003384:	2201      	movs	r2, #1
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003392:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	43db      	mvns	r3, r3
 8003398:	69f9      	ldr	r1, [r7, #28]
 800339a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800339e:	4013      	ands	r3, r2
 80033a0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033ae:	461a      	mov	r2, r3
 80033b0:	2301      	movs	r3, #1
 80033b2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	799b      	ldrb	r3, [r3, #6]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d132      	bne.n	8003422 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4413      	add	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	3320      	adds	r3, #32
 80033cc:	6819      	ldr	r1, [r3, #0]
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033d2:	4613      	mov	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	4413      	add	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4403      	add	r3, r0
 80033dc:	331c      	adds	r3, #28
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4419      	add	r1, r3
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e6:	4613      	mov	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4403      	add	r3, r0
 80033f0:	3320      	adds	r3, #32
 80033f2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d113      	bne.n	8003422 <HAL_PCD_IRQHandler+0x3a2>
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033fe:	4613      	mov	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	3324      	adds	r3, #36	@ 0x24
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d108      	bne.n	8003422 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800341a:	461a      	mov	r2, r3
 800341c:	2101      	movs	r1, #1
 800341e:	f003 fd7b 	bl	8006f18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003424:	b2db      	uxtb	r3, r3
 8003426:	4619      	mov	r1, r3
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f006 f848 	bl	80094be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b00      	cmp	r3, #0
 8003436:	d008      	beq.n	800344a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	4413      	add	r3, r2
 8003440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003444:	461a      	mov	r2, r3
 8003446:	2308      	movs	r3, #8
 8003448:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003460:	461a      	mov	r2, r3
 8003462:	2310      	movs	r3, #16
 8003464:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	4413      	add	r3, r2
 8003478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800347c:	461a      	mov	r2, r3
 800347e:	2340      	movs	r3, #64	@ 0x40
 8003480:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d023      	beq.n	80034d4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800348c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800348e:	6a38      	ldr	r0, [r7, #32]
 8003490:	f002 fd68 	bl	8005f64 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003494:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	3310      	adds	r3, #16
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	4413      	add	r3, r2
 80034a4:	3304      	adds	r3, #4
 80034a6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	78db      	ldrb	r3, [r3, #3]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d108      	bne.n	80034c2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2200      	movs	r2, #0
 80034b4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	4619      	mov	r1, r3
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f006 f88b 	bl	80095d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034ce:	461a      	mov	r2, r3
 80034d0:	2302      	movs	r3, #2
 80034d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 fcbb 	bl	8003e5c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	3301      	adds	r3, #1
 80034ea:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80034ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ee:	085b      	lsrs	r3, r3, #1
 80034f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80034f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f47f af2e 	bne.w	8003356 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f003 fc46 	bl	8006d90 <USB_ReadInterrupts>
 8003504:	4603      	mov	r3, r0
 8003506:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800350a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800350e:	d122      	bne.n	8003556 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800351e:	f023 0301 	bic.w	r3, r3, #1
 8003522:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800352a:	2b01      	cmp	r3, #1
 800352c:	d108      	bne.n	8003540 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003536:	2100      	movs	r1, #0
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fea1 	bl	8004280 <HAL_PCDEx_LPM_Callback>
 800353e:	e002      	b.n	8003546 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f006 f829 	bl	8009598 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003554:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f003 fc18 	bl	8006d90 <USB_ReadInterrupts>
 8003560:	4603      	mov	r3, r0
 8003562:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003566:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800356a:	d112      	bne.n	8003592 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b01      	cmp	r3, #1
 800357a:	d102      	bne.n	8003582 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f005 ffe5 	bl	800954c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695a      	ldr	r2, [r3, #20]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003590:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f003 fbfa 	bl	8006d90 <USB_ReadInterrupts>
 800359c:	4603      	mov	r3, r0
 800359e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035a6:	f040 80b7 	bne.w	8003718 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035b8:	f023 0301 	bic.w	r3, r3, #1
 80035bc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2110      	movs	r1, #16
 80035c4:	4618      	mov	r0, r3
 80035c6:	f002 fccd 	bl	8005f64 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ca:	2300      	movs	r3, #0
 80035cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035ce:	e046      	b.n	800365e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80035d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035dc:	461a      	mov	r2, r3
 80035de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80035e2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035f4:	0151      	lsls	r1, r2, #5
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	440a      	add	r2, r1
 80035fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003602:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003610:	461a      	mov	r2, r3
 8003612:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003616:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	4413      	add	r3, r2
 8003620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003628:	0151      	lsls	r1, r2, #5
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	440a      	add	r2, r1
 800362e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003632:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003636:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	4413      	add	r3, r2
 8003640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003648:	0151      	lsls	r1, r2, #5
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	440a      	add	r2, r1
 800364e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003652:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003656:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800365a:	3301      	adds	r3, #1
 800365c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	791b      	ldrb	r3, [r3, #4]
 8003662:	461a      	mov	r2, r3
 8003664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003666:	4293      	cmp	r3, r2
 8003668:	d3b2      	bcc.n	80035d0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003678:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800367c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	7bdb      	ldrb	r3, [r3, #15]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d016      	beq.n	80036b4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800368c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003690:	69fa      	ldr	r2, [r7, #28]
 8003692:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003696:	f043 030b 	orr.w	r3, r3, #11
 800369a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036ac:	f043 030b 	orr.w	r3, r3, #11
 80036b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80036b2:	e015      	b.n	80036e0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80036c6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80036ca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036da:	f043 030b 	orr.w	r3, r3, #11
 80036de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	69fa      	ldr	r2, [r7, #28]
 80036ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036ee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80036f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003702:	461a      	mov	r2, r3
 8003704:	f003 fc08 	bl	8006f18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003716:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f003 fb37 	bl	8006d90 <USB_ReadInterrupts>
 8003722:	4603      	mov	r3, r0
 8003724:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003728:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800372c:	d123      	bne.n	8003776 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f003 fbcd 	bl	8006ed2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f002 fc8a 	bl	8006056 <USB_GetDevSpeed>
 8003742:	4603      	mov	r3, r0
 8003744:	461a      	mov	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681c      	ldr	r4, [r3, #0]
 800374e:	f001 f9c7 	bl	8004ae0 <HAL_RCC_GetHCLKFreq>
 8003752:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003758:	461a      	mov	r2, r3
 800375a:	4620      	mov	r0, r4
 800375c:	f002 f98e 	bl	8005a7c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f005 fed4 	bl	800950e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003774:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f003 fb08 	bl	8006d90 <USB_ReadInterrupts>
 8003780:	4603      	mov	r3, r0
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b08      	cmp	r3, #8
 8003788:	d10a      	bne.n	80037a0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f005 feb1 	bl	80094f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695a      	ldr	r2, [r3, #20]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f002 0208 	and.w	r2, r2, #8
 800379e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f003 faf3 	bl	8006d90 <USB_ReadInterrupts>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b0:	2b80      	cmp	r3, #128	@ 0x80
 80037b2:	d123      	bne.n	80037fc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037c0:	2301      	movs	r3, #1
 80037c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c4:	e014      	b.n	80037f0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80037c6:	6879      	ldr	r1, [r7, #4]
 80037c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ca:	4613      	mov	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	4413      	add	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d105      	bne.n	80037ea <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80037de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	4619      	mov	r1, r3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 fb08 	bl	8003dfa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	3301      	adds	r3, #1
 80037ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	791b      	ldrb	r3, [r3, #4]
 80037f4:	461a      	mov	r2, r3
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d3e4      	bcc.n	80037c6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4618      	mov	r0, r3
 8003802:	f003 fac5 	bl	8006d90 <USB_ReadInterrupts>
 8003806:	4603      	mov	r3, r0
 8003808:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800380c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003810:	d13c      	bne.n	800388c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003812:	2301      	movs	r3, #1
 8003814:	627b      	str	r3, [r7, #36]	@ 0x24
 8003816:	e02b      	b.n	8003870 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	4413      	add	r3, r2
 8003820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	3318      	adds	r3, #24
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d115      	bne.n	800386a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800383e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003840:	2b00      	cmp	r3, #0
 8003842:	da12      	bge.n	800386a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003848:	4613      	mov	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	3317      	adds	r3, #23
 8003854:	2201      	movs	r2, #1
 8003856:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385a:	b2db      	uxtb	r3, r3
 800385c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003860:	b2db      	uxtb	r3, r3
 8003862:	4619      	mov	r1, r3
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fac8 	bl	8003dfa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800386a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386c:	3301      	adds	r3, #1
 800386e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	791b      	ldrb	r3, [r3, #4]
 8003874:	461a      	mov	r2, r3
 8003876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003878:	4293      	cmp	r3, r2
 800387a:	d3cd      	bcc.n	8003818 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800388a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f003 fa7d 	bl	8006d90 <USB_ReadInterrupts>
 8003896:	4603      	mov	r3, r0
 8003898:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800389c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038a0:	d156      	bne.n	8003950 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038a2:	2301      	movs	r3, #1
 80038a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038a6:	e045      	b.n	8003934 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80038a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038bc:	4613      	mov	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d12e      	bne.n	800392e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	da2b      	bge.n	800392e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80038e2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d121      	bne.n	800392e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ee:	4613      	mov	r3, r2
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003926:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800392a:	6053      	str	r3, [r2, #4]
            break;
 800392c:	e008      	b.n	8003940 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003930:	3301      	adds	r3, #1
 8003932:	627b      	str	r3, [r7, #36]	@ 0x24
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	791b      	ldrb	r3, [r3, #4]
 8003938:	461a      	mov	r2, r3
 800393a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393c:	4293      	cmp	r3, r2
 800393e:	d3b3      	bcc.n	80038a8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695a      	ldr	r2, [r3, #20]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800394e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f003 fa1b 	bl	8006d90 <USB_ReadInterrupts>
 800395a:	4603      	mov	r3, r0
 800395c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003964:	d10a      	bne.n	800397c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f005 fe48 	bl	80095fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800397a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f003 fa05 	bl	8006d90 <USB_ReadInterrupts>
 8003986:	4603      	mov	r3, r0
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b04      	cmp	r3, #4
 800398e:	d115      	bne.n	80039bc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f005 fe38 	bl	8009618 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6859      	ldr	r1, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	605a      	str	r2, [r3, #4]
 80039b8:	e000      	b.n	80039bc <HAL_PCD_IRQHandler+0x93c>
      return;
 80039ba:	bf00      	nop
    }
  }
}
 80039bc:	3734      	adds	r7, #52	@ 0x34
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd90      	pop	{r4, r7, pc}

080039c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b082      	sub	sp, #8
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	460b      	mov	r3, r1
 80039cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_PCD_SetAddress+0x1a>
 80039d8:	2302      	movs	r3, #2
 80039da:	e012      	b.n	8003a02 <HAL_PCD_SetAddress+0x40>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	78fa      	ldrb	r2, [r7, #3]
 80039e8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	78fa      	ldrb	r2, [r7, #3]
 80039f0:	4611      	mov	r1, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f003 f964 	bl	8006cc0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	4608      	mov	r0, r1
 8003a14:	4611      	mov	r1, r2
 8003a16:	461a      	mov	r2, r3
 8003a18:	4603      	mov	r3, r0
 8003a1a:	70fb      	strb	r3, [r7, #3]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	803b      	strh	r3, [r7, #0]
 8003a20:	4613      	mov	r3, r2
 8003a22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	da0f      	bge.n	8003a50 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	f003 020f 	and.w	r2, r3, #15
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	3310      	adds	r3, #16
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	4413      	add	r3, r2
 8003a44:	3304      	adds	r3, #4
 8003a46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	705a      	strb	r2, [r3, #1]
 8003a4e:	e00f      	b.n	8003a70 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	f003 020f 	and.w	r2, r3, #15
 8003a56:	4613      	mov	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	4413      	add	r3, r2
 8003a66:	3304      	adds	r3, #4
 8003a68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a70:	78fb      	ldrb	r3, [r7, #3]
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a7c:	883a      	ldrh	r2, [r7, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	78ba      	ldrb	r2, [r7, #2]
 8003a86:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	785b      	ldrb	r3, [r3, #1]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d004      	beq.n	8003a9a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a9a:	78bb      	ldrb	r3, [r7, #2]
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d102      	bne.n	8003aa6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_PCD_EP_Open+0xaa>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e00e      	b.n	8003ad2 <HAL_PCD_EP_Open+0xc8>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68f9      	ldr	r1, [r7, #12]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f002 faec 	bl	80060a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003ad0:	7afb      	ldrb	r3, [r7, #11]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b084      	sub	sp, #16
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ae6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	da0f      	bge.n	8003b0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aee:	78fb      	ldrb	r3, [r7, #3]
 8003af0:	f003 020f 	and.w	r2, r3, #15
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	3310      	adds	r3, #16
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	4413      	add	r3, r2
 8003b02:	3304      	adds	r3, #4
 8003b04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	705a      	strb	r2, [r3, #1]
 8003b0c:	e00f      	b.n	8003b2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b0e:	78fb      	ldrb	r3, [r7, #3]
 8003b10:	f003 020f 	and.w	r2, r3, #15
 8003b14:	4613      	mov	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	4413      	add	r3, r2
 8003b24:	3304      	adds	r3, #4
 8003b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b2e:	78fb      	ldrb	r3, [r7, #3]
 8003b30:	f003 030f 	and.w	r3, r3, #15
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_PCD_EP_Close+0x6e>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e00e      	b.n	8003b66 <HAL_PCD_EP_Close+0x8c>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68f9      	ldr	r1, [r7, #12]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f002 fb2a 	bl	80061b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b086      	sub	sp, #24
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	603b      	str	r3, [r7, #0]
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b7e:	7afb      	ldrb	r3, [r7, #11]
 8003b80:	f003 020f 	and.w	r2, r3, #15
 8003b84:	4613      	mov	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4413      	add	r3, r2
 8003b94:	3304      	adds	r3, #4
 8003b96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2200      	movs	r2, #0
 8003bae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bb0:	7afb      	ldrb	r3, [r7, #11]
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	b2da      	uxtb	r2, r3
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	799b      	ldrb	r3, [r3, #6]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d102      	bne.n	8003bca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6818      	ldr	r0, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	799b      	ldrb	r3, [r3, #6]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	6979      	ldr	r1, [r7, #20]
 8003bd6:	f002 fbc7 	bl	8006368 <USB_EPStartXfer>

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	f003 020f 	and.w	r2, r3, #15
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003c06:	681b      	ldr	r3, [r3, #0]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	607a      	str	r2, [r7, #4]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	460b      	mov	r3, r1
 8003c22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c24:	7afb      	ldrb	r3, [r7, #11]
 8003c26:	f003 020f 	and.w	r2, r3, #15
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	3310      	adds	r3, #16
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4413      	add	r3, r2
 8003c38:	3304      	adds	r3, #4
 8003c3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2201      	movs	r2, #1
 8003c52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c54:	7afb      	ldrb	r3, [r7, #11]
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	799b      	ldrb	r3, [r3, #6]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d102      	bne.n	8003c6e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	799b      	ldrb	r3, [r3, #6]
 8003c76:	461a      	mov	r2, r3
 8003c78:	6979      	ldr	r1, [r7, #20]
 8003c7a:	f002 fb75 	bl	8006368 <USB_EPStartXfer>

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	7912      	ldrb	r2, [r2, #4]
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e04f      	b.n	8003d46 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	da0f      	bge.n	8003cce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cae:	78fb      	ldrb	r3, [r7, #3]
 8003cb0:	f003 020f 	and.w	r2, r3, #15
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	3310      	adds	r3, #16
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	705a      	strb	r2, [r3, #1]
 8003ccc:	e00d      	b.n	8003cea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cce:	78fa      	ldrb	r2, [r7, #3]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	4413      	add	r3, r2
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2201      	movs	r2, #1
 8003cee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_PCD_EP_SetStall+0x82>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e01d      	b.n	8003d46 <HAL_PCD_EP_SetStall+0xbe>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68f9      	ldr	r1, [r7, #12]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f002 fefd 	bl	8006b18 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d1e:	78fb      	ldrb	r3, [r7, #3]
 8003d20:	f003 030f 	and.w	r3, r3, #15
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d109      	bne.n	8003d3c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	7999      	ldrb	r1, [r3, #6]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d36:	461a      	mov	r2, r3
 8003d38:	f003 f8ee 	bl	8006f18 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	460b      	mov	r3, r1
 8003d58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d5a:	78fb      	ldrb	r3, [r7, #3]
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	7912      	ldrb	r2, [r2, #4]
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d901      	bls.n	8003d6c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e042      	b.n	8003df2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	da0f      	bge.n	8003d94 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d74:	78fb      	ldrb	r3, [r7, #3]
 8003d76:	f003 020f 	and.w	r2, r3, #15
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	3310      	adds	r3, #16
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	4413      	add	r3, r2
 8003d88:	3304      	adds	r3, #4
 8003d8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	705a      	strb	r2, [r3, #1]
 8003d92:	e00f      	b.n	8003db4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d94:	78fb      	ldrb	r3, [r7, #3]
 8003d96:	f003 020f 	and.w	r2, r3, #15
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	3304      	adds	r3, #4
 8003dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dba:	78fb      	ldrb	r3, [r7, #3]
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_PCD_EP_ClrStall+0x86>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e00e      	b.n	8003df2 <HAL_PCD_EP_ClrStall+0xa4>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68f9      	ldr	r1, [r7, #12]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f002 ff06 	bl	8006bf4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
 8003e02:	460b      	mov	r3, r1
 8003e04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	da0c      	bge.n	8003e28 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e0e:	78fb      	ldrb	r3, [r7, #3]
 8003e10:	f003 020f 	and.w	r2, r3, #15
 8003e14:	4613      	mov	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	3310      	adds	r3, #16
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	4413      	add	r3, r2
 8003e22:	3304      	adds	r3, #4
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	e00c      	b.n	8003e42 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	f003 020f 	and.w	r2, r3, #15
 8003e2e:	4613      	mov	r3, r2
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	4413      	add	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	3304      	adds	r3, #4
 8003e40:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68f9      	ldr	r1, [r7, #12]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f002 fd25 	bl	8006898 <USB_EPStopXfer>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e52:	7afb      	ldrb	r3, [r7, #11]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08a      	sub	sp, #40	@ 0x28
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	4613      	mov	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	3310      	adds	r3, #16
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	4413      	add	r3, r2
 8003e80:	3304      	adds	r3, #4
 8003e82:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	695a      	ldr	r2, [r3, #20]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d901      	bls.n	8003e94 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e06b      	b.n	8003f6c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	691a      	ldr	r2, [r3, #16]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	69fa      	ldr	r2, [r7, #28]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d902      	bls.n	8003eb0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	3303      	adds	r3, #3
 8003eb4:	089b      	lsrs	r3, r3, #2
 8003eb6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003eb8:	e02a      	b.n	8003f10 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d902      	bls.n	8003ed6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	3303      	adds	r3, #3
 8003eda:	089b      	lsrs	r3, r3, #2
 8003edc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	68d9      	ldr	r1, [r3, #12]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	6978      	ldr	r0, [r7, #20]
 8003ef4:	f002 fd7a 	bl	80069ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	441a      	add	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	695a      	ldr	r2, [r3, #20]
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	441a      	add	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d809      	bhi.n	8003f3a <PCD_WriteEmptyTxFifo+0xde>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	695a      	ldr	r2, [r3, #20]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d203      	bcs.n	8003f3a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1bf      	bne.n	8003eba <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	691a      	ldr	r2, [r3, #16]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d811      	bhi.n	8003f6a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	6939      	ldr	r1, [r7, #16]
 8003f62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f66:	4013      	ands	r3, r2
 8003f68:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3720      	adds	r7, #32
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	333c      	adds	r3, #60	@ 0x3c
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	799b      	ldrb	r3, [r3, #6]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d17b      	bne.n	80040a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d015      	beq.n	8003fe0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	4a61      	ldr	r2, [pc, #388]	@ (800413c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	f240 80b9 	bls.w	8004130 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 80b3 	beq.w	8004130 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	015a      	lsls	r2, r3, #5
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fdc:	6093      	str	r3, [r2, #8]
 8003fde:	e0a7      	b.n	8004130 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f003 0320 	and.w	r3, r3, #32
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d009      	beq.n	8003ffe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2320      	movs	r3, #32
 8003ffa:	6093      	str	r3, [r2, #8]
 8003ffc:	e098      	b.n	8004130 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004004:	2b00      	cmp	r3, #0
 8004006:	f040 8093 	bne.w	8004130 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	4a4b      	ldr	r2, [pc, #300]	@ (800413c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d90f      	bls.n	8004032 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004028:	461a      	mov	r2, r3
 800402a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800402e:	6093      	str	r3, [r2, #8]
 8004030:	e07e      	b.n	8004130 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	4413      	add	r3, r2
 8004044:	3304      	adds	r3, #4
 8004046:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a1a      	ldr	r2, [r3, #32]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	0159      	lsls	r1, r3, #5
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	440b      	add	r3, r1
 8004054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800405e:	1ad2      	subs	r2, r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d114      	bne.n	8004094 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d109      	bne.n	8004086 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800407c:	461a      	mov	r2, r3
 800407e:	2101      	movs	r1, #1
 8004080:	f002 ff4a 	bl	8006f18 <USB_EP0_OutStart>
 8004084:	e006      	b.n	8004094 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	441a      	add	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	4619      	mov	r1, r3
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f005 f9f4 	bl	8009488 <HAL_PCD_DataOutStageCallback>
 80040a0:	e046      	b.n	8004130 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	4a26      	ldr	r2, [pc, #152]	@ (8004140 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d124      	bne.n	80040f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040c0:	461a      	mov	r2, r3
 80040c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040c6:	6093      	str	r3, [r2, #8]
 80040c8:	e032      	b.n	8004130 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e0:	461a      	mov	r2, r3
 80040e2:	2320      	movs	r3, #32
 80040e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	4619      	mov	r1, r3
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f005 f9cb 	bl	8009488 <HAL_PCD_DataOutStageCallback>
 80040f2:	e01d      	b.n	8004130 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d114      	bne.n	8004124 <PCD_EP_OutXfrComplete_int+0x1b0>
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	4613      	mov	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	440b      	add	r3, r1
 8004108:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d108      	bne.n	8004124 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6818      	ldr	r0, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800411c:	461a      	mov	r2, r3
 800411e:	2100      	movs	r1, #0
 8004120:	f002 fefa 	bl	8006f18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	b2db      	uxtb	r3, r3
 8004128:	4619      	mov	r1, r3
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f005 f9ac 	bl	8009488 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3720      	adds	r7, #32
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	4f54300a 	.word	0x4f54300a
 8004140:	4f54310a 	.word	0x4f54310a

08004144 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	333c      	adds	r3, #60	@ 0x3c
 800415c:	3304      	adds	r3, #4
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4a15      	ldr	r2, [pc, #84]	@ (80041cc <PCD_EP_OutSetupPacket_int+0x88>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d90e      	bls.n	8004198 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004180:	2b00      	cmp	r3, #0
 8004182:	d009      	beq.n	8004198 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004190:	461a      	mov	r2, r3
 8004192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004196:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f005 f963 	bl	8009464 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4a0a      	ldr	r2, [pc, #40]	@ (80041cc <PCD_EP_OutSetupPacket_int+0x88>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d90c      	bls.n	80041c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	799b      	ldrb	r3, [r3, #6]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d108      	bne.n	80041c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041b8:	461a      	mov	r2, r3
 80041ba:	2101      	movs	r1, #1
 80041bc:	f002 feac 	bl	8006f18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	4f54300a 	.word	0x4f54300a

080041d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	460b      	mov	r3, r1
 80041da:	70fb      	strb	r3, [r7, #3]
 80041dc:	4613      	mov	r3, r2
 80041de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d107      	bne.n	80041fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80041ee:	883b      	ldrh	r3, [r7, #0]
 80041f0:	0419      	lsls	r1, r3, #16
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80041fc:	e028      	b.n	8004250 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004204:	0c1b      	lsrs	r3, r3, #16
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	4413      	add	r3, r2
 800420a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800420c:	2300      	movs	r3, #0
 800420e:	73fb      	strb	r3, [r7, #15]
 8004210:	e00d      	b.n	800422e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	3340      	adds	r3, #64	@ 0x40
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	0c1b      	lsrs	r3, r3, #16
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	4413      	add	r3, r2
 8004226:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	3301      	adds	r3, #1
 800422c:	73fb      	strb	r3, [r7, #15]
 800422e:	7bfa      	ldrb	r2, [r7, #15]
 8004230:	78fb      	ldrb	r3, [r7, #3]
 8004232:	3b01      	subs	r3, #1
 8004234:	429a      	cmp	r2, r3
 8004236:	d3ec      	bcc.n	8004212 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004238:	883b      	ldrh	r3, [r7, #0]
 800423a:	0418      	lsls	r0, r3, #16
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6819      	ldr	r1, [r3, #0]
 8004240:	78fb      	ldrb	r3, [r7, #3]
 8004242:	3b01      	subs	r3, #1
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	4302      	orrs	r2, r0
 8004248:	3340      	adds	r3, #64	@ 0x40
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr

0800425e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800425e:	b480      	push	{r7}
 8004260:	b083      	sub	sp, #12
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
 8004266:	460b      	mov	r3, r1
 8004268:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	887a      	ldrh	r2, [r7, #2]
 8004270:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e267      	b.n	800477a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d075      	beq.n	80043a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042b6:	4b88      	ldr	r3, [pc, #544]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 030c 	and.w	r3, r3, #12
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d00c      	beq.n	80042dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042c2:	4b85      	ldr	r3, [pc, #532]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d112      	bne.n	80042f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042ce:	4b82      	ldr	r3, [pc, #520]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042da:	d10b      	bne.n	80042f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042dc:	4b7e      	ldr	r3, [pc, #504]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d05b      	beq.n	80043a0 <HAL_RCC_OscConfig+0x108>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d157      	bne.n	80043a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e242      	b.n	800477a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042fc:	d106      	bne.n	800430c <HAL_RCC_OscConfig+0x74>
 80042fe:	4b76      	ldr	r3, [pc, #472]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a75      	ldr	r2, [pc, #468]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 8004304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	e01d      	b.n	8004348 <HAL_RCC_OscConfig+0xb0>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004314:	d10c      	bne.n	8004330 <HAL_RCC_OscConfig+0x98>
 8004316:	4b70      	ldr	r3, [pc, #448]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a6f      	ldr	r2, [pc, #444]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 800431c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004320:	6013      	str	r3, [r2, #0]
 8004322:	4b6d      	ldr	r3, [pc, #436]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a6c      	ldr	r2, [pc, #432]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 8004328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e00b      	b.n	8004348 <HAL_RCC_OscConfig+0xb0>
 8004330:	4b69      	ldr	r3, [pc, #420]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a68      	ldr	r2, [pc, #416]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 8004336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	4b66      	ldr	r3, [pc, #408]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a65      	ldr	r2, [pc, #404]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 8004342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d013      	beq.n	8004378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004350:	f7fd fa6a 	bl	8001828 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004358:	f7fd fa66 	bl	8001828 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	@ 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e207      	b.n	800477a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436a:	4b5b      	ldr	r3, [pc, #364]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0xc0>
 8004376:	e014      	b.n	80043a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fd fa56 	bl	8001828 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004380:	f7fd fa52 	bl	8001828 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b64      	cmp	r3, #100	@ 0x64
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e1f3      	b.n	800477a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004392:	4b51      	ldr	r3, [pc, #324]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0xe8>
 800439e:	e000      	b.n	80043a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d063      	beq.n	8004476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043ae:	4b4a      	ldr	r3, [pc, #296]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00b      	beq.n	80043d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043ba:	4b47      	ldr	r3, [pc, #284]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d11c      	bne.n	8004400 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043c6:	4b44      	ldr	r3, [pc, #272]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d116      	bne.n	8004400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043d2:	4b41      	ldr	r3, [pc, #260]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d005      	beq.n	80043ea <HAL_RCC_OscConfig+0x152>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d001      	beq.n	80043ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e1c7      	b.n	800477a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ea:	4b3b      	ldr	r3, [pc, #236]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4937      	ldr	r1, [pc, #220]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fe:	e03a      	b.n	8004476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d020      	beq.n	800444a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004408:	4b34      	ldr	r3, [pc, #208]	@ (80044dc <HAL_RCC_OscConfig+0x244>)
 800440a:	2201      	movs	r2, #1
 800440c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440e:	f7fd fa0b 	bl	8001828 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004416:	f7fd fa07 	bl	8001828 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e1a8      	b.n	800477a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004428:	4b2b      	ldr	r3, [pc, #172]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0f0      	beq.n	8004416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004434:	4b28      	ldr	r3, [pc, #160]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	4925      	ldr	r1, [pc, #148]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 8004444:	4313      	orrs	r3, r2
 8004446:	600b      	str	r3, [r1, #0]
 8004448:	e015      	b.n	8004476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800444a:	4b24      	ldr	r3, [pc, #144]	@ (80044dc <HAL_RCC_OscConfig+0x244>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fd f9ea 	bl	8001828 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004458:	f7fd f9e6 	bl	8001828 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e187      	b.n	800477a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800446a:	4b1b      	ldr	r3, [pc, #108]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0308 	and.w	r3, r3, #8
 800447e:	2b00      	cmp	r3, #0
 8004480:	d036      	beq.n	80044f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d016      	beq.n	80044b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800448a:	4b15      	ldr	r3, [pc, #84]	@ (80044e0 <HAL_RCC_OscConfig+0x248>)
 800448c:	2201      	movs	r2, #1
 800448e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fd f9ca 	bl	8001828 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004498:	f7fd f9c6 	bl	8001828 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e167      	b.n	800477a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044aa:	4b0b      	ldr	r3, [pc, #44]	@ (80044d8 <HAL_RCC_OscConfig+0x240>)
 80044ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0f0      	beq.n	8004498 <HAL_RCC_OscConfig+0x200>
 80044b6:	e01b      	b.n	80044f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b8:	4b09      	ldr	r3, [pc, #36]	@ (80044e0 <HAL_RCC_OscConfig+0x248>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044be:	f7fd f9b3 	bl	8001828 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c4:	e00e      	b.n	80044e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c6:	f7fd f9af 	bl	8001828 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d907      	bls.n	80044e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e150      	b.n	800477a <HAL_RCC_OscConfig+0x4e2>
 80044d8:	40023800 	.word	0x40023800
 80044dc:	42470000 	.word	0x42470000
 80044e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044e4:	4b88      	ldr	r3, [pc, #544]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 80044e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1ea      	bne.n	80044c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 8097 	beq.w	800462c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044fe:	2300      	movs	r3, #0
 8004500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004502:	4b81      	ldr	r3, [pc, #516]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10f      	bne.n	800452e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450e:	2300      	movs	r3, #0
 8004510:	60bb      	str	r3, [r7, #8]
 8004512:	4b7d      	ldr	r3, [pc, #500]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 8004514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004516:	4a7c      	ldr	r2, [pc, #496]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 8004518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800451c:	6413      	str	r3, [r2, #64]	@ 0x40
 800451e:	4b7a      	ldr	r3, [pc, #488]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 8004520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004526:	60bb      	str	r3, [r7, #8]
 8004528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800452a:	2301      	movs	r3, #1
 800452c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452e:	4b77      	ldr	r3, [pc, #476]	@ (800470c <HAL_RCC_OscConfig+0x474>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004536:	2b00      	cmp	r3, #0
 8004538:	d118      	bne.n	800456c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800453a:	4b74      	ldr	r3, [pc, #464]	@ (800470c <HAL_RCC_OscConfig+0x474>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a73      	ldr	r2, [pc, #460]	@ (800470c <HAL_RCC_OscConfig+0x474>)
 8004540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004546:	f7fd f96f 	bl	8001828 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454c:	e008      	b.n	8004560 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454e:	f7fd f96b 	bl	8001828 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e10c      	b.n	800477a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004560:	4b6a      	ldr	r3, [pc, #424]	@ (800470c <HAL_RCC_OscConfig+0x474>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0f0      	beq.n	800454e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d106      	bne.n	8004582 <HAL_RCC_OscConfig+0x2ea>
 8004574:	4b64      	ldr	r3, [pc, #400]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 8004576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004578:	4a63      	ldr	r2, [pc, #396]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004580:	e01c      	b.n	80045bc <HAL_RCC_OscConfig+0x324>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2b05      	cmp	r3, #5
 8004588:	d10c      	bne.n	80045a4 <HAL_RCC_OscConfig+0x30c>
 800458a:	4b5f      	ldr	r3, [pc, #380]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 800458c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458e:	4a5e      	ldr	r2, [pc, #376]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 8004590:	f043 0304 	orr.w	r3, r3, #4
 8004594:	6713      	str	r3, [r2, #112]	@ 0x70
 8004596:	4b5c      	ldr	r3, [pc, #368]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 8004598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459a:	4a5b      	ldr	r2, [pc, #364]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a2:	e00b      	b.n	80045bc <HAL_RCC_OscConfig+0x324>
 80045a4:	4b58      	ldr	r3, [pc, #352]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 80045a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a8:	4a57      	ldr	r2, [pc, #348]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 80045aa:	f023 0301 	bic.w	r3, r3, #1
 80045ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80045b0:	4b55      	ldr	r3, [pc, #340]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 80045b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b4:	4a54      	ldr	r2, [pc, #336]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 80045b6:	f023 0304 	bic.w	r3, r3, #4
 80045ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d015      	beq.n	80045f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c4:	f7fd f930 	bl	8001828 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ca:	e00a      	b.n	80045e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045cc:	f7fd f92c 	bl	8001828 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045da:	4293      	cmp	r3, r2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e0cb      	b.n	800477a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e2:	4b49      	ldr	r3, [pc, #292]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 80045e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0ee      	beq.n	80045cc <HAL_RCC_OscConfig+0x334>
 80045ee:	e014      	b.n	800461a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f0:	f7fd f91a 	bl	8001828 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045f6:	e00a      	b.n	800460e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f8:	f7fd f916 	bl	8001828 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e0b5      	b.n	800477a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800460e:	4b3e      	ldr	r3, [pc, #248]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 8004610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1ee      	bne.n	80045f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800461a:	7dfb      	ldrb	r3, [r7, #23]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d105      	bne.n	800462c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004620:	4b39      	ldr	r3, [pc, #228]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 8004622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004624:	4a38      	ldr	r2, [pc, #224]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 8004626:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800462a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 80a1 	beq.w	8004778 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004636:	4b34      	ldr	r3, [pc, #208]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 030c 	and.w	r3, r3, #12
 800463e:	2b08      	cmp	r3, #8
 8004640:	d05c      	beq.n	80046fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d141      	bne.n	80046ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800464a:	4b31      	ldr	r3, [pc, #196]	@ (8004710 <HAL_RCC_OscConfig+0x478>)
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004650:	f7fd f8ea 	bl	8001828 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004658:	f7fd f8e6 	bl	8001828 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e087      	b.n	800477a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800466a:	4b27      	ldr	r3, [pc, #156]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69da      	ldr	r2, [r3, #28]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004684:	019b      	lsls	r3, r3, #6
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468c:	085b      	lsrs	r3, r3, #1
 800468e:	3b01      	subs	r3, #1
 8004690:	041b      	lsls	r3, r3, #16
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004698:	061b      	lsls	r3, r3, #24
 800469a:	491b      	ldr	r1, [pc, #108]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 800469c:	4313      	orrs	r3, r2
 800469e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004710 <HAL_RCC_OscConfig+0x478>)
 80046a2:	2201      	movs	r2, #1
 80046a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a6:	f7fd f8bf 	bl	8001828 <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046ae:	f7fd f8bb 	bl	8001828 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e05c      	b.n	800477a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c0:	4b11      	ldr	r3, [pc, #68]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d0f0      	beq.n	80046ae <HAL_RCC_OscConfig+0x416>
 80046cc:	e054      	b.n	8004778 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ce:	4b10      	ldr	r3, [pc, #64]	@ (8004710 <HAL_RCC_OscConfig+0x478>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d4:	f7fd f8a8 	bl	8001828 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046dc:	f7fd f8a4 	bl	8001828 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e045      	b.n	800477a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ee:	4b06      	ldr	r3, [pc, #24]	@ (8004708 <HAL_RCC_OscConfig+0x470>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1f0      	bne.n	80046dc <HAL_RCC_OscConfig+0x444>
 80046fa:	e03d      	b.n	8004778 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d107      	bne.n	8004714 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e038      	b.n	800477a <HAL_RCC_OscConfig+0x4e2>
 8004708:	40023800 	.word	0x40023800
 800470c:	40007000 	.word	0x40007000
 8004710:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004714:	4b1b      	ldr	r3, [pc, #108]	@ (8004784 <HAL_RCC_OscConfig+0x4ec>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d028      	beq.n	8004774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800472c:	429a      	cmp	r2, r3
 800472e:	d121      	bne.n	8004774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473a:	429a      	cmp	r2, r3
 800473c:	d11a      	bne.n	8004774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004744:	4013      	ands	r3, r2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800474a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800474c:	4293      	cmp	r3, r2
 800474e:	d111      	bne.n	8004774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475a:	085b      	lsrs	r3, r3, #1
 800475c:	3b01      	subs	r3, #1
 800475e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004760:	429a      	cmp	r2, r3
 8004762:	d107      	bne.n	8004774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004770:	429a      	cmp	r2, r3
 8004772:	d001      	beq.n	8004778 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e000      	b.n	800477a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40023800 	.word	0x40023800

08004788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0cc      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800479c:	4b68      	ldr	r3, [pc, #416]	@ (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d90c      	bls.n	80047c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047aa:	4b65      	ldr	r3, [pc, #404]	@ (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	b2d2      	uxtb	r2, r2
 80047b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047b2:	4b63      	ldr	r3, [pc, #396]	@ (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d001      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0b8      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d020      	beq.n	8004812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047dc:	4b59      	ldr	r3, [pc, #356]	@ (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4a58      	ldr	r2, [pc, #352]	@ (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047f4:	4b53      	ldr	r3, [pc, #332]	@ (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4a52      	ldr	r2, [pc, #328]	@ (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80047fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004800:	4b50      	ldr	r3, [pc, #320]	@ (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	494d      	ldr	r1, [pc, #308]	@ (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 800480e:	4313      	orrs	r3, r2
 8004810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d044      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d107      	bne.n	8004836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004826:	4b47      	ldr	r3, [pc, #284]	@ (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d119      	bne.n	8004866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e07f      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d003      	beq.n	8004846 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004842:	2b03      	cmp	r3, #3
 8004844:	d107      	bne.n	8004856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004846:	4b3f      	ldr	r3, [pc, #252]	@ (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e06f      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004856:	4b3b      	ldr	r3, [pc, #236]	@ (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e067      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004866:	4b37      	ldr	r3, [pc, #220]	@ (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f023 0203 	bic.w	r2, r3, #3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	4934      	ldr	r1, [pc, #208]	@ (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	4313      	orrs	r3, r2
 8004876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004878:	f7fc ffd6 	bl	8001828 <HAL_GetTick>
 800487c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487e:	e00a      	b.n	8004896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004880:	f7fc ffd2 	bl	8001828 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e04f      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004896:	4b2b      	ldr	r3, [pc, #172]	@ (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 020c 	and.w	r2, r3, #12
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d1eb      	bne.n	8004880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048a8:	4b25      	ldr	r3, [pc, #148]	@ (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d20c      	bcs.n	80048d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b6:	4b22      	ldr	r3, [pc, #136]	@ (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048be:	4b20      	ldr	r3, [pc, #128]	@ (8004940 <HAL_RCC_ClockConfig+0x1b8>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e032      	b.n	8004936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d008      	beq.n	80048ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048dc:	4b19      	ldr	r3, [pc, #100]	@ (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	4916      	ldr	r1, [pc, #88]	@ (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d009      	beq.n	800490e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048fa:	4b12      	ldr	r3, [pc, #72]	@ (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	490e      	ldr	r1, [pc, #56]	@ (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	4313      	orrs	r3, r2
 800490c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800490e:	f000 f821 	bl	8004954 <HAL_RCC_GetSysClockFreq>
 8004912:	4602      	mov	r2, r0
 8004914:	4b0b      	ldr	r3, [pc, #44]	@ (8004944 <HAL_RCC_ClockConfig+0x1bc>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	091b      	lsrs	r3, r3, #4
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	490a      	ldr	r1, [pc, #40]	@ (8004948 <HAL_RCC_ClockConfig+0x1c0>)
 8004920:	5ccb      	ldrb	r3, [r1, r3]
 8004922:	fa22 f303 	lsr.w	r3, r2, r3
 8004926:	4a09      	ldr	r2, [pc, #36]	@ (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800492a:	4b09      	ldr	r3, [pc, #36]	@ (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fc ff36 	bl	80017a0 <HAL_InitTick>

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	40023c00 	.word	0x40023c00
 8004944:	40023800 	.word	0x40023800
 8004948:	0800b024 	.word	0x0800b024
 800494c:	2000002c 	.word	0x2000002c
 8004950:	20000030 	.word	0x20000030

08004954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004958:	b090      	sub	sp, #64	@ 0x40
 800495a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004960:	2300      	movs	r3, #0
 8004962:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004964:	2300      	movs	r3, #0
 8004966:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800496c:	4b59      	ldr	r3, [pc, #356]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f003 030c 	and.w	r3, r3, #12
 8004974:	2b08      	cmp	r3, #8
 8004976:	d00d      	beq.n	8004994 <HAL_RCC_GetSysClockFreq+0x40>
 8004978:	2b08      	cmp	r3, #8
 800497a:	f200 80a1 	bhi.w	8004ac0 <HAL_RCC_GetSysClockFreq+0x16c>
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <HAL_RCC_GetSysClockFreq+0x34>
 8004982:	2b04      	cmp	r3, #4
 8004984:	d003      	beq.n	800498e <HAL_RCC_GetSysClockFreq+0x3a>
 8004986:	e09b      	b.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004988:	4b53      	ldr	r3, [pc, #332]	@ (8004ad8 <HAL_RCC_GetSysClockFreq+0x184>)
 800498a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800498c:	e09b      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800498e:	4b53      	ldr	r3, [pc, #332]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x188>)
 8004990:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004992:	e098      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004994:	4b4f      	ldr	r3, [pc, #316]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800499c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800499e:	4b4d      	ldr	r3, [pc, #308]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d028      	beq.n	80049fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049aa:	4b4a      	ldr	r3, [pc, #296]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	099b      	lsrs	r3, r3, #6
 80049b0:	2200      	movs	r2, #0
 80049b2:	623b      	str	r3, [r7, #32]
 80049b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80049bc:	2100      	movs	r1, #0
 80049be:	4b47      	ldr	r3, [pc, #284]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x188>)
 80049c0:	fb03 f201 	mul.w	r2, r3, r1
 80049c4:	2300      	movs	r3, #0
 80049c6:	fb00 f303 	mul.w	r3, r0, r3
 80049ca:	4413      	add	r3, r2
 80049cc:	4a43      	ldr	r2, [pc, #268]	@ (8004adc <HAL_RCC_GetSysClockFreq+0x188>)
 80049ce:	fba0 1202 	umull	r1, r2, r0, r2
 80049d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049d4:	460a      	mov	r2, r1
 80049d6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80049d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049da:	4413      	add	r3, r2
 80049dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e0:	2200      	movs	r2, #0
 80049e2:	61bb      	str	r3, [r7, #24]
 80049e4:	61fa      	str	r2, [r7, #28]
 80049e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80049ee:	f7fb fc57 	bl	80002a0 <__aeabi_uldivmod>
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	4613      	mov	r3, r2
 80049f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049fa:	e053      	b.n	8004aa4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049fc:	4b35      	ldr	r3, [pc, #212]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	099b      	lsrs	r3, r3, #6
 8004a02:	2200      	movs	r2, #0
 8004a04:	613b      	str	r3, [r7, #16]
 8004a06:	617a      	str	r2, [r7, #20]
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a0e:	f04f 0b00 	mov.w	fp, #0
 8004a12:	4652      	mov	r2, sl
 8004a14:	465b      	mov	r3, fp
 8004a16:	f04f 0000 	mov.w	r0, #0
 8004a1a:	f04f 0100 	mov.w	r1, #0
 8004a1e:	0159      	lsls	r1, r3, #5
 8004a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a24:	0150      	lsls	r0, r2, #5
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	ebb2 080a 	subs.w	r8, r2, sl
 8004a2e:	eb63 090b 	sbc.w	r9, r3, fp
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a46:	ebb2 0408 	subs.w	r4, r2, r8
 8004a4a:	eb63 0509 	sbc.w	r5, r3, r9
 8004a4e:	f04f 0200 	mov.w	r2, #0
 8004a52:	f04f 0300 	mov.w	r3, #0
 8004a56:	00eb      	lsls	r3, r5, #3
 8004a58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a5c:	00e2      	lsls	r2, r4, #3
 8004a5e:	4614      	mov	r4, r2
 8004a60:	461d      	mov	r5, r3
 8004a62:	eb14 030a 	adds.w	r3, r4, sl
 8004a66:	603b      	str	r3, [r7, #0]
 8004a68:	eb45 030b 	adc.w	r3, r5, fp
 8004a6c:	607b      	str	r3, [r7, #4]
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a7a:	4629      	mov	r1, r5
 8004a7c:	028b      	lsls	r3, r1, #10
 8004a7e:	4621      	mov	r1, r4
 8004a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a84:	4621      	mov	r1, r4
 8004a86:	028a      	lsls	r2, r1, #10
 8004a88:	4610      	mov	r0, r2
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a8e:	2200      	movs	r2, #0
 8004a90:	60bb      	str	r3, [r7, #8]
 8004a92:	60fa      	str	r2, [r7, #12]
 8004a94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a98:	f7fb fc02 	bl	80002a0 <__aeabi_uldivmod>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	0c1b      	lsrs	r3, r3, #16
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	3301      	adds	r3, #1
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004ab4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004abe:	e002      	b.n	8004ac6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ac0:	4b05      	ldr	r3, [pc, #20]	@ (8004ad8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3740      	adds	r7, #64	@ 0x40
 8004acc:	46bd      	mov	sp, r7
 8004ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40023800 	.word	0x40023800
 8004ad8:	00f42400 	.word	0x00f42400
 8004adc:	017d7840 	.word	0x017d7840

08004ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ae4:	4b03      	ldr	r3, [pc, #12]	@ (8004af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	2000002c 	.word	0x2000002c

08004af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b082      	sub	sp, #8
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e041      	b.n	8004b8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d106      	bne.n	8004b24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fc fbf0 	bl	8001304 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3304      	adds	r3, #4
 8004b34:	4619      	mov	r1, r3
 8004b36:	4610      	mov	r0, r2
 8004b38:	f000 fb66 	bl	8005208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e041      	b.n	8004c2c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d106      	bne.n	8004bc2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f839 	bl	8004c34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	f000 fb17 	bl	8005208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d109      	bne.n	8004c6c <HAL_TIM_PWM_Start+0x24>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	bf14      	ite	ne
 8004c64:	2301      	movne	r3, #1
 8004c66:	2300      	moveq	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	e022      	b.n	8004cb2 <HAL_TIM_PWM_Start+0x6a>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	2b04      	cmp	r3, #4
 8004c70:	d109      	bne.n	8004c86 <HAL_TIM_PWM_Start+0x3e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	bf14      	ite	ne
 8004c7e:	2301      	movne	r3, #1
 8004c80:	2300      	moveq	r3, #0
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	e015      	b.n	8004cb2 <HAL_TIM_PWM_Start+0x6a>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d109      	bne.n	8004ca0 <HAL_TIM_PWM_Start+0x58>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	bf14      	ite	ne
 8004c98:	2301      	movne	r3, #1
 8004c9a:	2300      	moveq	r3, #0
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	e008      	b.n	8004cb2 <HAL_TIM_PWM_Start+0x6a>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	bf14      	ite	ne
 8004cac:	2301      	movne	r3, #1
 8004cae:	2300      	moveq	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e068      	b.n	8004d8c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d104      	bne.n	8004cca <HAL_TIM_PWM_Start+0x82>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cc8:	e013      	b.n	8004cf2 <HAL_TIM_PWM_Start+0xaa>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	d104      	bne.n	8004cda <HAL_TIM_PWM_Start+0x92>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cd8:	e00b      	b.n	8004cf2 <HAL_TIM_PWM_Start+0xaa>
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b08      	cmp	r3, #8
 8004cde:	d104      	bne.n	8004cea <HAL_TIM_PWM_Start+0xa2>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ce8:	e003      	b.n	8004cf2 <HAL_TIM_PWM_Start+0xaa>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2202      	movs	r2, #2
 8004cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	6839      	ldr	r1, [r7, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fdc7 	bl	800588e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a23      	ldr	r2, [pc, #140]	@ (8004d94 <HAL_TIM_PWM_Start+0x14c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d107      	bne.n	8004d1a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d18:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1d      	ldr	r2, [pc, #116]	@ (8004d94 <HAL_TIM_PWM_Start+0x14c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d018      	beq.n	8004d56 <HAL_TIM_PWM_Start+0x10e>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d2c:	d013      	beq.n	8004d56 <HAL_TIM_PWM_Start+0x10e>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a19      	ldr	r2, [pc, #100]	@ (8004d98 <HAL_TIM_PWM_Start+0x150>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d00e      	beq.n	8004d56 <HAL_TIM_PWM_Start+0x10e>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a17      	ldr	r2, [pc, #92]	@ (8004d9c <HAL_TIM_PWM_Start+0x154>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d009      	beq.n	8004d56 <HAL_TIM_PWM_Start+0x10e>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a16      	ldr	r2, [pc, #88]	@ (8004da0 <HAL_TIM_PWM_Start+0x158>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d004      	beq.n	8004d56 <HAL_TIM_PWM_Start+0x10e>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a14      	ldr	r2, [pc, #80]	@ (8004da4 <HAL_TIM_PWM_Start+0x15c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d111      	bne.n	8004d7a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2b06      	cmp	r3, #6
 8004d66:	d010      	beq.n	8004d8a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d78:	e007      	b.n	8004d8a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0201 	orr.w	r2, r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40010000 	.word	0x40010000
 8004d98:	40000400 	.word	0x40000400
 8004d9c:	40000800 	.word	0x40000800
 8004da0:	40000c00 	.word	0x40000c00
 8004da4:	40014000 	.word	0x40014000

08004da8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2200      	movs	r2, #0
 8004db8:	6839      	ldr	r1, [r7, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fd67 	bl	800588e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a29      	ldr	r2, [pc, #164]	@ (8004e6c <HAL_TIM_PWM_Stop+0xc4>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d117      	bne.n	8004dfa <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	6a1a      	ldr	r2, [r3, #32]
 8004dd0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10f      	bne.n	8004dfa <HAL_TIM_PWM_Stop+0x52>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6a1a      	ldr	r2, [r3, #32]
 8004de0:	f240 4344 	movw	r3, #1092	@ 0x444
 8004de4:	4013      	ands	r3, r2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d107      	bne.n	8004dfa <HAL_TIM_PWM_Stop+0x52>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004df8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	6a1a      	ldr	r2, [r3, #32]
 8004e00:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004e04:	4013      	ands	r3, r2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10f      	bne.n	8004e2a <HAL_TIM_PWM_Stop+0x82>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6a1a      	ldr	r2, [r3, #32]
 8004e10:	f240 4344 	movw	r3, #1092	@ 0x444
 8004e14:	4013      	ands	r3, r2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d107      	bne.n	8004e2a <HAL_TIM_PWM_Stop+0x82>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0201 	bic.w	r2, r2, #1
 8004e28:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d104      	bne.n	8004e3a <HAL_TIM_PWM_Stop+0x92>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e38:	e013      	b.n	8004e62 <HAL_TIM_PWM_Stop+0xba>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d104      	bne.n	8004e4a <HAL_TIM_PWM_Stop+0xa2>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e48:	e00b      	b.n	8004e62 <HAL_TIM_PWM_Stop+0xba>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b08      	cmp	r3, #8
 8004e4e:	d104      	bne.n	8004e5a <HAL_TIM_PWM_Stop+0xb2>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e58:	e003      	b.n	8004e62 <HAL_TIM_PWM_Stop+0xba>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	40010000 	.word	0x40010000

08004e70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d101      	bne.n	8004e8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	e0ae      	b.n	8004fec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b0c      	cmp	r3, #12
 8004e9a:	f200 809f 	bhi.w	8004fdc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004ea4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea4:	08004ed9 	.word	0x08004ed9
 8004ea8:	08004fdd 	.word	0x08004fdd
 8004eac:	08004fdd 	.word	0x08004fdd
 8004eb0:	08004fdd 	.word	0x08004fdd
 8004eb4:	08004f19 	.word	0x08004f19
 8004eb8:	08004fdd 	.word	0x08004fdd
 8004ebc:	08004fdd 	.word	0x08004fdd
 8004ec0:	08004fdd 	.word	0x08004fdd
 8004ec4:	08004f5b 	.word	0x08004f5b
 8004ec8:	08004fdd 	.word	0x08004fdd
 8004ecc:	08004fdd 	.word	0x08004fdd
 8004ed0:	08004fdd 	.word	0x08004fdd
 8004ed4:	08004f9b 	.word	0x08004f9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fa1e 	bl	8005320 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699a      	ldr	r2, [r3, #24]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0208 	orr.w	r2, r2, #8
 8004ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699a      	ldr	r2, [r3, #24]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0204 	bic.w	r2, r2, #4
 8004f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6999      	ldr	r1, [r3, #24]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	619a      	str	r2, [r3, #24]
      break;
 8004f16:	e064      	b.n	8004fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fa64 	bl	80053ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6999      	ldr	r1, [r3, #24]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	021a      	lsls	r2, r3, #8
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	619a      	str	r2, [r3, #24]
      break;
 8004f58:	e043      	b.n	8004fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68b9      	ldr	r1, [r7, #8]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 faaf 	bl	80054c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69da      	ldr	r2, [r3, #28]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0208 	orr.w	r2, r2, #8
 8004f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	69da      	ldr	r2, [r3, #28]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0204 	bic.w	r2, r2, #4
 8004f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69d9      	ldr	r1, [r3, #28]
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	61da      	str	r2, [r3, #28]
      break;
 8004f98:	e023      	b.n	8004fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 faf9 	bl	8005598 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69da      	ldr	r2, [r3, #28]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69d9      	ldr	r1, [r3, #28]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	021a      	lsls	r2, r3, #8
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	61da      	str	r2, [r3, #28]
      break;
 8004fda:	e002      	b.n	8004fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	75fb      	strb	r3, [r7, #23]
      break;
 8004fe0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3718      	adds	r7, #24
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005008:	2b01      	cmp	r3, #1
 800500a:	d101      	bne.n	8005010 <HAL_TIM_ConfigClockSource+0x1c>
 800500c:	2302      	movs	r3, #2
 800500e:	e0b4      	b.n	800517a <HAL_TIM_ConfigClockSource+0x186>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800502e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005036:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005048:	d03e      	beq.n	80050c8 <HAL_TIM_ConfigClockSource+0xd4>
 800504a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800504e:	f200 8087 	bhi.w	8005160 <HAL_TIM_ConfigClockSource+0x16c>
 8005052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005056:	f000 8086 	beq.w	8005166 <HAL_TIM_ConfigClockSource+0x172>
 800505a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800505e:	d87f      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x16c>
 8005060:	2b70      	cmp	r3, #112	@ 0x70
 8005062:	d01a      	beq.n	800509a <HAL_TIM_ConfigClockSource+0xa6>
 8005064:	2b70      	cmp	r3, #112	@ 0x70
 8005066:	d87b      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x16c>
 8005068:	2b60      	cmp	r3, #96	@ 0x60
 800506a:	d050      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x11a>
 800506c:	2b60      	cmp	r3, #96	@ 0x60
 800506e:	d877      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x16c>
 8005070:	2b50      	cmp	r3, #80	@ 0x50
 8005072:	d03c      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0xfa>
 8005074:	2b50      	cmp	r3, #80	@ 0x50
 8005076:	d873      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x16c>
 8005078:	2b40      	cmp	r3, #64	@ 0x40
 800507a:	d058      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x13a>
 800507c:	2b40      	cmp	r3, #64	@ 0x40
 800507e:	d86f      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x16c>
 8005080:	2b30      	cmp	r3, #48	@ 0x30
 8005082:	d064      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x15a>
 8005084:	2b30      	cmp	r3, #48	@ 0x30
 8005086:	d86b      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x16c>
 8005088:	2b20      	cmp	r3, #32
 800508a:	d060      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x15a>
 800508c:	2b20      	cmp	r3, #32
 800508e:	d867      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x16c>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d05c      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x15a>
 8005094:	2b10      	cmp	r3, #16
 8005096:	d05a      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x15a>
 8005098:	e062      	b.n	8005160 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050aa:	f000 fbd0 	bl	800584e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	609a      	str	r2, [r3, #8]
      break;
 80050c6:	e04f      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050d8:	f000 fbb9 	bl	800584e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050ea:	609a      	str	r2, [r3, #8]
      break;
 80050ec:	e03c      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050fa:	461a      	mov	r2, r3
 80050fc:	f000 fb2d 	bl	800575a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2150      	movs	r1, #80	@ 0x50
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fb86 	bl	8005818 <TIM_ITRx_SetConfig>
      break;
 800510c:	e02c      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800511a:	461a      	mov	r2, r3
 800511c:	f000 fb4c 	bl	80057b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2160      	movs	r1, #96	@ 0x60
 8005126:	4618      	mov	r0, r3
 8005128:	f000 fb76 	bl	8005818 <TIM_ITRx_SetConfig>
      break;
 800512c:	e01c      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800513a:	461a      	mov	r2, r3
 800513c:	f000 fb0d 	bl	800575a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2140      	movs	r1, #64	@ 0x40
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fb66 	bl	8005818 <TIM_ITRx_SetConfig>
      break;
 800514c:	e00c      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4619      	mov	r1, r3
 8005158:	4610      	mov	r0, r2
 800515a:	f000 fb5d 	bl	8005818 <TIM_ITRx_SetConfig>
      break;
 800515e:	e003      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	73fb      	strb	r3, [r7, #15]
      break;
 8005164:	e000      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005166:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005178:	7bfb      	ldrb	r3, [r7, #15]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b082      	sub	sp, #8
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_TIM_SlaveConfigSynchro+0x18>
 8005196:	2302      	movs	r3, #2
 8005198:	e031      	b.n	80051fe <HAL_TIM_SlaveConfigSynchro+0x7c>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80051aa:	6839      	ldr	r1, [r7, #0]
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fa43 	bl	8005638 <TIM_SlaveTimer_SetConfig>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d009      	beq.n	80051cc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e018      	b.n	80051fe <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051da:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80051ea:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a3a      	ldr	r2, [pc, #232]	@ (8005304 <TIM_Base_SetConfig+0xfc>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d00f      	beq.n	8005240 <TIM_Base_SetConfig+0x38>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005226:	d00b      	beq.n	8005240 <TIM_Base_SetConfig+0x38>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a37      	ldr	r2, [pc, #220]	@ (8005308 <TIM_Base_SetConfig+0x100>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d007      	beq.n	8005240 <TIM_Base_SetConfig+0x38>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a36      	ldr	r2, [pc, #216]	@ (800530c <TIM_Base_SetConfig+0x104>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <TIM_Base_SetConfig+0x38>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a35      	ldr	r2, [pc, #212]	@ (8005310 <TIM_Base_SetConfig+0x108>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d108      	bne.n	8005252 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	4313      	orrs	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a2b      	ldr	r2, [pc, #172]	@ (8005304 <TIM_Base_SetConfig+0xfc>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d01b      	beq.n	8005292 <TIM_Base_SetConfig+0x8a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005260:	d017      	beq.n	8005292 <TIM_Base_SetConfig+0x8a>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a28      	ldr	r2, [pc, #160]	@ (8005308 <TIM_Base_SetConfig+0x100>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d013      	beq.n	8005292 <TIM_Base_SetConfig+0x8a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a27      	ldr	r2, [pc, #156]	@ (800530c <TIM_Base_SetConfig+0x104>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00f      	beq.n	8005292 <TIM_Base_SetConfig+0x8a>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a26      	ldr	r2, [pc, #152]	@ (8005310 <TIM_Base_SetConfig+0x108>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00b      	beq.n	8005292 <TIM_Base_SetConfig+0x8a>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a25      	ldr	r2, [pc, #148]	@ (8005314 <TIM_Base_SetConfig+0x10c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d007      	beq.n	8005292 <TIM_Base_SetConfig+0x8a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a24      	ldr	r2, [pc, #144]	@ (8005318 <TIM_Base_SetConfig+0x110>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d003      	beq.n	8005292 <TIM_Base_SetConfig+0x8a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a23      	ldr	r2, [pc, #140]	@ (800531c <TIM_Base_SetConfig+0x114>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d108      	bne.n	80052a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a0e      	ldr	r2, [pc, #56]	@ (8005304 <TIM_Base_SetConfig+0xfc>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d103      	bne.n	80052d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d105      	bne.n	80052f6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f023 0201 	bic.w	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	611a      	str	r2, [r3, #16]
  }
}
 80052f6:	bf00      	nop
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40010000 	.word	0x40010000
 8005308:	40000400 	.word	0x40000400
 800530c:	40000800 	.word	0x40000800
 8005310:	40000c00 	.word	0x40000c00
 8005314:	40014000 	.word	0x40014000
 8005318:	40014400 	.word	0x40014400
 800531c:	40014800 	.word	0x40014800

08005320 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a1b      	ldr	r3, [r3, #32]
 8005334:	f023 0201 	bic.w	r2, r3, #1
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800534e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0303 	bic.w	r3, r3, #3
 8005356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f023 0302 	bic.w	r3, r3, #2
 8005368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	4313      	orrs	r3, r2
 8005372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a1c      	ldr	r2, [pc, #112]	@ (80053e8 <TIM_OC1_SetConfig+0xc8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d10c      	bne.n	8005396 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	f023 0308 	bic.w	r3, r3, #8
 8005382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	4313      	orrs	r3, r2
 800538c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f023 0304 	bic.w	r3, r3, #4
 8005394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a13      	ldr	r2, [pc, #76]	@ (80053e8 <TIM_OC1_SetConfig+0xc8>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d111      	bne.n	80053c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	693a      	ldr	r2, [r7, #16]
 80053c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	621a      	str	r2, [r3, #32]
}
 80053dc:	bf00      	nop
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	40010000 	.word	0x40010000

080053ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	f023 0210 	bic.w	r2, r3, #16
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800541a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f023 0320 	bic.w	r3, r3, #32
 8005436:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	011b      	lsls	r3, r3, #4
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	4313      	orrs	r3, r2
 8005442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a1e      	ldr	r2, [pc, #120]	@ (80054c0 <TIM_OC2_SetConfig+0xd4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d10d      	bne.n	8005468 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005466:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a15      	ldr	r2, [pc, #84]	@ (80054c0 <TIM_OC2_SetConfig+0xd4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d113      	bne.n	8005498 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005476:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800547e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	621a      	str	r2, [r3, #32]
}
 80054b2:	bf00      	nop
 80054b4:	371c      	adds	r7, #28
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40010000 	.word	0x40010000

080054c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 0303 	bic.w	r3, r3, #3
 80054fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800550c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a1d      	ldr	r2, [pc, #116]	@ (8005594 <TIM_OC3_SetConfig+0xd0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d10d      	bne.n	800553e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005528:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	021b      	lsls	r3, r3, #8
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	4313      	orrs	r3, r2
 8005534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800553c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a14      	ldr	r2, [pc, #80]	@ (8005594 <TIM_OC3_SetConfig+0xd0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d113      	bne.n	800556e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800554c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	011b      	lsls	r3, r3, #4
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	4313      	orrs	r3, r2
 8005560:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	621a      	str	r2, [r3, #32]
}
 8005588:	bf00      	nop
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	40010000 	.word	0x40010000

08005598 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a1b      	ldr	r3, [r3, #32]
 80055ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	021b      	lsls	r3, r3, #8
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	031b      	lsls	r3, r3, #12
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a10      	ldr	r2, [pc, #64]	@ (8005634 <TIM_OC4_SetConfig+0x9c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d109      	bne.n	800560c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80055fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	019b      	lsls	r3, r3, #6
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	4313      	orrs	r3, r2
 800560a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	621a      	str	r2, [r3, #32]
}
 8005626:	bf00      	nop
 8005628:	371c      	adds	r7, #28
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	40010000 	.word	0x40010000

08005638 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005654:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	4313      	orrs	r3, r2
 800565e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f023 0307 	bic.w	r3, r3, #7
 8005666:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b70      	cmp	r3, #112	@ 0x70
 8005680:	d01a      	beq.n	80056b8 <TIM_SlaveTimer_SetConfig+0x80>
 8005682:	2b70      	cmp	r3, #112	@ 0x70
 8005684:	d860      	bhi.n	8005748 <TIM_SlaveTimer_SetConfig+0x110>
 8005686:	2b60      	cmp	r3, #96	@ 0x60
 8005688:	d054      	beq.n	8005734 <TIM_SlaveTimer_SetConfig+0xfc>
 800568a:	2b60      	cmp	r3, #96	@ 0x60
 800568c:	d85c      	bhi.n	8005748 <TIM_SlaveTimer_SetConfig+0x110>
 800568e:	2b50      	cmp	r3, #80	@ 0x50
 8005690:	d046      	beq.n	8005720 <TIM_SlaveTimer_SetConfig+0xe8>
 8005692:	2b50      	cmp	r3, #80	@ 0x50
 8005694:	d858      	bhi.n	8005748 <TIM_SlaveTimer_SetConfig+0x110>
 8005696:	2b40      	cmp	r3, #64	@ 0x40
 8005698:	d019      	beq.n	80056ce <TIM_SlaveTimer_SetConfig+0x96>
 800569a:	2b40      	cmp	r3, #64	@ 0x40
 800569c:	d854      	bhi.n	8005748 <TIM_SlaveTimer_SetConfig+0x110>
 800569e:	2b30      	cmp	r3, #48	@ 0x30
 80056a0:	d055      	beq.n	800574e <TIM_SlaveTimer_SetConfig+0x116>
 80056a2:	2b30      	cmp	r3, #48	@ 0x30
 80056a4:	d850      	bhi.n	8005748 <TIM_SlaveTimer_SetConfig+0x110>
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	d051      	beq.n	800574e <TIM_SlaveTimer_SetConfig+0x116>
 80056aa:	2b20      	cmp	r3, #32
 80056ac:	d84c      	bhi.n	8005748 <TIM_SlaveTimer_SetConfig+0x110>
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d04d      	beq.n	800574e <TIM_SlaveTimer_SetConfig+0x116>
 80056b2:	2b10      	cmp	r3, #16
 80056b4:	d04b      	beq.n	800574e <TIM_SlaveTimer_SetConfig+0x116>
 80056b6:	e047      	b.n	8005748 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80056c8:	f000 f8c1 	bl	800584e <TIM_ETR_SetConfig>
      break;
 80056cc:	e040      	b.n	8005750 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2b05      	cmp	r3, #5
 80056d4:	d101      	bne.n	80056da <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e03b      	b.n	8005752 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6a1a      	ldr	r2, [r3, #32]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0201 	bic.w	r2, r2, #1
 80056f0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005700:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	4313      	orrs	r3, r2
 800570c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	621a      	str	r2, [r3, #32]
      break;
 800571e:	e017      	b.n	8005750 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800572c:	461a      	mov	r2, r3
 800572e:	f000 f814 	bl	800575a <TIM_TI1_ConfigInputStage>
      break;
 8005732:	e00d      	b.n	8005750 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005740:	461a      	mov	r2, r3
 8005742:	f000 f839 	bl	80057b8 <TIM_TI2_ConfigInputStage>
      break;
 8005746:	e003      	b.n	8005750 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	75fb      	strb	r3, [r7, #23]
      break;
 800574c:	e000      	b.n	8005750 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800574e:	bf00      	nop
  }

  return status;
 8005750:	7dfb      	ldrb	r3, [r7, #23]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800575a:	b480      	push	{r7}
 800575c:	b087      	sub	sp, #28
 800575e:	af00      	add	r7, sp, #0
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f023 0201 	bic.w	r2, r3, #1
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005784:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	4313      	orrs	r3, r2
 800578e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f023 030a 	bic.w	r3, r3, #10
 8005796:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	4313      	orrs	r3, r2
 800579e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	621a      	str	r2, [r3, #32]
}
 80057ac:	bf00      	nop
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	f023 0210 	bic.w	r2, r3, #16
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	031b      	lsls	r3, r3, #12
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	011b      	lsls	r3, r3, #4
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	621a      	str	r2, [r3, #32]
}
 800580c:	bf00      	nop
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800582e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4313      	orrs	r3, r2
 8005836:	f043 0307 	orr.w	r3, r3, #7
 800583a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	609a      	str	r2, [r3, #8]
}
 8005842:	bf00      	nop
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800584e:	b480      	push	{r7}
 8005850:	b087      	sub	sp, #28
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	60b9      	str	r1, [r7, #8]
 8005858:	607a      	str	r2, [r7, #4]
 800585a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005868:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	021a      	lsls	r2, r3, #8
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	431a      	orrs	r2, r3
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	4313      	orrs	r3, r2
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	609a      	str	r2, [r3, #8]
}
 8005882:	bf00      	nop
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800588e:	b480      	push	{r7}
 8005890:	b087      	sub	sp, #28
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f003 031f 	and.w	r3, r3, #31
 80058a0:	2201      	movs	r2, #1
 80058a2:	fa02 f303 	lsl.w	r3, r2, r3
 80058a6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a1a      	ldr	r2, [r3, #32]
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	43db      	mvns	r3, r3
 80058b0:	401a      	ands	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6a1a      	ldr	r2, [r3, #32]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f003 031f 	and.w	r3, r3, #31
 80058c0:	6879      	ldr	r1, [r7, #4]
 80058c2:	fa01 f303 	lsl.w	r3, r1, r3
 80058c6:	431a      	orrs	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	621a      	str	r2, [r3, #32]
}
 80058cc:	bf00      	nop
 80058ce:	371c      	adds	r7, #28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d101      	bne.n	80058f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058ec:	2302      	movs	r3, #2
 80058ee:	e050      	b.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a1c      	ldr	r2, [pc, #112]	@ (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d018      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800593c:	d013      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a18      	ldr	r2, [pc, #96]	@ (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d00e      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a16      	ldr	r2, [pc, #88]	@ (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d009      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a15      	ldr	r2, [pc, #84]	@ (80059ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d004      	beq.n	8005966 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a13      	ldr	r2, [pc, #76]	@ (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d10c      	bne.n	8005980 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800596c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	4313      	orrs	r3, r2
 8005976:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	40010000 	.word	0x40010000
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40000800 	.word	0x40000800
 80059ac:	40000c00 	.word	0x40000c00
 80059b0:	40014000 	.word	0x40014000

080059b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059b4:	b084      	sub	sp, #16
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b084      	sub	sp, #16
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	f107 001c 	add.w	r0, r7, #28
 80059c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059c6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d123      	bne.n	8005a16 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80059e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d105      	bne.n	8005a0a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f001 fae2 	bl	8006fd4 <USB_CoreReset>
 8005a10:	4603      	mov	r3, r0
 8005a12:	73fb      	strb	r3, [r7, #15]
 8005a14:	e01b      	b.n	8005a4e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f001 fad6 	bl	8006fd4 <USB_CoreReset>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a2c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d106      	bne.n	8005a42 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a38:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a40:	e005      	b.n	8005a4e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a4e:	7fbb      	ldrb	r3, [r7, #30]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d10b      	bne.n	8005a6c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f043 0206 	orr.w	r2, r3, #6
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f043 0220 	orr.w	r2, r3, #32
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a78:	b004      	add	sp, #16
 8005a7a:	4770      	bx	lr

08005a7c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	4613      	mov	r3, r2
 8005a88:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005a8a:	79fb      	ldrb	r3, [r7, #7]
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d165      	bne.n	8005b5c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4a41      	ldr	r2, [pc, #260]	@ (8005b98 <USB_SetTurnaroundTime+0x11c>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d906      	bls.n	8005aa6 <USB_SetTurnaroundTime+0x2a>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	4a40      	ldr	r2, [pc, #256]	@ (8005b9c <USB_SetTurnaroundTime+0x120>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d202      	bcs.n	8005aa6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005aa0:	230f      	movs	r3, #15
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	e062      	b.n	8005b6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	4a3c      	ldr	r2, [pc, #240]	@ (8005b9c <USB_SetTurnaroundTime+0x120>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d306      	bcc.n	8005abc <USB_SetTurnaroundTime+0x40>
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	4a3b      	ldr	r2, [pc, #236]	@ (8005ba0 <USB_SetTurnaroundTime+0x124>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d202      	bcs.n	8005abc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005ab6:	230e      	movs	r3, #14
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	e057      	b.n	8005b6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4a38      	ldr	r2, [pc, #224]	@ (8005ba0 <USB_SetTurnaroundTime+0x124>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d306      	bcc.n	8005ad2 <USB_SetTurnaroundTime+0x56>
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	4a37      	ldr	r2, [pc, #220]	@ (8005ba4 <USB_SetTurnaroundTime+0x128>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d202      	bcs.n	8005ad2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005acc:	230d      	movs	r3, #13
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	e04c      	b.n	8005b6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	4a33      	ldr	r2, [pc, #204]	@ (8005ba4 <USB_SetTurnaroundTime+0x128>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d306      	bcc.n	8005ae8 <USB_SetTurnaroundTime+0x6c>
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	4a32      	ldr	r2, [pc, #200]	@ (8005ba8 <USB_SetTurnaroundTime+0x12c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d802      	bhi.n	8005ae8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005ae2:	230c      	movs	r3, #12
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	e041      	b.n	8005b6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	4a2f      	ldr	r2, [pc, #188]	@ (8005ba8 <USB_SetTurnaroundTime+0x12c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d906      	bls.n	8005afe <USB_SetTurnaroundTime+0x82>
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	4a2e      	ldr	r2, [pc, #184]	@ (8005bac <USB_SetTurnaroundTime+0x130>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d802      	bhi.n	8005afe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005af8:	230b      	movs	r3, #11
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	e036      	b.n	8005b6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	4a2a      	ldr	r2, [pc, #168]	@ (8005bac <USB_SetTurnaroundTime+0x130>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d906      	bls.n	8005b14 <USB_SetTurnaroundTime+0x98>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	4a29      	ldr	r2, [pc, #164]	@ (8005bb0 <USB_SetTurnaroundTime+0x134>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d802      	bhi.n	8005b14 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005b0e:	230a      	movs	r3, #10
 8005b10:	617b      	str	r3, [r7, #20]
 8005b12:	e02b      	b.n	8005b6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	4a26      	ldr	r2, [pc, #152]	@ (8005bb0 <USB_SetTurnaroundTime+0x134>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d906      	bls.n	8005b2a <USB_SetTurnaroundTime+0xae>
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	4a25      	ldr	r2, [pc, #148]	@ (8005bb4 <USB_SetTurnaroundTime+0x138>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d202      	bcs.n	8005b2a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005b24:	2309      	movs	r3, #9
 8005b26:	617b      	str	r3, [r7, #20]
 8005b28:	e020      	b.n	8005b6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	4a21      	ldr	r2, [pc, #132]	@ (8005bb4 <USB_SetTurnaroundTime+0x138>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d306      	bcc.n	8005b40 <USB_SetTurnaroundTime+0xc4>
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	4a20      	ldr	r2, [pc, #128]	@ (8005bb8 <USB_SetTurnaroundTime+0x13c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d802      	bhi.n	8005b40 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005b3a:	2308      	movs	r3, #8
 8005b3c:	617b      	str	r3, [r7, #20]
 8005b3e:	e015      	b.n	8005b6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	4a1d      	ldr	r2, [pc, #116]	@ (8005bb8 <USB_SetTurnaroundTime+0x13c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d906      	bls.n	8005b56 <USB_SetTurnaroundTime+0xda>
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8005bbc <USB_SetTurnaroundTime+0x140>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d202      	bcs.n	8005b56 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005b50:	2307      	movs	r3, #7
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	e00a      	b.n	8005b6c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005b56:	2306      	movs	r3, #6
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	e007      	b.n	8005b6c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005b5c:	79fb      	ldrb	r3, [r7, #7]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d102      	bne.n	8005b68 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005b62:	2309      	movs	r3, #9
 8005b64:	617b      	str	r3, [r7, #20]
 8005b66:	e001      	b.n	8005b6c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005b68:	2309      	movs	r3, #9
 8005b6a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	68da      	ldr	r2, [r3, #12]
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	029b      	lsls	r3, r3, #10
 8005b80:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005b84:	431a      	orrs	r2, r3
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	371c      	adds	r7, #28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr
 8005b98:	00d8acbf 	.word	0x00d8acbf
 8005b9c:	00e4e1c0 	.word	0x00e4e1c0
 8005ba0:	00f42400 	.word	0x00f42400
 8005ba4:	01067380 	.word	0x01067380
 8005ba8:	011a499f 	.word	0x011a499f
 8005bac:	01312cff 	.word	0x01312cff
 8005bb0:	014ca43f 	.word	0x014ca43f
 8005bb4:	016e3600 	.word	0x016e3600
 8005bb8:	01a6ab1f 	.word	0x01a6ab1f
 8005bbc:	01e84800 	.word	0x01e84800

08005bc0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f043 0201 	orr.w	r2, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f023 0201 	bic.w	r2, r3, #1
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c20:	78fb      	ldrb	r3, [r7, #3]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d115      	bne.n	8005c52 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005c32:	200a      	movs	r0, #10
 8005c34:	f7fb fe04 	bl	8001840 <HAL_Delay>
      ms += 10U;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	330a      	adds	r3, #10
 8005c3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f001 f939 	bl	8006eb6 <USB_GetMode>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d01e      	beq.n	8005c88 <USB_SetCurrentMode+0x84>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2bc7      	cmp	r3, #199	@ 0xc7
 8005c4e:	d9f0      	bls.n	8005c32 <USB_SetCurrentMode+0x2e>
 8005c50:	e01a      	b.n	8005c88 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c52:	78fb      	ldrb	r3, [r7, #3]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d115      	bne.n	8005c84 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005c64:	200a      	movs	r0, #10
 8005c66:	f7fb fdeb 	bl	8001840 <HAL_Delay>
      ms += 10U;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	330a      	adds	r3, #10
 8005c6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f001 f920 	bl	8006eb6 <USB_GetMode>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d005      	beq.n	8005c88 <USB_SetCurrentMode+0x84>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005c80:	d9f0      	bls.n	8005c64 <USB_SetCurrentMode+0x60>
 8005c82:	e001      	b.n	8005c88 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e005      	b.n	8005c94 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2bc8      	cmp	r3, #200	@ 0xc8
 8005c8c:	d101      	bne.n	8005c92 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e000      	b.n	8005c94 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b086      	sub	sp, #24
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	e009      	b.n	8005cd0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	3340      	adds	r3, #64	@ 0x40
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	613b      	str	r3, [r7, #16]
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2b0e      	cmp	r3, #14
 8005cd4:	d9f2      	bls.n	8005cbc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cd6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d11c      	bne.n	8005d18 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cec:	f043 0302 	orr.w	r3, r3, #2
 8005cf0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d02:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d0e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	639a      	str	r2, [r3, #56]	@ 0x38
 8005d16:	e00b      	b.n	8005d30 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d28:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d36:	461a      	mov	r2, r3
 8005d38:	2300      	movs	r3, #0
 8005d3a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d3c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d10d      	bne.n	8005d60 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d104      	bne.n	8005d56 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f968 	bl	8006024 <USB_SetDevSpeed>
 8005d54:	e008      	b.n	8005d68 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d56:	2101      	movs	r1, #1
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f963 	bl	8006024 <USB_SetDevSpeed>
 8005d5e:	e003      	b.n	8005d68 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d60:	2103      	movs	r1, #3
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f95e 	bl	8006024 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d68:	2110      	movs	r1, #16
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f8fa 	bl	8005f64 <USB_FlushTxFifo>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005d76:	2301      	movs	r3, #1
 8005d78:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f924 	bl	8005fc8 <USB_FlushRxFifo>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d90:	461a      	mov	r2, r3
 8005d92:	2300      	movs	r3, #0
 8005d94:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	2300      	movs	r3, #0
 8005da0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005da8:	461a      	mov	r2, r3
 8005daa:	2300      	movs	r3, #0
 8005dac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dae:	2300      	movs	r3, #0
 8005db0:	613b      	str	r3, [r7, #16]
 8005db2:	e043      	b.n	8005e3c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005dca:	d118      	bne.n	8005dfe <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10a      	bne.n	8005de8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dde:	461a      	mov	r2, r3
 8005de0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	e013      	b.n	8005e10 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df4:	461a      	mov	r2, r3
 8005df6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	e008      	b.n	8005e10 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	2300      	movs	r3, #0
 8005e20:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e2e:	461a      	mov	r2, r3
 8005e30:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	613b      	str	r3, [r7, #16]
 8005e3c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e40:	461a      	mov	r2, r3
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d3b5      	bcc.n	8005db4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	613b      	str	r3, [r7, #16]
 8005e4c:	e043      	b.n	8005ed6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e64:	d118      	bne.n	8005e98 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d10a      	bne.n	8005e82 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e78:	461a      	mov	r2, r3
 8005e7a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	e013      	b.n	8005eaa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	e008      	b.n	8005eaa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	2300      	movs	r3, #0
 8005eba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec8:	461a      	mov	r2, r3
 8005eca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ece:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	613b      	str	r3, [r7, #16]
 8005ed6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005eda:	461a      	mov	r2, r3
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d3b5      	bcc.n	8005e4e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ef4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005f02:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d105      	bne.n	8005f18 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	f043 0210 	orr.w	r2, r3, #16
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	699a      	ldr	r2, [r3, #24]
 8005f1c:	4b10      	ldr	r3, [pc, #64]	@ (8005f60 <USB_DevInit+0x2c4>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f24:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d005      	beq.n	8005f38 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	f043 0208 	orr.w	r2, r3, #8
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f38:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d107      	bne.n	8005f50 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f48:	f043 0304 	orr.w	r3, r3, #4
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3718      	adds	r7, #24
 8005f56:	46bd      	mov	sp, r7
 8005f58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f5c:	b004      	add	sp, #16
 8005f5e:	4770      	bx	lr
 8005f60:	803c3800 	.word	0x803c3800

08005f64 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3301      	adds	r3, #1
 8005f76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f7e:	d901      	bls.n	8005f84 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e01b      	b.n	8005fbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	daf2      	bge.n	8005f72 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	019b      	lsls	r3, r3, #6
 8005f94:	f043 0220 	orr.w	r2, r3, #32
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fa8:	d901      	bls.n	8005fae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e006      	b.n	8005fbc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	f003 0320 	and.w	r3, r3, #32
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d0f0      	beq.n	8005f9c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005fe0:	d901      	bls.n	8005fe6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e018      	b.n	8006018 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	daf2      	bge.n	8005fd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2210      	movs	r2, #16
 8005ff6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006004:	d901      	bls.n	800600a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e006      	b.n	8006018 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f003 0310 	and.w	r3, r3, #16
 8006012:	2b10      	cmp	r3, #16
 8006014:	d0f0      	beq.n	8005ff8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr

08006024 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	460b      	mov	r3, r1
 800602e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	78fb      	ldrb	r3, [r7, #3]
 800603e:	68f9      	ldr	r1, [r7, #12]
 8006040:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006044:	4313      	orrs	r3, r2
 8006046:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006056:	b480      	push	{r7}
 8006058:	b087      	sub	sp, #28
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 0306 	and.w	r3, r3, #6
 800606e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d102      	bne.n	800607c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006076:	2300      	movs	r3, #0
 8006078:	75fb      	strb	r3, [r7, #23]
 800607a:	e00a      	b.n	8006092 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2b02      	cmp	r3, #2
 8006080:	d002      	beq.n	8006088 <USB_GetDevSpeed+0x32>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2b06      	cmp	r3, #6
 8006086:	d102      	bne.n	800608e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006088:	2302      	movs	r3, #2
 800608a:	75fb      	strb	r3, [r7, #23]
 800608c:	e001      	b.n	8006092 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800608e:	230f      	movs	r3, #15
 8006090:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006092:	7dfb      	ldrb	r3, [r7, #23]
}
 8006094:	4618      	mov	r0, r3
 8006096:	371c      	adds	r7, #28
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	785b      	ldrb	r3, [r3, #1]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d13a      	bne.n	8006132 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c2:	69da      	ldr	r2, [r3, #28]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	2101      	movs	r1, #1
 80060ce:	fa01 f303 	lsl.w	r3, r1, r3
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	68f9      	ldr	r1, [r7, #12]
 80060d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80060da:	4313      	orrs	r3, r2
 80060dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d155      	bne.n	80061a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	791b      	ldrb	r3, [r3, #4]
 800610e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006110:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	059b      	lsls	r3, r3, #22
 8006116:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006118:	4313      	orrs	r3, r2
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	0151      	lsls	r1, r2, #5
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	440a      	add	r2, r1
 8006122:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800612a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	e036      	b.n	80061a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006138:	69da      	ldr	r2, [r3, #28]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	2101      	movs	r1, #1
 8006144:	fa01 f303 	lsl.w	r3, r1, r3
 8006148:	041b      	lsls	r3, r3, #16
 800614a:	68f9      	ldr	r1, [r7, #12]
 800614c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006150:	4313      	orrs	r3, r2
 8006152:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d11a      	bne.n	80061a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	791b      	ldrb	r3, [r3, #4]
 8006184:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006186:	430b      	orrs	r3, r1
 8006188:	4313      	orrs	r3, r2
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	0151      	lsls	r1, r2, #5
 800618e:	68fa      	ldr	r2, [r7, #12]
 8006190:	440a      	add	r2, r1
 8006192:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006196:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800619a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800619e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
	...

080061b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	785b      	ldrb	r3, [r3, #1]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d161      	bne.n	8006290 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061e2:	d11f      	bne.n	8006224 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	0151      	lsls	r1, r2, #5
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	440a      	add	r2, r1
 80061fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006202:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	0151      	lsls	r1, r2, #5
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	440a      	add	r2, r1
 800621a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800621e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006222:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800622a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	f003 030f 	and.w	r3, r3, #15
 8006234:	2101      	movs	r1, #1
 8006236:	fa01 f303 	lsl.w	r3, r1, r3
 800623a:	b29b      	uxth	r3, r3
 800623c:	43db      	mvns	r3, r3
 800623e:	68f9      	ldr	r1, [r7, #12]
 8006240:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006244:	4013      	ands	r3, r2
 8006246:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800624e:	69da      	ldr	r2, [r3, #28]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	f003 030f 	and.w	r3, r3, #15
 8006258:	2101      	movs	r1, #1
 800625a:	fa01 f303 	lsl.w	r3, r1, r3
 800625e:	b29b      	uxth	r3, r3
 8006260:	43db      	mvns	r3, r3
 8006262:	68f9      	ldr	r1, [r7, #12]
 8006264:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006268:	4013      	ands	r3, r2
 800626a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	0159      	lsls	r1, r3, #5
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	440b      	add	r3, r1
 8006282:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006286:	4619      	mov	r1, r3
 8006288:	4b35      	ldr	r3, [pc, #212]	@ (8006360 <USB_DeactivateEndpoint+0x1b0>)
 800628a:	4013      	ands	r3, r2
 800628c:	600b      	str	r3, [r1, #0]
 800628e:	e060      	b.n	8006352 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062a6:	d11f      	bne.n	80062e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	0151      	lsls	r1, r2, #5
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	440a      	add	r2, r1
 80062be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80062c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	0151      	lsls	r1, r2, #5
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	440a      	add	r2, r1
 80062de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	f003 030f 	and.w	r3, r3, #15
 80062f8:	2101      	movs	r1, #1
 80062fa:	fa01 f303 	lsl.w	r3, r1, r3
 80062fe:	041b      	lsls	r3, r3, #16
 8006300:	43db      	mvns	r3, r3
 8006302:	68f9      	ldr	r1, [r7, #12]
 8006304:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006308:	4013      	ands	r3, r2
 800630a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006312:	69da      	ldr	r2, [r3, #28]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	f003 030f 	and.w	r3, r3, #15
 800631c:	2101      	movs	r1, #1
 800631e:	fa01 f303 	lsl.w	r3, r1, r3
 8006322:	041b      	lsls	r3, r3, #16
 8006324:	43db      	mvns	r3, r3
 8006326:	68f9      	ldr	r1, [r7, #12]
 8006328:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800632c:	4013      	ands	r3, r2
 800632e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	0159      	lsls	r1, r3, #5
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	440b      	add	r3, r1
 8006346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800634a:	4619      	mov	r1, r3
 800634c:	4b05      	ldr	r3, [pc, #20]	@ (8006364 <USB_DeactivateEndpoint+0x1b4>)
 800634e:	4013      	ands	r3, r2
 8006350:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	ec337800 	.word	0xec337800
 8006364:	eff37800 	.word	0xeff37800

08006368 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08a      	sub	sp, #40	@ 0x28
 800636c:	af02      	add	r7, sp, #8
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	4613      	mov	r3, r2
 8006374:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	785b      	ldrb	r3, [r3, #1]
 8006384:	2b01      	cmp	r3, #1
 8006386:	f040 817a 	bne.w	800667e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d132      	bne.n	80063f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	0151      	lsls	r1, r2, #5
 80063a4:	69fa      	ldr	r2, [r7, #28]
 80063a6:	440a      	add	r2, r1
 80063a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063ac:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80063b0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80063b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	69fa      	ldr	r2, [r7, #28]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	0151      	lsls	r1, r2, #5
 80063e8:	69fa      	ldr	r2, [r7, #28]
 80063ea:	440a      	add	r2, r1
 80063ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063f0:	0cdb      	lsrs	r3, r3, #19
 80063f2:	04db      	lsls	r3, r3, #19
 80063f4:	6113      	str	r3, [r2, #16]
 80063f6:	e092      	b.n	800651e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	0151      	lsls	r1, r2, #5
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	440a      	add	r2, r1
 800640e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006412:	0cdb      	lsrs	r3, r3, #19
 8006414:	04db      	lsls	r3, r3, #19
 8006416:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	69ba      	ldr	r2, [r7, #24]
 8006428:	0151      	lsls	r1, r2, #5
 800642a:	69fa      	ldr	r2, [r7, #28]
 800642c:	440a      	add	r2, r1
 800642e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006432:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006436:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800643a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d11a      	bne.n	8006478 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	691a      	ldr	r2, [r3, #16]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	429a      	cmp	r2, r3
 800644c:	d903      	bls.n	8006456 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	4413      	add	r3, r2
 800645e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	0151      	lsls	r1, r2, #5
 8006468:	69fa      	ldr	r2, [r7, #28]
 800646a:	440a      	add	r2, r1
 800646c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006470:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006474:	6113      	str	r3, [r2, #16]
 8006476:	e01b      	b.n	80064b0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	4413      	add	r3, r2
 8006480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006484:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	6919      	ldr	r1, [r3, #16]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	440b      	add	r3, r1
 8006490:	1e59      	subs	r1, r3, #1
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	fbb1 f3f3 	udiv	r3, r1, r3
 800649a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800649c:	4ba2      	ldr	r3, [pc, #648]	@ (8006728 <USB_EPStartXfer+0x3c0>)
 800649e:	400b      	ands	r3, r1
 80064a0:	69b9      	ldr	r1, [r7, #24]
 80064a2:	0148      	lsls	r0, r1, #5
 80064a4:	69f9      	ldr	r1, [r7, #28]
 80064a6:	4401      	add	r1, r0
 80064a8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80064ac:	4313      	orrs	r3, r2
 80064ae:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064bc:	691a      	ldr	r2, [r3, #16]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064c6:	69b9      	ldr	r1, [r7, #24]
 80064c8:	0148      	lsls	r0, r1, #5
 80064ca:	69f9      	ldr	r1, [r7, #28]
 80064cc:	4401      	add	r1, r0
 80064ce:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80064d2:	4313      	orrs	r3, r2
 80064d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	791b      	ldrb	r3, [r3, #4]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d11f      	bne.n	800651e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	0151      	lsls	r1, r2, #5
 80064f0:	69fa      	ldr	r2, [r7, #28]
 80064f2:	440a      	add	r2, r1
 80064f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064f8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80064fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	0151      	lsls	r1, r2, #5
 8006510:	69fa      	ldr	r2, [r7, #28]
 8006512:	440a      	add	r2, r1
 8006514:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006518:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800651c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800651e:	79fb      	ldrb	r3, [r7, #7]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d14b      	bne.n	80065bc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d009      	beq.n	8006540 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800652c:	69bb      	ldr	r3, [r7, #24]
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006538:	461a      	mov	r2, r3
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	791b      	ldrb	r3, [r3, #4]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d128      	bne.n	800659a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006554:	2b00      	cmp	r3, #0
 8006556:	d110      	bne.n	800657a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	69fa      	ldr	r2, [r7, #28]
 800656c:	440a      	add	r2, r1
 800656e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006572:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	e00f      	b.n	800659a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	015a      	lsls	r2, r3, #5
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	4413      	add	r3, r2
 8006582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	0151      	lsls	r1, r2, #5
 800658c:	69fa      	ldr	r2, [r7, #28]
 800658e:	440a      	add	r2, r1
 8006590:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006598:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	015a      	lsls	r2, r3, #5
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	4413      	add	r3, r2
 80065a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	0151      	lsls	r1, r2, #5
 80065ac:	69fa      	ldr	r2, [r7, #28]
 80065ae:	440a      	add	r2, r1
 80065b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065b4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80065b8:	6013      	str	r3, [r2, #0]
 80065ba:	e165      	b.n	8006888 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	015a      	lsls	r2, r3, #5
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	0151      	lsls	r1, r2, #5
 80065ce:	69fa      	ldr	r2, [r7, #28]
 80065d0:	440a      	add	r2, r1
 80065d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065d6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80065da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	791b      	ldrb	r3, [r3, #4]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d015      	beq.n	8006610 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 814d 	beq.w	8006888 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	2101      	movs	r1, #1
 8006600:	fa01 f303 	lsl.w	r3, r1, r3
 8006604:	69f9      	ldr	r1, [r7, #28]
 8006606:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800660a:	4313      	orrs	r3, r2
 800660c:	634b      	str	r3, [r1, #52]	@ 0x34
 800660e:	e13b      	b.n	8006888 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006616:	689b      	ldr	r3, [r3, #8]
 8006618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800661c:	2b00      	cmp	r3, #0
 800661e:	d110      	bne.n	8006642 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	0151      	lsls	r1, r2, #5
 8006632:	69fa      	ldr	r2, [r7, #28]
 8006634:	440a      	add	r2, r1
 8006636:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800663a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800663e:	6013      	str	r3, [r2, #0]
 8006640:	e00f      	b.n	8006662 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	0151      	lsls	r1, r2, #5
 8006654:	69fa      	ldr	r2, [r7, #28]
 8006656:	440a      	add	r2, r1
 8006658:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800665c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006660:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	68d9      	ldr	r1, [r3, #12]
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	781a      	ldrb	r2, [r3, #0]
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	b298      	uxth	r0, r3
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	9300      	str	r3, [sp, #0]
 8006674:	4603      	mov	r3, r0
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 f9b8 	bl	80069ec <USB_WritePacket>
 800667c:	e104      	b.n	8006888 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	0151      	lsls	r1, r2, #5
 8006690:	69fa      	ldr	r2, [r7, #28]
 8006692:	440a      	add	r2, r1
 8006694:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006698:	0cdb      	lsrs	r3, r3, #19
 800669a:	04db      	lsls	r3, r3, #19
 800669c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	0151      	lsls	r1, r2, #5
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	440a      	add	r2, r1
 80066b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066b8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80066bc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80066c0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d131      	bne.n	800672c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	689a      	ldr	r2, [r3, #8]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ec:	691a      	ldr	r2, [r3, #16]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066f6:	69b9      	ldr	r1, [r7, #24]
 80066f8:	0148      	lsls	r0, r1, #5
 80066fa:	69f9      	ldr	r1, [r7, #28]
 80066fc:	4401      	add	r1, r0
 80066fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006702:	4313      	orrs	r3, r2
 8006704:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	0151      	lsls	r1, r2, #5
 8006718:	69fa      	ldr	r2, [r7, #28]
 800671a:	440a      	add	r2, r1
 800671c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006720:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006724:	6113      	str	r3, [r2, #16]
 8006726:	e061      	b.n	80067ec <USB_EPStartXfer+0x484>
 8006728:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d123      	bne.n	800677c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006740:	691a      	ldr	r2, [r3, #16]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800674a:	69b9      	ldr	r1, [r7, #24]
 800674c:	0148      	lsls	r0, r1, #5
 800674e:	69f9      	ldr	r1, [r7, #28]
 8006750:	4401      	add	r1, r0
 8006752:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006756:	4313      	orrs	r3, r2
 8006758:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	0151      	lsls	r1, r2, #5
 800676c:	69fa      	ldr	r2, [r7, #28]
 800676e:	440a      	add	r2, r1
 8006770:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006774:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006778:	6113      	str	r3, [r2, #16]
 800677a:	e037      	b.n	80067ec <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	691a      	ldr	r2, [r3, #16]
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	4413      	add	r3, r2
 8006786:	1e5a      	subs	r2, r3, #1
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006790:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	8afa      	ldrh	r2, [r7, #22]
 8006798:	fb03 f202 	mul.w	r2, r3, r2
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ac:	691a      	ldr	r2, [r3, #16]
 80067ae:	8afb      	ldrh	r3, [r7, #22]
 80067b0:	04d9      	lsls	r1, r3, #19
 80067b2:	4b38      	ldr	r3, [pc, #224]	@ (8006894 <USB_EPStartXfer+0x52c>)
 80067b4:	400b      	ands	r3, r1
 80067b6:	69b9      	ldr	r1, [r7, #24]
 80067b8:	0148      	lsls	r0, r1, #5
 80067ba:	69f9      	ldr	r1, [r7, #28]
 80067bc:	4401      	add	r1, r0
 80067be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80067c2:	4313      	orrs	r3, r2
 80067c4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067d2:	691a      	ldr	r2, [r3, #16]
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067dc:	69b9      	ldr	r1, [r7, #24]
 80067de:	0148      	lsls	r0, r1, #5
 80067e0:	69f9      	ldr	r1, [r7, #28]
 80067e2:	4401      	add	r1, r0
 80067e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80067e8:	4313      	orrs	r3, r2
 80067ea:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80067ec:	79fb      	ldrb	r3, [r7, #7]
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d10d      	bne.n	800680e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d009      	beq.n	800680e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	68d9      	ldr	r1, [r3, #12]
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800680a:	460a      	mov	r2, r1
 800680c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	791b      	ldrb	r3, [r3, #4]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d128      	bne.n	8006868 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006822:	2b00      	cmp	r3, #0
 8006824:	d110      	bne.n	8006848 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	4413      	add	r3, r2
 800682e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	69ba      	ldr	r2, [r7, #24]
 8006836:	0151      	lsls	r1, r2, #5
 8006838:	69fa      	ldr	r2, [r7, #28]
 800683a:	440a      	add	r2, r1
 800683c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006840:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006844:	6013      	str	r3, [r2, #0]
 8006846:	e00f      	b.n	8006868 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69ba      	ldr	r2, [r7, #24]
 8006858:	0151      	lsls	r1, r2, #5
 800685a:	69fa      	ldr	r2, [r7, #28]
 800685c:	440a      	add	r2, r1
 800685e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006866:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	4413      	add	r3, r2
 8006870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	0151      	lsls	r1, r2, #5
 800687a:	69fa      	ldr	r2, [r7, #28]
 800687c:	440a      	add	r2, r1
 800687e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006882:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006886:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3720      	adds	r7, #32
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	1ff80000 	.word	0x1ff80000

08006898 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	785b      	ldrb	r3, [r3, #1]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d14a      	bne.n	800694c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068ce:	f040 8086 	bne.w	80069de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	7812      	ldrb	r2, [r2, #0]
 80068e6:	0151      	lsls	r1, r2, #5
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	440a      	add	r2, r1
 80068ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80068f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	7812      	ldrb	r2, [r2, #0]
 800690a:	0151      	lsls	r1, r2, #5
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	440a      	add	r2, r1
 8006910:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006914:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006918:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3301      	adds	r3, #1
 800691e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006926:	4293      	cmp	r3, r2
 8006928:	d902      	bls.n	8006930 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	75fb      	strb	r3, [r7, #23]
          break;
 800692e:	e056      	b.n	80069de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	4413      	add	r3, r2
 800693a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006944:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006948:	d0e7      	beq.n	800691a <USB_EPStopXfer+0x82>
 800694a:	e048      	b.n	80069de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	4413      	add	r3, r2
 8006956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006960:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006964:	d13b      	bne.n	80069de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	015a      	lsls	r2, r3, #5
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	4413      	add	r3, r2
 8006970:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	7812      	ldrb	r2, [r2, #0]
 800697a:	0151      	lsls	r1, r2, #5
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	440a      	add	r2, r1
 8006980:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006984:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006988:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	683a      	ldr	r2, [r7, #0]
 800699c:	7812      	ldrb	r2, [r2, #0]
 800699e:	0151      	lsls	r1, r2, #5
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	440a      	add	r2, r1
 80069a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	3301      	adds	r3, #1
 80069b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d902      	bls.n	80069c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	75fb      	strb	r3, [r7, #23]
          break;
 80069c2:	e00c      	b.n	80069de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069dc:	d0e7      	beq.n	80069ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80069de:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	371c      	adds	r7, #28
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b089      	sub	sp, #36	@ 0x24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	60f8      	str	r0, [r7, #12]
 80069f4:	60b9      	str	r1, [r7, #8]
 80069f6:	4611      	mov	r1, r2
 80069f8:	461a      	mov	r2, r3
 80069fa:	460b      	mov	r3, r1
 80069fc:	71fb      	strb	r3, [r7, #7]
 80069fe:	4613      	mov	r3, r2
 8006a00:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006a0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d123      	bne.n	8006a5a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a12:	88bb      	ldrh	r3, [r7, #4]
 8006a14:	3303      	adds	r3, #3
 8006a16:	089b      	lsrs	r3, r3, #2
 8006a18:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	61bb      	str	r3, [r7, #24]
 8006a1e:	e018      	b.n	8006a52 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a20:	79fb      	ldrb	r3, [r7, #7]
 8006a22:	031a      	lsls	r2, r3, #12
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	3301      	adds	r3, #1
 8006a38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	3301      	adds	r3, #1
 8006a44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	61bb      	str	r3, [r7, #24]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d3e2      	bcc.n	8006a20 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3724      	adds	r7, #36	@ 0x24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b08b      	sub	sp, #44	@ 0x2c
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	4613      	mov	r3, r2
 8006a74:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a7e:	88fb      	ldrh	r3, [r7, #6]
 8006a80:	089b      	lsrs	r3, r3, #2
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a86:	88fb      	ldrh	r3, [r7, #6]
 8006a88:	f003 0303 	and.w	r3, r3, #3
 8006a8c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006a8e:	2300      	movs	r3, #0
 8006a90:	623b      	str	r3, [r7, #32]
 8006a92:	e014      	b.n	8006abe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aae:	3301      	adds	r3, #1
 8006ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	3301      	adds	r3, #1
 8006abc:	623b      	str	r3, [r7, #32]
 8006abe:	6a3a      	ldr	r2, [r7, #32]
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d3e6      	bcc.n	8006a94 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ac6:	8bfb      	ldrh	r3, [r7, #30]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d01e      	beq.n	8006b0a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	f107 0310 	add.w	r3, r7, #16
 8006adc:	6812      	ldr	r2, [r2, #0]
 8006ade:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af0:	701a      	strb	r2, [r3, #0]
      i++;
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	3301      	adds	r3, #1
 8006af6:	623b      	str	r3, [r7, #32]
      pDest++;
 8006af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afa:	3301      	adds	r3, #1
 8006afc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006afe:	8bfb      	ldrh	r3, [r7, #30]
 8006b00:	3b01      	subs	r3, #1
 8006b02:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006b04:	8bfb      	ldrh	r3, [r7, #30]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1ea      	bne.n	8006ae0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	372c      	adds	r7, #44	@ 0x2c
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	785b      	ldrb	r3, [r3, #1]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d12c      	bne.n	8006b8e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	db12      	blt.n	8006b6c <USB_EPSetStall+0x54>
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00f      	beq.n	8006b6c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	0151      	lsls	r1, r2, #5
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	440a      	add	r2, r1
 8006b62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b66:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006b6a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	0151      	lsls	r1, r2, #5
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	440a      	add	r2, r1
 8006b82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006b8a:	6013      	str	r3, [r2, #0]
 8006b8c:	e02b      	b.n	8006be6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	db12      	blt.n	8006bc6 <USB_EPSetStall+0xae>
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00f      	beq.n	8006bc6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	015a      	lsls	r2, r3, #5
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	4413      	add	r3, r2
 8006bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	0151      	lsls	r1, r2, #5
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	440a      	add	r2, r1
 8006bbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bc0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006bc4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	0151      	lsls	r1, r2, #5
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	440a      	add	r2, r1
 8006bdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006be0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006be4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	785b      	ldrb	r3, [r3, #1]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d128      	bne.n	8006c62 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	0151      	lsls	r1, r2, #5
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	440a      	add	r2, r1
 8006c26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c2e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	791b      	ldrb	r3, [r3, #4]
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	d003      	beq.n	8006c40 <USB_EPClearStall+0x4c>
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	791b      	ldrb	r3, [r3, #4]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d138      	bne.n	8006cb2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	0151      	lsls	r1, r2, #5
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	440a      	add	r2, r1
 8006c56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	e027      	b.n	8006cb2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	015a      	lsls	r2, r3, #5
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	4413      	add	r3, r2
 8006c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	0151      	lsls	r1, r2, #5
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	440a      	add	r2, r1
 8006c78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c7c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006c80:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	791b      	ldrb	r3, [r3, #4]
 8006c86:	2b03      	cmp	r3, #3
 8006c88:	d003      	beq.n	8006c92 <USB_EPClearStall+0x9e>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	791b      	ldrb	r3, [r3, #4]
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d10f      	bne.n	8006cb2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	015a      	lsls	r2, r3, #5
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	4413      	add	r3, r2
 8006c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68ba      	ldr	r2, [r7, #8]
 8006ca2:	0151      	lsls	r1, r2, #5
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	440a      	add	r2, r1
 8006ca8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cb0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68fa      	ldr	r2, [r7, #12]
 8006cda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cde:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006ce2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	78fb      	ldrb	r3, [r7, #3]
 8006cee:	011b      	lsls	r3, r3, #4
 8006cf0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006cf4:	68f9      	ldr	r1, [r7, #12]
 8006cf6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006d26:	f023 0303 	bic.w	r3, r3, #3
 8006d2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d3a:	f023 0302 	bic.w	r3, r3, #2
 8006d3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3714      	adds	r7, #20
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b085      	sub	sp, #20
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006d68:	f023 0303 	bic.w	r3, r3, #3
 8006d6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d7c:	f043 0302 	orr.w	r3, r3, #2
 8006d80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	4013      	ands	r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006da8:	68fb      	ldr	r3, [r7, #12]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b085      	sub	sp, #20
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dc8:	699b      	ldr	r3, [r3, #24]
 8006dca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	0c1b      	lsrs	r3, r3, #16
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3714      	adds	r7, #20
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr

08006dea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b085      	sub	sp, #20
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e06:	69db      	ldr	r3, [r3, #28]
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	b29b      	uxth	r3, r3
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b085      	sub	sp, #20
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	460b      	mov	r3, r1
 8006e28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e2e:	78fb      	ldrb	r3, [r7, #3]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	4013      	ands	r3, r2
 8006e4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3714      	adds	r7, #20
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b087      	sub	sp, #28
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	460b      	mov	r3, r1
 8006e64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e7c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006e7e:	78fb      	ldrb	r3, [r7, #3]
 8006e80:	f003 030f 	and.w	r3, r3, #15
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	fa22 f303 	lsr.w	r3, r2, r3
 8006e8a:	01db      	lsls	r3, r3, #7
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006e94:	78fb      	ldrb	r3, [r7, #3]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	371c      	adds	r7, #28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	695b      	ldr	r3, [r3, #20]
 8006ec2:	f003 0301 	and.w	r3, r3, #1
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b085      	sub	sp, #20
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006eec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006ef0:	f023 0307 	bic.w	r3, r3, #7
 8006ef4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	460b      	mov	r3, r1
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	333c      	adds	r3, #60	@ 0x3c
 8006f2e:	3304      	adds	r3, #4
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	4a26      	ldr	r2, [pc, #152]	@ (8006fd0 <USB_EP0_OutStart+0xb8>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d90a      	bls.n	8006f52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f4c:	d101      	bne.n	8006f52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	e037      	b.n	8006fc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f58:	461a      	mov	r2, r3
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f80:	f043 0318 	orr.w	r3, r3, #24
 8006f84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f94:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006f98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006f9a:	7afb      	ldrb	r3, [r7, #11]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d10f      	bne.n	8006fc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fba:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006fbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	371c      	adds	r7, #28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	4f54300a 	.word	0x4f54300a

08006fd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fec:	d901      	bls.n	8006ff2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e01b      	b.n	800702a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	daf2      	bge.n	8006fe0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	f043 0201 	orr.w	r2, r3, #1
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3301      	adds	r3, #1
 800700e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007016:	d901      	bls.n	800701c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007018:	2303      	movs	r3, #3
 800701a:	e006      	b.n	800702a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	2b01      	cmp	r3, #1
 8007026:	d0f0      	beq.n	800700a <USB_CoreReset+0x36>

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
	...

08007038 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007044:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007048:	f002 fc7e 	bl	8009948 <USBD_static_malloc>
 800704c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d109      	bne.n	8007068 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	32b0      	adds	r2, #176	@ 0xb0
 800705e:	2100      	movs	r1, #0
 8007060:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007064:	2302      	movs	r3, #2
 8007066:	e0d4      	b.n	8007212 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007068:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800706c:	2100      	movs	r1, #0
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f002 fe6f 	bl	8009d52 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	32b0      	adds	r2, #176	@ 0xb0
 800707e:	68f9      	ldr	r1, [r7, #12]
 8007080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	32b0      	adds	r2, #176	@ 0xb0
 800708e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	7c1b      	ldrb	r3, [r3, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d138      	bne.n	8007112 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80070a0:	4b5e      	ldr	r3, [pc, #376]	@ (800721c <USBD_CDC_Init+0x1e4>)
 80070a2:	7819      	ldrb	r1, [r3, #0]
 80070a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070a8:	2202      	movs	r2, #2
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f002 fb29 	bl	8009702 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80070b0:	4b5a      	ldr	r3, [pc, #360]	@ (800721c <USBD_CDC_Init+0x1e4>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	f003 020f 	and.w	r2, r3, #15
 80070b8:	6879      	ldr	r1, [r7, #4]
 80070ba:	4613      	mov	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	440b      	add	r3, r1
 80070c4:	3324      	adds	r3, #36	@ 0x24
 80070c6:	2201      	movs	r2, #1
 80070c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80070ca:	4b55      	ldr	r3, [pc, #340]	@ (8007220 <USBD_CDC_Init+0x1e8>)
 80070cc:	7819      	ldrb	r1, [r3, #0]
 80070ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80070d2:	2202      	movs	r2, #2
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f002 fb14 	bl	8009702 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80070da:	4b51      	ldr	r3, [pc, #324]	@ (8007220 <USBD_CDC_Init+0x1e8>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	f003 020f 	and.w	r2, r3, #15
 80070e2:	6879      	ldr	r1, [r7, #4]
 80070e4:	4613      	mov	r3, r2
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	440b      	add	r3, r1
 80070ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80070f2:	2201      	movs	r2, #1
 80070f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80070f6:	4b4b      	ldr	r3, [pc, #300]	@ (8007224 <USBD_CDC_Init+0x1ec>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	f003 020f 	and.w	r2, r3, #15
 80070fe:	6879      	ldr	r1, [r7, #4]
 8007100:	4613      	mov	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	440b      	add	r3, r1
 800710a:	3326      	adds	r3, #38	@ 0x26
 800710c:	2210      	movs	r2, #16
 800710e:	801a      	strh	r2, [r3, #0]
 8007110:	e035      	b.n	800717e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007112:	4b42      	ldr	r3, [pc, #264]	@ (800721c <USBD_CDC_Init+0x1e4>)
 8007114:	7819      	ldrb	r1, [r3, #0]
 8007116:	2340      	movs	r3, #64	@ 0x40
 8007118:	2202      	movs	r2, #2
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f002 faf1 	bl	8009702 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007120:	4b3e      	ldr	r3, [pc, #248]	@ (800721c <USBD_CDC_Init+0x1e4>)
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	f003 020f 	and.w	r2, r3, #15
 8007128:	6879      	ldr	r1, [r7, #4]
 800712a:	4613      	mov	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	440b      	add	r3, r1
 8007134:	3324      	adds	r3, #36	@ 0x24
 8007136:	2201      	movs	r2, #1
 8007138:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800713a:	4b39      	ldr	r3, [pc, #228]	@ (8007220 <USBD_CDC_Init+0x1e8>)
 800713c:	7819      	ldrb	r1, [r3, #0]
 800713e:	2340      	movs	r3, #64	@ 0x40
 8007140:	2202      	movs	r2, #2
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f002 fadd 	bl	8009702 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007148:	4b35      	ldr	r3, [pc, #212]	@ (8007220 <USBD_CDC_Init+0x1e8>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	f003 020f 	and.w	r2, r3, #15
 8007150:	6879      	ldr	r1, [r7, #4]
 8007152:	4613      	mov	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	440b      	add	r3, r1
 800715c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007160:	2201      	movs	r2, #1
 8007162:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007164:	4b2f      	ldr	r3, [pc, #188]	@ (8007224 <USBD_CDC_Init+0x1ec>)
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	f003 020f 	and.w	r2, r3, #15
 800716c:	6879      	ldr	r1, [r7, #4]
 800716e:	4613      	mov	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	4413      	add	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	440b      	add	r3, r1
 8007178:	3326      	adds	r3, #38	@ 0x26
 800717a:	2210      	movs	r2, #16
 800717c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800717e:	4b29      	ldr	r3, [pc, #164]	@ (8007224 <USBD_CDC_Init+0x1ec>)
 8007180:	7819      	ldrb	r1, [r3, #0]
 8007182:	2308      	movs	r3, #8
 8007184:	2203      	movs	r2, #3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f002 fabb 	bl	8009702 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800718c:	4b25      	ldr	r3, [pc, #148]	@ (8007224 <USBD_CDC_Init+0x1ec>)
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	f003 020f 	and.w	r2, r3, #15
 8007194:	6879      	ldr	r1, [r7, #4]
 8007196:	4613      	mov	r3, r2
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	440b      	add	r3, r1
 80071a0:	3324      	adds	r3, #36	@ 0x24
 80071a2:	2201      	movs	r2, #1
 80071a4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	33b0      	adds	r3, #176	@ 0xb0
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80071dc:	2302      	movs	r3, #2
 80071de:	e018      	b.n	8007212 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	7c1b      	ldrb	r3, [r3, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10a      	bne.n	80071fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071e8:	4b0d      	ldr	r3, [pc, #52]	@ (8007220 <USBD_CDC_Init+0x1e8>)
 80071ea:	7819      	ldrb	r1, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80071f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f002 fb72 	bl	80098e0 <USBD_LL_PrepareReceive>
 80071fc:	e008      	b.n	8007210 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80071fe:	4b08      	ldr	r3, [pc, #32]	@ (8007220 <USBD_CDC_Init+0x1e8>)
 8007200:	7819      	ldrb	r1, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007208:	2340      	movs	r3, #64	@ 0x40
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f002 fb68 	bl	80098e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	200000bf 	.word	0x200000bf
 8007220:	200000c0 	.word	0x200000c0
 8007224:	200000c1 	.word	0x200000c1

08007228 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	460b      	mov	r3, r1
 8007232:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007234:	4b3a      	ldr	r3, [pc, #232]	@ (8007320 <USBD_CDC_DeInit+0xf8>)
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	4619      	mov	r1, r3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f002 fa87 	bl	800974e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007240:	4b37      	ldr	r3, [pc, #220]	@ (8007320 <USBD_CDC_DeInit+0xf8>)
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	f003 020f 	and.w	r2, r3, #15
 8007248:	6879      	ldr	r1, [r7, #4]
 800724a:	4613      	mov	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	440b      	add	r3, r1
 8007254:	3324      	adds	r3, #36	@ 0x24
 8007256:	2200      	movs	r2, #0
 8007258:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800725a:	4b32      	ldr	r3, [pc, #200]	@ (8007324 <USBD_CDC_DeInit+0xfc>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f002 fa74 	bl	800974e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007266:	4b2f      	ldr	r3, [pc, #188]	@ (8007324 <USBD_CDC_DeInit+0xfc>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	f003 020f 	and.w	r2, r3, #15
 800726e:	6879      	ldr	r1, [r7, #4]
 8007270:	4613      	mov	r3, r2
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	440b      	add	r3, r1
 800727a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800727e:	2200      	movs	r2, #0
 8007280:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007282:	4b29      	ldr	r3, [pc, #164]	@ (8007328 <USBD_CDC_DeInit+0x100>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f002 fa60 	bl	800974e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800728e:	4b26      	ldr	r3, [pc, #152]	@ (8007328 <USBD_CDC_DeInit+0x100>)
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	f003 020f 	and.w	r2, r3, #15
 8007296:	6879      	ldr	r1, [r7, #4]
 8007298:	4613      	mov	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	440b      	add	r3, r1
 80072a2:	3324      	adds	r3, #36	@ 0x24
 80072a4:	2200      	movs	r2, #0
 80072a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80072a8:	4b1f      	ldr	r3, [pc, #124]	@ (8007328 <USBD_CDC_DeInit+0x100>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	f003 020f 	and.w	r2, r3, #15
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	4613      	mov	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	440b      	add	r3, r1
 80072bc:	3326      	adds	r3, #38	@ 0x26
 80072be:	2200      	movs	r2, #0
 80072c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	32b0      	adds	r2, #176	@ 0xb0
 80072cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d01f      	beq.n	8007314 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	33b0      	adds	r3, #176	@ 0xb0
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	32b0      	adds	r2, #176	@ 0xb0
 80072f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f002 fb34 	bl	8009964 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	32b0      	adds	r2, #176	@ 0xb0
 8007306:	2100      	movs	r1, #0
 8007308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	200000bf 	.word	0x200000bf
 8007324:	200000c0 	.word	0x200000c0
 8007328:	200000c1 	.word	0x200000c1

0800732c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	32b0      	adds	r2, #176	@ 0xb0
 8007340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007344:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800734a:	2300      	movs	r3, #0
 800734c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d101      	bne.n	800735c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007358:	2303      	movs	r3, #3
 800735a:	e0bf      	b.n	80074dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007364:	2b00      	cmp	r3, #0
 8007366:	d050      	beq.n	800740a <USBD_CDC_Setup+0xde>
 8007368:	2b20      	cmp	r3, #32
 800736a:	f040 80af 	bne.w	80074cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	88db      	ldrh	r3, [r3, #6]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d03a      	beq.n	80073ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	b25b      	sxtb	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	da1b      	bge.n	80073b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	33b0      	adds	r3, #176	@ 0xb0
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007396:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	88d2      	ldrh	r2, [r2, #6]
 800739c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	88db      	ldrh	r3, [r3, #6]
 80073a2:	2b07      	cmp	r3, #7
 80073a4:	bf28      	it	cs
 80073a6:	2307      	movcs	r3, #7
 80073a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	89fa      	ldrh	r2, [r7, #14]
 80073ae:	4619      	mov	r1, r3
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f001 fd87 	bl	8008ec4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80073b6:	e090      	b.n	80074da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	785a      	ldrb	r2, [r3, #1]
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	88db      	ldrh	r3, [r3, #6]
 80073c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80073c8:	d803      	bhi.n	80073d2 <USBD_CDC_Setup+0xa6>
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	88db      	ldrh	r3, [r3, #6]
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	e000      	b.n	80073d4 <USBD_CDC_Setup+0xa8>
 80073d2:	2240      	movs	r2, #64	@ 0x40
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80073da:	6939      	ldr	r1, [r7, #16]
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80073e2:	461a      	mov	r2, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f001 fd99 	bl	8008f1c <USBD_CtlPrepareRx>
      break;
 80073ea:	e076      	b.n	80074da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	33b0      	adds	r3, #176	@ 0xb0
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	4413      	add	r3, r2
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	7850      	ldrb	r0, [r2, #1]
 8007402:	2200      	movs	r2, #0
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	4798      	blx	r3
      break;
 8007408:	e067      	b.n	80074da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	785b      	ldrb	r3, [r3, #1]
 800740e:	2b0b      	cmp	r3, #11
 8007410:	d851      	bhi.n	80074b6 <USBD_CDC_Setup+0x18a>
 8007412:	a201      	add	r2, pc, #4	@ (adr r2, 8007418 <USBD_CDC_Setup+0xec>)
 8007414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007418:	08007449 	.word	0x08007449
 800741c:	080074c5 	.word	0x080074c5
 8007420:	080074b7 	.word	0x080074b7
 8007424:	080074b7 	.word	0x080074b7
 8007428:	080074b7 	.word	0x080074b7
 800742c:	080074b7 	.word	0x080074b7
 8007430:	080074b7 	.word	0x080074b7
 8007434:	080074b7 	.word	0x080074b7
 8007438:	080074b7 	.word	0x080074b7
 800743c:	080074b7 	.word	0x080074b7
 8007440:	08007473 	.word	0x08007473
 8007444:	0800749d 	.word	0x0800749d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b03      	cmp	r3, #3
 8007452:	d107      	bne.n	8007464 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007454:	f107 030a 	add.w	r3, r7, #10
 8007458:	2202      	movs	r2, #2
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 fd31 	bl	8008ec4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007462:	e032      	b.n	80074ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f001 fcbb 	bl	8008de2 <USBD_CtlError>
            ret = USBD_FAIL;
 800746c:	2303      	movs	r3, #3
 800746e:	75fb      	strb	r3, [r7, #23]
          break;
 8007470:	e02b      	b.n	80074ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b03      	cmp	r3, #3
 800747c:	d107      	bne.n	800748e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800747e:	f107 030d 	add.w	r3, r7, #13
 8007482:	2201      	movs	r2, #1
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f001 fd1c 	bl	8008ec4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800748c:	e01d      	b.n	80074ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f001 fca6 	bl	8008de2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007496:	2303      	movs	r3, #3
 8007498:	75fb      	strb	r3, [r7, #23]
          break;
 800749a:	e016      	b.n	80074ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d00f      	beq.n	80074c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80074a8:	6839      	ldr	r1, [r7, #0]
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f001 fc99 	bl	8008de2 <USBD_CtlError>
            ret = USBD_FAIL;
 80074b0:	2303      	movs	r3, #3
 80074b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80074b4:	e008      	b.n	80074c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f001 fc92 	bl	8008de2 <USBD_CtlError>
          ret = USBD_FAIL;
 80074be:	2303      	movs	r3, #3
 80074c0:	75fb      	strb	r3, [r7, #23]
          break;
 80074c2:	e002      	b.n	80074ca <USBD_CDC_Setup+0x19e>
          break;
 80074c4:	bf00      	nop
 80074c6:	e008      	b.n	80074da <USBD_CDC_Setup+0x1ae>
          break;
 80074c8:	bf00      	nop
      }
      break;
 80074ca:	e006      	b.n	80074da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f001 fc87 	bl	8008de2 <USBD_CtlError>
      ret = USBD_FAIL;
 80074d4:	2303      	movs	r3, #3
 80074d6:	75fb      	strb	r3, [r7, #23]
      break;
 80074d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80074da:	7dfb      	ldrb	r3, [r7, #23]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	460b      	mov	r3, r1
 80074ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80074f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	32b0      	adds	r2, #176	@ 0xb0
 8007502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800750a:	2303      	movs	r3, #3
 800750c:	e065      	b.n	80075da <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	32b0      	adds	r2, #176	@ 0xb0
 8007518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800751e:	78fb      	ldrb	r3, [r7, #3]
 8007520:	f003 020f 	and.w	r2, r3, #15
 8007524:	6879      	ldr	r1, [r7, #4]
 8007526:	4613      	mov	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	4413      	add	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	440b      	add	r3, r1
 8007530:	3318      	adds	r3, #24
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d02f      	beq.n	8007598 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007538:	78fb      	ldrb	r3, [r7, #3]
 800753a:	f003 020f 	and.w	r2, r3, #15
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	4613      	mov	r3, r2
 8007542:	009b      	lsls	r3, r3, #2
 8007544:	4413      	add	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	440b      	add	r3, r1
 800754a:	3318      	adds	r3, #24
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	78fb      	ldrb	r3, [r7, #3]
 8007550:	f003 010f 	and.w	r1, r3, #15
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	460b      	mov	r3, r1
 8007558:	00db      	lsls	r3, r3, #3
 800755a:	440b      	add	r3, r1
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4403      	add	r3, r0
 8007560:	331c      	adds	r3, #28
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	fbb2 f1f3 	udiv	r1, r2, r3
 8007568:	fb01 f303 	mul.w	r3, r1, r3
 800756c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800756e:	2b00      	cmp	r3, #0
 8007570:	d112      	bne.n	8007598 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007572:	78fb      	ldrb	r3, [r7, #3]
 8007574:	f003 020f 	and.w	r2, r3, #15
 8007578:	6879      	ldr	r1, [r7, #4]
 800757a:	4613      	mov	r3, r2
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	440b      	add	r3, r1
 8007584:	3318      	adds	r3, #24
 8007586:	2200      	movs	r2, #0
 8007588:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800758a:	78f9      	ldrb	r1, [r7, #3]
 800758c:	2300      	movs	r3, #0
 800758e:	2200      	movs	r2, #0
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f002 f984 	bl	800989e <USBD_LL_Transmit>
 8007596:	e01f      	b.n	80075d8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2200      	movs	r2, #0
 800759c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	33b0      	adds	r3, #176	@ 0xb0
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d010      	beq.n	80075d8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	33b0      	adds	r3, #176	@ 0xb0
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80075d4:	78fa      	ldrb	r2, [r7, #3]
 80075d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	460b      	mov	r3, r1
 80075ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	32b0      	adds	r2, #176	@ 0xb0
 80075f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	32b0      	adds	r2, #176	@ 0xb0
 8007608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d101      	bne.n	8007614 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007610:	2303      	movs	r3, #3
 8007612:	e01a      	b.n	800764a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007614:	78fb      	ldrb	r3, [r7, #3]
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f002 f982 	bl	8009922 <USBD_LL_GetRxDataSize>
 800761e:	4602      	mov	r2, r0
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	33b0      	adds	r3, #176	@ 0xb0
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007644:	4611      	mov	r1, r2
 8007646:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b084      	sub	sp, #16
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	32b0      	adds	r2, #176	@ 0xb0
 8007664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007668:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d101      	bne.n	8007674 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007670:	2303      	movs	r3, #3
 8007672:	e024      	b.n	80076be <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	33b0      	adds	r3, #176	@ 0xb0
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d019      	beq.n	80076bc <USBD_CDC_EP0_RxReady+0x6a>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800768e:	2bff      	cmp	r3, #255	@ 0xff
 8007690:	d014      	beq.n	80076bc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	33b0      	adds	r3, #176	@ 0xb0
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80076aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80076b2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	22ff      	movs	r2, #255	@ 0xff
 80076b8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
	...

080076c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80076d0:	2182      	movs	r1, #130	@ 0x82
 80076d2:	4818      	ldr	r0, [pc, #96]	@ (8007734 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076d4:	f000 fd4f 	bl	8008176 <USBD_GetEpDesc>
 80076d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80076da:	2101      	movs	r1, #1
 80076dc:	4815      	ldr	r0, [pc, #84]	@ (8007734 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076de:	f000 fd4a 	bl	8008176 <USBD_GetEpDesc>
 80076e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80076e4:	2181      	movs	r1, #129	@ 0x81
 80076e6:	4813      	ldr	r0, [pc, #76]	@ (8007734 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076e8:	f000 fd45 	bl	8008176 <USBD_GetEpDesc>
 80076ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d002      	beq.n	80076fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2210      	movs	r2, #16
 80076f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d006      	beq.n	800770e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	2200      	movs	r2, #0
 8007704:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007708:	711a      	strb	r2, [r3, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d006      	beq.n	8007722 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800771c:	711a      	strb	r2, [r3, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2243      	movs	r2, #67	@ 0x43
 8007726:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007728:	4b02      	ldr	r3, [pc, #8]	@ (8007734 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800772a:	4618      	mov	r0, r3
 800772c:	3718      	adds	r7, #24
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	2000007c 	.word	0x2000007c

08007738 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007740:	2182      	movs	r1, #130	@ 0x82
 8007742:	4818      	ldr	r0, [pc, #96]	@ (80077a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007744:	f000 fd17 	bl	8008176 <USBD_GetEpDesc>
 8007748:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800774a:	2101      	movs	r1, #1
 800774c:	4815      	ldr	r0, [pc, #84]	@ (80077a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800774e:	f000 fd12 	bl	8008176 <USBD_GetEpDesc>
 8007752:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007754:	2181      	movs	r1, #129	@ 0x81
 8007756:	4813      	ldr	r0, [pc, #76]	@ (80077a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007758:	f000 fd0d 	bl	8008176 <USBD_GetEpDesc>
 800775c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d002      	beq.n	800776a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2210      	movs	r2, #16
 8007768:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d006      	beq.n	800777e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	2200      	movs	r2, #0
 8007774:	711a      	strb	r2, [r3, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f042 0202 	orr.w	r2, r2, #2
 800777c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d006      	beq.n	8007792 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	711a      	strb	r2, [r3, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	f042 0202 	orr.w	r2, r2, #2
 8007790:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2243      	movs	r2, #67	@ 0x43
 8007796:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007798:	4b02      	ldr	r3, [pc, #8]	@ (80077a4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800779a:	4618      	mov	r0, r3
 800779c:	3718      	adds	r7, #24
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	2000007c 	.word	0x2000007c

080077a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80077b0:	2182      	movs	r1, #130	@ 0x82
 80077b2:	4818      	ldr	r0, [pc, #96]	@ (8007814 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80077b4:	f000 fcdf 	bl	8008176 <USBD_GetEpDesc>
 80077b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80077ba:	2101      	movs	r1, #1
 80077bc:	4815      	ldr	r0, [pc, #84]	@ (8007814 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80077be:	f000 fcda 	bl	8008176 <USBD_GetEpDesc>
 80077c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077c4:	2181      	movs	r1, #129	@ 0x81
 80077c6:	4813      	ldr	r0, [pc, #76]	@ (8007814 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80077c8:	f000 fcd5 	bl	8008176 <USBD_GetEpDesc>
 80077cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d002      	beq.n	80077da <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	2210      	movs	r2, #16
 80077d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d006      	beq.n	80077ee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077e8:	711a      	strb	r2, [r3, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d006      	beq.n	8007802 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077fc:	711a      	strb	r2, [r3, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2243      	movs	r2, #67	@ 0x43
 8007806:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007808:	4b02      	ldr	r3, [pc, #8]	@ (8007814 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800780a:	4618      	mov	r0, r3
 800780c:	3718      	adds	r7, #24
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	2000007c 	.word	0x2000007c

08007818 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	220a      	movs	r2, #10
 8007824:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007826:	4b03      	ldr	r3, [pc, #12]	@ (8007834 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007828:	4618      	mov	r0, r3
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr
 8007834:	20000038 	.word	0x20000038

08007838 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007848:	2303      	movs	r3, #3
 800784a:	e009      	b.n	8007860 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	33b0      	adds	r3, #176	@ 0xb0
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	4413      	add	r3, r2
 800785a:	683a      	ldr	r2, [r7, #0]
 800785c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800785e:	2300      	movs	r3, #0
}
 8007860:	4618      	mov	r0, r3
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	32b0      	adds	r2, #176	@ 0xb0
 8007882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007886:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800788e:	2303      	movs	r3, #3
 8007890:	e008      	b.n	80078a4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80078a2:	2300      	movs	r3, #0
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	371c      	adds	r7, #28
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	32b0      	adds	r2, #176	@ 0xb0
 80078c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d101      	bne.n	80078d4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e004      	b.n	80078de <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
	...

080078ec <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	32b0      	adds	r2, #176	@ 0xb0
 80078fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007902:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007904:	2301      	movs	r3, #1
 8007906:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800790e:	2303      	movs	r3, #3
 8007910:	e025      	b.n	800795e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007918:	2b00      	cmp	r3, #0
 800791a:	d11f      	bne.n	800795c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	2201      	movs	r2, #1
 8007920:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007924:	4b10      	ldr	r3, [pc, #64]	@ (8007968 <USBD_CDC_TransmitPacket+0x7c>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	f003 020f 	and.w	r2, r3, #15
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	4613      	mov	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4403      	add	r3, r0
 800793e:	3318      	adds	r3, #24
 8007940:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007942:	4b09      	ldr	r3, [pc, #36]	@ (8007968 <USBD_CDC_TransmitPacket+0x7c>)
 8007944:	7819      	ldrb	r1, [r3, #0]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f001 ffa3 	bl	800989e <USBD_LL_Transmit>

    ret = USBD_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800795c:	7bfb      	ldrb	r3, [r7, #15]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	200000bf 	.word	0x200000bf

0800796c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	32b0      	adds	r2, #176	@ 0xb0
 800797e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007982:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	32b0      	adds	r2, #176	@ 0xb0
 800798e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d101      	bne.n	800799a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007996:	2303      	movs	r3, #3
 8007998:	e018      	b.n	80079cc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	7c1b      	ldrb	r3, [r3, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d10a      	bne.n	80079b8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079a2:	4b0c      	ldr	r3, [pc, #48]	@ (80079d4 <USBD_CDC_ReceivePacket+0x68>)
 80079a4:	7819      	ldrb	r1, [r3, #0]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80079ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 ff95 	bl	80098e0 <USBD_LL_PrepareReceive>
 80079b6:	e008      	b.n	80079ca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079b8:	4b06      	ldr	r3, [pc, #24]	@ (80079d4 <USBD_CDC_ReceivePacket+0x68>)
 80079ba:	7819      	ldrb	r1, [r3, #0]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80079c2:	2340      	movs	r3, #64	@ 0x40
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f001 ff8b 	bl	80098e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	200000c0 	.word	0x200000c0

080079d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	4613      	mov	r3, r2
 80079e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e01f      	b.n	8007a30 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	68ba      	ldr	r2, [r7, #8]
 8007a12:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2201      	movs	r2, #1
 8007a1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	79fa      	ldrb	r2, [r7, #7]
 8007a22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f001 fe05 	bl	8009634 <USBD_LL_Init>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3718      	adds	r7, #24
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b084      	sub	sp, #16
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d101      	bne.n	8007a50 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	e025      	b.n	8007a9c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	32ae      	adds	r2, #174	@ 0xae
 8007a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00f      	beq.n	8007a8c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	32ae      	adds	r2, #174	@ 0xae
 8007a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a7c:	f107 020e 	add.w	r2, r7, #14
 8007a80:	4610      	mov	r0, r2
 8007a82:	4798      	blx	r3
 8007a84:	4602      	mov	r2, r0
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007a92:	1c5a      	adds	r2, r3, #1
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f001 fe0d 	bl	80096cc <USBD_LL_Start>
 8007ab2:	4603      	mov	r3, r0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3708      	adds	r7, #8
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ac4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b084      	sub	sp, #16
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	460b      	mov	r3, r1
 8007adc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d009      	beq.n	8007b00 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	78fa      	ldrb	r2, [r7, #3]
 8007af6:	4611      	mov	r1, r2
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	4798      	blx	r3
 8007afc:	4603      	mov	r3, r0
 8007afe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3710      	adds	r7, #16
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b084      	sub	sp, #16
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	460b      	mov	r3, r1
 8007b14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	78fa      	ldrb	r2, [r7, #3]
 8007b24:	4611      	mov	r1, r2
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	4798      	blx	r3
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007b30:	2303      	movs	r3, #3
 8007b32:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f001 f90c 	bl	8008d6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007b64:	461a      	mov	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007b72:	f003 031f 	and.w	r3, r3, #31
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d01a      	beq.n	8007bb0 <USBD_LL_SetupStage+0x72>
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d822      	bhi.n	8007bc4 <USBD_LL_SetupStage+0x86>
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d002      	beq.n	8007b88 <USBD_LL_SetupStage+0x4a>
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d00a      	beq.n	8007b9c <USBD_LL_SetupStage+0x5e>
 8007b86:	e01d      	b.n	8007bc4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007b8e:	4619      	mov	r1, r3
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fb63 	bl	800825c <USBD_StdDevReq>
 8007b96:	4603      	mov	r3, r0
 8007b98:	73fb      	strb	r3, [r7, #15]
      break;
 8007b9a:	e020      	b.n	8007bde <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 fbcb 	bl	8008340 <USBD_StdItfReq>
 8007baa:	4603      	mov	r3, r0
 8007bac:	73fb      	strb	r3, [r7, #15]
      break;
 8007bae:	e016      	b.n	8007bde <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 fc2d 	bl	8008418 <USBD_StdEPReq>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	73fb      	strb	r3, [r7, #15]
      break;
 8007bc2:	e00c      	b.n	8007bde <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007bca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f001 fdda 	bl	800978c <USBD_LL_StallEP>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	73fb      	strb	r3, [r7, #15]
      break;
 8007bdc:	bf00      	nop
  }

  return ret;
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b086      	sub	sp, #24
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	607a      	str	r2, [r7, #4]
 8007bf4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007bfa:	7afb      	ldrb	r3, [r7, #11]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d16e      	bne.n	8007cde <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007c06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007c0e:	2b03      	cmp	r3, #3
 8007c10:	f040 8098 	bne.w	8007d44 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	689a      	ldr	r2, [r3, #8]
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d913      	bls.n	8007c48 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	689a      	ldr	r2, [r3, #8]
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	1ad2      	subs	r2, r2, r3
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	4293      	cmp	r3, r2
 8007c38:	bf28      	it	cs
 8007c3a:	4613      	movcs	r3, r2
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	6879      	ldr	r1, [r7, #4]
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f001 f988 	bl	8008f56 <USBD_CtlContinueRx>
 8007c46:	e07d      	b.n	8007d44 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007c4e:	f003 031f 	and.w	r3, r3, #31
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d014      	beq.n	8007c80 <USBD_LL_DataOutStage+0x98>
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d81d      	bhi.n	8007c96 <USBD_LL_DataOutStage+0xae>
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <USBD_LL_DataOutStage+0x7c>
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d003      	beq.n	8007c6a <USBD_LL_DataOutStage+0x82>
 8007c62:	e018      	b.n	8007c96 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007c64:	2300      	movs	r3, #0
 8007c66:	75bb      	strb	r3, [r7, #22]
            break;
 8007c68:	e018      	b.n	8007c9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	4619      	mov	r1, r3
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 fa64 	bl	8008142 <USBD_CoreFindIF>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	75bb      	strb	r3, [r7, #22]
            break;
 8007c7e:	e00d      	b.n	8007c9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	4619      	mov	r1, r3
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 fa66 	bl	800815c <USBD_CoreFindEP>
 8007c90:	4603      	mov	r3, r0
 8007c92:	75bb      	strb	r3, [r7, #22]
            break;
 8007c94:	e002      	b.n	8007c9c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	75bb      	strb	r3, [r7, #22]
            break;
 8007c9a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007c9c:	7dbb      	ldrb	r3, [r7, #22]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d119      	bne.n	8007cd6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	d113      	bne.n	8007cd6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007cae:	7dba      	ldrb	r2, [r7, #22]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	32ae      	adds	r2, #174	@ 0xae
 8007cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb8:	691b      	ldr	r3, [r3, #16]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00b      	beq.n	8007cd6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007cbe:	7dba      	ldrb	r2, [r7, #22]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007cc6:	7dba      	ldrb	r2, [r7, #22]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	32ae      	adds	r2, #174	@ 0xae
 8007ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f001 f94e 	bl	8008f78 <USBD_CtlSendStatus>
 8007cdc:	e032      	b.n	8007d44 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007cde:	7afb      	ldrb	r3, [r7, #11]
 8007ce0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 fa37 	bl	800815c <USBD_CoreFindEP>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cf2:	7dbb      	ldrb	r3, [r7, #22]
 8007cf4:	2bff      	cmp	r3, #255	@ 0xff
 8007cf6:	d025      	beq.n	8007d44 <USBD_LL_DataOutStage+0x15c>
 8007cf8:	7dbb      	ldrb	r3, [r7, #22]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d122      	bne.n	8007d44 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b03      	cmp	r3, #3
 8007d08:	d117      	bne.n	8007d3a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007d0a:	7dba      	ldrb	r2, [r7, #22]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	32ae      	adds	r2, #174	@ 0xae
 8007d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00f      	beq.n	8007d3a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007d1a:	7dba      	ldrb	r2, [r7, #22]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007d22:	7dba      	ldrb	r2, [r7, #22]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	32ae      	adds	r2, #174	@ 0xae
 8007d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d2c:	699b      	ldr	r3, [r3, #24]
 8007d2e:	7afa      	ldrb	r2, [r7, #11]
 8007d30:	4611      	mov	r1, r2
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	4798      	blx	r3
 8007d36:	4603      	mov	r3, r0
 8007d38:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007d3a:	7dfb      	ldrb	r3, [r7, #23]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d001      	beq.n	8007d44 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
 8007d42:	e000      	b.n	8007d46 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b086      	sub	sp, #24
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	60f8      	str	r0, [r7, #12]
 8007d56:	460b      	mov	r3, r1
 8007d58:	607a      	str	r2, [r7, #4]
 8007d5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007d5c:	7afb      	ldrb	r3, [r7, #11]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d16f      	bne.n	8007e42 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3314      	adds	r3, #20
 8007d66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d15a      	bne.n	8007e28 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	689a      	ldr	r2, [r3, #8]
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d914      	bls.n	8007da8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	689a      	ldr	r2, [r3, #8]
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	1ad2      	subs	r2, r2, r3
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	461a      	mov	r2, r3
 8007d92:	6879      	ldr	r1, [r7, #4]
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f001 f8b0 	bl	8008efa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	2100      	movs	r1, #0
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f001 fd9d 	bl	80098e0 <USBD_LL_PrepareReceive>
 8007da6:	e03f      	b.n	8007e28 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	68da      	ldr	r2, [r3, #12]
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d11c      	bne.n	8007dee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d316      	bcc.n	8007dee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d20f      	bcs.n	8007dee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007dce:	2200      	movs	r2, #0
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f001 f891 	bl	8008efa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007de0:	2300      	movs	r3, #0
 8007de2:	2200      	movs	r2, #0
 8007de4:	2100      	movs	r1, #0
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f001 fd7a 	bl	80098e0 <USBD_LL_PrepareReceive>
 8007dec:	e01c      	b.n	8007e28 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b03      	cmp	r3, #3
 8007df8:	d10f      	bne.n	8007e1a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d009      	beq.n	8007e1a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e1a:	2180      	movs	r1, #128	@ 0x80
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f001 fcb5 	bl	800978c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f001 f8bb 	bl	8008f9e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d03a      	beq.n	8007ea8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f7ff fe42 	bl	8007abc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007e40:	e032      	b.n	8007ea8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007e42:	7afb      	ldrb	r3, [r7, #11]
 8007e44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f000 f985 	bl	800815c <USBD_CoreFindEP>
 8007e52:	4603      	mov	r3, r0
 8007e54:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
 8007e58:	2bff      	cmp	r3, #255	@ 0xff
 8007e5a:	d025      	beq.n	8007ea8 <USBD_LL_DataInStage+0x15a>
 8007e5c:	7dfb      	ldrb	r3, [r7, #23]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d122      	bne.n	8007ea8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	d11c      	bne.n	8007ea8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007e6e:	7dfa      	ldrb	r2, [r7, #23]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	32ae      	adds	r2, #174	@ 0xae
 8007e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d014      	beq.n	8007ea8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007e7e:	7dfa      	ldrb	r2, [r7, #23]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007e86:	7dfa      	ldrb	r2, [r7, #23]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	32ae      	adds	r2, #174	@ 0xae
 8007e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	7afa      	ldrb	r2, [r7, #11]
 8007e94:	4611      	mov	r1, r2
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	4798      	blx	r3
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007e9e:	7dbb      	ldrb	r3, [r7, #22]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007ea4:	7dbb      	ldrb	r3, [r7, #22]
 8007ea6:	e000      	b.n	8007eaa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3718      	adds	r7, #24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d014      	beq.n	8007f18 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00e      	beq.n	8007f18 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	6852      	ldr	r2, [r2, #4]
 8007f06:	b2d2      	uxtb	r2, r2
 8007f08:	4611      	mov	r1, r2
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	4798      	blx	r3
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d001      	beq.n	8007f18 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007f14:	2303      	movs	r3, #3
 8007f16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f18:	2340      	movs	r3, #64	@ 0x40
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f001 fbef 	bl	8009702 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2240      	movs	r2, #64	@ 0x40
 8007f30:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f34:	2340      	movs	r3, #64	@ 0x40
 8007f36:	2200      	movs	r2, #0
 8007f38:	2180      	movs	r1, #128	@ 0x80
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f001 fbe1 	bl	8009702 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2240      	movs	r2, #64	@ 0x40
 8007f4a:	621a      	str	r2, [r3, #32]

  return ret;
 8007f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f4e:	4618      	mov	r0, r3
 8007f50:	3710      	adds	r7, #16
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f56:	b480      	push	{r7}
 8007f58:	b083      	sub	sp, #12
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	460b      	mov	r3, r1
 8007f60:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	78fa      	ldrb	r2, [r7, #3]
 8007f66:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	370c      	adds	r7, #12
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr

08007f76 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b083      	sub	sp, #12
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b04      	cmp	r3, #4
 8007f88:	d006      	beq.n	8007f98 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2204      	movs	r2, #4
 8007f9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	2b04      	cmp	r3, #4
 8007fc0:	d106      	bne.n	8007fd0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b03      	cmp	r3, #3
 8007ff0:	d110      	bne.n	8008014 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00b      	beq.n	8008014 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d005      	beq.n	8008014 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800800e:	69db      	ldr	r3, [r3, #28]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b082      	sub	sp, #8
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	460b      	mov	r3, r1
 8008028:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	32ae      	adds	r2, #174	@ 0xae
 8008034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d101      	bne.n	8008040 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800803c:	2303      	movs	r3, #3
 800803e:	e01c      	b.n	800807a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b03      	cmp	r3, #3
 800804a:	d115      	bne.n	8008078 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	32ae      	adds	r2, #174	@ 0xae
 8008056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800805a:	6a1b      	ldr	r3, [r3, #32]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00b      	beq.n	8008078 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	32ae      	adds	r2, #174	@ 0xae
 800806a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800806e:	6a1b      	ldr	r3, [r3, #32]
 8008070:	78fa      	ldrb	r2, [r7, #3]
 8008072:	4611      	mov	r1, r2
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b082      	sub	sp, #8
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	460b      	mov	r3, r1
 800808c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	32ae      	adds	r2, #174	@ 0xae
 8008098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d101      	bne.n	80080a4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e01c      	b.n	80080de <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	2b03      	cmp	r3, #3
 80080ae:	d115      	bne.n	80080dc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	32ae      	adds	r2, #174	@ 0xae
 80080ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d00b      	beq.n	80080dc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	32ae      	adds	r2, #174	@ 0xae
 80080ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d4:	78fa      	ldrb	r2, [r7, #3]
 80080d6:	4611      	mov	r1, r2
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b083      	sub	sp, #12
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00e      	beq.n	8008138 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	6852      	ldr	r2, [r2, #4]
 8008126:	b2d2      	uxtb	r2, r2
 8008128:	4611      	mov	r1, r2
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	4798      	blx	r3
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d001      	beq.n	8008138 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008134:	2303      	movs	r3, #3
 8008136:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008138:	7bfb      	ldrb	r3, [r7, #15]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3710      	adds	r7, #16
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008142:	b480      	push	{r7}
 8008144:	b083      	sub	sp, #12
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	460b      	mov	r3, r1
 800814c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800814e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008150:	4618      	mov	r0, r3
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008168:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800816a:	4618      	mov	r0, r3
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b086      	sub	sp, #24
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	460b      	mov	r3, r1
 8008180:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800818a:	2300      	movs	r3, #0
 800818c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	885b      	ldrh	r3, [r3, #2]
 8008192:	b29b      	uxth	r3, r3
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	7812      	ldrb	r2, [r2, #0]
 8008198:	4293      	cmp	r3, r2
 800819a:	d91f      	bls.n	80081dc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80081a2:	e013      	b.n	80081cc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80081a4:	f107 030a 	add.w	r3, r7, #10
 80081a8:	4619      	mov	r1, r3
 80081aa:	6978      	ldr	r0, [r7, #20]
 80081ac:	f000 f81b 	bl	80081e6 <USBD_GetNextDesc>
 80081b0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	785b      	ldrb	r3, [r3, #1]
 80081b6:	2b05      	cmp	r3, #5
 80081b8:	d108      	bne.n	80081cc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	789b      	ldrb	r3, [r3, #2]
 80081c2:	78fa      	ldrb	r2, [r7, #3]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d008      	beq.n	80081da <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80081c8:	2300      	movs	r3, #0
 80081ca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	885b      	ldrh	r3, [r3, #2]
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	897b      	ldrh	r3, [r7, #10]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d8e5      	bhi.n	80081a4 <USBD_GetEpDesc+0x2e>
 80081d8:	e000      	b.n	80081dc <USBD_GetEpDesc+0x66>
          break;
 80081da:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80081dc:	693b      	ldr	r3, [r7, #16]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3718      	adds	r7, #24
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b085      	sub	sp, #20
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	881b      	ldrh	r3, [r3, #0]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	7812      	ldrb	r2, [r2, #0]
 80081fc:	4413      	add	r3, r2
 80081fe:	b29a      	uxth	r2, r3
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	461a      	mov	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4413      	add	r3, r2
 800820e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008210:	68fb      	ldr	r3, [r7, #12]
}
 8008212:	4618      	mov	r0, r3
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800821e:	b480      	push	{r7}
 8008220:	b087      	sub	sp, #28
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	3301      	adds	r3, #1
 8008234:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800823c:	8a3b      	ldrh	r3, [r7, #16]
 800823e:	021b      	lsls	r3, r3, #8
 8008240:	b21a      	sxth	r2, r3
 8008242:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008246:	4313      	orrs	r3, r2
 8008248:	b21b      	sxth	r3, r3
 800824a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800824c:	89fb      	ldrh	r3, [r7, #14]
}
 800824e:	4618      	mov	r0, r3
 8008250:	371c      	adds	r7, #28
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
	...

0800825c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008272:	2b40      	cmp	r3, #64	@ 0x40
 8008274:	d005      	beq.n	8008282 <USBD_StdDevReq+0x26>
 8008276:	2b40      	cmp	r3, #64	@ 0x40
 8008278:	d857      	bhi.n	800832a <USBD_StdDevReq+0xce>
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00f      	beq.n	800829e <USBD_StdDevReq+0x42>
 800827e:	2b20      	cmp	r3, #32
 8008280:	d153      	bne.n	800832a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	32ae      	adds	r2, #174	@ 0xae
 800828c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	6839      	ldr	r1, [r7, #0]
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	4798      	blx	r3
 8008298:	4603      	mov	r3, r0
 800829a:	73fb      	strb	r3, [r7, #15]
      break;
 800829c:	e04a      	b.n	8008334 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	785b      	ldrb	r3, [r3, #1]
 80082a2:	2b09      	cmp	r3, #9
 80082a4:	d83b      	bhi.n	800831e <USBD_StdDevReq+0xc2>
 80082a6:	a201      	add	r2, pc, #4	@ (adr r2, 80082ac <USBD_StdDevReq+0x50>)
 80082a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ac:	08008301 	.word	0x08008301
 80082b0:	08008315 	.word	0x08008315
 80082b4:	0800831f 	.word	0x0800831f
 80082b8:	0800830b 	.word	0x0800830b
 80082bc:	0800831f 	.word	0x0800831f
 80082c0:	080082df 	.word	0x080082df
 80082c4:	080082d5 	.word	0x080082d5
 80082c8:	0800831f 	.word	0x0800831f
 80082cc:	080082f7 	.word	0x080082f7
 80082d0:	080082e9 	.word	0x080082e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80082d4:	6839      	ldr	r1, [r7, #0]
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 fa3c 	bl	8008754 <USBD_GetDescriptor>
          break;
 80082dc:	e024      	b.n	8008328 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80082de:	6839      	ldr	r1, [r7, #0]
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 fba1 	bl	8008a28 <USBD_SetAddress>
          break;
 80082e6:	e01f      	b.n	8008328 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 fbe0 	bl	8008ab0 <USBD_SetConfig>
 80082f0:	4603      	mov	r3, r0
 80082f2:	73fb      	strb	r3, [r7, #15]
          break;
 80082f4:	e018      	b.n	8008328 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fc83 	bl	8008c04 <USBD_GetConfig>
          break;
 80082fe:	e013      	b.n	8008328 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fcb4 	bl	8008c70 <USBD_GetStatus>
          break;
 8008308:	e00e      	b.n	8008328 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fce3 	bl	8008cd8 <USBD_SetFeature>
          break;
 8008312:	e009      	b.n	8008328 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fd07 	bl	8008d2a <USBD_ClrFeature>
          break;
 800831c:	e004      	b.n	8008328 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 fd5e 	bl	8008de2 <USBD_CtlError>
          break;
 8008326:	bf00      	nop
      }
      break;
 8008328:	e004      	b.n	8008334 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fd58 	bl	8008de2 <USBD_CtlError>
      break;
 8008332:	bf00      	nop
  }

  return ret;
 8008334:	7bfb      	ldrb	r3, [r7, #15]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop

08008340 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008356:	2b40      	cmp	r3, #64	@ 0x40
 8008358:	d005      	beq.n	8008366 <USBD_StdItfReq+0x26>
 800835a:	2b40      	cmp	r3, #64	@ 0x40
 800835c:	d852      	bhi.n	8008404 <USBD_StdItfReq+0xc4>
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <USBD_StdItfReq+0x26>
 8008362:	2b20      	cmp	r3, #32
 8008364:	d14e      	bne.n	8008404 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800836c:	b2db      	uxtb	r3, r3
 800836e:	3b01      	subs	r3, #1
 8008370:	2b02      	cmp	r3, #2
 8008372:	d840      	bhi.n	80083f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	889b      	ldrh	r3, [r3, #4]
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b01      	cmp	r3, #1
 800837c:	d836      	bhi.n	80083ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	889b      	ldrh	r3, [r3, #4]
 8008382:	b2db      	uxtb	r3, r3
 8008384:	4619      	mov	r1, r3
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7ff fedb 	bl	8008142 <USBD_CoreFindIF>
 800838c:	4603      	mov	r3, r0
 800838e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008390:	7bbb      	ldrb	r3, [r7, #14]
 8008392:	2bff      	cmp	r3, #255	@ 0xff
 8008394:	d01d      	beq.n	80083d2 <USBD_StdItfReq+0x92>
 8008396:	7bbb      	ldrb	r3, [r7, #14]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d11a      	bne.n	80083d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800839c:	7bba      	ldrb	r2, [r7, #14]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	32ae      	adds	r2, #174	@ 0xae
 80083a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00f      	beq.n	80083cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80083ac:	7bba      	ldrb	r2, [r7, #14]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80083b4:	7bba      	ldrb	r2, [r7, #14]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	32ae      	adds	r2, #174	@ 0xae
 80083ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	6839      	ldr	r1, [r7, #0]
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	4798      	blx	r3
 80083c6:	4603      	mov	r3, r0
 80083c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083ca:	e004      	b.n	80083d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80083cc:	2303      	movs	r3, #3
 80083ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083d0:	e001      	b.n	80083d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80083d2:	2303      	movs	r3, #3
 80083d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	88db      	ldrh	r3, [r3, #6]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d110      	bne.n	8008400 <USBD_StdItfReq+0xc0>
 80083de:	7bfb      	ldrb	r3, [r7, #15]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10d      	bne.n	8008400 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fdc7 	bl	8008f78 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80083ea:	e009      	b.n	8008400 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80083ec:	6839      	ldr	r1, [r7, #0]
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fcf7 	bl	8008de2 <USBD_CtlError>
          break;
 80083f4:	e004      	b.n	8008400 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fcf2 	bl	8008de2 <USBD_CtlError>
          break;
 80083fe:	e000      	b.n	8008402 <USBD_StdItfReq+0xc2>
          break;
 8008400:	bf00      	nop
      }
      break;
 8008402:	e004      	b.n	800840e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008404:	6839      	ldr	r1, [r7, #0]
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fceb 	bl	8008de2 <USBD_CtlError>
      break;
 800840c:	bf00      	nop
  }

  return ret;
 800840e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008422:	2300      	movs	r3, #0
 8008424:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	889b      	ldrh	r3, [r3, #4]
 800842a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008434:	2b40      	cmp	r3, #64	@ 0x40
 8008436:	d007      	beq.n	8008448 <USBD_StdEPReq+0x30>
 8008438:	2b40      	cmp	r3, #64	@ 0x40
 800843a:	f200 817f 	bhi.w	800873c <USBD_StdEPReq+0x324>
 800843e:	2b00      	cmp	r3, #0
 8008440:	d02a      	beq.n	8008498 <USBD_StdEPReq+0x80>
 8008442:	2b20      	cmp	r3, #32
 8008444:	f040 817a 	bne.w	800873c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008448:	7bbb      	ldrb	r3, [r7, #14]
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7ff fe85 	bl	800815c <USBD_CoreFindEP>
 8008452:	4603      	mov	r3, r0
 8008454:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008456:	7b7b      	ldrb	r3, [r7, #13]
 8008458:	2bff      	cmp	r3, #255	@ 0xff
 800845a:	f000 8174 	beq.w	8008746 <USBD_StdEPReq+0x32e>
 800845e:	7b7b      	ldrb	r3, [r7, #13]
 8008460:	2b00      	cmp	r3, #0
 8008462:	f040 8170 	bne.w	8008746 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008466:	7b7a      	ldrb	r2, [r7, #13]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800846e:	7b7a      	ldrb	r2, [r7, #13]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	32ae      	adds	r2, #174	@ 0xae
 8008474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 8163 	beq.w	8008746 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008480:	7b7a      	ldrb	r2, [r7, #13]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	32ae      	adds	r2, #174	@ 0xae
 8008486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	4798      	blx	r3
 8008492:	4603      	mov	r3, r0
 8008494:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008496:	e156      	b.n	8008746 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	785b      	ldrb	r3, [r3, #1]
 800849c:	2b03      	cmp	r3, #3
 800849e:	d008      	beq.n	80084b2 <USBD_StdEPReq+0x9a>
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	f300 8145 	bgt.w	8008730 <USBD_StdEPReq+0x318>
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f000 809b 	beq.w	80085e2 <USBD_StdEPReq+0x1ca>
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d03c      	beq.n	800852a <USBD_StdEPReq+0x112>
 80084b0:	e13e      	b.n	8008730 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d002      	beq.n	80084c4 <USBD_StdEPReq+0xac>
 80084be:	2b03      	cmp	r3, #3
 80084c0:	d016      	beq.n	80084f0 <USBD_StdEPReq+0xd8>
 80084c2:	e02c      	b.n	800851e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084c4:	7bbb      	ldrb	r3, [r7, #14]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00d      	beq.n	80084e6 <USBD_StdEPReq+0xce>
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
 80084cc:	2b80      	cmp	r3, #128	@ 0x80
 80084ce:	d00a      	beq.n	80084e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80084d0:	7bbb      	ldrb	r3, [r7, #14]
 80084d2:	4619      	mov	r1, r3
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f001 f959 	bl	800978c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084da:	2180      	movs	r1, #128	@ 0x80
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f001 f955 	bl	800978c <USBD_LL_StallEP>
 80084e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80084e4:	e020      	b.n	8008528 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 fc7a 	bl	8008de2 <USBD_CtlError>
              break;
 80084ee:	e01b      	b.n	8008528 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	885b      	ldrh	r3, [r3, #2]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10e      	bne.n	8008516 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084f8:	7bbb      	ldrb	r3, [r7, #14]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d00b      	beq.n	8008516 <USBD_StdEPReq+0xfe>
 80084fe:	7bbb      	ldrb	r3, [r7, #14]
 8008500:	2b80      	cmp	r3, #128	@ 0x80
 8008502:	d008      	beq.n	8008516 <USBD_StdEPReq+0xfe>
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	88db      	ldrh	r3, [r3, #6]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d104      	bne.n	8008516 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800850c:	7bbb      	ldrb	r3, [r7, #14]
 800850e:	4619      	mov	r1, r3
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f001 f93b 	bl	800978c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fd2e 	bl	8008f78 <USBD_CtlSendStatus>

              break;
 800851c:	e004      	b.n	8008528 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800851e:	6839      	ldr	r1, [r7, #0]
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fc5e 	bl	8008de2 <USBD_CtlError>
              break;
 8008526:	bf00      	nop
          }
          break;
 8008528:	e107      	b.n	800873a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b02      	cmp	r3, #2
 8008534:	d002      	beq.n	800853c <USBD_StdEPReq+0x124>
 8008536:	2b03      	cmp	r3, #3
 8008538:	d016      	beq.n	8008568 <USBD_StdEPReq+0x150>
 800853a:	e04b      	b.n	80085d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800853c:	7bbb      	ldrb	r3, [r7, #14]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00d      	beq.n	800855e <USBD_StdEPReq+0x146>
 8008542:	7bbb      	ldrb	r3, [r7, #14]
 8008544:	2b80      	cmp	r3, #128	@ 0x80
 8008546:	d00a      	beq.n	800855e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008548:	7bbb      	ldrb	r3, [r7, #14]
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f001 f91d 	bl	800978c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008552:	2180      	movs	r1, #128	@ 0x80
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f001 f919 	bl	800978c <USBD_LL_StallEP>
 800855a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800855c:	e040      	b.n	80085e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800855e:	6839      	ldr	r1, [r7, #0]
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fc3e 	bl	8008de2 <USBD_CtlError>
              break;
 8008566:	e03b      	b.n	80085e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	885b      	ldrh	r3, [r3, #2]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d136      	bne.n	80085de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008570:	7bbb      	ldrb	r3, [r7, #14]
 8008572:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008576:	2b00      	cmp	r3, #0
 8008578:	d004      	beq.n	8008584 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800857a:	7bbb      	ldrb	r3, [r7, #14]
 800857c:	4619      	mov	r1, r3
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f001 f923 	bl	80097ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fcf7 	bl	8008f78 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800858a:	7bbb      	ldrb	r3, [r7, #14]
 800858c:	4619      	mov	r1, r3
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7ff fde4 	bl	800815c <USBD_CoreFindEP>
 8008594:	4603      	mov	r3, r0
 8008596:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008598:	7b7b      	ldrb	r3, [r7, #13]
 800859a:	2bff      	cmp	r3, #255	@ 0xff
 800859c:	d01f      	beq.n	80085de <USBD_StdEPReq+0x1c6>
 800859e:	7b7b      	ldrb	r3, [r7, #13]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d11c      	bne.n	80085de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80085a4:	7b7a      	ldrb	r2, [r7, #13]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80085ac:	7b7a      	ldrb	r2, [r7, #13]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	32ae      	adds	r2, #174	@ 0xae
 80085b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d010      	beq.n	80085de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80085bc:	7b7a      	ldrb	r2, [r7, #13]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	32ae      	adds	r2, #174	@ 0xae
 80085c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	4798      	blx	r3
 80085ce:	4603      	mov	r3, r0
 80085d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80085d2:	e004      	b.n	80085de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 fc03 	bl	8008de2 <USBD_CtlError>
              break;
 80085dc:	e000      	b.n	80085e0 <USBD_StdEPReq+0x1c8>
              break;
 80085de:	bf00      	nop
          }
          break;
 80085e0:	e0ab      	b.n	800873a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085e8:	b2db      	uxtb	r3, r3
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d002      	beq.n	80085f4 <USBD_StdEPReq+0x1dc>
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d032      	beq.n	8008658 <USBD_StdEPReq+0x240>
 80085f2:	e097      	b.n	8008724 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085f4:	7bbb      	ldrb	r3, [r7, #14]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d007      	beq.n	800860a <USBD_StdEPReq+0x1f2>
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	2b80      	cmp	r3, #128	@ 0x80
 80085fe:	d004      	beq.n	800860a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fbed 	bl	8008de2 <USBD_CtlError>
                break;
 8008608:	e091      	b.n	800872e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800860a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800860e:	2b00      	cmp	r3, #0
 8008610:	da0b      	bge.n	800862a <USBD_StdEPReq+0x212>
 8008612:	7bbb      	ldrb	r3, [r7, #14]
 8008614:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008618:	4613      	mov	r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4413      	add	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	3310      	adds	r3, #16
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	4413      	add	r3, r2
 8008626:	3304      	adds	r3, #4
 8008628:	e00b      	b.n	8008642 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800862a:	7bbb      	ldrb	r3, [r7, #14]
 800862c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008630:	4613      	mov	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800863c:	687a      	ldr	r2, [r7, #4]
 800863e:	4413      	add	r3, r2
 8008640:	3304      	adds	r3, #4
 8008642:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	2200      	movs	r2, #0
 8008648:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	2202      	movs	r2, #2
 800864e:	4619      	mov	r1, r3
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 fc37 	bl	8008ec4 <USBD_CtlSendData>
              break;
 8008656:	e06a      	b.n	800872e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008658:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800865c:	2b00      	cmp	r3, #0
 800865e:	da11      	bge.n	8008684 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008660:	7bbb      	ldrb	r3, [r7, #14]
 8008662:	f003 020f 	and.w	r2, r3, #15
 8008666:	6879      	ldr	r1, [r7, #4]
 8008668:	4613      	mov	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	4413      	add	r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	440b      	add	r3, r1
 8008672:	3324      	adds	r3, #36	@ 0x24
 8008674:	881b      	ldrh	r3, [r3, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d117      	bne.n	80086aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fbb0 	bl	8008de2 <USBD_CtlError>
                  break;
 8008682:	e054      	b.n	800872e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008684:	7bbb      	ldrb	r3, [r7, #14]
 8008686:	f003 020f 	and.w	r2, r3, #15
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	4613      	mov	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	440b      	add	r3, r1
 8008696:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800869a:	881b      	ldrh	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d104      	bne.n	80086aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80086a0:	6839      	ldr	r1, [r7, #0]
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fb9d 	bl	8008de2 <USBD_CtlError>
                  break;
 80086a8:	e041      	b.n	800872e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	da0b      	bge.n	80086ca <USBD_StdEPReq+0x2b2>
 80086b2:	7bbb      	ldrb	r3, [r7, #14]
 80086b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086b8:	4613      	mov	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4413      	add	r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	3310      	adds	r3, #16
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	4413      	add	r3, r2
 80086c6:	3304      	adds	r3, #4
 80086c8:	e00b      	b.n	80086e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086ca:	7bbb      	ldrb	r3, [r7, #14]
 80086cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086d0:	4613      	mov	r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	4413      	add	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	4413      	add	r3, r2
 80086e0:	3304      	adds	r3, #4
 80086e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d002      	beq.n	80086f0 <USBD_StdEPReq+0x2d8>
 80086ea:	7bbb      	ldrb	r3, [r7, #14]
 80086ec:	2b80      	cmp	r3, #128	@ 0x80
 80086ee:	d103      	bne.n	80086f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	2200      	movs	r2, #0
 80086f4:	601a      	str	r2, [r3, #0]
 80086f6:	e00e      	b.n	8008716 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80086f8:	7bbb      	ldrb	r3, [r7, #14]
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f001 f883 	bl	8009808 <USBD_LL_IsStallEP>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d003      	beq.n	8008710 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2201      	movs	r2, #1
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	e002      	b.n	8008716 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2200      	movs	r2, #0
 8008714:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	2202      	movs	r2, #2
 800871a:	4619      	mov	r1, r3
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fbd1 	bl	8008ec4 <USBD_CtlSendData>
              break;
 8008722:	e004      	b.n	800872e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008724:	6839      	ldr	r1, [r7, #0]
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fb5b 	bl	8008de2 <USBD_CtlError>
              break;
 800872c:	bf00      	nop
          }
          break;
 800872e:	e004      	b.n	800873a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008730:	6839      	ldr	r1, [r7, #0]
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fb55 	bl	8008de2 <USBD_CtlError>
          break;
 8008738:	bf00      	nop
      }
      break;
 800873a:	e005      	b.n	8008748 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fb4f 	bl	8008de2 <USBD_CtlError>
      break;
 8008744:	e000      	b.n	8008748 <USBD_StdEPReq+0x330>
      break;
 8008746:	bf00      	nop
  }

  return ret;
 8008748:	7bfb      	ldrb	r3, [r7, #15]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
	...

08008754 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800875e:	2300      	movs	r3, #0
 8008760:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008762:	2300      	movs	r3, #0
 8008764:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008766:	2300      	movs	r3, #0
 8008768:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	885b      	ldrh	r3, [r3, #2]
 800876e:	0a1b      	lsrs	r3, r3, #8
 8008770:	b29b      	uxth	r3, r3
 8008772:	3b01      	subs	r3, #1
 8008774:	2b06      	cmp	r3, #6
 8008776:	f200 8128 	bhi.w	80089ca <USBD_GetDescriptor+0x276>
 800877a:	a201      	add	r2, pc, #4	@ (adr r2, 8008780 <USBD_GetDescriptor+0x2c>)
 800877c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008780:	0800879d 	.word	0x0800879d
 8008784:	080087b5 	.word	0x080087b5
 8008788:	080087f5 	.word	0x080087f5
 800878c:	080089cb 	.word	0x080089cb
 8008790:	080089cb 	.word	0x080089cb
 8008794:	0800896b 	.word	0x0800896b
 8008798:	08008997 	.word	0x08008997
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	7c12      	ldrb	r2, [r2, #16]
 80087a8:	f107 0108 	add.w	r1, r7, #8
 80087ac:	4610      	mov	r0, r2
 80087ae:	4798      	blx	r3
 80087b0:	60f8      	str	r0, [r7, #12]
      break;
 80087b2:	e112      	b.n	80089da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	7c1b      	ldrb	r3, [r3, #16]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d10d      	bne.n	80087d8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c4:	f107 0208 	add.w	r2, r7, #8
 80087c8:	4610      	mov	r0, r2
 80087ca:	4798      	blx	r3
 80087cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	3301      	adds	r3, #1
 80087d2:	2202      	movs	r2, #2
 80087d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80087d6:	e100      	b.n	80089da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e0:	f107 0208 	add.w	r2, r7, #8
 80087e4:	4610      	mov	r0, r2
 80087e6:	4798      	blx	r3
 80087e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3301      	adds	r3, #1
 80087ee:	2202      	movs	r2, #2
 80087f0:	701a      	strb	r2, [r3, #0]
      break;
 80087f2:	e0f2      	b.n	80089da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	885b      	ldrh	r3, [r3, #2]
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b05      	cmp	r3, #5
 80087fc:	f200 80ac 	bhi.w	8008958 <USBD_GetDescriptor+0x204>
 8008800:	a201      	add	r2, pc, #4	@ (adr r2, 8008808 <USBD_GetDescriptor+0xb4>)
 8008802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008806:	bf00      	nop
 8008808:	08008821 	.word	0x08008821
 800880c:	08008855 	.word	0x08008855
 8008810:	08008889 	.word	0x08008889
 8008814:	080088bd 	.word	0x080088bd
 8008818:	080088f1 	.word	0x080088f1
 800881c:	08008925 	.word	0x08008925
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00b      	beq.n	8008844 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	7c12      	ldrb	r2, [r2, #16]
 8008838:	f107 0108 	add.w	r1, r7, #8
 800883c:	4610      	mov	r0, r2
 800883e:	4798      	blx	r3
 8008840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008842:	e091      	b.n	8008968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 facb 	bl	8008de2 <USBD_CtlError>
            err++;
 800884c:	7afb      	ldrb	r3, [r7, #11]
 800884e:	3301      	adds	r3, #1
 8008850:	72fb      	strb	r3, [r7, #11]
          break;
 8008852:	e089      	b.n	8008968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00b      	beq.n	8008878 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	7c12      	ldrb	r2, [r2, #16]
 800886c:	f107 0108 	add.w	r1, r7, #8
 8008870:	4610      	mov	r0, r2
 8008872:	4798      	blx	r3
 8008874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008876:	e077      	b.n	8008968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fab1 	bl	8008de2 <USBD_CtlError>
            err++;
 8008880:	7afb      	ldrb	r3, [r7, #11]
 8008882:	3301      	adds	r3, #1
 8008884:	72fb      	strb	r3, [r7, #11]
          break;
 8008886:	e06f      	b.n	8008968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00b      	beq.n	80088ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	7c12      	ldrb	r2, [r2, #16]
 80088a0:	f107 0108 	add.w	r1, r7, #8
 80088a4:	4610      	mov	r0, r2
 80088a6:	4798      	blx	r3
 80088a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088aa:	e05d      	b.n	8008968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 fa97 	bl	8008de2 <USBD_CtlError>
            err++;
 80088b4:	7afb      	ldrb	r3, [r7, #11]
 80088b6:	3301      	adds	r3, #1
 80088b8:	72fb      	strb	r3, [r7, #11]
          break;
 80088ba:	e055      	b.n	8008968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00b      	beq.n	80088e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088ce:	691b      	ldr	r3, [r3, #16]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	7c12      	ldrb	r2, [r2, #16]
 80088d4:	f107 0108 	add.w	r1, r7, #8
 80088d8:	4610      	mov	r0, r2
 80088da:	4798      	blx	r3
 80088dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088de:	e043      	b.n	8008968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fa7d 	bl	8008de2 <USBD_CtlError>
            err++;
 80088e8:	7afb      	ldrb	r3, [r7, #11]
 80088ea:	3301      	adds	r3, #1
 80088ec:	72fb      	strb	r3, [r7, #11]
          break;
 80088ee:	e03b      	b.n	8008968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00b      	beq.n	8008914 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	7c12      	ldrb	r2, [r2, #16]
 8008908:	f107 0108 	add.w	r1, r7, #8
 800890c:	4610      	mov	r0, r2
 800890e:	4798      	blx	r3
 8008910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008912:	e029      	b.n	8008968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fa63 	bl	8008de2 <USBD_CtlError>
            err++;
 800891c:	7afb      	ldrb	r3, [r7, #11]
 800891e:	3301      	adds	r3, #1
 8008920:	72fb      	strb	r3, [r7, #11]
          break;
 8008922:	e021      	b.n	8008968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00b      	beq.n	8008948 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	7c12      	ldrb	r2, [r2, #16]
 800893c:	f107 0108 	add.w	r1, r7, #8
 8008940:	4610      	mov	r0, r2
 8008942:	4798      	blx	r3
 8008944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008946:	e00f      	b.n	8008968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fa49 	bl	8008de2 <USBD_CtlError>
            err++;
 8008950:	7afb      	ldrb	r3, [r7, #11]
 8008952:	3301      	adds	r3, #1
 8008954:	72fb      	strb	r3, [r7, #11]
          break;
 8008956:	e007      	b.n	8008968 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 fa41 	bl	8008de2 <USBD_CtlError>
          err++;
 8008960:	7afb      	ldrb	r3, [r7, #11]
 8008962:	3301      	adds	r3, #1
 8008964:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008966:	bf00      	nop
      }
      break;
 8008968:	e037      	b.n	80089da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	7c1b      	ldrb	r3, [r3, #16]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d109      	bne.n	8008986 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800897a:	f107 0208 	add.w	r2, r7, #8
 800897e:	4610      	mov	r0, r2
 8008980:	4798      	blx	r3
 8008982:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008984:	e029      	b.n	80089da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008986:	6839      	ldr	r1, [r7, #0]
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 fa2a 	bl	8008de2 <USBD_CtlError>
        err++;
 800898e:	7afb      	ldrb	r3, [r7, #11]
 8008990:	3301      	adds	r3, #1
 8008992:	72fb      	strb	r3, [r7, #11]
      break;
 8008994:	e021      	b.n	80089da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	7c1b      	ldrb	r3, [r3, #16]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10d      	bne.n	80089ba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089a6:	f107 0208 	add.w	r2, r7, #8
 80089aa:	4610      	mov	r0, r2
 80089ac:	4798      	blx	r3
 80089ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	3301      	adds	r3, #1
 80089b4:	2207      	movs	r2, #7
 80089b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089b8:	e00f      	b.n	80089da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fa10 	bl	8008de2 <USBD_CtlError>
        err++;
 80089c2:	7afb      	ldrb	r3, [r7, #11]
 80089c4:	3301      	adds	r3, #1
 80089c6:	72fb      	strb	r3, [r7, #11]
      break;
 80089c8:	e007      	b.n	80089da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80089ca:	6839      	ldr	r1, [r7, #0]
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fa08 	bl	8008de2 <USBD_CtlError>
      err++;
 80089d2:	7afb      	ldrb	r3, [r7, #11]
 80089d4:	3301      	adds	r3, #1
 80089d6:	72fb      	strb	r3, [r7, #11]
      break;
 80089d8:	bf00      	nop
  }

  if (err != 0U)
 80089da:	7afb      	ldrb	r3, [r7, #11]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d11e      	bne.n	8008a1e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	88db      	ldrh	r3, [r3, #6]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d016      	beq.n	8008a16 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80089e8:	893b      	ldrh	r3, [r7, #8]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00e      	beq.n	8008a0c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	88da      	ldrh	r2, [r3, #6]
 80089f2:	893b      	ldrh	r3, [r7, #8]
 80089f4:	4293      	cmp	r3, r2
 80089f6:	bf28      	it	cs
 80089f8:	4613      	movcs	r3, r2
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80089fe:	893b      	ldrh	r3, [r7, #8]
 8008a00:	461a      	mov	r2, r3
 8008a02:	68f9      	ldr	r1, [r7, #12]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 fa5d 	bl	8008ec4 <USBD_CtlSendData>
 8008a0a:	e009      	b.n	8008a20 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a0c:	6839      	ldr	r1, [r7, #0]
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f9e7 	bl	8008de2 <USBD_CtlError>
 8008a14:	e004      	b.n	8008a20 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 faae 	bl	8008f78 <USBD_CtlSendStatus>
 8008a1c:	e000      	b.n	8008a20 <USBD_GetDescriptor+0x2cc>
    return;
 8008a1e:	bf00      	nop
  }
}
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop

08008a28 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	889b      	ldrh	r3, [r3, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d131      	bne.n	8008a9e <USBD_SetAddress+0x76>
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	88db      	ldrh	r3, [r3, #6]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d12d      	bne.n	8008a9e <USBD_SetAddress+0x76>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	885b      	ldrh	r3, [r3, #2]
 8008a46:	2b7f      	cmp	r3, #127	@ 0x7f
 8008a48:	d829      	bhi.n	8008a9e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	885b      	ldrh	r3, [r3, #2]
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a5c:	b2db      	uxtb	r3, r3
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d104      	bne.n	8008a6c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f9bc 	bl	8008de2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a6a:	e01d      	b.n	8008aa8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	7bfa      	ldrb	r2, [r7, #15]
 8008a70:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
 8008a76:	4619      	mov	r1, r3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fef1 	bl	8009860 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 fa7a 	bl	8008f78 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008a84:	7bfb      	ldrb	r3, [r7, #15]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d004      	beq.n	8008a94 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a92:	e009      	b.n	8008aa8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a9c:	e004      	b.n	8008aa8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f99e 	bl	8008de2 <USBD_CtlError>
  }
}
 8008aa6:	bf00      	nop
 8008aa8:	bf00      	nop
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	885b      	ldrh	r3, [r3, #2]
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	4b4e      	ldr	r3, [pc, #312]	@ (8008c00 <USBD_SetConfig+0x150>)
 8008ac6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8008c00 <USBD_SetConfig+0x150>)
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d905      	bls.n	8008adc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f985 	bl	8008de2 <USBD_CtlError>
    return USBD_FAIL;
 8008ad8:	2303      	movs	r3, #3
 8008ada:	e08c      	b.n	8008bf6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d002      	beq.n	8008aee <USBD_SetConfig+0x3e>
 8008ae8:	2b03      	cmp	r3, #3
 8008aea:	d029      	beq.n	8008b40 <USBD_SetConfig+0x90>
 8008aec:	e075      	b.n	8008bda <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008aee:	4b44      	ldr	r3, [pc, #272]	@ (8008c00 <USBD_SetConfig+0x150>)
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d020      	beq.n	8008b38 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008af6:	4b42      	ldr	r3, [pc, #264]	@ (8008c00 <USBD_SetConfig+0x150>)
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	461a      	mov	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b00:	4b3f      	ldr	r3, [pc, #252]	@ (8008c00 <USBD_SetConfig+0x150>)
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	4619      	mov	r1, r3
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f7fe ffe3 	bl	8007ad2 <USBD_SetClassConfig>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008b10:	7bfb      	ldrb	r3, [r7, #15]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d008      	beq.n	8008b28 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f962 	bl	8008de2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2202      	movs	r2, #2
 8008b22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b26:	e065      	b.n	8008bf4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fa25 	bl	8008f78 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2203      	movs	r2, #3
 8008b32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008b36:	e05d      	b.n	8008bf4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fa1d 	bl	8008f78 <USBD_CtlSendStatus>
      break;
 8008b3e:	e059      	b.n	8008bf4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008b40:	4b2f      	ldr	r3, [pc, #188]	@ (8008c00 <USBD_SetConfig+0x150>)
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d112      	bne.n	8008b6e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008b50:	4b2b      	ldr	r3, [pc, #172]	@ (8008c00 <USBD_SetConfig+0x150>)
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	461a      	mov	r2, r3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b5a:	4b29      	ldr	r3, [pc, #164]	@ (8008c00 <USBD_SetConfig+0x150>)
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7fe ffd2 	bl	8007b0a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fa06 	bl	8008f78 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b6c:	e042      	b.n	8008bf4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008b6e:	4b24      	ldr	r3, [pc, #144]	@ (8008c00 <USBD_SetConfig+0x150>)
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	461a      	mov	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d02a      	beq.n	8008bd2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	4619      	mov	r1, r3
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f7fe ffc0 	bl	8007b0a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8008c00 <USBD_SetConfig+0x150>)
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b94:	4b1a      	ldr	r3, [pc, #104]	@ (8008c00 <USBD_SetConfig+0x150>)
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	4619      	mov	r1, r3
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7fe ff99 	bl	8007ad2 <USBD_SetClassConfig>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00f      	beq.n	8008bca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f918 	bl	8008de2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f7fe ffa5 	bl	8007b0a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2202      	movs	r2, #2
 8008bc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008bc8:	e014      	b.n	8008bf4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 f9d4 	bl	8008f78 <USBD_CtlSendStatus>
      break;
 8008bd0:	e010      	b.n	8008bf4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f9d0 	bl	8008f78 <USBD_CtlSendStatus>
      break;
 8008bd8:	e00c      	b.n	8008bf4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 f900 	bl	8008de2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008be2:	4b07      	ldr	r3, [pc, #28]	@ (8008c00 <USBD_SetConfig+0x150>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	4619      	mov	r1, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f7fe ff8e 	bl	8007b0a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8008bf2:	bf00      	nop
  }

  return ret;
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	2000333c 	.word	0x2000333c

08008c04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	88db      	ldrh	r3, [r3, #6]
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d004      	beq.n	8008c20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f8e2 	bl	8008de2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c1e:	e023      	b.n	8008c68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	dc02      	bgt.n	8008c32 <USBD_GetConfig+0x2e>
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	dc03      	bgt.n	8008c38 <USBD_GetConfig+0x34>
 8008c30:	e015      	b.n	8008c5e <USBD_GetConfig+0x5a>
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	d00b      	beq.n	8008c4e <USBD_GetConfig+0x4a>
 8008c36:	e012      	b.n	8008c5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	3308      	adds	r3, #8
 8008c42:	2201      	movs	r2, #1
 8008c44:	4619      	mov	r1, r3
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f93c 	bl	8008ec4 <USBD_CtlSendData>
        break;
 8008c4c:	e00c      	b.n	8008c68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	3304      	adds	r3, #4
 8008c52:	2201      	movs	r2, #1
 8008c54:	4619      	mov	r1, r3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f934 	bl	8008ec4 <USBD_CtlSendData>
        break;
 8008c5c:	e004      	b.n	8008c68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f8be 	bl	8008de2 <USBD_CtlError>
        break;
 8008c66:	bf00      	nop
}
 8008c68:	bf00      	nop
 8008c6a:	3708      	adds	r7, #8
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	3b01      	subs	r3, #1
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d81e      	bhi.n	8008cc6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	88db      	ldrh	r3, [r3, #6]
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d004      	beq.n	8008c9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 f8a5 	bl	8008de2 <USBD_CtlError>
        break;
 8008c98:	e01a      	b.n	8008cd0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d005      	beq.n	8008cb6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	f043 0202 	orr.w	r2, r3, #2
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	330c      	adds	r3, #12
 8008cba:	2202      	movs	r2, #2
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f900 	bl	8008ec4 <USBD_CtlSendData>
      break;
 8008cc4:	e004      	b.n	8008cd0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008cc6:	6839      	ldr	r1, [r7, #0]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f88a 	bl	8008de2 <USBD_CtlError>
      break;
 8008cce:	bf00      	nop
  }
}
 8008cd0:	bf00      	nop
 8008cd2:	3708      	adds	r7, #8
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}

08008cd8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b082      	sub	sp, #8
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	885b      	ldrh	r3, [r3, #2]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d107      	bne.n	8008cfa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f940 	bl	8008f78 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008cf8:	e013      	b.n	8008d22 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	885b      	ldrh	r3, [r3, #2]
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d10b      	bne.n	8008d1a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	889b      	ldrh	r3, [r3, #4]
 8008d06:	0a1b      	lsrs	r3, r3, #8
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	b2da      	uxtb	r2, r3
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f930 	bl	8008f78 <USBD_CtlSendStatus>
}
 8008d18:	e003      	b.n	8008d22 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008d1a:	6839      	ldr	r1, [r7, #0]
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f860 	bl	8008de2 <USBD_CtlError>
}
 8008d22:	bf00      	nop
 8008d24:	3708      	adds	r7, #8
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b082      	sub	sp, #8
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d80b      	bhi.n	8008d5a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	885b      	ldrh	r3, [r3, #2]
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d10c      	bne.n	8008d64 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f910 	bl	8008f78 <USBD_CtlSendStatus>
      }
      break;
 8008d58:	e004      	b.n	8008d64 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008d5a:	6839      	ldr	r1, [r7, #0]
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f840 	bl	8008de2 <USBD_CtlError>
      break;
 8008d62:	e000      	b.n	8008d66 <USBD_ClrFeature+0x3c>
      break;
 8008d64:	bf00      	nop
  }
}
 8008d66:	bf00      	nop
 8008d68:	3708      	adds	r7, #8
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b084      	sub	sp, #16
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	781a      	ldrb	r2, [r3, #0]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	3301      	adds	r3, #1
 8008d88:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	781a      	ldrb	r2, [r3, #0]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	3301      	adds	r3, #1
 8008d96:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f7ff fa40 	bl	800821e <SWAPBYTE>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	461a      	mov	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	3301      	adds	r3, #1
 8008daa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	3301      	adds	r3, #1
 8008db0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f7ff fa33 	bl	800821e <SWAPBYTE>
 8008db8:	4603      	mov	r3, r0
 8008dba:	461a      	mov	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f7ff fa26 	bl	800821e <SWAPBYTE>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	80da      	strh	r2, [r3, #6]
}
 8008dda:	bf00      	nop
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b082      	sub	sp, #8
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008dec:	2180      	movs	r1, #128	@ 0x80
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fccc 	bl	800978c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008df4:	2100      	movs	r1, #0
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fcc8 	bl	800978c <USBD_LL_StallEP>
}
 8008dfc:	bf00      	nop
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d036      	beq.n	8008e88 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008e1e:	6938      	ldr	r0, [r7, #16]
 8008e20:	f000 f836 	bl	8008e90 <USBD_GetLen>
 8008e24:	4603      	mov	r3, r0
 8008e26:	3301      	adds	r3, #1
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	005b      	lsls	r3, r3, #1
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008e32:	7dfb      	ldrb	r3, [r7, #23]
 8008e34:	68ba      	ldr	r2, [r7, #8]
 8008e36:	4413      	add	r3, r2
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	7812      	ldrb	r2, [r2, #0]
 8008e3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e3e:	7dfb      	ldrb	r3, [r7, #23]
 8008e40:	3301      	adds	r3, #1
 8008e42:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	4413      	add	r3, r2
 8008e4a:	2203      	movs	r2, #3
 8008e4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e4e:	7dfb      	ldrb	r3, [r7, #23]
 8008e50:	3301      	adds	r3, #1
 8008e52:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008e54:	e013      	b.n	8008e7e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008e56:	7dfb      	ldrb	r3, [r7, #23]
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	7812      	ldrb	r2, [r2, #0]
 8008e60:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	3301      	adds	r3, #1
 8008e66:	613b      	str	r3, [r7, #16]
    idx++;
 8008e68:	7dfb      	ldrb	r3, [r7, #23]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008e6e:	7dfb      	ldrb	r3, [r7, #23]
 8008e70:	68ba      	ldr	r2, [r7, #8]
 8008e72:	4413      	add	r3, r2
 8008e74:	2200      	movs	r2, #0
 8008e76:	701a      	strb	r2, [r3, #0]
    idx++;
 8008e78:	7dfb      	ldrb	r3, [r7, #23]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1e7      	bne.n	8008e56 <USBD_GetString+0x52>
 8008e86:	e000      	b.n	8008e8a <USBD_GetString+0x86>
    return;
 8008e88:	bf00      	nop
  }
}
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008ea0:	e005      	b.n	8008eae <USBD_GetLen+0x1e>
  {
    len++;
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1f5      	bne.n	8008ea2 <USBD_GetLen+0x12>
  }

  return len;
 8008eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3714      	adds	r7, #20
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	2100      	movs	r1, #0
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f000 fcd7 	bl	800989e <USBD_LL_Transmit>

  return USBD_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}

08008efa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008efa:	b580      	push	{r7, lr}
 8008efc:	b084      	sub	sp, #16
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	60f8      	str	r0, [r7, #12]
 8008f02:	60b9      	str	r1, [r7, #8]
 8008f04:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68ba      	ldr	r2, [r7, #8]
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f000 fcc6 	bl	800989e <USBD_LL_Transmit>

  return USBD_OK;
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2203      	movs	r2, #3
 8008f2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	2100      	movs	r1, #0
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f000 fcca 	bl	80098e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f4c:	2300      	movs	r3, #0
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	60f8      	str	r0, [r7, #12]
 8008f5e:	60b9      	str	r1, [r7, #8]
 8008f60:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	2100      	movs	r1, #0
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f000 fcb9 	bl	80098e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b082      	sub	sp, #8
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2204      	movs	r2, #4
 8008f84:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f88:	2300      	movs	r3, #0
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fc85 	bl	800989e <USBD_LL_Transmit>

  return USBD_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b082      	sub	sp, #8
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2205      	movs	r2, #5
 8008faa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fae:	2300      	movs	r3, #0
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fc93 	bl	80098e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	4912      	ldr	r1, [pc, #72]	@ (8009014 <MX_USB_DEVICE_Init+0x50>)
 8008fcc:	4812      	ldr	r0, [pc, #72]	@ (8009018 <MX_USB_DEVICE_Init+0x54>)
 8008fce:	f7fe fd03 	bl	80079d8 <USBD_Init>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d001      	beq.n	8008fdc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008fd8:	f7f8 f8f0 	bl	80011bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008fdc:	490f      	ldr	r1, [pc, #60]	@ (800901c <MX_USB_DEVICE_Init+0x58>)
 8008fde:	480e      	ldr	r0, [pc, #56]	@ (8009018 <MX_USB_DEVICE_Init+0x54>)
 8008fe0:	f7fe fd2a 	bl	8007a38 <USBD_RegisterClass>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008fea:	f7f8 f8e7 	bl	80011bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008fee:	490c      	ldr	r1, [pc, #48]	@ (8009020 <MX_USB_DEVICE_Init+0x5c>)
 8008ff0:	4809      	ldr	r0, [pc, #36]	@ (8009018 <MX_USB_DEVICE_Init+0x54>)
 8008ff2:	f7fe fc21 	bl	8007838 <USBD_CDC_RegisterInterface>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d001      	beq.n	8009000 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ffc:	f7f8 f8de 	bl	80011bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009000:	4805      	ldr	r0, [pc, #20]	@ (8009018 <MX_USB_DEVICE_Init+0x54>)
 8009002:	f7fe fd4f 	bl	8007aa4 <USBD_Start>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d001      	beq.n	8009010 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800900c:	f7f8 f8d6 	bl	80011bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009010:	bf00      	nop
 8009012:	bd80      	pop	{r7, pc}
 8009014:	200000d8 	.word	0x200000d8
 8009018:	20003340 	.word	0x20003340
 800901c:	20000044 	.word	0x20000044
 8009020:	200000c4 	.word	0x200000c4

08009024 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009028:	2200      	movs	r2, #0
 800902a:	4905      	ldr	r1, [pc, #20]	@ (8009040 <CDC_Init_FS+0x1c>)
 800902c:	4805      	ldr	r0, [pc, #20]	@ (8009044 <CDC_Init_FS+0x20>)
 800902e:	f7fe fc1d 	bl	800786c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009032:	4905      	ldr	r1, [pc, #20]	@ (8009048 <CDC_Init_FS+0x24>)
 8009034:	4803      	ldr	r0, [pc, #12]	@ (8009044 <CDC_Init_FS+0x20>)
 8009036:	f7fe fc3b 	bl	80078b0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800903a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800903c:	4618      	mov	r0, r3
 800903e:	bd80      	pop	{r7, pc}
 8009040:	20003a1c 	.word	0x20003a1c
 8009044:	20003340 	.word	0x20003340
 8009048:	2000361c 	.word	0x2000361c

0800904c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800904c:	b480      	push	{r7}
 800904e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009050:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009052:	4618      	mov	r0, r3
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	4603      	mov	r3, r0
 8009064:	6039      	str	r1, [r7, #0]
 8009066:	71fb      	strb	r3, [r7, #7]
 8009068:	4613      	mov	r3, r2
 800906a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800906c:	79fb      	ldrb	r3, [r7, #7]
 800906e:	2b23      	cmp	r3, #35	@ 0x23
 8009070:	d84a      	bhi.n	8009108 <CDC_Control_FS+0xac>
 8009072:	a201      	add	r2, pc, #4	@ (adr r2, 8009078 <CDC_Control_FS+0x1c>)
 8009074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009078:	08009109 	.word	0x08009109
 800907c:	08009109 	.word	0x08009109
 8009080:	08009109 	.word	0x08009109
 8009084:	08009109 	.word	0x08009109
 8009088:	08009109 	.word	0x08009109
 800908c:	08009109 	.word	0x08009109
 8009090:	08009109 	.word	0x08009109
 8009094:	08009109 	.word	0x08009109
 8009098:	08009109 	.word	0x08009109
 800909c:	08009109 	.word	0x08009109
 80090a0:	08009109 	.word	0x08009109
 80090a4:	08009109 	.word	0x08009109
 80090a8:	08009109 	.word	0x08009109
 80090ac:	08009109 	.word	0x08009109
 80090b0:	08009109 	.word	0x08009109
 80090b4:	08009109 	.word	0x08009109
 80090b8:	08009109 	.word	0x08009109
 80090bc:	08009109 	.word	0x08009109
 80090c0:	08009109 	.word	0x08009109
 80090c4:	08009109 	.word	0x08009109
 80090c8:	08009109 	.word	0x08009109
 80090cc:	08009109 	.word	0x08009109
 80090d0:	08009109 	.word	0x08009109
 80090d4:	08009109 	.word	0x08009109
 80090d8:	08009109 	.word	0x08009109
 80090dc:	08009109 	.word	0x08009109
 80090e0:	08009109 	.word	0x08009109
 80090e4:	08009109 	.word	0x08009109
 80090e8:	08009109 	.word	0x08009109
 80090ec:	08009109 	.word	0x08009109
 80090f0:	08009109 	.word	0x08009109
 80090f4:	08009109 	.word	0x08009109
 80090f8:	08009109 	.word	0x08009109
 80090fc:	08009109 	.word	0x08009109
 8009100:	08009109 	.word	0x08009109
 8009104:	08009109 	.word	0x08009109
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009108:	bf00      	nop
  }

  return (USBD_OK);
 800910a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800910c:	4618      	mov	r0, r3
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009122:	6879      	ldr	r1, [r7, #4]
 8009124:	4808      	ldr	r0, [pc, #32]	@ (8009148 <CDC_Receive_FS+0x30>)
 8009126:	f7fe fbc3 	bl	80078b0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800912a:	4807      	ldr	r0, [pc, #28]	@ (8009148 <CDC_Receive_FS+0x30>)
 800912c:	f7fe fc1e 	bl	800796c <USBD_CDC_ReceivePacket>
  CDCReceiveCallback(Buf, *Len);
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7f7 fdba 	bl	8000cb0 <CDCReceiveCallback>
  return (USBD_OK);
 800913c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800913e:	4618      	mov	r0, r3
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	20003340 	.word	0x20003340

0800914c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	460b      	mov	r3, r1
 8009156:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800915c:	4b0d      	ldr	r3, [pc, #52]	@ (8009194 <CDC_Transmit_FS+0x48>)
 800915e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009162:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800916a:	2b00      	cmp	r3, #0
 800916c:	d001      	beq.n	8009172 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800916e:	2301      	movs	r3, #1
 8009170:	e00b      	b.n	800918a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009172:	887b      	ldrh	r3, [r7, #2]
 8009174:	461a      	mov	r2, r3
 8009176:	6879      	ldr	r1, [r7, #4]
 8009178:	4806      	ldr	r0, [pc, #24]	@ (8009194 <CDC_Transmit_FS+0x48>)
 800917a:	f7fe fb77 	bl	800786c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800917e:	4805      	ldr	r0, [pc, #20]	@ (8009194 <CDC_Transmit_FS+0x48>)
 8009180:	f7fe fbb4 	bl	80078ec <USBD_CDC_TransmitPacket>
 8009184:	4603      	mov	r3, r0
 8009186:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009188:	7bfb      	ldrb	r3, [r7, #15]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
 8009192:	bf00      	nop
 8009194:	20003340 	.word	0x20003340

08009198 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009198:	b480      	push	{r7}
 800919a:	b087      	sub	sp, #28
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	4613      	mov	r3, r2
 80091a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80091a6:	2300      	movs	r3, #0
 80091a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80091aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	371c      	adds	r7, #28
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
	...

080091bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091bc:	b480      	push	{r7}
 80091be:	b083      	sub	sp, #12
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	4603      	mov	r3, r0
 80091c4:	6039      	str	r1, [r7, #0]
 80091c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	2212      	movs	r2, #18
 80091cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80091ce:	4b03      	ldr	r3, [pc, #12]	@ (80091dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	200000f4 	.word	0x200000f4

080091e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	6039      	str	r1, [r7, #0]
 80091ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	2204      	movs	r2, #4
 80091f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80091f2:	4b03      	ldr	r3, [pc, #12]	@ (8009200 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	20000108 	.word	0x20000108

08009204 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	4603      	mov	r3, r0
 800920c:	6039      	str	r1, [r7, #0]
 800920e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009210:	79fb      	ldrb	r3, [r7, #7]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d105      	bne.n	8009222 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	4907      	ldr	r1, [pc, #28]	@ (8009238 <USBD_FS_ProductStrDescriptor+0x34>)
 800921a:	4808      	ldr	r0, [pc, #32]	@ (800923c <USBD_FS_ProductStrDescriptor+0x38>)
 800921c:	f7ff fdf2 	bl	8008e04 <USBD_GetString>
 8009220:	e004      	b.n	800922c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009222:	683a      	ldr	r2, [r7, #0]
 8009224:	4904      	ldr	r1, [pc, #16]	@ (8009238 <USBD_FS_ProductStrDescriptor+0x34>)
 8009226:	4805      	ldr	r0, [pc, #20]	@ (800923c <USBD_FS_ProductStrDescriptor+0x38>)
 8009228:	f7ff fdec 	bl	8008e04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800922c:	4b02      	ldr	r3, [pc, #8]	@ (8009238 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20003e1c 	.word	0x20003e1c
 800923c:	0800afdc 	.word	0x0800afdc

08009240 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	4603      	mov	r3, r0
 8009248:	6039      	str	r1, [r7, #0]
 800924a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	4904      	ldr	r1, [pc, #16]	@ (8009260 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009250:	4804      	ldr	r0, [pc, #16]	@ (8009264 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009252:	f7ff fdd7 	bl	8008e04 <USBD_GetString>
  return USBD_StrDesc;
 8009256:	4b02      	ldr	r3, [pc, #8]	@ (8009260 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009258:	4618      	mov	r0, r3
 800925a:	3708      	adds	r7, #8
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	20003e1c 	.word	0x20003e1c
 8009264:	0800aff4 	.word	0x0800aff4

08009268 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	4603      	mov	r3, r0
 8009270:	6039      	str	r1, [r7, #0]
 8009272:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	221a      	movs	r2, #26
 8009278:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800927a:	f000 f843 	bl	8009304 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800927e:	4b02      	ldr	r3, [pc, #8]	@ (8009288 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009280:	4618      	mov	r0, r3
 8009282:	3708      	adds	r7, #8
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	2000010c 	.word	0x2000010c

0800928c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
 8009292:	4603      	mov	r3, r0
 8009294:	6039      	str	r1, [r7, #0]
 8009296:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009298:	79fb      	ldrb	r3, [r7, #7]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d105      	bne.n	80092aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800929e:	683a      	ldr	r2, [r7, #0]
 80092a0:	4907      	ldr	r1, [pc, #28]	@ (80092c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092a2:	4808      	ldr	r0, [pc, #32]	@ (80092c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092a4:	f7ff fdae 	bl	8008e04 <USBD_GetString>
 80092a8:	e004      	b.n	80092b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	4904      	ldr	r1, [pc, #16]	@ (80092c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092ae:	4805      	ldr	r0, [pc, #20]	@ (80092c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092b0:	f7ff fda8 	bl	8008e04 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092b4:	4b02      	ldr	r3, [pc, #8]	@ (80092c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	20003e1c 	.word	0x20003e1c
 80092c4:	0800b008 	.word	0x0800b008

080092c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	4603      	mov	r3, r0
 80092d0:	6039      	str	r1, [r7, #0]
 80092d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092d4:	79fb      	ldrb	r3, [r7, #7]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d105      	bne.n	80092e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092da:	683a      	ldr	r2, [r7, #0]
 80092dc:	4907      	ldr	r1, [pc, #28]	@ (80092fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092de:	4808      	ldr	r0, [pc, #32]	@ (8009300 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092e0:	f7ff fd90 	bl	8008e04 <USBD_GetString>
 80092e4:	e004      	b.n	80092f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80092e6:	683a      	ldr	r2, [r7, #0]
 80092e8:	4904      	ldr	r1, [pc, #16]	@ (80092fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80092ea:	4805      	ldr	r0, [pc, #20]	@ (8009300 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80092ec:	f7ff fd8a 	bl	8008e04 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092f0:	4b02      	ldr	r3, [pc, #8]	@ (80092fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	20003e1c 	.word	0x20003e1c
 8009300:	0800b014 	.word	0x0800b014

08009304 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	4413      	add	r3, r2
 8009310:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d009      	beq.n	800932c <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009318:	2208      	movs	r2, #8
 800931a:	4906      	ldr	r1, [pc, #24]	@ (8009334 <Get_SerialNum+0x30>)
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f000 f80d 	bl	800933c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009322:	2204      	movs	r2, #4
 8009324:	4904      	ldr	r1, [pc, #16]	@ (8009338 <Get_SerialNum+0x34>)
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f808 	bl	800933c <IntToUnicode>
  }
}
 800932c:	bf00      	nop
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	2000010e 	.word	0x2000010e
 8009338:	2000011e 	.word	0x2000011e

0800933c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800933c:	b480      	push	{r7}
 800933e:	b087      	sub	sp, #28
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	4613      	mov	r3, r2
 8009348:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800934a:	2300      	movs	r3, #0
 800934c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800934e:	2300      	movs	r3, #0
 8009350:	75fb      	strb	r3, [r7, #23]
 8009352:	e027      	b.n	80093a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	0f1b      	lsrs	r3, r3, #28
 8009358:	2b09      	cmp	r3, #9
 800935a:	d80b      	bhi.n	8009374 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	0f1b      	lsrs	r3, r3, #28
 8009360:	b2da      	uxtb	r2, r3
 8009362:	7dfb      	ldrb	r3, [r7, #23]
 8009364:	005b      	lsls	r3, r3, #1
 8009366:	4619      	mov	r1, r3
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	440b      	add	r3, r1
 800936c:	3230      	adds	r2, #48	@ 0x30
 800936e:	b2d2      	uxtb	r2, r2
 8009370:	701a      	strb	r2, [r3, #0]
 8009372:	e00a      	b.n	800938a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	0f1b      	lsrs	r3, r3, #28
 8009378:	b2da      	uxtb	r2, r3
 800937a:	7dfb      	ldrb	r3, [r7, #23]
 800937c:	005b      	lsls	r3, r3, #1
 800937e:	4619      	mov	r1, r3
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	440b      	add	r3, r1
 8009384:	3237      	adds	r2, #55	@ 0x37
 8009386:	b2d2      	uxtb	r2, r2
 8009388:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	011b      	lsls	r3, r3, #4
 800938e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009390:	7dfb      	ldrb	r3, [r7, #23]
 8009392:	005b      	lsls	r3, r3, #1
 8009394:	3301      	adds	r3, #1
 8009396:	68ba      	ldr	r2, [r7, #8]
 8009398:	4413      	add	r3, r2
 800939a:	2200      	movs	r2, #0
 800939c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800939e:	7dfb      	ldrb	r3, [r7, #23]
 80093a0:	3301      	adds	r3, #1
 80093a2:	75fb      	strb	r3, [r7, #23]
 80093a4:	7dfa      	ldrb	r2, [r7, #23]
 80093a6:	79fb      	ldrb	r3, [r7, #7]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d3d3      	bcc.n	8009354 <IntToUnicode+0x18>
  }
}
 80093ac:	bf00      	nop
 80093ae:	bf00      	nop
 80093b0:	371c      	adds	r7, #28
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
	...

080093bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b08a      	sub	sp, #40	@ 0x28
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093c4:	f107 0314 	add.w	r3, r7, #20
 80093c8:	2200      	movs	r2, #0
 80093ca:	601a      	str	r2, [r3, #0]
 80093cc:	605a      	str	r2, [r3, #4]
 80093ce:	609a      	str	r2, [r3, #8]
 80093d0:	60da      	str	r2, [r3, #12]
 80093d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093dc:	d13a      	bne.n	8009454 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80093de:	2300      	movs	r3, #0
 80093e0:	613b      	str	r3, [r7, #16]
 80093e2:	4b1e      	ldr	r3, [pc, #120]	@ (800945c <HAL_PCD_MspInit+0xa0>)
 80093e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093e6:	4a1d      	ldr	r2, [pc, #116]	@ (800945c <HAL_PCD_MspInit+0xa0>)
 80093e8:	f043 0301 	orr.w	r3, r3, #1
 80093ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80093ee:	4b1b      	ldr	r3, [pc, #108]	@ (800945c <HAL_PCD_MspInit+0xa0>)
 80093f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093f2:	f003 0301 	and.w	r3, r3, #1
 80093f6:	613b      	str	r3, [r7, #16]
 80093f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80093fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80093fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009400:	2302      	movs	r3, #2
 8009402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009404:	2300      	movs	r3, #0
 8009406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009408:	2303      	movs	r3, #3
 800940a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800940c:	230a      	movs	r3, #10
 800940e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009410:	f107 0314 	add.w	r3, r7, #20
 8009414:	4619      	mov	r1, r3
 8009416:	4812      	ldr	r0, [pc, #72]	@ (8009460 <HAL_PCD_MspInit+0xa4>)
 8009418:	f7f9 fb6a 	bl	8002af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800941c:	4b0f      	ldr	r3, [pc, #60]	@ (800945c <HAL_PCD_MspInit+0xa0>)
 800941e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009420:	4a0e      	ldr	r2, [pc, #56]	@ (800945c <HAL_PCD_MspInit+0xa0>)
 8009422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009426:	6353      	str	r3, [r2, #52]	@ 0x34
 8009428:	2300      	movs	r3, #0
 800942a:	60fb      	str	r3, [r7, #12]
 800942c:	4b0b      	ldr	r3, [pc, #44]	@ (800945c <HAL_PCD_MspInit+0xa0>)
 800942e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009430:	4a0a      	ldr	r2, [pc, #40]	@ (800945c <HAL_PCD_MspInit+0xa0>)
 8009432:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009436:	6453      	str	r3, [r2, #68]	@ 0x44
 8009438:	4b08      	ldr	r3, [pc, #32]	@ (800945c <HAL_PCD_MspInit+0xa0>)
 800943a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800943c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009440:	60fb      	str	r3, [r7, #12]
 8009442:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009444:	2200      	movs	r2, #0
 8009446:	2100      	movs	r1, #0
 8009448:	2043      	movs	r0, #67	@ 0x43
 800944a:	f7f8 ff3a 	bl	80022c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800944e:	2043      	movs	r0, #67	@ 0x43
 8009450:	f7f8 ff53 	bl	80022fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009454:	bf00      	nop
 8009456:	3728      	adds	r7, #40	@ 0x28
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	40023800 	.word	0x40023800
 8009460:	40020000 	.word	0x40020000

08009464 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009478:	4619      	mov	r1, r3
 800947a:	4610      	mov	r0, r2
 800947c:	f7fe fb5f 	bl	8007b3e <USBD_LL_SetupStage>
}
 8009480:	bf00      	nop
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	460b      	mov	r3, r1
 8009492:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800949a:	78fa      	ldrb	r2, [r7, #3]
 800949c:	6879      	ldr	r1, [r7, #4]
 800949e:	4613      	mov	r3, r2
 80094a0:	00db      	lsls	r3, r3, #3
 80094a2:	4413      	add	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	440b      	add	r3, r1
 80094a8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	78fb      	ldrb	r3, [r7, #3]
 80094b0:	4619      	mov	r1, r3
 80094b2:	f7fe fb99 	bl	8007be8 <USBD_LL_DataOutStage>
}
 80094b6:	bf00      	nop
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b082      	sub	sp, #8
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
 80094c6:	460b      	mov	r3, r1
 80094c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80094d0:	78fa      	ldrb	r2, [r7, #3]
 80094d2:	6879      	ldr	r1, [r7, #4]
 80094d4:	4613      	mov	r3, r2
 80094d6:	00db      	lsls	r3, r3, #3
 80094d8:	4413      	add	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	440b      	add	r3, r1
 80094de:	3320      	adds	r3, #32
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	78fb      	ldrb	r3, [r7, #3]
 80094e4:	4619      	mov	r1, r3
 80094e6:	f7fe fc32 	bl	8007d4e <USBD_LL_DataInStage>
}
 80094ea:	bf00      	nop
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}

080094f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094f2:	b580      	push	{r7, lr}
 80094f4:	b082      	sub	sp, #8
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009500:	4618      	mov	r0, r3
 8009502:	f7fe fd6c 	bl	8007fde <USBD_LL_SOF>
}
 8009506:	bf00      	nop
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009516:	2301      	movs	r3, #1
 8009518:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	79db      	ldrb	r3, [r3, #7]
 800951e:	2b02      	cmp	r3, #2
 8009520:	d001      	beq.n	8009526 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009522:	f7f7 fe4b 	bl	80011bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800952c:	7bfa      	ldrb	r2, [r7, #15]
 800952e:	4611      	mov	r1, r2
 8009530:	4618      	mov	r0, r3
 8009532:	f7fe fd10 	bl	8007f56 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800953c:	4618      	mov	r0, r3
 800953e:	f7fe fcb8 	bl	8007eb2 <USBD_LL_Reset>
}
 8009542:	bf00      	nop
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
	...

0800954c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800955a:	4618      	mov	r0, r3
 800955c:	f7fe fd0b 	bl	8007f76 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	6812      	ldr	r2, [r2, #0]
 800956e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009572:	f043 0301 	orr.w	r3, r3, #1
 8009576:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	7adb      	ldrb	r3, [r3, #11]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d005      	beq.n	800958c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009580:	4b04      	ldr	r3, [pc, #16]	@ (8009594 <HAL_PCD_SuspendCallback+0x48>)
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	4a03      	ldr	r2, [pc, #12]	@ (8009594 <HAL_PCD_SuspendCallback+0x48>)
 8009586:	f043 0306 	orr.w	r3, r3, #6
 800958a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800958c:	bf00      	nop
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	e000ed00 	.word	0xe000ed00

08009598 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095a6:	4618      	mov	r0, r3
 80095a8:	f7fe fd01 	bl	8007fae <USBD_LL_Resume>
}
 80095ac:	bf00      	nop
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	460b      	mov	r3, r1
 80095be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095c6:	78fa      	ldrb	r2, [r7, #3]
 80095c8:	4611      	mov	r1, r2
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fe fd59 	bl	8008082 <USBD_LL_IsoOUTIncomplete>
}
 80095d0:	bf00      	nop
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095ea:	78fa      	ldrb	r2, [r7, #3]
 80095ec:	4611      	mov	r1, r2
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7fe fd15 	bl	800801e <USBD_LL_IsoINIncomplete>
}
 80095f4:	bf00      	nop
 80095f6:	3708      	adds	r7, #8
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800960a:	4618      	mov	r0, r3
 800960c:	f7fe fd6b 	bl	80080e6 <USBD_LL_DevConnected>
}
 8009610:	bf00      	nop
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009626:	4618      	mov	r0, r3
 8009628:	f7fe fd68 	bl	80080fc <USBD_LL_DevDisconnected>
}
 800962c:	bf00      	nop
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d13c      	bne.n	80096be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009644:	4a20      	ldr	r2, [pc, #128]	@ (80096c8 <USBD_LL_Init+0x94>)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a1e      	ldr	r2, [pc, #120]	@ (80096c8 <USBD_LL_Init+0x94>)
 8009650:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009654:	4b1c      	ldr	r3, [pc, #112]	@ (80096c8 <USBD_LL_Init+0x94>)
 8009656:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800965a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800965c:	4b1a      	ldr	r3, [pc, #104]	@ (80096c8 <USBD_LL_Init+0x94>)
 800965e:	2204      	movs	r2, #4
 8009660:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009662:	4b19      	ldr	r3, [pc, #100]	@ (80096c8 <USBD_LL_Init+0x94>)
 8009664:	2202      	movs	r2, #2
 8009666:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009668:	4b17      	ldr	r3, [pc, #92]	@ (80096c8 <USBD_LL_Init+0x94>)
 800966a:	2200      	movs	r2, #0
 800966c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800966e:	4b16      	ldr	r3, [pc, #88]	@ (80096c8 <USBD_LL_Init+0x94>)
 8009670:	2202      	movs	r2, #2
 8009672:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009674:	4b14      	ldr	r3, [pc, #80]	@ (80096c8 <USBD_LL_Init+0x94>)
 8009676:	2200      	movs	r2, #0
 8009678:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800967a:	4b13      	ldr	r3, [pc, #76]	@ (80096c8 <USBD_LL_Init+0x94>)
 800967c:	2200      	movs	r2, #0
 800967e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009680:	4b11      	ldr	r3, [pc, #68]	@ (80096c8 <USBD_LL_Init+0x94>)
 8009682:	2200      	movs	r2, #0
 8009684:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009686:	4b10      	ldr	r3, [pc, #64]	@ (80096c8 <USBD_LL_Init+0x94>)
 8009688:	2200      	movs	r2, #0
 800968a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800968c:	4b0e      	ldr	r3, [pc, #56]	@ (80096c8 <USBD_LL_Init+0x94>)
 800968e:	2200      	movs	r2, #0
 8009690:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009692:	480d      	ldr	r0, [pc, #52]	@ (80096c8 <USBD_LL_Init+0x94>)
 8009694:	f7f9 fbb0 	bl	8002df8 <HAL_PCD_Init>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800969e:	f7f7 fd8d 	bl	80011bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80096a2:	2180      	movs	r1, #128	@ 0x80
 80096a4:	4808      	ldr	r0, [pc, #32]	@ (80096c8 <USBD_LL_Init+0x94>)
 80096a6:	f7fa fdda 	bl	800425e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80096aa:	2240      	movs	r2, #64	@ 0x40
 80096ac:	2100      	movs	r1, #0
 80096ae:	4806      	ldr	r0, [pc, #24]	@ (80096c8 <USBD_LL_Init+0x94>)
 80096b0:	f7fa fd8e 	bl	80041d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80096b4:	2280      	movs	r2, #128	@ 0x80
 80096b6:	2101      	movs	r1, #1
 80096b8:	4803      	ldr	r0, [pc, #12]	@ (80096c8 <USBD_LL_Init+0x94>)
 80096ba:	f7fa fd89 	bl	80041d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	2000401c 	.word	0x2000401c

080096cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096d4:	2300      	movs	r3, #0
 80096d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096d8:	2300      	movs	r3, #0
 80096da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7f9 fc97 	bl	8003016 <HAL_PCD_Start>
 80096e8:	4603      	mov	r3, r0
 80096ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
 80096ee:	4618      	mov	r0, r3
 80096f0:	f000 f942 	bl	8009978 <USBD_Get_USB_Status>
 80096f4:	4603      	mov	r3, r0
 80096f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3710      	adds	r7, #16
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b084      	sub	sp, #16
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	4608      	mov	r0, r1
 800970c:	4611      	mov	r1, r2
 800970e:	461a      	mov	r2, r3
 8009710:	4603      	mov	r3, r0
 8009712:	70fb      	strb	r3, [r7, #3]
 8009714:	460b      	mov	r3, r1
 8009716:	70bb      	strb	r3, [r7, #2]
 8009718:	4613      	mov	r3, r2
 800971a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800971c:	2300      	movs	r3, #0
 800971e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800972a:	78bb      	ldrb	r3, [r7, #2]
 800972c:	883a      	ldrh	r2, [r7, #0]
 800972e:	78f9      	ldrb	r1, [r7, #3]
 8009730:	f7fa f96b 	bl	8003a0a <HAL_PCD_EP_Open>
 8009734:	4603      	mov	r3, r0
 8009736:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009738:	7bfb      	ldrb	r3, [r7, #15]
 800973a:	4618      	mov	r0, r3
 800973c:	f000 f91c 	bl	8009978 <USBD_Get_USB_Status>
 8009740:	4603      	mov	r3, r0
 8009742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009744:	7bbb      	ldrb	r3, [r7, #14]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b084      	sub	sp, #16
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	460b      	mov	r3, r1
 8009758:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009768:	78fa      	ldrb	r2, [r7, #3]
 800976a:	4611      	mov	r1, r2
 800976c:	4618      	mov	r0, r3
 800976e:	f7fa f9b4 	bl	8003ada <HAL_PCD_EP_Close>
 8009772:	4603      	mov	r3, r0
 8009774:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009776:	7bfb      	ldrb	r3, [r7, #15]
 8009778:	4618      	mov	r0, r3
 800977a:	f000 f8fd 	bl	8009978 <USBD_Get_USB_Status>
 800977e:	4603      	mov	r3, r0
 8009780:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009782:	7bbb      	ldrb	r3, [r7, #14]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	460b      	mov	r3, r1
 8009796:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800979c:	2300      	movs	r3, #0
 800979e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097a6:	78fa      	ldrb	r2, [r7, #3]
 80097a8:	4611      	mov	r1, r2
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7fa fa6c 	bl	8003c88 <HAL_PCD_EP_SetStall>
 80097b0:	4603      	mov	r3, r0
 80097b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f000 f8de 	bl	8009978 <USBD_Get_USB_Status>
 80097bc:	4603      	mov	r3, r0
 80097be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3710      	adds	r7, #16
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b084      	sub	sp, #16
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	460b      	mov	r3, r1
 80097d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097d6:	2300      	movs	r3, #0
 80097d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097da:	2300      	movs	r3, #0
 80097dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097e4:	78fa      	ldrb	r2, [r7, #3]
 80097e6:	4611      	mov	r1, r2
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7fa fab0 	bl	8003d4e <HAL_PCD_EP_ClrStall>
 80097ee:	4603      	mov	r3, r0
 80097f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097f2:	7bfb      	ldrb	r3, [r7, #15]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f000 f8bf 	bl	8009978 <USBD_Get_USB_Status>
 80097fa:	4603      	mov	r3, r0
 80097fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009800:	4618      	mov	r0, r3
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	460b      	mov	r3, r1
 8009812:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800981a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800981c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009820:	2b00      	cmp	r3, #0
 8009822:	da0b      	bge.n	800983c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009824:	78fb      	ldrb	r3, [r7, #3]
 8009826:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800982a:	68f9      	ldr	r1, [r7, #12]
 800982c:	4613      	mov	r3, r2
 800982e:	00db      	lsls	r3, r3, #3
 8009830:	4413      	add	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	440b      	add	r3, r1
 8009836:	3316      	adds	r3, #22
 8009838:	781b      	ldrb	r3, [r3, #0]
 800983a:	e00b      	b.n	8009854 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800983c:	78fb      	ldrb	r3, [r7, #3]
 800983e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009842:	68f9      	ldr	r1, [r7, #12]
 8009844:	4613      	mov	r3, r2
 8009846:	00db      	lsls	r3, r3, #3
 8009848:	4413      	add	r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	440b      	add	r3, r1
 800984e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009852:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009854:	4618      	mov	r0, r3
 8009856:	3714      	adds	r7, #20
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	460b      	mov	r3, r1
 800986a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800986c:	2300      	movs	r3, #0
 800986e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800987a:	78fa      	ldrb	r2, [r7, #3]
 800987c:	4611      	mov	r1, r2
 800987e:	4618      	mov	r0, r3
 8009880:	f7fa f89f 	bl	80039c2 <HAL_PCD_SetAddress>
 8009884:	4603      	mov	r3, r0
 8009886:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009888:	7bfb      	ldrb	r3, [r7, #15]
 800988a:	4618      	mov	r0, r3
 800988c:	f000 f874 	bl	8009978 <USBD_Get_USB_Status>
 8009890:	4603      	mov	r3, r0
 8009892:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009894:	7bbb      	ldrb	r3, [r7, #14]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b086      	sub	sp, #24
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	60f8      	str	r0, [r7, #12]
 80098a6:	607a      	str	r2, [r7, #4]
 80098a8:	603b      	str	r3, [r7, #0]
 80098aa:	460b      	mov	r3, r1
 80098ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ae:	2300      	movs	r3, #0
 80098b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098b2:	2300      	movs	r3, #0
 80098b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80098bc:	7af9      	ldrb	r1, [r7, #11]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	f7fa f9a7 	bl	8003c14 <HAL_PCD_EP_Transmit>
 80098c6:	4603      	mov	r3, r0
 80098c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098ca:	7dfb      	ldrb	r3, [r7, #23]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f000 f853 	bl	8009978 <USBD_Get_USB_Status>
 80098d2:	4603      	mov	r3, r0
 80098d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80098d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3718      	adds	r7, #24
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	607a      	str	r2, [r7, #4]
 80098ea:	603b      	str	r3, [r7, #0]
 80098ec:	460b      	mov	r3, r1
 80098ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098f0:	2300      	movs	r3, #0
 80098f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80098fe:	7af9      	ldrb	r1, [r7, #11]
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	f7fa f933 	bl	8003b6e <HAL_PCD_EP_Receive>
 8009908:	4603      	mov	r3, r0
 800990a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800990c:	7dfb      	ldrb	r3, [r7, #23]
 800990e:	4618      	mov	r0, r3
 8009910:	f000 f832 	bl	8009978 <USBD_Get_USB_Status>
 8009914:	4603      	mov	r3, r0
 8009916:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009918:	7dbb      	ldrb	r3, [r7, #22]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3718      	adds	r7, #24
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b082      	sub	sp, #8
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
 800992a:	460b      	mov	r3, r1
 800992c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009934:	78fa      	ldrb	r2, [r7, #3]
 8009936:	4611      	mov	r1, r2
 8009938:	4618      	mov	r0, r3
 800993a:	f7fa f953 	bl	8003be4 <HAL_PCD_EP_GetRxCount>
 800993e:	4603      	mov	r3, r0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009948:	b480      	push	{r7}
 800994a:	b083      	sub	sp, #12
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009950:	4b03      	ldr	r3, [pc, #12]	@ (8009960 <USBD_static_malloc+0x18>)
}
 8009952:	4618      	mov	r0, r3
 8009954:	370c      	adds	r7, #12
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	20004500 	.word	0x20004500

08009964 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]

}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	4603      	mov	r3, r0
 8009980:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009986:	79fb      	ldrb	r3, [r7, #7]
 8009988:	2b03      	cmp	r3, #3
 800998a:	d817      	bhi.n	80099bc <USBD_Get_USB_Status+0x44>
 800998c:	a201      	add	r2, pc, #4	@ (adr r2, 8009994 <USBD_Get_USB_Status+0x1c>)
 800998e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009992:	bf00      	nop
 8009994:	080099a5 	.word	0x080099a5
 8009998:	080099ab 	.word	0x080099ab
 800999c:	080099b1 	.word	0x080099b1
 80099a0:	080099b7 	.word	0x080099b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	73fb      	strb	r3, [r7, #15]
    break;
 80099a8:	e00b      	b.n	80099c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80099aa:	2303      	movs	r3, #3
 80099ac:	73fb      	strb	r3, [r7, #15]
    break;
 80099ae:	e008      	b.n	80099c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80099b0:	2301      	movs	r3, #1
 80099b2:	73fb      	strb	r3, [r7, #15]
    break;
 80099b4:	e005      	b.n	80099c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80099b6:	2303      	movs	r3, #3
 80099b8:	73fb      	strb	r3, [r7, #15]
    break;
 80099ba:	e002      	b.n	80099c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80099bc:	2303      	movs	r3, #3
 80099be:	73fb      	strb	r3, [r7, #15]
    break;
 80099c0:	bf00      	nop
  }
  return usb_status;
 80099c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3714      	adds	r7, #20
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr

080099d0 <atoi>:
 80099d0:	220a      	movs	r2, #10
 80099d2:	2100      	movs	r1, #0
 80099d4:	f000 b87a 	b.w	8009acc <strtol>

080099d8 <_strtol_l.constprop.0>:
 80099d8:	2b24      	cmp	r3, #36	@ 0x24
 80099da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099de:	4686      	mov	lr, r0
 80099e0:	4690      	mov	r8, r2
 80099e2:	d801      	bhi.n	80099e8 <_strtol_l.constprop.0+0x10>
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d106      	bne.n	80099f6 <_strtol_l.constprop.0+0x1e>
 80099e8:	f000 fa70 	bl	8009ecc <__errno>
 80099ec:	2316      	movs	r3, #22
 80099ee:	6003      	str	r3, [r0, #0]
 80099f0:	2000      	movs	r0, #0
 80099f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099f6:	4834      	ldr	r0, [pc, #208]	@ (8009ac8 <_strtol_l.constprop.0+0xf0>)
 80099f8:	460d      	mov	r5, r1
 80099fa:	462a      	mov	r2, r5
 80099fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a00:	5d06      	ldrb	r6, [r0, r4]
 8009a02:	f016 0608 	ands.w	r6, r6, #8
 8009a06:	d1f8      	bne.n	80099fa <_strtol_l.constprop.0+0x22>
 8009a08:	2c2d      	cmp	r4, #45	@ 0x2d
 8009a0a:	d12d      	bne.n	8009a68 <_strtol_l.constprop.0+0x90>
 8009a0c:	782c      	ldrb	r4, [r5, #0]
 8009a0e:	2601      	movs	r6, #1
 8009a10:	1c95      	adds	r5, r2, #2
 8009a12:	f033 0210 	bics.w	r2, r3, #16
 8009a16:	d109      	bne.n	8009a2c <_strtol_l.constprop.0+0x54>
 8009a18:	2c30      	cmp	r4, #48	@ 0x30
 8009a1a:	d12a      	bne.n	8009a72 <_strtol_l.constprop.0+0x9a>
 8009a1c:	782a      	ldrb	r2, [r5, #0]
 8009a1e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a22:	2a58      	cmp	r2, #88	@ 0x58
 8009a24:	d125      	bne.n	8009a72 <_strtol_l.constprop.0+0x9a>
 8009a26:	786c      	ldrb	r4, [r5, #1]
 8009a28:	2310      	movs	r3, #16
 8009a2a:	3502      	adds	r5, #2
 8009a2c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009a30:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009a34:	2200      	movs	r2, #0
 8009a36:	fbbc f9f3 	udiv	r9, ip, r3
 8009a3a:	4610      	mov	r0, r2
 8009a3c:	fb03 ca19 	mls	sl, r3, r9, ip
 8009a40:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009a44:	2f09      	cmp	r7, #9
 8009a46:	d81b      	bhi.n	8009a80 <_strtol_l.constprop.0+0xa8>
 8009a48:	463c      	mov	r4, r7
 8009a4a:	42a3      	cmp	r3, r4
 8009a4c:	dd27      	ble.n	8009a9e <_strtol_l.constprop.0+0xc6>
 8009a4e:	1c57      	adds	r7, r2, #1
 8009a50:	d007      	beq.n	8009a62 <_strtol_l.constprop.0+0x8a>
 8009a52:	4581      	cmp	r9, r0
 8009a54:	d320      	bcc.n	8009a98 <_strtol_l.constprop.0+0xc0>
 8009a56:	d101      	bne.n	8009a5c <_strtol_l.constprop.0+0x84>
 8009a58:	45a2      	cmp	sl, r4
 8009a5a:	db1d      	blt.n	8009a98 <_strtol_l.constprop.0+0xc0>
 8009a5c:	fb00 4003 	mla	r0, r0, r3, r4
 8009a60:	2201      	movs	r2, #1
 8009a62:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a66:	e7eb      	b.n	8009a40 <_strtol_l.constprop.0+0x68>
 8009a68:	2c2b      	cmp	r4, #43	@ 0x2b
 8009a6a:	bf04      	itt	eq
 8009a6c:	782c      	ldrbeq	r4, [r5, #0]
 8009a6e:	1c95      	addeq	r5, r2, #2
 8009a70:	e7cf      	b.n	8009a12 <_strtol_l.constprop.0+0x3a>
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1da      	bne.n	8009a2c <_strtol_l.constprop.0+0x54>
 8009a76:	2c30      	cmp	r4, #48	@ 0x30
 8009a78:	bf0c      	ite	eq
 8009a7a:	2308      	moveq	r3, #8
 8009a7c:	230a      	movne	r3, #10
 8009a7e:	e7d5      	b.n	8009a2c <_strtol_l.constprop.0+0x54>
 8009a80:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009a84:	2f19      	cmp	r7, #25
 8009a86:	d801      	bhi.n	8009a8c <_strtol_l.constprop.0+0xb4>
 8009a88:	3c37      	subs	r4, #55	@ 0x37
 8009a8a:	e7de      	b.n	8009a4a <_strtol_l.constprop.0+0x72>
 8009a8c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009a90:	2f19      	cmp	r7, #25
 8009a92:	d804      	bhi.n	8009a9e <_strtol_l.constprop.0+0xc6>
 8009a94:	3c57      	subs	r4, #87	@ 0x57
 8009a96:	e7d8      	b.n	8009a4a <_strtol_l.constprop.0+0x72>
 8009a98:	f04f 32ff 	mov.w	r2, #4294967295
 8009a9c:	e7e1      	b.n	8009a62 <_strtol_l.constprop.0+0x8a>
 8009a9e:	1c53      	adds	r3, r2, #1
 8009aa0:	d108      	bne.n	8009ab4 <_strtol_l.constprop.0+0xdc>
 8009aa2:	2322      	movs	r3, #34	@ 0x22
 8009aa4:	f8ce 3000 	str.w	r3, [lr]
 8009aa8:	4660      	mov	r0, ip
 8009aaa:	f1b8 0f00 	cmp.w	r8, #0
 8009aae:	d0a0      	beq.n	80099f2 <_strtol_l.constprop.0+0x1a>
 8009ab0:	1e69      	subs	r1, r5, #1
 8009ab2:	e006      	b.n	8009ac2 <_strtol_l.constprop.0+0xea>
 8009ab4:	b106      	cbz	r6, 8009ab8 <_strtol_l.constprop.0+0xe0>
 8009ab6:	4240      	negs	r0, r0
 8009ab8:	f1b8 0f00 	cmp.w	r8, #0
 8009abc:	d099      	beq.n	80099f2 <_strtol_l.constprop.0+0x1a>
 8009abe:	2a00      	cmp	r2, #0
 8009ac0:	d1f6      	bne.n	8009ab0 <_strtol_l.constprop.0+0xd8>
 8009ac2:	f8c8 1000 	str.w	r1, [r8]
 8009ac6:	e794      	b.n	80099f2 <_strtol_l.constprop.0+0x1a>
 8009ac8:	0800b03d 	.word	0x0800b03d

08009acc <strtol>:
 8009acc:	4613      	mov	r3, r2
 8009ace:	460a      	mov	r2, r1
 8009ad0:	4601      	mov	r1, r0
 8009ad2:	4802      	ldr	r0, [pc, #8]	@ (8009adc <strtol+0x10>)
 8009ad4:	6800      	ldr	r0, [r0, #0]
 8009ad6:	f7ff bf7f 	b.w	80099d8 <_strtol_l.constprop.0>
 8009ada:	bf00      	nop
 8009adc:	20000134 	.word	0x20000134

08009ae0 <std>:
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	b510      	push	{r4, lr}
 8009ae4:	4604      	mov	r4, r0
 8009ae6:	e9c0 3300 	strd	r3, r3, [r0]
 8009aea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009aee:	6083      	str	r3, [r0, #8]
 8009af0:	8181      	strh	r1, [r0, #12]
 8009af2:	6643      	str	r3, [r0, #100]	@ 0x64
 8009af4:	81c2      	strh	r2, [r0, #14]
 8009af6:	6183      	str	r3, [r0, #24]
 8009af8:	4619      	mov	r1, r3
 8009afa:	2208      	movs	r2, #8
 8009afc:	305c      	adds	r0, #92	@ 0x5c
 8009afe:	f000 f928 	bl	8009d52 <memset>
 8009b02:	4b0d      	ldr	r3, [pc, #52]	@ (8009b38 <std+0x58>)
 8009b04:	6263      	str	r3, [r4, #36]	@ 0x24
 8009b06:	4b0d      	ldr	r3, [pc, #52]	@ (8009b3c <std+0x5c>)
 8009b08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b40 <std+0x60>)
 8009b0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8009b44 <std+0x64>)
 8009b10:	6323      	str	r3, [r4, #48]	@ 0x30
 8009b12:	4b0d      	ldr	r3, [pc, #52]	@ (8009b48 <std+0x68>)
 8009b14:	6224      	str	r4, [r4, #32]
 8009b16:	429c      	cmp	r4, r3
 8009b18:	d006      	beq.n	8009b28 <std+0x48>
 8009b1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009b1e:	4294      	cmp	r4, r2
 8009b20:	d002      	beq.n	8009b28 <std+0x48>
 8009b22:	33d0      	adds	r3, #208	@ 0xd0
 8009b24:	429c      	cmp	r4, r3
 8009b26:	d105      	bne.n	8009b34 <std+0x54>
 8009b28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b30:	f000 b9f6 	b.w	8009f20 <__retarget_lock_init_recursive>
 8009b34:	bd10      	pop	{r4, pc}
 8009b36:	bf00      	nop
 8009b38:	08009ccd 	.word	0x08009ccd
 8009b3c:	08009cef 	.word	0x08009cef
 8009b40:	08009d27 	.word	0x08009d27
 8009b44:	08009d4b 	.word	0x08009d4b
 8009b48:	20004720 	.word	0x20004720

08009b4c <stdio_exit_handler>:
 8009b4c:	4a02      	ldr	r2, [pc, #8]	@ (8009b58 <stdio_exit_handler+0xc>)
 8009b4e:	4903      	ldr	r1, [pc, #12]	@ (8009b5c <stdio_exit_handler+0x10>)
 8009b50:	4803      	ldr	r0, [pc, #12]	@ (8009b60 <stdio_exit_handler+0x14>)
 8009b52:	f000 b869 	b.w	8009c28 <_fwalk_sglue>
 8009b56:	bf00      	nop
 8009b58:	20000128 	.word	0x20000128
 8009b5c:	0800a855 	.word	0x0800a855
 8009b60:	20000138 	.word	0x20000138

08009b64 <cleanup_stdio>:
 8009b64:	6841      	ldr	r1, [r0, #4]
 8009b66:	4b0c      	ldr	r3, [pc, #48]	@ (8009b98 <cleanup_stdio+0x34>)
 8009b68:	4299      	cmp	r1, r3
 8009b6a:	b510      	push	{r4, lr}
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	d001      	beq.n	8009b74 <cleanup_stdio+0x10>
 8009b70:	f000 fe70 	bl	800a854 <_fflush_r>
 8009b74:	68a1      	ldr	r1, [r4, #8]
 8009b76:	4b09      	ldr	r3, [pc, #36]	@ (8009b9c <cleanup_stdio+0x38>)
 8009b78:	4299      	cmp	r1, r3
 8009b7a:	d002      	beq.n	8009b82 <cleanup_stdio+0x1e>
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	f000 fe69 	bl	800a854 <_fflush_r>
 8009b82:	68e1      	ldr	r1, [r4, #12]
 8009b84:	4b06      	ldr	r3, [pc, #24]	@ (8009ba0 <cleanup_stdio+0x3c>)
 8009b86:	4299      	cmp	r1, r3
 8009b88:	d004      	beq.n	8009b94 <cleanup_stdio+0x30>
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b90:	f000 be60 	b.w	800a854 <_fflush_r>
 8009b94:	bd10      	pop	{r4, pc}
 8009b96:	bf00      	nop
 8009b98:	20004720 	.word	0x20004720
 8009b9c:	20004788 	.word	0x20004788
 8009ba0:	200047f0 	.word	0x200047f0

08009ba4 <global_stdio_init.part.0>:
 8009ba4:	b510      	push	{r4, lr}
 8009ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8009bd4 <global_stdio_init.part.0+0x30>)
 8009ba8:	4c0b      	ldr	r4, [pc, #44]	@ (8009bd8 <global_stdio_init.part.0+0x34>)
 8009baa:	4a0c      	ldr	r2, [pc, #48]	@ (8009bdc <global_stdio_init.part.0+0x38>)
 8009bac:	601a      	str	r2, [r3, #0]
 8009bae:	4620      	mov	r0, r4
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	2104      	movs	r1, #4
 8009bb4:	f7ff ff94 	bl	8009ae0 <std>
 8009bb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	2109      	movs	r1, #9
 8009bc0:	f7ff ff8e 	bl	8009ae0 <std>
 8009bc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009bc8:	2202      	movs	r2, #2
 8009bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bce:	2112      	movs	r1, #18
 8009bd0:	f7ff bf86 	b.w	8009ae0 <std>
 8009bd4:	20004858 	.word	0x20004858
 8009bd8:	20004720 	.word	0x20004720
 8009bdc:	08009b4d 	.word	0x08009b4d

08009be0 <__sfp_lock_acquire>:
 8009be0:	4801      	ldr	r0, [pc, #4]	@ (8009be8 <__sfp_lock_acquire+0x8>)
 8009be2:	f000 b99e 	b.w	8009f22 <__retarget_lock_acquire_recursive>
 8009be6:	bf00      	nop
 8009be8:	20004861 	.word	0x20004861

08009bec <__sfp_lock_release>:
 8009bec:	4801      	ldr	r0, [pc, #4]	@ (8009bf4 <__sfp_lock_release+0x8>)
 8009bee:	f000 b999 	b.w	8009f24 <__retarget_lock_release_recursive>
 8009bf2:	bf00      	nop
 8009bf4:	20004861 	.word	0x20004861

08009bf8 <__sinit>:
 8009bf8:	b510      	push	{r4, lr}
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	f7ff fff0 	bl	8009be0 <__sfp_lock_acquire>
 8009c00:	6a23      	ldr	r3, [r4, #32]
 8009c02:	b11b      	cbz	r3, 8009c0c <__sinit+0x14>
 8009c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c08:	f7ff bff0 	b.w	8009bec <__sfp_lock_release>
 8009c0c:	4b04      	ldr	r3, [pc, #16]	@ (8009c20 <__sinit+0x28>)
 8009c0e:	6223      	str	r3, [r4, #32]
 8009c10:	4b04      	ldr	r3, [pc, #16]	@ (8009c24 <__sinit+0x2c>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1f5      	bne.n	8009c04 <__sinit+0xc>
 8009c18:	f7ff ffc4 	bl	8009ba4 <global_stdio_init.part.0>
 8009c1c:	e7f2      	b.n	8009c04 <__sinit+0xc>
 8009c1e:	bf00      	nop
 8009c20:	08009b65 	.word	0x08009b65
 8009c24:	20004858 	.word	0x20004858

08009c28 <_fwalk_sglue>:
 8009c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c2c:	4607      	mov	r7, r0
 8009c2e:	4688      	mov	r8, r1
 8009c30:	4614      	mov	r4, r2
 8009c32:	2600      	movs	r6, #0
 8009c34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c38:	f1b9 0901 	subs.w	r9, r9, #1
 8009c3c:	d505      	bpl.n	8009c4a <_fwalk_sglue+0x22>
 8009c3e:	6824      	ldr	r4, [r4, #0]
 8009c40:	2c00      	cmp	r4, #0
 8009c42:	d1f7      	bne.n	8009c34 <_fwalk_sglue+0xc>
 8009c44:	4630      	mov	r0, r6
 8009c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c4a:	89ab      	ldrh	r3, [r5, #12]
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d907      	bls.n	8009c60 <_fwalk_sglue+0x38>
 8009c50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c54:	3301      	adds	r3, #1
 8009c56:	d003      	beq.n	8009c60 <_fwalk_sglue+0x38>
 8009c58:	4629      	mov	r1, r5
 8009c5a:	4638      	mov	r0, r7
 8009c5c:	47c0      	blx	r8
 8009c5e:	4306      	orrs	r6, r0
 8009c60:	3568      	adds	r5, #104	@ 0x68
 8009c62:	e7e9      	b.n	8009c38 <_fwalk_sglue+0x10>

08009c64 <sniprintf>:
 8009c64:	b40c      	push	{r2, r3}
 8009c66:	b530      	push	{r4, r5, lr}
 8009c68:	4b17      	ldr	r3, [pc, #92]	@ (8009cc8 <sniprintf+0x64>)
 8009c6a:	1e0c      	subs	r4, r1, #0
 8009c6c:	681d      	ldr	r5, [r3, #0]
 8009c6e:	b09d      	sub	sp, #116	@ 0x74
 8009c70:	da08      	bge.n	8009c84 <sniprintf+0x20>
 8009c72:	238b      	movs	r3, #139	@ 0x8b
 8009c74:	602b      	str	r3, [r5, #0]
 8009c76:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7a:	b01d      	add	sp, #116	@ 0x74
 8009c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c80:	b002      	add	sp, #8
 8009c82:	4770      	bx	lr
 8009c84:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009c88:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009c8c:	bf14      	ite	ne
 8009c8e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009c92:	4623      	moveq	r3, r4
 8009c94:	9304      	str	r3, [sp, #16]
 8009c96:	9307      	str	r3, [sp, #28]
 8009c98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009c9c:	9002      	str	r0, [sp, #8]
 8009c9e:	9006      	str	r0, [sp, #24]
 8009ca0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009ca4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009ca6:	ab21      	add	r3, sp, #132	@ 0x84
 8009ca8:	a902      	add	r1, sp, #8
 8009caa:	4628      	mov	r0, r5
 8009cac:	9301      	str	r3, [sp, #4]
 8009cae:	f000 fac3 	bl	800a238 <_svfiprintf_r>
 8009cb2:	1c43      	adds	r3, r0, #1
 8009cb4:	bfbc      	itt	lt
 8009cb6:	238b      	movlt	r3, #139	@ 0x8b
 8009cb8:	602b      	strlt	r3, [r5, #0]
 8009cba:	2c00      	cmp	r4, #0
 8009cbc:	d0dd      	beq.n	8009c7a <sniprintf+0x16>
 8009cbe:	9b02      	ldr	r3, [sp, #8]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	701a      	strb	r2, [r3, #0]
 8009cc4:	e7d9      	b.n	8009c7a <sniprintf+0x16>
 8009cc6:	bf00      	nop
 8009cc8:	20000134 	.word	0x20000134

08009ccc <__sread>:
 8009ccc:	b510      	push	{r4, lr}
 8009cce:	460c      	mov	r4, r1
 8009cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd4:	f000 f8d6 	bl	8009e84 <_read_r>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	bfab      	itete	ge
 8009cdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009cde:	89a3      	ldrhlt	r3, [r4, #12]
 8009ce0:	181b      	addge	r3, r3, r0
 8009ce2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009ce6:	bfac      	ite	ge
 8009ce8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009cea:	81a3      	strhlt	r3, [r4, #12]
 8009cec:	bd10      	pop	{r4, pc}

08009cee <__swrite>:
 8009cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf2:	461f      	mov	r7, r3
 8009cf4:	898b      	ldrh	r3, [r1, #12]
 8009cf6:	05db      	lsls	r3, r3, #23
 8009cf8:	4605      	mov	r5, r0
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	4616      	mov	r6, r2
 8009cfe:	d505      	bpl.n	8009d0c <__swrite+0x1e>
 8009d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d04:	2302      	movs	r3, #2
 8009d06:	2200      	movs	r2, #0
 8009d08:	f000 f8aa 	bl	8009e60 <_lseek_r>
 8009d0c:	89a3      	ldrh	r3, [r4, #12]
 8009d0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d16:	81a3      	strh	r3, [r4, #12]
 8009d18:	4632      	mov	r2, r6
 8009d1a:	463b      	mov	r3, r7
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d22:	f000 b8c1 	b.w	8009ea8 <_write_r>

08009d26 <__sseek>:
 8009d26:	b510      	push	{r4, lr}
 8009d28:	460c      	mov	r4, r1
 8009d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d2e:	f000 f897 	bl	8009e60 <_lseek_r>
 8009d32:	1c43      	adds	r3, r0, #1
 8009d34:	89a3      	ldrh	r3, [r4, #12]
 8009d36:	bf15      	itete	ne
 8009d38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009d3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009d3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009d42:	81a3      	strheq	r3, [r4, #12]
 8009d44:	bf18      	it	ne
 8009d46:	81a3      	strhne	r3, [r4, #12]
 8009d48:	bd10      	pop	{r4, pc}

08009d4a <__sclose>:
 8009d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d4e:	f000 b877 	b.w	8009e40 <_close_r>

08009d52 <memset>:
 8009d52:	4402      	add	r2, r0
 8009d54:	4603      	mov	r3, r0
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d100      	bne.n	8009d5c <memset+0xa>
 8009d5a:	4770      	bx	lr
 8009d5c:	f803 1b01 	strb.w	r1, [r3], #1
 8009d60:	e7f9      	b.n	8009d56 <memset+0x4>

08009d62 <strncmp>:
 8009d62:	b510      	push	{r4, lr}
 8009d64:	b16a      	cbz	r2, 8009d82 <strncmp+0x20>
 8009d66:	3901      	subs	r1, #1
 8009d68:	1884      	adds	r4, r0, r2
 8009d6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d6e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d103      	bne.n	8009d7e <strncmp+0x1c>
 8009d76:	42a0      	cmp	r0, r4
 8009d78:	d001      	beq.n	8009d7e <strncmp+0x1c>
 8009d7a:	2a00      	cmp	r2, #0
 8009d7c:	d1f5      	bne.n	8009d6a <strncmp+0x8>
 8009d7e:	1ad0      	subs	r0, r2, r3
 8009d80:	bd10      	pop	{r4, pc}
 8009d82:	4610      	mov	r0, r2
 8009d84:	e7fc      	b.n	8009d80 <strncmp+0x1e>
	...

08009d88 <strtok>:
 8009d88:	4b16      	ldr	r3, [pc, #88]	@ (8009de4 <strtok+0x5c>)
 8009d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d8e:	681f      	ldr	r7, [r3, #0]
 8009d90:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009d92:	4605      	mov	r5, r0
 8009d94:	460e      	mov	r6, r1
 8009d96:	b9ec      	cbnz	r4, 8009dd4 <strtok+0x4c>
 8009d98:	2050      	movs	r0, #80	@ 0x50
 8009d9a:	f000 f93b 	bl	800a014 <malloc>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	6478      	str	r0, [r7, #68]	@ 0x44
 8009da2:	b920      	cbnz	r0, 8009dae <strtok+0x26>
 8009da4:	4b10      	ldr	r3, [pc, #64]	@ (8009de8 <strtok+0x60>)
 8009da6:	4811      	ldr	r0, [pc, #68]	@ (8009dec <strtok+0x64>)
 8009da8:	215b      	movs	r1, #91	@ 0x5b
 8009daa:	f000 f8cb 	bl	8009f44 <__assert_func>
 8009dae:	e9c0 4400 	strd	r4, r4, [r0]
 8009db2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009db6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009dba:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009dbe:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009dc2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009dc6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009dca:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009dce:	6184      	str	r4, [r0, #24]
 8009dd0:	7704      	strb	r4, [r0, #28]
 8009dd2:	6244      	str	r4, [r0, #36]	@ 0x24
 8009dd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009dd6:	4631      	mov	r1, r6
 8009dd8:	4628      	mov	r0, r5
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009de0:	f000 b806 	b.w	8009df0 <__strtok_r>
 8009de4:	20000134 	.word	0x20000134
 8009de8:	0800b13d 	.word	0x0800b13d
 8009dec:	0800b154 	.word	0x0800b154

08009df0 <__strtok_r>:
 8009df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009df2:	4604      	mov	r4, r0
 8009df4:	b908      	cbnz	r0, 8009dfa <__strtok_r+0xa>
 8009df6:	6814      	ldr	r4, [r2, #0]
 8009df8:	b144      	cbz	r4, 8009e0c <__strtok_r+0x1c>
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009e00:	460f      	mov	r7, r1
 8009e02:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009e06:	b91e      	cbnz	r6, 8009e10 <__strtok_r+0x20>
 8009e08:	b965      	cbnz	r5, 8009e24 <__strtok_r+0x34>
 8009e0a:	6015      	str	r5, [r2, #0]
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	e005      	b.n	8009e1c <__strtok_r+0x2c>
 8009e10:	42b5      	cmp	r5, r6
 8009e12:	d1f6      	bne.n	8009e02 <__strtok_r+0x12>
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d1f0      	bne.n	8009dfa <__strtok_r+0xa>
 8009e18:	6014      	str	r4, [r2, #0]
 8009e1a:	7003      	strb	r3, [r0, #0]
 8009e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e1e:	461c      	mov	r4, r3
 8009e20:	e00c      	b.n	8009e3c <__strtok_r+0x4c>
 8009e22:	b915      	cbnz	r5, 8009e2a <__strtok_r+0x3a>
 8009e24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009e28:	460e      	mov	r6, r1
 8009e2a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009e2e:	42ab      	cmp	r3, r5
 8009e30:	d1f7      	bne.n	8009e22 <__strtok_r+0x32>
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d0f3      	beq.n	8009e1e <__strtok_r+0x2e>
 8009e36:	2300      	movs	r3, #0
 8009e38:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009e3c:	6014      	str	r4, [r2, #0]
 8009e3e:	e7ed      	b.n	8009e1c <__strtok_r+0x2c>

08009e40 <_close_r>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	4d06      	ldr	r5, [pc, #24]	@ (8009e5c <_close_r+0x1c>)
 8009e44:	2300      	movs	r3, #0
 8009e46:	4604      	mov	r4, r0
 8009e48:	4608      	mov	r0, r1
 8009e4a:	602b      	str	r3, [r5, #0]
 8009e4c:	f7f7 fbe0 	bl	8001610 <_close>
 8009e50:	1c43      	adds	r3, r0, #1
 8009e52:	d102      	bne.n	8009e5a <_close_r+0x1a>
 8009e54:	682b      	ldr	r3, [r5, #0]
 8009e56:	b103      	cbz	r3, 8009e5a <_close_r+0x1a>
 8009e58:	6023      	str	r3, [r4, #0]
 8009e5a:	bd38      	pop	{r3, r4, r5, pc}
 8009e5c:	2000485c 	.word	0x2000485c

08009e60 <_lseek_r>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	4d07      	ldr	r5, [pc, #28]	@ (8009e80 <_lseek_r+0x20>)
 8009e64:	4604      	mov	r4, r0
 8009e66:	4608      	mov	r0, r1
 8009e68:	4611      	mov	r1, r2
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	602a      	str	r2, [r5, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	f7f7 fbf5 	bl	800165e <_lseek>
 8009e74:	1c43      	adds	r3, r0, #1
 8009e76:	d102      	bne.n	8009e7e <_lseek_r+0x1e>
 8009e78:	682b      	ldr	r3, [r5, #0]
 8009e7a:	b103      	cbz	r3, 8009e7e <_lseek_r+0x1e>
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}
 8009e80:	2000485c 	.word	0x2000485c

08009e84 <_read_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4d07      	ldr	r5, [pc, #28]	@ (8009ea4 <_read_r+0x20>)
 8009e88:	4604      	mov	r4, r0
 8009e8a:	4608      	mov	r0, r1
 8009e8c:	4611      	mov	r1, r2
 8009e8e:	2200      	movs	r2, #0
 8009e90:	602a      	str	r2, [r5, #0]
 8009e92:	461a      	mov	r2, r3
 8009e94:	f7f7 fb83 	bl	800159e <_read>
 8009e98:	1c43      	adds	r3, r0, #1
 8009e9a:	d102      	bne.n	8009ea2 <_read_r+0x1e>
 8009e9c:	682b      	ldr	r3, [r5, #0]
 8009e9e:	b103      	cbz	r3, 8009ea2 <_read_r+0x1e>
 8009ea0:	6023      	str	r3, [r4, #0]
 8009ea2:	bd38      	pop	{r3, r4, r5, pc}
 8009ea4:	2000485c 	.word	0x2000485c

08009ea8 <_write_r>:
 8009ea8:	b538      	push	{r3, r4, r5, lr}
 8009eaa:	4d07      	ldr	r5, [pc, #28]	@ (8009ec8 <_write_r+0x20>)
 8009eac:	4604      	mov	r4, r0
 8009eae:	4608      	mov	r0, r1
 8009eb0:	4611      	mov	r1, r2
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	602a      	str	r2, [r5, #0]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	f7f7 fb8e 	bl	80015d8 <_write>
 8009ebc:	1c43      	adds	r3, r0, #1
 8009ebe:	d102      	bne.n	8009ec6 <_write_r+0x1e>
 8009ec0:	682b      	ldr	r3, [r5, #0]
 8009ec2:	b103      	cbz	r3, 8009ec6 <_write_r+0x1e>
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	bd38      	pop	{r3, r4, r5, pc}
 8009ec8:	2000485c 	.word	0x2000485c

08009ecc <__errno>:
 8009ecc:	4b01      	ldr	r3, [pc, #4]	@ (8009ed4 <__errno+0x8>)
 8009ece:	6818      	ldr	r0, [r3, #0]
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	20000134 	.word	0x20000134

08009ed8 <__libc_init_array>:
 8009ed8:	b570      	push	{r4, r5, r6, lr}
 8009eda:	4d0d      	ldr	r5, [pc, #52]	@ (8009f10 <__libc_init_array+0x38>)
 8009edc:	4c0d      	ldr	r4, [pc, #52]	@ (8009f14 <__libc_init_array+0x3c>)
 8009ede:	1b64      	subs	r4, r4, r5
 8009ee0:	10a4      	asrs	r4, r4, #2
 8009ee2:	2600      	movs	r6, #0
 8009ee4:	42a6      	cmp	r6, r4
 8009ee6:	d109      	bne.n	8009efc <__libc_init_array+0x24>
 8009ee8:	4d0b      	ldr	r5, [pc, #44]	@ (8009f18 <__libc_init_array+0x40>)
 8009eea:	4c0c      	ldr	r4, [pc, #48]	@ (8009f1c <__libc_init_array+0x44>)
 8009eec:	f000 fff0 	bl	800aed0 <_init>
 8009ef0:	1b64      	subs	r4, r4, r5
 8009ef2:	10a4      	asrs	r4, r4, #2
 8009ef4:	2600      	movs	r6, #0
 8009ef6:	42a6      	cmp	r6, r4
 8009ef8:	d105      	bne.n	8009f06 <__libc_init_array+0x2e>
 8009efa:	bd70      	pop	{r4, r5, r6, pc}
 8009efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f00:	4798      	blx	r3
 8009f02:	3601      	adds	r6, #1
 8009f04:	e7ee      	b.n	8009ee4 <__libc_init_array+0xc>
 8009f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f0a:	4798      	blx	r3
 8009f0c:	3601      	adds	r6, #1
 8009f0e:	e7f2      	b.n	8009ef6 <__libc_init_array+0x1e>
 8009f10:	0800b228 	.word	0x0800b228
 8009f14:	0800b228 	.word	0x0800b228
 8009f18:	0800b228 	.word	0x0800b228
 8009f1c:	0800b22c 	.word	0x0800b22c

08009f20 <__retarget_lock_init_recursive>:
 8009f20:	4770      	bx	lr

08009f22 <__retarget_lock_acquire_recursive>:
 8009f22:	4770      	bx	lr

08009f24 <__retarget_lock_release_recursive>:
 8009f24:	4770      	bx	lr

08009f26 <memcpy>:
 8009f26:	440a      	add	r2, r1
 8009f28:	4291      	cmp	r1, r2
 8009f2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f2e:	d100      	bne.n	8009f32 <memcpy+0xc>
 8009f30:	4770      	bx	lr
 8009f32:	b510      	push	{r4, lr}
 8009f34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f3c:	4291      	cmp	r1, r2
 8009f3e:	d1f9      	bne.n	8009f34 <memcpy+0xe>
 8009f40:	bd10      	pop	{r4, pc}
	...

08009f44 <__assert_func>:
 8009f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f46:	4614      	mov	r4, r2
 8009f48:	461a      	mov	r2, r3
 8009f4a:	4b09      	ldr	r3, [pc, #36]	@ (8009f70 <__assert_func+0x2c>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4605      	mov	r5, r0
 8009f50:	68d8      	ldr	r0, [r3, #12]
 8009f52:	b954      	cbnz	r4, 8009f6a <__assert_func+0x26>
 8009f54:	4b07      	ldr	r3, [pc, #28]	@ (8009f74 <__assert_func+0x30>)
 8009f56:	461c      	mov	r4, r3
 8009f58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f5c:	9100      	str	r1, [sp, #0]
 8009f5e:	462b      	mov	r3, r5
 8009f60:	4905      	ldr	r1, [pc, #20]	@ (8009f78 <__assert_func+0x34>)
 8009f62:	f000 fc9f 	bl	800a8a4 <fiprintf>
 8009f66:	f000 fcd9 	bl	800a91c <abort>
 8009f6a:	4b04      	ldr	r3, [pc, #16]	@ (8009f7c <__assert_func+0x38>)
 8009f6c:	e7f4      	b.n	8009f58 <__assert_func+0x14>
 8009f6e:	bf00      	nop
 8009f70:	20000134 	.word	0x20000134
 8009f74:	0800b1e9 	.word	0x0800b1e9
 8009f78:	0800b1bb 	.word	0x0800b1bb
 8009f7c:	0800b1ae 	.word	0x0800b1ae

08009f80 <_free_r>:
 8009f80:	b538      	push	{r3, r4, r5, lr}
 8009f82:	4605      	mov	r5, r0
 8009f84:	2900      	cmp	r1, #0
 8009f86:	d041      	beq.n	800a00c <_free_r+0x8c>
 8009f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f8c:	1f0c      	subs	r4, r1, #4
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	bfb8      	it	lt
 8009f92:	18e4      	addlt	r4, r4, r3
 8009f94:	f000 f8e8 	bl	800a168 <__malloc_lock>
 8009f98:	4a1d      	ldr	r2, [pc, #116]	@ (800a010 <_free_r+0x90>)
 8009f9a:	6813      	ldr	r3, [r2, #0]
 8009f9c:	b933      	cbnz	r3, 8009fac <_free_r+0x2c>
 8009f9e:	6063      	str	r3, [r4, #4]
 8009fa0:	6014      	str	r4, [r2, #0]
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fa8:	f000 b8e4 	b.w	800a174 <__malloc_unlock>
 8009fac:	42a3      	cmp	r3, r4
 8009fae:	d908      	bls.n	8009fc2 <_free_r+0x42>
 8009fb0:	6820      	ldr	r0, [r4, #0]
 8009fb2:	1821      	adds	r1, r4, r0
 8009fb4:	428b      	cmp	r3, r1
 8009fb6:	bf01      	itttt	eq
 8009fb8:	6819      	ldreq	r1, [r3, #0]
 8009fba:	685b      	ldreq	r3, [r3, #4]
 8009fbc:	1809      	addeq	r1, r1, r0
 8009fbe:	6021      	streq	r1, [r4, #0]
 8009fc0:	e7ed      	b.n	8009f9e <_free_r+0x1e>
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	b10b      	cbz	r3, 8009fcc <_free_r+0x4c>
 8009fc8:	42a3      	cmp	r3, r4
 8009fca:	d9fa      	bls.n	8009fc2 <_free_r+0x42>
 8009fcc:	6811      	ldr	r1, [r2, #0]
 8009fce:	1850      	adds	r0, r2, r1
 8009fd0:	42a0      	cmp	r0, r4
 8009fd2:	d10b      	bne.n	8009fec <_free_r+0x6c>
 8009fd4:	6820      	ldr	r0, [r4, #0]
 8009fd6:	4401      	add	r1, r0
 8009fd8:	1850      	adds	r0, r2, r1
 8009fda:	4283      	cmp	r3, r0
 8009fdc:	6011      	str	r1, [r2, #0]
 8009fde:	d1e0      	bne.n	8009fa2 <_free_r+0x22>
 8009fe0:	6818      	ldr	r0, [r3, #0]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	6053      	str	r3, [r2, #4]
 8009fe6:	4408      	add	r0, r1
 8009fe8:	6010      	str	r0, [r2, #0]
 8009fea:	e7da      	b.n	8009fa2 <_free_r+0x22>
 8009fec:	d902      	bls.n	8009ff4 <_free_r+0x74>
 8009fee:	230c      	movs	r3, #12
 8009ff0:	602b      	str	r3, [r5, #0]
 8009ff2:	e7d6      	b.n	8009fa2 <_free_r+0x22>
 8009ff4:	6820      	ldr	r0, [r4, #0]
 8009ff6:	1821      	adds	r1, r4, r0
 8009ff8:	428b      	cmp	r3, r1
 8009ffa:	bf04      	itt	eq
 8009ffc:	6819      	ldreq	r1, [r3, #0]
 8009ffe:	685b      	ldreq	r3, [r3, #4]
 800a000:	6063      	str	r3, [r4, #4]
 800a002:	bf04      	itt	eq
 800a004:	1809      	addeq	r1, r1, r0
 800a006:	6021      	streq	r1, [r4, #0]
 800a008:	6054      	str	r4, [r2, #4]
 800a00a:	e7ca      	b.n	8009fa2 <_free_r+0x22>
 800a00c:	bd38      	pop	{r3, r4, r5, pc}
 800a00e:	bf00      	nop
 800a010:	20004868 	.word	0x20004868

0800a014 <malloc>:
 800a014:	4b02      	ldr	r3, [pc, #8]	@ (800a020 <malloc+0xc>)
 800a016:	4601      	mov	r1, r0
 800a018:	6818      	ldr	r0, [r3, #0]
 800a01a:	f000 b825 	b.w	800a068 <_malloc_r>
 800a01e:	bf00      	nop
 800a020:	20000134 	.word	0x20000134

0800a024 <sbrk_aligned>:
 800a024:	b570      	push	{r4, r5, r6, lr}
 800a026:	4e0f      	ldr	r6, [pc, #60]	@ (800a064 <sbrk_aligned+0x40>)
 800a028:	460c      	mov	r4, r1
 800a02a:	6831      	ldr	r1, [r6, #0]
 800a02c:	4605      	mov	r5, r0
 800a02e:	b911      	cbnz	r1, 800a036 <sbrk_aligned+0x12>
 800a030:	f000 fc64 	bl	800a8fc <_sbrk_r>
 800a034:	6030      	str	r0, [r6, #0]
 800a036:	4621      	mov	r1, r4
 800a038:	4628      	mov	r0, r5
 800a03a:	f000 fc5f 	bl	800a8fc <_sbrk_r>
 800a03e:	1c43      	adds	r3, r0, #1
 800a040:	d103      	bne.n	800a04a <sbrk_aligned+0x26>
 800a042:	f04f 34ff 	mov.w	r4, #4294967295
 800a046:	4620      	mov	r0, r4
 800a048:	bd70      	pop	{r4, r5, r6, pc}
 800a04a:	1cc4      	adds	r4, r0, #3
 800a04c:	f024 0403 	bic.w	r4, r4, #3
 800a050:	42a0      	cmp	r0, r4
 800a052:	d0f8      	beq.n	800a046 <sbrk_aligned+0x22>
 800a054:	1a21      	subs	r1, r4, r0
 800a056:	4628      	mov	r0, r5
 800a058:	f000 fc50 	bl	800a8fc <_sbrk_r>
 800a05c:	3001      	adds	r0, #1
 800a05e:	d1f2      	bne.n	800a046 <sbrk_aligned+0x22>
 800a060:	e7ef      	b.n	800a042 <sbrk_aligned+0x1e>
 800a062:	bf00      	nop
 800a064:	20004864 	.word	0x20004864

0800a068 <_malloc_r>:
 800a068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a06c:	1ccd      	adds	r5, r1, #3
 800a06e:	f025 0503 	bic.w	r5, r5, #3
 800a072:	3508      	adds	r5, #8
 800a074:	2d0c      	cmp	r5, #12
 800a076:	bf38      	it	cc
 800a078:	250c      	movcc	r5, #12
 800a07a:	2d00      	cmp	r5, #0
 800a07c:	4606      	mov	r6, r0
 800a07e:	db01      	blt.n	800a084 <_malloc_r+0x1c>
 800a080:	42a9      	cmp	r1, r5
 800a082:	d904      	bls.n	800a08e <_malloc_r+0x26>
 800a084:	230c      	movs	r3, #12
 800a086:	6033      	str	r3, [r6, #0]
 800a088:	2000      	movs	r0, #0
 800a08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a08e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a164 <_malloc_r+0xfc>
 800a092:	f000 f869 	bl	800a168 <__malloc_lock>
 800a096:	f8d8 3000 	ldr.w	r3, [r8]
 800a09a:	461c      	mov	r4, r3
 800a09c:	bb44      	cbnz	r4, 800a0f0 <_malloc_r+0x88>
 800a09e:	4629      	mov	r1, r5
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	f7ff ffbf 	bl	800a024 <sbrk_aligned>
 800a0a6:	1c43      	adds	r3, r0, #1
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	d158      	bne.n	800a15e <_malloc_r+0xf6>
 800a0ac:	f8d8 4000 	ldr.w	r4, [r8]
 800a0b0:	4627      	mov	r7, r4
 800a0b2:	2f00      	cmp	r7, #0
 800a0b4:	d143      	bne.n	800a13e <_malloc_r+0xd6>
 800a0b6:	2c00      	cmp	r4, #0
 800a0b8:	d04b      	beq.n	800a152 <_malloc_r+0xea>
 800a0ba:	6823      	ldr	r3, [r4, #0]
 800a0bc:	4639      	mov	r1, r7
 800a0be:	4630      	mov	r0, r6
 800a0c0:	eb04 0903 	add.w	r9, r4, r3
 800a0c4:	f000 fc1a 	bl	800a8fc <_sbrk_r>
 800a0c8:	4581      	cmp	r9, r0
 800a0ca:	d142      	bne.n	800a152 <_malloc_r+0xea>
 800a0cc:	6821      	ldr	r1, [r4, #0]
 800a0ce:	1a6d      	subs	r5, r5, r1
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	f7ff ffa6 	bl	800a024 <sbrk_aligned>
 800a0d8:	3001      	adds	r0, #1
 800a0da:	d03a      	beq.n	800a152 <_malloc_r+0xea>
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	442b      	add	r3, r5
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	f8d8 3000 	ldr.w	r3, [r8]
 800a0e6:	685a      	ldr	r2, [r3, #4]
 800a0e8:	bb62      	cbnz	r2, 800a144 <_malloc_r+0xdc>
 800a0ea:	f8c8 7000 	str.w	r7, [r8]
 800a0ee:	e00f      	b.n	800a110 <_malloc_r+0xa8>
 800a0f0:	6822      	ldr	r2, [r4, #0]
 800a0f2:	1b52      	subs	r2, r2, r5
 800a0f4:	d420      	bmi.n	800a138 <_malloc_r+0xd0>
 800a0f6:	2a0b      	cmp	r2, #11
 800a0f8:	d917      	bls.n	800a12a <_malloc_r+0xc2>
 800a0fa:	1961      	adds	r1, r4, r5
 800a0fc:	42a3      	cmp	r3, r4
 800a0fe:	6025      	str	r5, [r4, #0]
 800a100:	bf18      	it	ne
 800a102:	6059      	strne	r1, [r3, #4]
 800a104:	6863      	ldr	r3, [r4, #4]
 800a106:	bf08      	it	eq
 800a108:	f8c8 1000 	streq.w	r1, [r8]
 800a10c:	5162      	str	r2, [r4, r5]
 800a10e:	604b      	str	r3, [r1, #4]
 800a110:	4630      	mov	r0, r6
 800a112:	f000 f82f 	bl	800a174 <__malloc_unlock>
 800a116:	f104 000b 	add.w	r0, r4, #11
 800a11a:	1d23      	adds	r3, r4, #4
 800a11c:	f020 0007 	bic.w	r0, r0, #7
 800a120:	1ac2      	subs	r2, r0, r3
 800a122:	bf1c      	itt	ne
 800a124:	1a1b      	subne	r3, r3, r0
 800a126:	50a3      	strne	r3, [r4, r2]
 800a128:	e7af      	b.n	800a08a <_malloc_r+0x22>
 800a12a:	6862      	ldr	r2, [r4, #4]
 800a12c:	42a3      	cmp	r3, r4
 800a12e:	bf0c      	ite	eq
 800a130:	f8c8 2000 	streq.w	r2, [r8]
 800a134:	605a      	strne	r2, [r3, #4]
 800a136:	e7eb      	b.n	800a110 <_malloc_r+0xa8>
 800a138:	4623      	mov	r3, r4
 800a13a:	6864      	ldr	r4, [r4, #4]
 800a13c:	e7ae      	b.n	800a09c <_malloc_r+0x34>
 800a13e:	463c      	mov	r4, r7
 800a140:	687f      	ldr	r7, [r7, #4]
 800a142:	e7b6      	b.n	800a0b2 <_malloc_r+0x4a>
 800a144:	461a      	mov	r2, r3
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	42a3      	cmp	r3, r4
 800a14a:	d1fb      	bne.n	800a144 <_malloc_r+0xdc>
 800a14c:	2300      	movs	r3, #0
 800a14e:	6053      	str	r3, [r2, #4]
 800a150:	e7de      	b.n	800a110 <_malloc_r+0xa8>
 800a152:	230c      	movs	r3, #12
 800a154:	6033      	str	r3, [r6, #0]
 800a156:	4630      	mov	r0, r6
 800a158:	f000 f80c 	bl	800a174 <__malloc_unlock>
 800a15c:	e794      	b.n	800a088 <_malloc_r+0x20>
 800a15e:	6005      	str	r5, [r0, #0]
 800a160:	e7d6      	b.n	800a110 <_malloc_r+0xa8>
 800a162:	bf00      	nop
 800a164:	20004868 	.word	0x20004868

0800a168 <__malloc_lock>:
 800a168:	4801      	ldr	r0, [pc, #4]	@ (800a170 <__malloc_lock+0x8>)
 800a16a:	f7ff beda 	b.w	8009f22 <__retarget_lock_acquire_recursive>
 800a16e:	bf00      	nop
 800a170:	20004860 	.word	0x20004860

0800a174 <__malloc_unlock>:
 800a174:	4801      	ldr	r0, [pc, #4]	@ (800a17c <__malloc_unlock+0x8>)
 800a176:	f7ff bed5 	b.w	8009f24 <__retarget_lock_release_recursive>
 800a17a:	bf00      	nop
 800a17c:	20004860 	.word	0x20004860

0800a180 <__ssputs_r>:
 800a180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a184:	688e      	ldr	r6, [r1, #8]
 800a186:	461f      	mov	r7, r3
 800a188:	42be      	cmp	r6, r7
 800a18a:	680b      	ldr	r3, [r1, #0]
 800a18c:	4682      	mov	sl, r0
 800a18e:	460c      	mov	r4, r1
 800a190:	4690      	mov	r8, r2
 800a192:	d82d      	bhi.n	800a1f0 <__ssputs_r+0x70>
 800a194:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a198:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a19c:	d026      	beq.n	800a1ec <__ssputs_r+0x6c>
 800a19e:	6965      	ldr	r5, [r4, #20]
 800a1a0:	6909      	ldr	r1, [r1, #16]
 800a1a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1a6:	eba3 0901 	sub.w	r9, r3, r1
 800a1aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1ae:	1c7b      	adds	r3, r7, #1
 800a1b0:	444b      	add	r3, r9
 800a1b2:	106d      	asrs	r5, r5, #1
 800a1b4:	429d      	cmp	r5, r3
 800a1b6:	bf38      	it	cc
 800a1b8:	461d      	movcc	r5, r3
 800a1ba:	0553      	lsls	r3, r2, #21
 800a1bc:	d527      	bpl.n	800a20e <__ssputs_r+0x8e>
 800a1be:	4629      	mov	r1, r5
 800a1c0:	f7ff ff52 	bl	800a068 <_malloc_r>
 800a1c4:	4606      	mov	r6, r0
 800a1c6:	b360      	cbz	r0, 800a222 <__ssputs_r+0xa2>
 800a1c8:	6921      	ldr	r1, [r4, #16]
 800a1ca:	464a      	mov	r2, r9
 800a1cc:	f7ff feab 	bl	8009f26 <memcpy>
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a1d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1da:	81a3      	strh	r3, [r4, #12]
 800a1dc:	6126      	str	r6, [r4, #16]
 800a1de:	6165      	str	r5, [r4, #20]
 800a1e0:	444e      	add	r6, r9
 800a1e2:	eba5 0509 	sub.w	r5, r5, r9
 800a1e6:	6026      	str	r6, [r4, #0]
 800a1e8:	60a5      	str	r5, [r4, #8]
 800a1ea:	463e      	mov	r6, r7
 800a1ec:	42be      	cmp	r6, r7
 800a1ee:	d900      	bls.n	800a1f2 <__ssputs_r+0x72>
 800a1f0:	463e      	mov	r6, r7
 800a1f2:	6820      	ldr	r0, [r4, #0]
 800a1f4:	4632      	mov	r2, r6
 800a1f6:	4641      	mov	r1, r8
 800a1f8:	f000 fb66 	bl	800a8c8 <memmove>
 800a1fc:	68a3      	ldr	r3, [r4, #8]
 800a1fe:	1b9b      	subs	r3, r3, r6
 800a200:	60a3      	str	r3, [r4, #8]
 800a202:	6823      	ldr	r3, [r4, #0]
 800a204:	4433      	add	r3, r6
 800a206:	6023      	str	r3, [r4, #0]
 800a208:	2000      	movs	r0, #0
 800a20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a20e:	462a      	mov	r2, r5
 800a210:	f000 fb8b 	bl	800a92a <_realloc_r>
 800a214:	4606      	mov	r6, r0
 800a216:	2800      	cmp	r0, #0
 800a218:	d1e0      	bne.n	800a1dc <__ssputs_r+0x5c>
 800a21a:	6921      	ldr	r1, [r4, #16]
 800a21c:	4650      	mov	r0, sl
 800a21e:	f7ff feaf 	bl	8009f80 <_free_r>
 800a222:	230c      	movs	r3, #12
 800a224:	f8ca 3000 	str.w	r3, [sl]
 800a228:	89a3      	ldrh	r3, [r4, #12]
 800a22a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a22e:	81a3      	strh	r3, [r4, #12]
 800a230:	f04f 30ff 	mov.w	r0, #4294967295
 800a234:	e7e9      	b.n	800a20a <__ssputs_r+0x8a>
	...

0800a238 <_svfiprintf_r>:
 800a238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23c:	4698      	mov	r8, r3
 800a23e:	898b      	ldrh	r3, [r1, #12]
 800a240:	061b      	lsls	r3, r3, #24
 800a242:	b09d      	sub	sp, #116	@ 0x74
 800a244:	4607      	mov	r7, r0
 800a246:	460d      	mov	r5, r1
 800a248:	4614      	mov	r4, r2
 800a24a:	d510      	bpl.n	800a26e <_svfiprintf_r+0x36>
 800a24c:	690b      	ldr	r3, [r1, #16]
 800a24e:	b973      	cbnz	r3, 800a26e <_svfiprintf_r+0x36>
 800a250:	2140      	movs	r1, #64	@ 0x40
 800a252:	f7ff ff09 	bl	800a068 <_malloc_r>
 800a256:	6028      	str	r0, [r5, #0]
 800a258:	6128      	str	r0, [r5, #16]
 800a25a:	b930      	cbnz	r0, 800a26a <_svfiprintf_r+0x32>
 800a25c:	230c      	movs	r3, #12
 800a25e:	603b      	str	r3, [r7, #0]
 800a260:	f04f 30ff 	mov.w	r0, #4294967295
 800a264:	b01d      	add	sp, #116	@ 0x74
 800a266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a26a:	2340      	movs	r3, #64	@ 0x40
 800a26c:	616b      	str	r3, [r5, #20]
 800a26e:	2300      	movs	r3, #0
 800a270:	9309      	str	r3, [sp, #36]	@ 0x24
 800a272:	2320      	movs	r3, #32
 800a274:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a278:	f8cd 800c 	str.w	r8, [sp, #12]
 800a27c:	2330      	movs	r3, #48	@ 0x30
 800a27e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a41c <_svfiprintf_r+0x1e4>
 800a282:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a286:	f04f 0901 	mov.w	r9, #1
 800a28a:	4623      	mov	r3, r4
 800a28c:	469a      	mov	sl, r3
 800a28e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a292:	b10a      	cbz	r2, 800a298 <_svfiprintf_r+0x60>
 800a294:	2a25      	cmp	r2, #37	@ 0x25
 800a296:	d1f9      	bne.n	800a28c <_svfiprintf_r+0x54>
 800a298:	ebba 0b04 	subs.w	fp, sl, r4
 800a29c:	d00b      	beq.n	800a2b6 <_svfiprintf_r+0x7e>
 800a29e:	465b      	mov	r3, fp
 800a2a0:	4622      	mov	r2, r4
 800a2a2:	4629      	mov	r1, r5
 800a2a4:	4638      	mov	r0, r7
 800a2a6:	f7ff ff6b 	bl	800a180 <__ssputs_r>
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	f000 80a7 	beq.w	800a3fe <_svfiprintf_r+0x1c6>
 800a2b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2b2:	445a      	add	r2, fp
 800a2b4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2b6:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f000 809f 	beq.w	800a3fe <_svfiprintf_r+0x1c6>
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2ca:	f10a 0a01 	add.w	sl, sl, #1
 800a2ce:	9304      	str	r3, [sp, #16]
 800a2d0:	9307      	str	r3, [sp, #28]
 800a2d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2d6:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2d8:	4654      	mov	r4, sl
 800a2da:	2205      	movs	r2, #5
 800a2dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2e0:	484e      	ldr	r0, [pc, #312]	@ (800a41c <_svfiprintf_r+0x1e4>)
 800a2e2:	f7f5 ff8d 	bl	8000200 <memchr>
 800a2e6:	9a04      	ldr	r2, [sp, #16]
 800a2e8:	b9d8      	cbnz	r0, 800a322 <_svfiprintf_r+0xea>
 800a2ea:	06d0      	lsls	r0, r2, #27
 800a2ec:	bf44      	itt	mi
 800a2ee:	2320      	movmi	r3, #32
 800a2f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2f4:	0711      	lsls	r1, r2, #28
 800a2f6:	bf44      	itt	mi
 800a2f8:	232b      	movmi	r3, #43	@ 0x2b
 800a2fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a302:	2b2a      	cmp	r3, #42	@ 0x2a
 800a304:	d015      	beq.n	800a332 <_svfiprintf_r+0xfa>
 800a306:	9a07      	ldr	r2, [sp, #28]
 800a308:	4654      	mov	r4, sl
 800a30a:	2000      	movs	r0, #0
 800a30c:	f04f 0c0a 	mov.w	ip, #10
 800a310:	4621      	mov	r1, r4
 800a312:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a316:	3b30      	subs	r3, #48	@ 0x30
 800a318:	2b09      	cmp	r3, #9
 800a31a:	d94b      	bls.n	800a3b4 <_svfiprintf_r+0x17c>
 800a31c:	b1b0      	cbz	r0, 800a34c <_svfiprintf_r+0x114>
 800a31e:	9207      	str	r2, [sp, #28]
 800a320:	e014      	b.n	800a34c <_svfiprintf_r+0x114>
 800a322:	eba0 0308 	sub.w	r3, r0, r8
 800a326:	fa09 f303 	lsl.w	r3, r9, r3
 800a32a:	4313      	orrs	r3, r2
 800a32c:	9304      	str	r3, [sp, #16]
 800a32e:	46a2      	mov	sl, r4
 800a330:	e7d2      	b.n	800a2d8 <_svfiprintf_r+0xa0>
 800a332:	9b03      	ldr	r3, [sp, #12]
 800a334:	1d19      	adds	r1, r3, #4
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	9103      	str	r1, [sp, #12]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	bfbb      	ittet	lt
 800a33e:	425b      	neglt	r3, r3
 800a340:	f042 0202 	orrlt.w	r2, r2, #2
 800a344:	9307      	strge	r3, [sp, #28]
 800a346:	9307      	strlt	r3, [sp, #28]
 800a348:	bfb8      	it	lt
 800a34a:	9204      	strlt	r2, [sp, #16]
 800a34c:	7823      	ldrb	r3, [r4, #0]
 800a34e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a350:	d10a      	bne.n	800a368 <_svfiprintf_r+0x130>
 800a352:	7863      	ldrb	r3, [r4, #1]
 800a354:	2b2a      	cmp	r3, #42	@ 0x2a
 800a356:	d132      	bne.n	800a3be <_svfiprintf_r+0x186>
 800a358:	9b03      	ldr	r3, [sp, #12]
 800a35a:	1d1a      	adds	r2, r3, #4
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	9203      	str	r2, [sp, #12]
 800a360:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a364:	3402      	adds	r4, #2
 800a366:	9305      	str	r3, [sp, #20]
 800a368:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a42c <_svfiprintf_r+0x1f4>
 800a36c:	7821      	ldrb	r1, [r4, #0]
 800a36e:	2203      	movs	r2, #3
 800a370:	4650      	mov	r0, sl
 800a372:	f7f5 ff45 	bl	8000200 <memchr>
 800a376:	b138      	cbz	r0, 800a388 <_svfiprintf_r+0x150>
 800a378:	9b04      	ldr	r3, [sp, #16]
 800a37a:	eba0 000a 	sub.w	r0, r0, sl
 800a37e:	2240      	movs	r2, #64	@ 0x40
 800a380:	4082      	lsls	r2, r0
 800a382:	4313      	orrs	r3, r2
 800a384:	3401      	adds	r4, #1
 800a386:	9304      	str	r3, [sp, #16]
 800a388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a38c:	4824      	ldr	r0, [pc, #144]	@ (800a420 <_svfiprintf_r+0x1e8>)
 800a38e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a392:	2206      	movs	r2, #6
 800a394:	f7f5 ff34 	bl	8000200 <memchr>
 800a398:	2800      	cmp	r0, #0
 800a39a:	d036      	beq.n	800a40a <_svfiprintf_r+0x1d2>
 800a39c:	4b21      	ldr	r3, [pc, #132]	@ (800a424 <_svfiprintf_r+0x1ec>)
 800a39e:	bb1b      	cbnz	r3, 800a3e8 <_svfiprintf_r+0x1b0>
 800a3a0:	9b03      	ldr	r3, [sp, #12]
 800a3a2:	3307      	adds	r3, #7
 800a3a4:	f023 0307 	bic.w	r3, r3, #7
 800a3a8:	3308      	adds	r3, #8
 800a3aa:	9303      	str	r3, [sp, #12]
 800a3ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3ae:	4433      	add	r3, r6
 800a3b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3b2:	e76a      	b.n	800a28a <_svfiprintf_r+0x52>
 800a3b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3b8:	460c      	mov	r4, r1
 800a3ba:	2001      	movs	r0, #1
 800a3bc:	e7a8      	b.n	800a310 <_svfiprintf_r+0xd8>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	3401      	adds	r4, #1
 800a3c2:	9305      	str	r3, [sp, #20]
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	f04f 0c0a 	mov.w	ip, #10
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3d0:	3a30      	subs	r2, #48	@ 0x30
 800a3d2:	2a09      	cmp	r2, #9
 800a3d4:	d903      	bls.n	800a3de <_svfiprintf_r+0x1a6>
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d0c6      	beq.n	800a368 <_svfiprintf_r+0x130>
 800a3da:	9105      	str	r1, [sp, #20]
 800a3dc:	e7c4      	b.n	800a368 <_svfiprintf_r+0x130>
 800a3de:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e7f0      	b.n	800a3ca <_svfiprintf_r+0x192>
 800a3e8:	ab03      	add	r3, sp, #12
 800a3ea:	9300      	str	r3, [sp, #0]
 800a3ec:	462a      	mov	r2, r5
 800a3ee:	4b0e      	ldr	r3, [pc, #56]	@ (800a428 <_svfiprintf_r+0x1f0>)
 800a3f0:	a904      	add	r1, sp, #16
 800a3f2:	4638      	mov	r0, r7
 800a3f4:	f3af 8000 	nop.w
 800a3f8:	1c42      	adds	r2, r0, #1
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	d1d6      	bne.n	800a3ac <_svfiprintf_r+0x174>
 800a3fe:	89ab      	ldrh	r3, [r5, #12]
 800a400:	065b      	lsls	r3, r3, #25
 800a402:	f53f af2d 	bmi.w	800a260 <_svfiprintf_r+0x28>
 800a406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a408:	e72c      	b.n	800a264 <_svfiprintf_r+0x2c>
 800a40a:	ab03      	add	r3, sp, #12
 800a40c:	9300      	str	r3, [sp, #0]
 800a40e:	462a      	mov	r2, r5
 800a410:	4b05      	ldr	r3, [pc, #20]	@ (800a428 <_svfiprintf_r+0x1f0>)
 800a412:	a904      	add	r1, sp, #16
 800a414:	4638      	mov	r0, r7
 800a416:	f000 f879 	bl	800a50c <_printf_i>
 800a41a:	e7ed      	b.n	800a3f8 <_svfiprintf_r+0x1c0>
 800a41c:	0800b1ea 	.word	0x0800b1ea
 800a420:	0800b1f4 	.word	0x0800b1f4
 800a424:	00000000 	.word	0x00000000
 800a428:	0800a181 	.word	0x0800a181
 800a42c:	0800b1f0 	.word	0x0800b1f0

0800a430 <_printf_common>:
 800a430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a434:	4616      	mov	r6, r2
 800a436:	4698      	mov	r8, r3
 800a438:	688a      	ldr	r2, [r1, #8]
 800a43a:	690b      	ldr	r3, [r1, #16]
 800a43c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a440:	4293      	cmp	r3, r2
 800a442:	bfb8      	it	lt
 800a444:	4613      	movlt	r3, r2
 800a446:	6033      	str	r3, [r6, #0]
 800a448:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a44c:	4607      	mov	r7, r0
 800a44e:	460c      	mov	r4, r1
 800a450:	b10a      	cbz	r2, 800a456 <_printf_common+0x26>
 800a452:	3301      	adds	r3, #1
 800a454:	6033      	str	r3, [r6, #0]
 800a456:	6823      	ldr	r3, [r4, #0]
 800a458:	0699      	lsls	r1, r3, #26
 800a45a:	bf42      	ittt	mi
 800a45c:	6833      	ldrmi	r3, [r6, #0]
 800a45e:	3302      	addmi	r3, #2
 800a460:	6033      	strmi	r3, [r6, #0]
 800a462:	6825      	ldr	r5, [r4, #0]
 800a464:	f015 0506 	ands.w	r5, r5, #6
 800a468:	d106      	bne.n	800a478 <_printf_common+0x48>
 800a46a:	f104 0a19 	add.w	sl, r4, #25
 800a46e:	68e3      	ldr	r3, [r4, #12]
 800a470:	6832      	ldr	r2, [r6, #0]
 800a472:	1a9b      	subs	r3, r3, r2
 800a474:	42ab      	cmp	r3, r5
 800a476:	dc26      	bgt.n	800a4c6 <_printf_common+0x96>
 800a478:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a47c:	6822      	ldr	r2, [r4, #0]
 800a47e:	3b00      	subs	r3, #0
 800a480:	bf18      	it	ne
 800a482:	2301      	movne	r3, #1
 800a484:	0692      	lsls	r2, r2, #26
 800a486:	d42b      	bmi.n	800a4e0 <_printf_common+0xb0>
 800a488:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a48c:	4641      	mov	r1, r8
 800a48e:	4638      	mov	r0, r7
 800a490:	47c8      	blx	r9
 800a492:	3001      	adds	r0, #1
 800a494:	d01e      	beq.n	800a4d4 <_printf_common+0xa4>
 800a496:	6823      	ldr	r3, [r4, #0]
 800a498:	6922      	ldr	r2, [r4, #16]
 800a49a:	f003 0306 	and.w	r3, r3, #6
 800a49e:	2b04      	cmp	r3, #4
 800a4a0:	bf02      	ittt	eq
 800a4a2:	68e5      	ldreq	r5, [r4, #12]
 800a4a4:	6833      	ldreq	r3, [r6, #0]
 800a4a6:	1aed      	subeq	r5, r5, r3
 800a4a8:	68a3      	ldr	r3, [r4, #8]
 800a4aa:	bf0c      	ite	eq
 800a4ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4b0:	2500      	movne	r5, #0
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	bfc4      	itt	gt
 800a4b6:	1a9b      	subgt	r3, r3, r2
 800a4b8:	18ed      	addgt	r5, r5, r3
 800a4ba:	2600      	movs	r6, #0
 800a4bc:	341a      	adds	r4, #26
 800a4be:	42b5      	cmp	r5, r6
 800a4c0:	d11a      	bne.n	800a4f8 <_printf_common+0xc8>
 800a4c2:	2000      	movs	r0, #0
 800a4c4:	e008      	b.n	800a4d8 <_printf_common+0xa8>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	4652      	mov	r2, sl
 800a4ca:	4641      	mov	r1, r8
 800a4cc:	4638      	mov	r0, r7
 800a4ce:	47c8      	blx	r9
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	d103      	bne.n	800a4dc <_printf_common+0xac>
 800a4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4dc:	3501      	adds	r5, #1
 800a4de:	e7c6      	b.n	800a46e <_printf_common+0x3e>
 800a4e0:	18e1      	adds	r1, r4, r3
 800a4e2:	1c5a      	adds	r2, r3, #1
 800a4e4:	2030      	movs	r0, #48	@ 0x30
 800a4e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a4ea:	4422      	add	r2, r4
 800a4ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a4f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a4f4:	3302      	adds	r3, #2
 800a4f6:	e7c7      	b.n	800a488 <_printf_common+0x58>
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	4622      	mov	r2, r4
 800a4fc:	4641      	mov	r1, r8
 800a4fe:	4638      	mov	r0, r7
 800a500:	47c8      	blx	r9
 800a502:	3001      	adds	r0, #1
 800a504:	d0e6      	beq.n	800a4d4 <_printf_common+0xa4>
 800a506:	3601      	adds	r6, #1
 800a508:	e7d9      	b.n	800a4be <_printf_common+0x8e>
	...

0800a50c <_printf_i>:
 800a50c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a510:	7e0f      	ldrb	r7, [r1, #24]
 800a512:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a514:	2f78      	cmp	r7, #120	@ 0x78
 800a516:	4691      	mov	r9, r2
 800a518:	4680      	mov	r8, r0
 800a51a:	460c      	mov	r4, r1
 800a51c:	469a      	mov	sl, r3
 800a51e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a522:	d807      	bhi.n	800a534 <_printf_i+0x28>
 800a524:	2f62      	cmp	r7, #98	@ 0x62
 800a526:	d80a      	bhi.n	800a53e <_printf_i+0x32>
 800a528:	2f00      	cmp	r7, #0
 800a52a:	f000 80d2 	beq.w	800a6d2 <_printf_i+0x1c6>
 800a52e:	2f58      	cmp	r7, #88	@ 0x58
 800a530:	f000 80b9 	beq.w	800a6a6 <_printf_i+0x19a>
 800a534:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a538:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a53c:	e03a      	b.n	800a5b4 <_printf_i+0xa8>
 800a53e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a542:	2b15      	cmp	r3, #21
 800a544:	d8f6      	bhi.n	800a534 <_printf_i+0x28>
 800a546:	a101      	add	r1, pc, #4	@ (adr r1, 800a54c <_printf_i+0x40>)
 800a548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a54c:	0800a5a5 	.word	0x0800a5a5
 800a550:	0800a5b9 	.word	0x0800a5b9
 800a554:	0800a535 	.word	0x0800a535
 800a558:	0800a535 	.word	0x0800a535
 800a55c:	0800a535 	.word	0x0800a535
 800a560:	0800a535 	.word	0x0800a535
 800a564:	0800a5b9 	.word	0x0800a5b9
 800a568:	0800a535 	.word	0x0800a535
 800a56c:	0800a535 	.word	0x0800a535
 800a570:	0800a535 	.word	0x0800a535
 800a574:	0800a535 	.word	0x0800a535
 800a578:	0800a6b9 	.word	0x0800a6b9
 800a57c:	0800a5e3 	.word	0x0800a5e3
 800a580:	0800a673 	.word	0x0800a673
 800a584:	0800a535 	.word	0x0800a535
 800a588:	0800a535 	.word	0x0800a535
 800a58c:	0800a6db 	.word	0x0800a6db
 800a590:	0800a535 	.word	0x0800a535
 800a594:	0800a5e3 	.word	0x0800a5e3
 800a598:	0800a535 	.word	0x0800a535
 800a59c:	0800a535 	.word	0x0800a535
 800a5a0:	0800a67b 	.word	0x0800a67b
 800a5a4:	6833      	ldr	r3, [r6, #0]
 800a5a6:	1d1a      	adds	r2, r3, #4
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	6032      	str	r2, [r6, #0]
 800a5ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e09d      	b.n	800a6f4 <_printf_i+0x1e8>
 800a5b8:	6833      	ldr	r3, [r6, #0]
 800a5ba:	6820      	ldr	r0, [r4, #0]
 800a5bc:	1d19      	adds	r1, r3, #4
 800a5be:	6031      	str	r1, [r6, #0]
 800a5c0:	0606      	lsls	r6, r0, #24
 800a5c2:	d501      	bpl.n	800a5c8 <_printf_i+0xbc>
 800a5c4:	681d      	ldr	r5, [r3, #0]
 800a5c6:	e003      	b.n	800a5d0 <_printf_i+0xc4>
 800a5c8:	0645      	lsls	r5, r0, #25
 800a5ca:	d5fb      	bpl.n	800a5c4 <_printf_i+0xb8>
 800a5cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a5d0:	2d00      	cmp	r5, #0
 800a5d2:	da03      	bge.n	800a5dc <_printf_i+0xd0>
 800a5d4:	232d      	movs	r3, #45	@ 0x2d
 800a5d6:	426d      	negs	r5, r5
 800a5d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5dc:	4859      	ldr	r0, [pc, #356]	@ (800a744 <_printf_i+0x238>)
 800a5de:	230a      	movs	r3, #10
 800a5e0:	e011      	b.n	800a606 <_printf_i+0xfa>
 800a5e2:	6821      	ldr	r1, [r4, #0]
 800a5e4:	6833      	ldr	r3, [r6, #0]
 800a5e6:	0608      	lsls	r0, r1, #24
 800a5e8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a5ec:	d402      	bmi.n	800a5f4 <_printf_i+0xe8>
 800a5ee:	0649      	lsls	r1, r1, #25
 800a5f0:	bf48      	it	mi
 800a5f2:	b2ad      	uxthmi	r5, r5
 800a5f4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a5f6:	4853      	ldr	r0, [pc, #332]	@ (800a744 <_printf_i+0x238>)
 800a5f8:	6033      	str	r3, [r6, #0]
 800a5fa:	bf14      	ite	ne
 800a5fc:	230a      	movne	r3, #10
 800a5fe:	2308      	moveq	r3, #8
 800a600:	2100      	movs	r1, #0
 800a602:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a606:	6866      	ldr	r6, [r4, #4]
 800a608:	60a6      	str	r6, [r4, #8]
 800a60a:	2e00      	cmp	r6, #0
 800a60c:	bfa2      	ittt	ge
 800a60e:	6821      	ldrge	r1, [r4, #0]
 800a610:	f021 0104 	bicge.w	r1, r1, #4
 800a614:	6021      	strge	r1, [r4, #0]
 800a616:	b90d      	cbnz	r5, 800a61c <_printf_i+0x110>
 800a618:	2e00      	cmp	r6, #0
 800a61a:	d04b      	beq.n	800a6b4 <_printf_i+0x1a8>
 800a61c:	4616      	mov	r6, r2
 800a61e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a622:	fb03 5711 	mls	r7, r3, r1, r5
 800a626:	5dc7      	ldrb	r7, [r0, r7]
 800a628:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a62c:	462f      	mov	r7, r5
 800a62e:	42bb      	cmp	r3, r7
 800a630:	460d      	mov	r5, r1
 800a632:	d9f4      	bls.n	800a61e <_printf_i+0x112>
 800a634:	2b08      	cmp	r3, #8
 800a636:	d10b      	bne.n	800a650 <_printf_i+0x144>
 800a638:	6823      	ldr	r3, [r4, #0]
 800a63a:	07df      	lsls	r7, r3, #31
 800a63c:	d508      	bpl.n	800a650 <_printf_i+0x144>
 800a63e:	6923      	ldr	r3, [r4, #16]
 800a640:	6861      	ldr	r1, [r4, #4]
 800a642:	4299      	cmp	r1, r3
 800a644:	bfde      	ittt	le
 800a646:	2330      	movle	r3, #48	@ 0x30
 800a648:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a64c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a650:	1b92      	subs	r2, r2, r6
 800a652:	6122      	str	r2, [r4, #16]
 800a654:	f8cd a000 	str.w	sl, [sp]
 800a658:	464b      	mov	r3, r9
 800a65a:	aa03      	add	r2, sp, #12
 800a65c:	4621      	mov	r1, r4
 800a65e:	4640      	mov	r0, r8
 800a660:	f7ff fee6 	bl	800a430 <_printf_common>
 800a664:	3001      	adds	r0, #1
 800a666:	d14a      	bne.n	800a6fe <_printf_i+0x1f2>
 800a668:	f04f 30ff 	mov.w	r0, #4294967295
 800a66c:	b004      	add	sp, #16
 800a66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a672:	6823      	ldr	r3, [r4, #0]
 800a674:	f043 0320 	orr.w	r3, r3, #32
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	4833      	ldr	r0, [pc, #204]	@ (800a748 <_printf_i+0x23c>)
 800a67c:	2778      	movs	r7, #120	@ 0x78
 800a67e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a682:	6823      	ldr	r3, [r4, #0]
 800a684:	6831      	ldr	r1, [r6, #0]
 800a686:	061f      	lsls	r7, r3, #24
 800a688:	f851 5b04 	ldr.w	r5, [r1], #4
 800a68c:	d402      	bmi.n	800a694 <_printf_i+0x188>
 800a68e:	065f      	lsls	r7, r3, #25
 800a690:	bf48      	it	mi
 800a692:	b2ad      	uxthmi	r5, r5
 800a694:	6031      	str	r1, [r6, #0]
 800a696:	07d9      	lsls	r1, r3, #31
 800a698:	bf44      	itt	mi
 800a69a:	f043 0320 	orrmi.w	r3, r3, #32
 800a69e:	6023      	strmi	r3, [r4, #0]
 800a6a0:	b11d      	cbz	r5, 800a6aa <_printf_i+0x19e>
 800a6a2:	2310      	movs	r3, #16
 800a6a4:	e7ac      	b.n	800a600 <_printf_i+0xf4>
 800a6a6:	4827      	ldr	r0, [pc, #156]	@ (800a744 <_printf_i+0x238>)
 800a6a8:	e7e9      	b.n	800a67e <_printf_i+0x172>
 800a6aa:	6823      	ldr	r3, [r4, #0]
 800a6ac:	f023 0320 	bic.w	r3, r3, #32
 800a6b0:	6023      	str	r3, [r4, #0]
 800a6b2:	e7f6      	b.n	800a6a2 <_printf_i+0x196>
 800a6b4:	4616      	mov	r6, r2
 800a6b6:	e7bd      	b.n	800a634 <_printf_i+0x128>
 800a6b8:	6833      	ldr	r3, [r6, #0]
 800a6ba:	6825      	ldr	r5, [r4, #0]
 800a6bc:	6961      	ldr	r1, [r4, #20]
 800a6be:	1d18      	adds	r0, r3, #4
 800a6c0:	6030      	str	r0, [r6, #0]
 800a6c2:	062e      	lsls	r6, r5, #24
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	d501      	bpl.n	800a6cc <_printf_i+0x1c0>
 800a6c8:	6019      	str	r1, [r3, #0]
 800a6ca:	e002      	b.n	800a6d2 <_printf_i+0x1c6>
 800a6cc:	0668      	lsls	r0, r5, #25
 800a6ce:	d5fb      	bpl.n	800a6c8 <_printf_i+0x1bc>
 800a6d0:	8019      	strh	r1, [r3, #0]
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	6123      	str	r3, [r4, #16]
 800a6d6:	4616      	mov	r6, r2
 800a6d8:	e7bc      	b.n	800a654 <_printf_i+0x148>
 800a6da:	6833      	ldr	r3, [r6, #0]
 800a6dc:	1d1a      	adds	r2, r3, #4
 800a6de:	6032      	str	r2, [r6, #0]
 800a6e0:	681e      	ldr	r6, [r3, #0]
 800a6e2:	6862      	ldr	r2, [r4, #4]
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f7f5 fd8a 	bl	8000200 <memchr>
 800a6ec:	b108      	cbz	r0, 800a6f2 <_printf_i+0x1e6>
 800a6ee:	1b80      	subs	r0, r0, r6
 800a6f0:	6060      	str	r0, [r4, #4]
 800a6f2:	6863      	ldr	r3, [r4, #4]
 800a6f4:	6123      	str	r3, [r4, #16]
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6fc:	e7aa      	b.n	800a654 <_printf_i+0x148>
 800a6fe:	6923      	ldr	r3, [r4, #16]
 800a700:	4632      	mov	r2, r6
 800a702:	4649      	mov	r1, r9
 800a704:	4640      	mov	r0, r8
 800a706:	47d0      	blx	sl
 800a708:	3001      	adds	r0, #1
 800a70a:	d0ad      	beq.n	800a668 <_printf_i+0x15c>
 800a70c:	6823      	ldr	r3, [r4, #0]
 800a70e:	079b      	lsls	r3, r3, #30
 800a710:	d413      	bmi.n	800a73a <_printf_i+0x22e>
 800a712:	68e0      	ldr	r0, [r4, #12]
 800a714:	9b03      	ldr	r3, [sp, #12]
 800a716:	4298      	cmp	r0, r3
 800a718:	bfb8      	it	lt
 800a71a:	4618      	movlt	r0, r3
 800a71c:	e7a6      	b.n	800a66c <_printf_i+0x160>
 800a71e:	2301      	movs	r3, #1
 800a720:	4632      	mov	r2, r6
 800a722:	4649      	mov	r1, r9
 800a724:	4640      	mov	r0, r8
 800a726:	47d0      	blx	sl
 800a728:	3001      	adds	r0, #1
 800a72a:	d09d      	beq.n	800a668 <_printf_i+0x15c>
 800a72c:	3501      	adds	r5, #1
 800a72e:	68e3      	ldr	r3, [r4, #12]
 800a730:	9903      	ldr	r1, [sp, #12]
 800a732:	1a5b      	subs	r3, r3, r1
 800a734:	42ab      	cmp	r3, r5
 800a736:	dcf2      	bgt.n	800a71e <_printf_i+0x212>
 800a738:	e7eb      	b.n	800a712 <_printf_i+0x206>
 800a73a:	2500      	movs	r5, #0
 800a73c:	f104 0619 	add.w	r6, r4, #25
 800a740:	e7f5      	b.n	800a72e <_printf_i+0x222>
 800a742:	bf00      	nop
 800a744:	0800b1fb 	.word	0x0800b1fb
 800a748:	0800b20c 	.word	0x0800b20c

0800a74c <__sflush_r>:
 800a74c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a754:	0716      	lsls	r6, r2, #28
 800a756:	4605      	mov	r5, r0
 800a758:	460c      	mov	r4, r1
 800a75a:	d454      	bmi.n	800a806 <__sflush_r+0xba>
 800a75c:	684b      	ldr	r3, [r1, #4]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	dc02      	bgt.n	800a768 <__sflush_r+0x1c>
 800a762:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a764:	2b00      	cmp	r3, #0
 800a766:	dd48      	ble.n	800a7fa <__sflush_r+0xae>
 800a768:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a76a:	2e00      	cmp	r6, #0
 800a76c:	d045      	beq.n	800a7fa <__sflush_r+0xae>
 800a76e:	2300      	movs	r3, #0
 800a770:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a774:	682f      	ldr	r7, [r5, #0]
 800a776:	6a21      	ldr	r1, [r4, #32]
 800a778:	602b      	str	r3, [r5, #0]
 800a77a:	d030      	beq.n	800a7de <__sflush_r+0x92>
 800a77c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a77e:	89a3      	ldrh	r3, [r4, #12]
 800a780:	0759      	lsls	r1, r3, #29
 800a782:	d505      	bpl.n	800a790 <__sflush_r+0x44>
 800a784:	6863      	ldr	r3, [r4, #4]
 800a786:	1ad2      	subs	r2, r2, r3
 800a788:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a78a:	b10b      	cbz	r3, 800a790 <__sflush_r+0x44>
 800a78c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a78e:	1ad2      	subs	r2, r2, r3
 800a790:	2300      	movs	r3, #0
 800a792:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a794:	6a21      	ldr	r1, [r4, #32]
 800a796:	4628      	mov	r0, r5
 800a798:	47b0      	blx	r6
 800a79a:	1c43      	adds	r3, r0, #1
 800a79c:	89a3      	ldrh	r3, [r4, #12]
 800a79e:	d106      	bne.n	800a7ae <__sflush_r+0x62>
 800a7a0:	6829      	ldr	r1, [r5, #0]
 800a7a2:	291d      	cmp	r1, #29
 800a7a4:	d82b      	bhi.n	800a7fe <__sflush_r+0xb2>
 800a7a6:	4a2a      	ldr	r2, [pc, #168]	@ (800a850 <__sflush_r+0x104>)
 800a7a8:	410a      	asrs	r2, r1
 800a7aa:	07d6      	lsls	r6, r2, #31
 800a7ac:	d427      	bmi.n	800a7fe <__sflush_r+0xb2>
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	6062      	str	r2, [r4, #4]
 800a7b2:	04d9      	lsls	r1, r3, #19
 800a7b4:	6922      	ldr	r2, [r4, #16]
 800a7b6:	6022      	str	r2, [r4, #0]
 800a7b8:	d504      	bpl.n	800a7c4 <__sflush_r+0x78>
 800a7ba:	1c42      	adds	r2, r0, #1
 800a7bc:	d101      	bne.n	800a7c2 <__sflush_r+0x76>
 800a7be:	682b      	ldr	r3, [r5, #0]
 800a7c0:	b903      	cbnz	r3, 800a7c4 <__sflush_r+0x78>
 800a7c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a7c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7c6:	602f      	str	r7, [r5, #0]
 800a7c8:	b1b9      	cbz	r1, 800a7fa <__sflush_r+0xae>
 800a7ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7ce:	4299      	cmp	r1, r3
 800a7d0:	d002      	beq.n	800a7d8 <__sflush_r+0x8c>
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	f7ff fbd4 	bl	8009f80 <_free_r>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	6363      	str	r3, [r4, #52]	@ 0x34
 800a7dc:	e00d      	b.n	800a7fa <__sflush_r+0xae>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	47b0      	blx	r6
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	1c50      	adds	r0, r2, #1
 800a7e8:	d1c9      	bne.n	800a77e <__sflush_r+0x32>
 800a7ea:	682b      	ldr	r3, [r5, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d0c6      	beq.n	800a77e <__sflush_r+0x32>
 800a7f0:	2b1d      	cmp	r3, #29
 800a7f2:	d001      	beq.n	800a7f8 <__sflush_r+0xac>
 800a7f4:	2b16      	cmp	r3, #22
 800a7f6:	d11e      	bne.n	800a836 <__sflush_r+0xea>
 800a7f8:	602f      	str	r7, [r5, #0]
 800a7fa:	2000      	movs	r0, #0
 800a7fc:	e022      	b.n	800a844 <__sflush_r+0xf8>
 800a7fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a802:	b21b      	sxth	r3, r3
 800a804:	e01b      	b.n	800a83e <__sflush_r+0xf2>
 800a806:	690f      	ldr	r7, [r1, #16]
 800a808:	2f00      	cmp	r7, #0
 800a80a:	d0f6      	beq.n	800a7fa <__sflush_r+0xae>
 800a80c:	0793      	lsls	r3, r2, #30
 800a80e:	680e      	ldr	r6, [r1, #0]
 800a810:	bf08      	it	eq
 800a812:	694b      	ldreq	r3, [r1, #20]
 800a814:	600f      	str	r7, [r1, #0]
 800a816:	bf18      	it	ne
 800a818:	2300      	movne	r3, #0
 800a81a:	eba6 0807 	sub.w	r8, r6, r7
 800a81e:	608b      	str	r3, [r1, #8]
 800a820:	f1b8 0f00 	cmp.w	r8, #0
 800a824:	dde9      	ble.n	800a7fa <__sflush_r+0xae>
 800a826:	6a21      	ldr	r1, [r4, #32]
 800a828:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a82a:	4643      	mov	r3, r8
 800a82c:	463a      	mov	r2, r7
 800a82e:	4628      	mov	r0, r5
 800a830:	47b0      	blx	r6
 800a832:	2800      	cmp	r0, #0
 800a834:	dc08      	bgt.n	800a848 <__sflush_r+0xfc>
 800a836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a83a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a83e:	81a3      	strh	r3, [r4, #12]
 800a840:	f04f 30ff 	mov.w	r0, #4294967295
 800a844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a848:	4407      	add	r7, r0
 800a84a:	eba8 0800 	sub.w	r8, r8, r0
 800a84e:	e7e7      	b.n	800a820 <__sflush_r+0xd4>
 800a850:	dfbffffe 	.word	0xdfbffffe

0800a854 <_fflush_r>:
 800a854:	b538      	push	{r3, r4, r5, lr}
 800a856:	690b      	ldr	r3, [r1, #16]
 800a858:	4605      	mov	r5, r0
 800a85a:	460c      	mov	r4, r1
 800a85c:	b913      	cbnz	r3, 800a864 <_fflush_r+0x10>
 800a85e:	2500      	movs	r5, #0
 800a860:	4628      	mov	r0, r5
 800a862:	bd38      	pop	{r3, r4, r5, pc}
 800a864:	b118      	cbz	r0, 800a86e <_fflush_r+0x1a>
 800a866:	6a03      	ldr	r3, [r0, #32]
 800a868:	b90b      	cbnz	r3, 800a86e <_fflush_r+0x1a>
 800a86a:	f7ff f9c5 	bl	8009bf8 <__sinit>
 800a86e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d0f3      	beq.n	800a85e <_fflush_r+0xa>
 800a876:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a878:	07d0      	lsls	r0, r2, #31
 800a87a:	d404      	bmi.n	800a886 <_fflush_r+0x32>
 800a87c:	0599      	lsls	r1, r3, #22
 800a87e:	d402      	bmi.n	800a886 <_fflush_r+0x32>
 800a880:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a882:	f7ff fb4e 	bl	8009f22 <__retarget_lock_acquire_recursive>
 800a886:	4628      	mov	r0, r5
 800a888:	4621      	mov	r1, r4
 800a88a:	f7ff ff5f 	bl	800a74c <__sflush_r>
 800a88e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a890:	07da      	lsls	r2, r3, #31
 800a892:	4605      	mov	r5, r0
 800a894:	d4e4      	bmi.n	800a860 <_fflush_r+0xc>
 800a896:	89a3      	ldrh	r3, [r4, #12]
 800a898:	059b      	lsls	r3, r3, #22
 800a89a:	d4e1      	bmi.n	800a860 <_fflush_r+0xc>
 800a89c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a89e:	f7ff fb41 	bl	8009f24 <__retarget_lock_release_recursive>
 800a8a2:	e7dd      	b.n	800a860 <_fflush_r+0xc>

0800a8a4 <fiprintf>:
 800a8a4:	b40e      	push	{r1, r2, r3}
 800a8a6:	b503      	push	{r0, r1, lr}
 800a8a8:	4601      	mov	r1, r0
 800a8aa:	ab03      	add	r3, sp, #12
 800a8ac:	4805      	ldr	r0, [pc, #20]	@ (800a8c4 <fiprintf+0x20>)
 800a8ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8b2:	6800      	ldr	r0, [r0, #0]
 800a8b4:	9301      	str	r3, [sp, #4]
 800a8b6:	f000 f88f 	bl	800a9d8 <_vfiprintf_r>
 800a8ba:	b002      	add	sp, #8
 800a8bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8c0:	b003      	add	sp, #12
 800a8c2:	4770      	bx	lr
 800a8c4:	20000134 	.word	0x20000134

0800a8c8 <memmove>:
 800a8c8:	4288      	cmp	r0, r1
 800a8ca:	b510      	push	{r4, lr}
 800a8cc:	eb01 0402 	add.w	r4, r1, r2
 800a8d0:	d902      	bls.n	800a8d8 <memmove+0x10>
 800a8d2:	4284      	cmp	r4, r0
 800a8d4:	4623      	mov	r3, r4
 800a8d6:	d807      	bhi.n	800a8e8 <memmove+0x20>
 800a8d8:	1e43      	subs	r3, r0, #1
 800a8da:	42a1      	cmp	r1, r4
 800a8dc:	d008      	beq.n	800a8f0 <memmove+0x28>
 800a8de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8e6:	e7f8      	b.n	800a8da <memmove+0x12>
 800a8e8:	4402      	add	r2, r0
 800a8ea:	4601      	mov	r1, r0
 800a8ec:	428a      	cmp	r2, r1
 800a8ee:	d100      	bne.n	800a8f2 <memmove+0x2a>
 800a8f0:	bd10      	pop	{r4, pc}
 800a8f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8fa:	e7f7      	b.n	800a8ec <memmove+0x24>

0800a8fc <_sbrk_r>:
 800a8fc:	b538      	push	{r3, r4, r5, lr}
 800a8fe:	4d06      	ldr	r5, [pc, #24]	@ (800a918 <_sbrk_r+0x1c>)
 800a900:	2300      	movs	r3, #0
 800a902:	4604      	mov	r4, r0
 800a904:	4608      	mov	r0, r1
 800a906:	602b      	str	r3, [r5, #0]
 800a908:	f7f6 feb6 	bl	8001678 <_sbrk>
 800a90c:	1c43      	adds	r3, r0, #1
 800a90e:	d102      	bne.n	800a916 <_sbrk_r+0x1a>
 800a910:	682b      	ldr	r3, [r5, #0]
 800a912:	b103      	cbz	r3, 800a916 <_sbrk_r+0x1a>
 800a914:	6023      	str	r3, [r4, #0]
 800a916:	bd38      	pop	{r3, r4, r5, pc}
 800a918:	2000485c 	.word	0x2000485c

0800a91c <abort>:
 800a91c:	b508      	push	{r3, lr}
 800a91e:	2006      	movs	r0, #6
 800a920:	f000 fa2e 	bl	800ad80 <raise>
 800a924:	2001      	movs	r0, #1
 800a926:	f7f6 fe2f 	bl	8001588 <_exit>

0800a92a <_realloc_r>:
 800a92a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a92e:	4680      	mov	r8, r0
 800a930:	4615      	mov	r5, r2
 800a932:	460c      	mov	r4, r1
 800a934:	b921      	cbnz	r1, 800a940 <_realloc_r+0x16>
 800a936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a93a:	4611      	mov	r1, r2
 800a93c:	f7ff bb94 	b.w	800a068 <_malloc_r>
 800a940:	b92a      	cbnz	r2, 800a94e <_realloc_r+0x24>
 800a942:	f7ff fb1d 	bl	8009f80 <_free_r>
 800a946:	2400      	movs	r4, #0
 800a948:	4620      	mov	r0, r4
 800a94a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a94e:	f000 fa33 	bl	800adb8 <_malloc_usable_size_r>
 800a952:	4285      	cmp	r5, r0
 800a954:	4606      	mov	r6, r0
 800a956:	d802      	bhi.n	800a95e <_realloc_r+0x34>
 800a958:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a95c:	d8f4      	bhi.n	800a948 <_realloc_r+0x1e>
 800a95e:	4629      	mov	r1, r5
 800a960:	4640      	mov	r0, r8
 800a962:	f7ff fb81 	bl	800a068 <_malloc_r>
 800a966:	4607      	mov	r7, r0
 800a968:	2800      	cmp	r0, #0
 800a96a:	d0ec      	beq.n	800a946 <_realloc_r+0x1c>
 800a96c:	42b5      	cmp	r5, r6
 800a96e:	462a      	mov	r2, r5
 800a970:	4621      	mov	r1, r4
 800a972:	bf28      	it	cs
 800a974:	4632      	movcs	r2, r6
 800a976:	f7ff fad6 	bl	8009f26 <memcpy>
 800a97a:	4621      	mov	r1, r4
 800a97c:	4640      	mov	r0, r8
 800a97e:	f7ff faff 	bl	8009f80 <_free_r>
 800a982:	463c      	mov	r4, r7
 800a984:	e7e0      	b.n	800a948 <_realloc_r+0x1e>

0800a986 <__sfputc_r>:
 800a986:	6893      	ldr	r3, [r2, #8]
 800a988:	3b01      	subs	r3, #1
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	b410      	push	{r4}
 800a98e:	6093      	str	r3, [r2, #8]
 800a990:	da08      	bge.n	800a9a4 <__sfputc_r+0x1e>
 800a992:	6994      	ldr	r4, [r2, #24]
 800a994:	42a3      	cmp	r3, r4
 800a996:	db01      	blt.n	800a99c <__sfputc_r+0x16>
 800a998:	290a      	cmp	r1, #10
 800a99a:	d103      	bne.n	800a9a4 <__sfputc_r+0x1e>
 800a99c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9a0:	f000 b932 	b.w	800ac08 <__swbuf_r>
 800a9a4:	6813      	ldr	r3, [r2, #0]
 800a9a6:	1c58      	adds	r0, r3, #1
 800a9a8:	6010      	str	r0, [r2, #0]
 800a9aa:	7019      	strb	r1, [r3, #0]
 800a9ac:	4608      	mov	r0, r1
 800a9ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <__sfputs_r>:
 800a9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9b6:	4606      	mov	r6, r0
 800a9b8:	460f      	mov	r7, r1
 800a9ba:	4614      	mov	r4, r2
 800a9bc:	18d5      	adds	r5, r2, r3
 800a9be:	42ac      	cmp	r4, r5
 800a9c0:	d101      	bne.n	800a9c6 <__sfputs_r+0x12>
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	e007      	b.n	800a9d6 <__sfputs_r+0x22>
 800a9c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9ca:	463a      	mov	r2, r7
 800a9cc:	4630      	mov	r0, r6
 800a9ce:	f7ff ffda 	bl	800a986 <__sfputc_r>
 800a9d2:	1c43      	adds	r3, r0, #1
 800a9d4:	d1f3      	bne.n	800a9be <__sfputs_r+0xa>
 800a9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a9d8 <_vfiprintf_r>:
 800a9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9dc:	460d      	mov	r5, r1
 800a9de:	b09d      	sub	sp, #116	@ 0x74
 800a9e0:	4614      	mov	r4, r2
 800a9e2:	4698      	mov	r8, r3
 800a9e4:	4606      	mov	r6, r0
 800a9e6:	b118      	cbz	r0, 800a9f0 <_vfiprintf_r+0x18>
 800a9e8:	6a03      	ldr	r3, [r0, #32]
 800a9ea:	b90b      	cbnz	r3, 800a9f0 <_vfiprintf_r+0x18>
 800a9ec:	f7ff f904 	bl	8009bf8 <__sinit>
 800a9f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9f2:	07d9      	lsls	r1, r3, #31
 800a9f4:	d405      	bmi.n	800aa02 <_vfiprintf_r+0x2a>
 800a9f6:	89ab      	ldrh	r3, [r5, #12]
 800a9f8:	059a      	lsls	r2, r3, #22
 800a9fa:	d402      	bmi.n	800aa02 <_vfiprintf_r+0x2a>
 800a9fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9fe:	f7ff fa90 	bl	8009f22 <__retarget_lock_acquire_recursive>
 800aa02:	89ab      	ldrh	r3, [r5, #12]
 800aa04:	071b      	lsls	r3, r3, #28
 800aa06:	d501      	bpl.n	800aa0c <_vfiprintf_r+0x34>
 800aa08:	692b      	ldr	r3, [r5, #16]
 800aa0a:	b99b      	cbnz	r3, 800aa34 <_vfiprintf_r+0x5c>
 800aa0c:	4629      	mov	r1, r5
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f000 f938 	bl	800ac84 <__swsetup_r>
 800aa14:	b170      	cbz	r0, 800aa34 <_vfiprintf_r+0x5c>
 800aa16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa18:	07dc      	lsls	r4, r3, #31
 800aa1a:	d504      	bpl.n	800aa26 <_vfiprintf_r+0x4e>
 800aa1c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa20:	b01d      	add	sp, #116	@ 0x74
 800aa22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa26:	89ab      	ldrh	r3, [r5, #12]
 800aa28:	0598      	lsls	r0, r3, #22
 800aa2a:	d4f7      	bmi.n	800aa1c <_vfiprintf_r+0x44>
 800aa2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa2e:	f7ff fa79 	bl	8009f24 <__retarget_lock_release_recursive>
 800aa32:	e7f3      	b.n	800aa1c <_vfiprintf_r+0x44>
 800aa34:	2300      	movs	r3, #0
 800aa36:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa38:	2320      	movs	r3, #32
 800aa3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aa3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa42:	2330      	movs	r3, #48	@ 0x30
 800aa44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800abf4 <_vfiprintf_r+0x21c>
 800aa48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aa4c:	f04f 0901 	mov.w	r9, #1
 800aa50:	4623      	mov	r3, r4
 800aa52:	469a      	mov	sl, r3
 800aa54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa58:	b10a      	cbz	r2, 800aa5e <_vfiprintf_r+0x86>
 800aa5a:	2a25      	cmp	r2, #37	@ 0x25
 800aa5c:	d1f9      	bne.n	800aa52 <_vfiprintf_r+0x7a>
 800aa5e:	ebba 0b04 	subs.w	fp, sl, r4
 800aa62:	d00b      	beq.n	800aa7c <_vfiprintf_r+0xa4>
 800aa64:	465b      	mov	r3, fp
 800aa66:	4622      	mov	r2, r4
 800aa68:	4629      	mov	r1, r5
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	f7ff ffa2 	bl	800a9b4 <__sfputs_r>
 800aa70:	3001      	adds	r0, #1
 800aa72:	f000 80a7 	beq.w	800abc4 <_vfiprintf_r+0x1ec>
 800aa76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa78:	445a      	add	r2, fp
 800aa7a:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa7c:	f89a 3000 	ldrb.w	r3, [sl]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f000 809f 	beq.w	800abc4 <_vfiprintf_r+0x1ec>
 800aa86:	2300      	movs	r3, #0
 800aa88:	f04f 32ff 	mov.w	r2, #4294967295
 800aa8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa90:	f10a 0a01 	add.w	sl, sl, #1
 800aa94:	9304      	str	r3, [sp, #16]
 800aa96:	9307      	str	r3, [sp, #28]
 800aa98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa9c:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa9e:	4654      	mov	r4, sl
 800aaa0:	2205      	movs	r2, #5
 800aaa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaa6:	4853      	ldr	r0, [pc, #332]	@ (800abf4 <_vfiprintf_r+0x21c>)
 800aaa8:	f7f5 fbaa 	bl	8000200 <memchr>
 800aaac:	9a04      	ldr	r2, [sp, #16]
 800aaae:	b9d8      	cbnz	r0, 800aae8 <_vfiprintf_r+0x110>
 800aab0:	06d1      	lsls	r1, r2, #27
 800aab2:	bf44      	itt	mi
 800aab4:	2320      	movmi	r3, #32
 800aab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aaba:	0713      	lsls	r3, r2, #28
 800aabc:	bf44      	itt	mi
 800aabe:	232b      	movmi	r3, #43	@ 0x2b
 800aac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aac4:	f89a 3000 	ldrb.w	r3, [sl]
 800aac8:	2b2a      	cmp	r3, #42	@ 0x2a
 800aaca:	d015      	beq.n	800aaf8 <_vfiprintf_r+0x120>
 800aacc:	9a07      	ldr	r2, [sp, #28]
 800aace:	4654      	mov	r4, sl
 800aad0:	2000      	movs	r0, #0
 800aad2:	f04f 0c0a 	mov.w	ip, #10
 800aad6:	4621      	mov	r1, r4
 800aad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aadc:	3b30      	subs	r3, #48	@ 0x30
 800aade:	2b09      	cmp	r3, #9
 800aae0:	d94b      	bls.n	800ab7a <_vfiprintf_r+0x1a2>
 800aae2:	b1b0      	cbz	r0, 800ab12 <_vfiprintf_r+0x13a>
 800aae4:	9207      	str	r2, [sp, #28]
 800aae6:	e014      	b.n	800ab12 <_vfiprintf_r+0x13a>
 800aae8:	eba0 0308 	sub.w	r3, r0, r8
 800aaec:	fa09 f303 	lsl.w	r3, r9, r3
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	9304      	str	r3, [sp, #16]
 800aaf4:	46a2      	mov	sl, r4
 800aaf6:	e7d2      	b.n	800aa9e <_vfiprintf_r+0xc6>
 800aaf8:	9b03      	ldr	r3, [sp, #12]
 800aafa:	1d19      	adds	r1, r3, #4
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	9103      	str	r1, [sp, #12]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	bfbb      	ittet	lt
 800ab04:	425b      	neglt	r3, r3
 800ab06:	f042 0202 	orrlt.w	r2, r2, #2
 800ab0a:	9307      	strge	r3, [sp, #28]
 800ab0c:	9307      	strlt	r3, [sp, #28]
 800ab0e:	bfb8      	it	lt
 800ab10:	9204      	strlt	r2, [sp, #16]
 800ab12:	7823      	ldrb	r3, [r4, #0]
 800ab14:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab16:	d10a      	bne.n	800ab2e <_vfiprintf_r+0x156>
 800ab18:	7863      	ldrb	r3, [r4, #1]
 800ab1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab1c:	d132      	bne.n	800ab84 <_vfiprintf_r+0x1ac>
 800ab1e:	9b03      	ldr	r3, [sp, #12]
 800ab20:	1d1a      	adds	r2, r3, #4
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	9203      	str	r2, [sp, #12]
 800ab26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ab2a:	3402      	adds	r4, #2
 800ab2c:	9305      	str	r3, [sp, #20]
 800ab2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ac04 <_vfiprintf_r+0x22c>
 800ab32:	7821      	ldrb	r1, [r4, #0]
 800ab34:	2203      	movs	r2, #3
 800ab36:	4650      	mov	r0, sl
 800ab38:	f7f5 fb62 	bl	8000200 <memchr>
 800ab3c:	b138      	cbz	r0, 800ab4e <_vfiprintf_r+0x176>
 800ab3e:	9b04      	ldr	r3, [sp, #16]
 800ab40:	eba0 000a 	sub.w	r0, r0, sl
 800ab44:	2240      	movs	r2, #64	@ 0x40
 800ab46:	4082      	lsls	r2, r0
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	3401      	adds	r4, #1
 800ab4c:	9304      	str	r3, [sp, #16]
 800ab4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab52:	4829      	ldr	r0, [pc, #164]	@ (800abf8 <_vfiprintf_r+0x220>)
 800ab54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ab58:	2206      	movs	r2, #6
 800ab5a:	f7f5 fb51 	bl	8000200 <memchr>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d03f      	beq.n	800abe2 <_vfiprintf_r+0x20a>
 800ab62:	4b26      	ldr	r3, [pc, #152]	@ (800abfc <_vfiprintf_r+0x224>)
 800ab64:	bb1b      	cbnz	r3, 800abae <_vfiprintf_r+0x1d6>
 800ab66:	9b03      	ldr	r3, [sp, #12]
 800ab68:	3307      	adds	r3, #7
 800ab6a:	f023 0307 	bic.w	r3, r3, #7
 800ab6e:	3308      	adds	r3, #8
 800ab70:	9303      	str	r3, [sp, #12]
 800ab72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab74:	443b      	add	r3, r7
 800ab76:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab78:	e76a      	b.n	800aa50 <_vfiprintf_r+0x78>
 800ab7a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab7e:	460c      	mov	r4, r1
 800ab80:	2001      	movs	r0, #1
 800ab82:	e7a8      	b.n	800aad6 <_vfiprintf_r+0xfe>
 800ab84:	2300      	movs	r3, #0
 800ab86:	3401      	adds	r4, #1
 800ab88:	9305      	str	r3, [sp, #20]
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	f04f 0c0a 	mov.w	ip, #10
 800ab90:	4620      	mov	r0, r4
 800ab92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab96:	3a30      	subs	r2, #48	@ 0x30
 800ab98:	2a09      	cmp	r2, #9
 800ab9a:	d903      	bls.n	800aba4 <_vfiprintf_r+0x1cc>
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d0c6      	beq.n	800ab2e <_vfiprintf_r+0x156>
 800aba0:	9105      	str	r1, [sp, #20]
 800aba2:	e7c4      	b.n	800ab2e <_vfiprintf_r+0x156>
 800aba4:	fb0c 2101 	mla	r1, ip, r1, r2
 800aba8:	4604      	mov	r4, r0
 800abaa:	2301      	movs	r3, #1
 800abac:	e7f0      	b.n	800ab90 <_vfiprintf_r+0x1b8>
 800abae:	ab03      	add	r3, sp, #12
 800abb0:	9300      	str	r3, [sp, #0]
 800abb2:	462a      	mov	r2, r5
 800abb4:	4b12      	ldr	r3, [pc, #72]	@ (800ac00 <_vfiprintf_r+0x228>)
 800abb6:	a904      	add	r1, sp, #16
 800abb8:	4630      	mov	r0, r6
 800abba:	f3af 8000 	nop.w
 800abbe:	4607      	mov	r7, r0
 800abc0:	1c78      	adds	r0, r7, #1
 800abc2:	d1d6      	bne.n	800ab72 <_vfiprintf_r+0x19a>
 800abc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abc6:	07d9      	lsls	r1, r3, #31
 800abc8:	d405      	bmi.n	800abd6 <_vfiprintf_r+0x1fe>
 800abca:	89ab      	ldrh	r3, [r5, #12]
 800abcc:	059a      	lsls	r2, r3, #22
 800abce:	d402      	bmi.n	800abd6 <_vfiprintf_r+0x1fe>
 800abd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abd2:	f7ff f9a7 	bl	8009f24 <__retarget_lock_release_recursive>
 800abd6:	89ab      	ldrh	r3, [r5, #12]
 800abd8:	065b      	lsls	r3, r3, #25
 800abda:	f53f af1f 	bmi.w	800aa1c <_vfiprintf_r+0x44>
 800abde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800abe0:	e71e      	b.n	800aa20 <_vfiprintf_r+0x48>
 800abe2:	ab03      	add	r3, sp, #12
 800abe4:	9300      	str	r3, [sp, #0]
 800abe6:	462a      	mov	r2, r5
 800abe8:	4b05      	ldr	r3, [pc, #20]	@ (800ac00 <_vfiprintf_r+0x228>)
 800abea:	a904      	add	r1, sp, #16
 800abec:	4630      	mov	r0, r6
 800abee:	f7ff fc8d 	bl	800a50c <_printf_i>
 800abf2:	e7e4      	b.n	800abbe <_vfiprintf_r+0x1e6>
 800abf4:	0800b1ea 	.word	0x0800b1ea
 800abf8:	0800b1f4 	.word	0x0800b1f4
 800abfc:	00000000 	.word	0x00000000
 800ac00:	0800a9b5 	.word	0x0800a9b5
 800ac04:	0800b1f0 	.word	0x0800b1f0

0800ac08 <__swbuf_r>:
 800ac08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac0a:	460e      	mov	r6, r1
 800ac0c:	4614      	mov	r4, r2
 800ac0e:	4605      	mov	r5, r0
 800ac10:	b118      	cbz	r0, 800ac1a <__swbuf_r+0x12>
 800ac12:	6a03      	ldr	r3, [r0, #32]
 800ac14:	b90b      	cbnz	r3, 800ac1a <__swbuf_r+0x12>
 800ac16:	f7fe ffef 	bl	8009bf8 <__sinit>
 800ac1a:	69a3      	ldr	r3, [r4, #24]
 800ac1c:	60a3      	str	r3, [r4, #8]
 800ac1e:	89a3      	ldrh	r3, [r4, #12]
 800ac20:	071a      	lsls	r2, r3, #28
 800ac22:	d501      	bpl.n	800ac28 <__swbuf_r+0x20>
 800ac24:	6923      	ldr	r3, [r4, #16]
 800ac26:	b943      	cbnz	r3, 800ac3a <__swbuf_r+0x32>
 800ac28:	4621      	mov	r1, r4
 800ac2a:	4628      	mov	r0, r5
 800ac2c:	f000 f82a 	bl	800ac84 <__swsetup_r>
 800ac30:	b118      	cbz	r0, 800ac3a <__swbuf_r+0x32>
 800ac32:	f04f 37ff 	mov.w	r7, #4294967295
 800ac36:	4638      	mov	r0, r7
 800ac38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac3a:	6823      	ldr	r3, [r4, #0]
 800ac3c:	6922      	ldr	r2, [r4, #16]
 800ac3e:	1a98      	subs	r0, r3, r2
 800ac40:	6963      	ldr	r3, [r4, #20]
 800ac42:	b2f6      	uxtb	r6, r6
 800ac44:	4283      	cmp	r3, r0
 800ac46:	4637      	mov	r7, r6
 800ac48:	dc05      	bgt.n	800ac56 <__swbuf_r+0x4e>
 800ac4a:	4621      	mov	r1, r4
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	f7ff fe01 	bl	800a854 <_fflush_r>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	d1ed      	bne.n	800ac32 <__swbuf_r+0x2a>
 800ac56:	68a3      	ldr	r3, [r4, #8]
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	60a3      	str	r3, [r4, #8]
 800ac5c:	6823      	ldr	r3, [r4, #0]
 800ac5e:	1c5a      	adds	r2, r3, #1
 800ac60:	6022      	str	r2, [r4, #0]
 800ac62:	701e      	strb	r6, [r3, #0]
 800ac64:	6962      	ldr	r2, [r4, #20]
 800ac66:	1c43      	adds	r3, r0, #1
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d004      	beq.n	800ac76 <__swbuf_r+0x6e>
 800ac6c:	89a3      	ldrh	r3, [r4, #12]
 800ac6e:	07db      	lsls	r3, r3, #31
 800ac70:	d5e1      	bpl.n	800ac36 <__swbuf_r+0x2e>
 800ac72:	2e0a      	cmp	r6, #10
 800ac74:	d1df      	bne.n	800ac36 <__swbuf_r+0x2e>
 800ac76:	4621      	mov	r1, r4
 800ac78:	4628      	mov	r0, r5
 800ac7a:	f7ff fdeb 	bl	800a854 <_fflush_r>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d0d9      	beq.n	800ac36 <__swbuf_r+0x2e>
 800ac82:	e7d6      	b.n	800ac32 <__swbuf_r+0x2a>

0800ac84 <__swsetup_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4b29      	ldr	r3, [pc, #164]	@ (800ad2c <__swsetup_r+0xa8>)
 800ac88:	4605      	mov	r5, r0
 800ac8a:	6818      	ldr	r0, [r3, #0]
 800ac8c:	460c      	mov	r4, r1
 800ac8e:	b118      	cbz	r0, 800ac98 <__swsetup_r+0x14>
 800ac90:	6a03      	ldr	r3, [r0, #32]
 800ac92:	b90b      	cbnz	r3, 800ac98 <__swsetup_r+0x14>
 800ac94:	f7fe ffb0 	bl	8009bf8 <__sinit>
 800ac98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac9c:	0719      	lsls	r1, r3, #28
 800ac9e:	d422      	bmi.n	800ace6 <__swsetup_r+0x62>
 800aca0:	06da      	lsls	r2, r3, #27
 800aca2:	d407      	bmi.n	800acb4 <__swsetup_r+0x30>
 800aca4:	2209      	movs	r2, #9
 800aca6:	602a      	str	r2, [r5, #0]
 800aca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acac:	81a3      	strh	r3, [r4, #12]
 800acae:	f04f 30ff 	mov.w	r0, #4294967295
 800acb2:	e033      	b.n	800ad1c <__swsetup_r+0x98>
 800acb4:	0758      	lsls	r0, r3, #29
 800acb6:	d512      	bpl.n	800acde <__swsetup_r+0x5a>
 800acb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800acba:	b141      	cbz	r1, 800acce <__swsetup_r+0x4a>
 800acbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800acc0:	4299      	cmp	r1, r3
 800acc2:	d002      	beq.n	800acca <__swsetup_r+0x46>
 800acc4:	4628      	mov	r0, r5
 800acc6:	f7ff f95b 	bl	8009f80 <_free_r>
 800acca:	2300      	movs	r3, #0
 800accc:	6363      	str	r3, [r4, #52]	@ 0x34
 800acce:	89a3      	ldrh	r3, [r4, #12]
 800acd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800acd4:	81a3      	strh	r3, [r4, #12]
 800acd6:	2300      	movs	r3, #0
 800acd8:	6063      	str	r3, [r4, #4]
 800acda:	6923      	ldr	r3, [r4, #16]
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	89a3      	ldrh	r3, [r4, #12]
 800ace0:	f043 0308 	orr.w	r3, r3, #8
 800ace4:	81a3      	strh	r3, [r4, #12]
 800ace6:	6923      	ldr	r3, [r4, #16]
 800ace8:	b94b      	cbnz	r3, 800acfe <__swsetup_r+0x7a>
 800acea:	89a3      	ldrh	r3, [r4, #12]
 800acec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800acf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800acf4:	d003      	beq.n	800acfe <__swsetup_r+0x7a>
 800acf6:	4621      	mov	r1, r4
 800acf8:	4628      	mov	r0, r5
 800acfa:	f000 f88b 	bl	800ae14 <__smakebuf_r>
 800acfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad02:	f013 0201 	ands.w	r2, r3, #1
 800ad06:	d00a      	beq.n	800ad1e <__swsetup_r+0x9a>
 800ad08:	2200      	movs	r2, #0
 800ad0a:	60a2      	str	r2, [r4, #8]
 800ad0c:	6962      	ldr	r2, [r4, #20]
 800ad0e:	4252      	negs	r2, r2
 800ad10:	61a2      	str	r2, [r4, #24]
 800ad12:	6922      	ldr	r2, [r4, #16]
 800ad14:	b942      	cbnz	r2, 800ad28 <__swsetup_r+0xa4>
 800ad16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad1a:	d1c5      	bne.n	800aca8 <__swsetup_r+0x24>
 800ad1c:	bd38      	pop	{r3, r4, r5, pc}
 800ad1e:	0799      	lsls	r1, r3, #30
 800ad20:	bf58      	it	pl
 800ad22:	6962      	ldrpl	r2, [r4, #20]
 800ad24:	60a2      	str	r2, [r4, #8]
 800ad26:	e7f4      	b.n	800ad12 <__swsetup_r+0x8e>
 800ad28:	2000      	movs	r0, #0
 800ad2a:	e7f7      	b.n	800ad1c <__swsetup_r+0x98>
 800ad2c:	20000134 	.word	0x20000134

0800ad30 <_raise_r>:
 800ad30:	291f      	cmp	r1, #31
 800ad32:	b538      	push	{r3, r4, r5, lr}
 800ad34:	4605      	mov	r5, r0
 800ad36:	460c      	mov	r4, r1
 800ad38:	d904      	bls.n	800ad44 <_raise_r+0x14>
 800ad3a:	2316      	movs	r3, #22
 800ad3c:	6003      	str	r3, [r0, #0]
 800ad3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad42:	bd38      	pop	{r3, r4, r5, pc}
 800ad44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ad46:	b112      	cbz	r2, 800ad4e <_raise_r+0x1e>
 800ad48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ad4c:	b94b      	cbnz	r3, 800ad62 <_raise_r+0x32>
 800ad4e:	4628      	mov	r0, r5
 800ad50:	f000 f830 	bl	800adb4 <_getpid_r>
 800ad54:	4622      	mov	r2, r4
 800ad56:	4601      	mov	r1, r0
 800ad58:	4628      	mov	r0, r5
 800ad5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad5e:	f000 b817 	b.w	800ad90 <_kill_r>
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d00a      	beq.n	800ad7c <_raise_r+0x4c>
 800ad66:	1c59      	adds	r1, r3, #1
 800ad68:	d103      	bne.n	800ad72 <_raise_r+0x42>
 800ad6a:	2316      	movs	r3, #22
 800ad6c:	6003      	str	r3, [r0, #0]
 800ad6e:	2001      	movs	r0, #1
 800ad70:	e7e7      	b.n	800ad42 <_raise_r+0x12>
 800ad72:	2100      	movs	r1, #0
 800ad74:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ad78:	4620      	mov	r0, r4
 800ad7a:	4798      	blx	r3
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	e7e0      	b.n	800ad42 <_raise_r+0x12>

0800ad80 <raise>:
 800ad80:	4b02      	ldr	r3, [pc, #8]	@ (800ad8c <raise+0xc>)
 800ad82:	4601      	mov	r1, r0
 800ad84:	6818      	ldr	r0, [r3, #0]
 800ad86:	f7ff bfd3 	b.w	800ad30 <_raise_r>
 800ad8a:	bf00      	nop
 800ad8c:	20000134 	.word	0x20000134

0800ad90 <_kill_r>:
 800ad90:	b538      	push	{r3, r4, r5, lr}
 800ad92:	4d07      	ldr	r5, [pc, #28]	@ (800adb0 <_kill_r+0x20>)
 800ad94:	2300      	movs	r3, #0
 800ad96:	4604      	mov	r4, r0
 800ad98:	4608      	mov	r0, r1
 800ad9a:	4611      	mov	r1, r2
 800ad9c:	602b      	str	r3, [r5, #0]
 800ad9e:	f7f6 fbe3 	bl	8001568 <_kill>
 800ada2:	1c43      	adds	r3, r0, #1
 800ada4:	d102      	bne.n	800adac <_kill_r+0x1c>
 800ada6:	682b      	ldr	r3, [r5, #0]
 800ada8:	b103      	cbz	r3, 800adac <_kill_r+0x1c>
 800adaa:	6023      	str	r3, [r4, #0]
 800adac:	bd38      	pop	{r3, r4, r5, pc}
 800adae:	bf00      	nop
 800adb0:	2000485c 	.word	0x2000485c

0800adb4 <_getpid_r>:
 800adb4:	f7f6 bbd0 	b.w	8001558 <_getpid>

0800adb8 <_malloc_usable_size_r>:
 800adb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adbc:	1f18      	subs	r0, r3, #4
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	bfbc      	itt	lt
 800adc2:	580b      	ldrlt	r3, [r1, r0]
 800adc4:	18c0      	addlt	r0, r0, r3
 800adc6:	4770      	bx	lr

0800adc8 <__swhatbuf_r>:
 800adc8:	b570      	push	{r4, r5, r6, lr}
 800adca:	460c      	mov	r4, r1
 800adcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800add0:	2900      	cmp	r1, #0
 800add2:	b096      	sub	sp, #88	@ 0x58
 800add4:	4615      	mov	r5, r2
 800add6:	461e      	mov	r6, r3
 800add8:	da0d      	bge.n	800adf6 <__swhatbuf_r+0x2e>
 800adda:	89a3      	ldrh	r3, [r4, #12]
 800addc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ade0:	f04f 0100 	mov.w	r1, #0
 800ade4:	bf14      	ite	ne
 800ade6:	2340      	movne	r3, #64	@ 0x40
 800ade8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800adec:	2000      	movs	r0, #0
 800adee:	6031      	str	r1, [r6, #0]
 800adf0:	602b      	str	r3, [r5, #0]
 800adf2:	b016      	add	sp, #88	@ 0x58
 800adf4:	bd70      	pop	{r4, r5, r6, pc}
 800adf6:	466a      	mov	r2, sp
 800adf8:	f000 f848 	bl	800ae8c <_fstat_r>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	dbec      	blt.n	800adda <__swhatbuf_r+0x12>
 800ae00:	9901      	ldr	r1, [sp, #4]
 800ae02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ae06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ae0a:	4259      	negs	r1, r3
 800ae0c:	4159      	adcs	r1, r3
 800ae0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae12:	e7eb      	b.n	800adec <__swhatbuf_r+0x24>

0800ae14 <__smakebuf_r>:
 800ae14:	898b      	ldrh	r3, [r1, #12]
 800ae16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae18:	079d      	lsls	r5, r3, #30
 800ae1a:	4606      	mov	r6, r0
 800ae1c:	460c      	mov	r4, r1
 800ae1e:	d507      	bpl.n	800ae30 <__smakebuf_r+0x1c>
 800ae20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ae24:	6023      	str	r3, [r4, #0]
 800ae26:	6123      	str	r3, [r4, #16]
 800ae28:	2301      	movs	r3, #1
 800ae2a:	6163      	str	r3, [r4, #20]
 800ae2c:	b003      	add	sp, #12
 800ae2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae30:	ab01      	add	r3, sp, #4
 800ae32:	466a      	mov	r2, sp
 800ae34:	f7ff ffc8 	bl	800adc8 <__swhatbuf_r>
 800ae38:	9f00      	ldr	r7, [sp, #0]
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	4639      	mov	r1, r7
 800ae3e:	4630      	mov	r0, r6
 800ae40:	f7ff f912 	bl	800a068 <_malloc_r>
 800ae44:	b948      	cbnz	r0, 800ae5a <__smakebuf_r+0x46>
 800ae46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae4a:	059a      	lsls	r2, r3, #22
 800ae4c:	d4ee      	bmi.n	800ae2c <__smakebuf_r+0x18>
 800ae4e:	f023 0303 	bic.w	r3, r3, #3
 800ae52:	f043 0302 	orr.w	r3, r3, #2
 800ae56:	81a3      	strh	r3, [r4, #12]
 800ae58:	e7e2      	b.n	800ae20 <__smakebuf_r+0xc>
 800ae5a:	89a3      	ldrh	r3, [r4, #12]
 800ae5c:	6020      	str	r0, [r4, #0]
 800ae5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae62:	81a3      	strh	r3, [r4, #12]
 800ae64:	9b01      	ldr	r3, [sp, #4]
 800ae66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ae6a:	b15b      	cbz	r3, 800ae84 <__smakebuf_r+0x70>
 800ae6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae70:	4630      	mov	r0, r6
 800ae72:	f000 f81d 	bl	800aeb0 <_isatty_r>
 800ae76:	b128      	cbz	r0, 800ae84 <__smakebuf_r+0x70>
 800ae78:	89a3      	ldrh	r3, [r4, #12]
 800ae7a:	f023 0303 	bic.w	r3, r3, #3
 800ae7e:	f043 0301 	orr.w	r3, r3, #1
 800ae82:	81a3      	strh	r3, [r4, #12]
 800ae84:	89a3      	ldrh	r3, [r4, #12]
 800ae86:	431d      	orrs	r5, r3
 800ae88:	81a5      	strh	r5, [r4, #12]
 800ae8a:	e7cf      	b.n	800ae2c <__smakebuf_r+0x18>

0800ae8c <_fstat_r>:
 800ae8c:	b538      	push	{r3, r4, r5, lr}
 800ae8e:	4d07      	ldr	r5, [pc, #28]	@ (800aeac <_fstat_r+0x20>)
 800ae90:	2300      	movs	r3, #0
 800ae92:	4604      	mov	r4, r0
 800ae94:	4608      	mov	r0, r1
 800ae96:	4611      	mov	r1, r2
 800ae98:	602b      	str	r3, [r5, #0]
 800ae9a:	f7f6 fbc5 	bl	8001628 <_fstat>
 800ae9e:	1c43      	adds	r3, r0, #1
 800aea0:	d102      	bne.n	800aea8 <_fstat_r+0x1c>
 800aea2:	682b      	ldr	r3, [r5, #0]
 800aea4:	b103      	cbz	r3, 800aea8 <_fstat_r+0x1c>
 800aea6:	6023      	str	r3, [r4, #0]
 800aea8:	bd38      	pop	{r3, r4, r5, pc}
 800aeaa:	bf00      	nop
 800aeac:	2000485c 	.word	0x2000485c

0800aeb0 <_isatty_r>:
 800aeb0:	b538      	push	{r3, r4, r5, lr}
 800aeb2:	4d06      	ldr	r5, [pc, #24]	@ (800aecc <_isatty_r+0x1c>)
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	4608      	mov	r0, r1
 800aeba:	602b      	str	r3, [r5, #0]
 800aebc:	f7f6 fbc4 	bl	8001648 <_isatty>
 800aec0:	1c43      	adds	r3, r0, #1
 800aec2:	d102      	bne.n	800aeca <_isatty_r+0x1a>
 800aec4:	682b      	ldr	r3, [r5, #0]
 800aec6:	b103      	cbz	r3, 800aeca <_isatty_r+0x1a>
 800aec8:	6023      	str	r3, [r4, #0]
 800aeca:	bd38      	pop	{r3, r4, r5, pc}
 800aecc:	2000485c 	.word	0x2000485c

0800aed0 <_init>:
 800aed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed2:	bf00      	nop
 800aed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aed6:	bc08      	pop	{r3}
 800aed8:	469e      	mov	lr, r3
 800aeda:	4770      	bx	lr

0800aedc <_fini>:
 800aedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aede:	bf00      	nop
 800aee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aee2:	bc08      	pop	{r3}
 800aee4:	469e      	mov	lr, r3
 800aee6:	4770      	bx	lr
