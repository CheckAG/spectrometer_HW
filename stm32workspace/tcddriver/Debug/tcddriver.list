
tcddriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e48  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008fdc  08008fdc  00009fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800903c  0800903c  0000b0fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800903c  0800903c  0000a03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009044  08009044  0000b0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009044  08009044  0000a044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009048  08009048  0000a048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  0800904c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044ac  200000fc  08009148  0000b0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045a8  08009148  0000b5a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001434b  00000000  00000000  0000b12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035a0  00000000  00000000  0001f477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  00022a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e02  00000000  00000000  00023c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a014  00000000  00000000  00024a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001742c  00000000  00000000  0003ea86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ab01  00000000  00000000  00055eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f09b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c90  00000000  00000000  000f09f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000f5688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008fc4 	.word	0x08008fc4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08008fc4 	.word	0x08008fc4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fd4a 	bl	8000f60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f838 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 fb04 	bl	8000adc <MX_GPIO_Init>
  MX_DMA_Init();
 80004d4:	f000 fae2 	bl	8000a9c <MX_DMA_Init>
  MX_TIM2_Init();
 80004d8:	f000 f8f0 	bl	80006bc <MX_TIM2_Init>
  MX_TIM3_Init();
 80004dc:	f000 f966 	bl	80007ac <MX_TIM3_Init>
  MX_TIM4_Init();
 80004e0:	f000 f9da 	bl	8000898 <MX_TIM4_Init>
  MX_TIM5_Init();
 80004e4:	f000 fa4a 	bl	800097c <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 80004e8:	f008 f840 	bl	800856c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80004ec:	f000 f894 	bl	8000618 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //ICG
 80004f0:	2100      	movs	r1, #0
 80004f2:	480d      	ldr	r0, [pc, #52]	@ (8000528 <main+0x64>)
 80004f4:	f003 fee0 	bl	80042b8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay
 80004f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000528 <main+0x64>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2242      	movs	r2, #66	@ 0x42
 80004fe:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
 8000500:	2100      	movs	r1, #0
 8000502:	480a      	ldr	r0, [pc, #40]	@ (800052c <main+0x68>)
 8000504:	f003 fed8 	bl	80042b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
 8000508:	210c      	movs	r1, #12
 800050a:	4809      	ldr	r0, [pc, #36]	@ (8000530 <main+0x6c>)
 800050c:	f003 fed4 	bl	80042b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH
 8000510:	2108      	movs	r1, #8
 8000512:	4808      	ldr	r0, [pc, #32]	@ (8000534 <main+0x70>)
 8000514:	f003 fed0 	bl	80042b8 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) CCDPixelBuffer, CCDBuffer);
 8000518:	f241 7270 	movw	r2, #6000	@ 0x1770
 800051c:	4906      	ldr	r1, [pc, #24]	@ (8000538 <main+0x74>)
 800051e:	4807      	ldr	r0, [pc, #28]	@ (800053c <main+0x78>)
 8000520:	f000 fdf8 	bl	8001114 <HAL_ADC_Start_DMA>
 8000524:	e7f8      	b.n	8000518 <main+0x54>
 8000526:	bf00      	nop
 8000528:	200001c0 	.word	0x200001c0
 800052c:	20000208 	.word	0x20000208
 8000530:	20000250 	.word	0x20000250
 8000534:	20000298 	.word	0x20000298
 8000538:	200002e0 	.word	0x200002e0
 800053c:	20000118 	.word	0x20000118

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	@ 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	@ 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f008 fd0c 	bl	8008f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b29      	ldr	r3, [pc, #164]	@ (8000610 <SystemClock_Config+0xd0>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056c:	4a28      	ldr	r2, [pc, #160]	@ (8000610 <SystemClock_Config+0xd0>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	@ 0x40
 8000574:	4b26      	ldr	r3, [pc, #152]	@ (8000610 <SystemClock_Config+0xd0>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b23      	ldr	r3, [pc, #140]	@ (8000614 <SystemClock_Config+0xd4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800058c:	4a21      	ldr	r2, [pc, #132]	@ (8000614 <SystemClock_Config+0xd4>)
 800058e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b1f      	ldr	r3, [pc, #124]	@ (8000614 <SystemClock_Config+0xd4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a0:	2301      	movs	r3, #1
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005b4:	2319      	movs	r3, #25
 80005b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005be:	2304      	movs	r3, #4
 80005c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c2:	2307      	movs	r3, #7
 80005c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 f99c 	bl	8003908 <HAL_RCC_OscConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005d6:	f000 fab9 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	230f      	movs	r3, #15
 80005dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005de:	2302      	movs	r3, #2
 80005e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2102      	movs	r1, #2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fbfe 	bl	8003df8 <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000602:	f000 faa3 	bl	8000b4c <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	@ 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061e:	463b      	mov	r3, r7
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800062a:	4b22      	ldr	r3, [pc, #136]	@ (80006b4 <MX_ADC1_Init+0x9c>)
 800062c:	4a22      	ldr	r2, [pc, #136]	@ (80006b8 <MX_ADC1_Init+0xa0>)
 800062e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000630:	4b20      	ldr	r3, [pc, #128]	@ (80006b4 <MX_ADC1_Init+0x9c>)
 8000632:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000636:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000638:	4b1e      	ldr	r3, [pc, #120]	@ (80006b4 <MX_ADC1_Init+0x9c>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800063e:	4b1d      	ldr	r3, [pc, #116]	@ (80006b4 <MX_ADC1_Init+0x9c>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000644:	4b1b      	ldr	r3, [pc, #108]	@ (80006b4 <MX_ADC1_Init+0x9c>)
 8000646:	2200      	movs	r2, #0
 8000648:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <MX_ADC1_Init+0x9c>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000652:	4b18      	ldr	r3, [pc, #96]	@ (80006b4 <MX_ADC1_Init+0x9c>)
 8000654:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000658:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 800065a:	4b16      	ldr	r3, [pc, #88]	@ (80006b4 <MX_ADC1_Init+0x9c>)
 800065c:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 8000660:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000662:	4b14      	ldr	r3, [pc, #80]	@ (80006b4 <MX_ADC1_Init+0x9c>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000668:	4b12      	ldr	r3, [pc, #72]	@ (80006b4 <MX_ADC1_Init+0x9c>)
 800066a:	2201      	movs	r2, #1
 800066c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800066e:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <MX_ADC1_Init+0x9c>)
 8000670:	2201      	movs	r2, #1
 8000672:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000676:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <MX_ADC1_Init+0x9c>)
 8000678:	2201      	movs	r2, #1
 800067a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800067c:	480d      	ldr	r0, [pc, #52]	@ (80006b4 <MX_ADC1_Init+0x9c>)
 800067e:	f000 fd05 	bl	800108c <HAL_ADC_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000688:	f000 fa60 	bl	8000b4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800068c:	2303      	movs	r3, #3
 800068e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000690:	2301      	movs	r3, #1
 8000692:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	4619      	mov	r1, r3
 800069c:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <MX_ADC1_Init+0x9c>)
 800069e:	f000 fe3d 	bl	800131c <HAL_ADC_ConfigChannel>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80006a8:	f000 fa50 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000118 	.word	0x20000118
 80006b8:	40012000 	.word	0x40012000

080006bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08e      	sub	sp, #56	@ 0x38
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
 80006e8:	615a      	str	r2, [r3, #20]
 80006ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006ec:	4b2d      	ldr	r3, [pc, #180]	@ (80007a4 <MX_TIM2_Init+0xe8>)
 80006ee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006f4:	4b2b      	ldr	r3, [pc, #172]	@ (80007a4 <MX_TIM2_Init+0xe8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fa:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <MX_TIM2_Init+0xe8>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 525000-1;
 8000700:	4b28      	ldr	r3, [pc, #160]	@ (80007a4 <MX_TIM2_Init+0xe8>)
 8000702:	4a29      	ldr	r2, [pc, #164]	@ (80007a8 <MX_TIM2_Init+0xec>)
 8000704:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000706:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <MX_TIM2_Init+0xe8>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070c:	4b25      	ldr	r3, [pc, #148]	@ (80007a4 <MX_TIM2_Init+0xe8>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000712:	4824      	ldr	r0, [pc, #144]	@ (80007a4 <MX_TIM2_Init+0xe8>)
 8000714:	f003 fd28 	bl	8004168 <HAL_TIM_Base_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800071e:	f000 fa15 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000726:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000728:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800072c:	4619      	mov	r1, r3
 800072e:	481d      	ldr	r0, [pc, #116]	@ (80007a4 <MX_TIM2_Init+0xe8>)
 8000730:	f003 ff34 	bl	800459c <HAL_TIM_ConfigClockSource>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800073a:	f000 fa07 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800073e:	4819      	ldr	r0, [pc, #100]	@ (80007a4 <MX_TIM2_Init+0xe8>)
 8000740:	f003 fd61 	bl	8004206 <HAL_TIM_PWM_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800074a:	f000 f9ff 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800074e:	2310      	movs	r3, #16
 8000750:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000752:	2380      	movs	r3, #128	@ 0x80
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	4619      	mov	r1, r3
 800075c:	4811      	ldr	r0, [pc, #68]	@ (80007a4 <MX_TIM2_Init+0xe8>)
 800075e:	f004 fb8f 	bl	8004e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000768:	f000 f9f0 	bl	8000b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800076c:	2360      	movs	r3, #96	@ 0x60
 800076e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 8820-1;
 8000770:	f242 2373 	movw	r3, #8819	@ 0x2273
 8000774:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	4619      	mov	r1, r3
 8000784:	4807      	ldr	r0, [pc, #28]	@ (80007a4 <MX_TIM2_Init+0xe8>)
 8000786:	f003 fe47 	bl	8004418 <HAL_TIM_PWM_ConfigChannel>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000790:	f000 f9dc 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000794:	4803      	ldr	r0, [pc, #12]	@ (80007a4 <MX_TIM2_Init+0xe8>)
 8000796:	f000 fadf 	bl	8000d58 <HAL_TIM_MspPostInit>

}
 800079a:	bf00      	nop
 800079c:	3738      	adds	r7, #56	@ 0x38
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200001c0 	.word	0x200001c0
 80007a8:	000802c7 	.word	0x000802c7

080007ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08e      	sub	sp, #56	@ 0x38
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c0:	f107 0320 	add.w	r3, r7, #32
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
 80007d8:	615a      	str	r2, [r3, #20]
 80007da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000890 <MX_TIM3_Init+0xe4>)
 80007de:	4a2d      	ldr	r2, [pc, #180]	@ (8000894 <MX_TIM3_Init+0xe8>)
 80007e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80007e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <MX_TIM3_Init+0xe4>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e8:	4b29      	ldr	r3, [pc, #164]	@ (8000890 <MX_TIM3_Init+0xe4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168-1;
 80007ee:	4b28      	ldr	r3, [pc, #160]	@ (8000890 <MX_TIM3_Init+0xe4>)
 80007f0:	22a7      	movs	r2, #167	@ 0xa7
 80007f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f4:	4b26      	ldr	r3, [pc, #152]	@ (8000890 <MX_TIM3_Init+0xe4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fa:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <MX_TIM3_Init+0xe4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000800:	4823      	ldr	r0, [pc, #140]	@ (8000890 <MX_TIM3_Init+0xe4>)
 8000802:	f003 fcb1 	bl	8004168 <HAL_TIM_Base_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800080c:	f000 f99e 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000814:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000816:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800081a:	4619      	mov	r1, r3
 800081c:	481c      	ldr	r0, [pc, #112]	@ (8000890 <MX_TIM3_Init+0xe4>)
 800081e:	f003 febd 	bl	800459c <HAL_TIM_ConfigClockSource>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000828:	f000 f990 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800082c:	4818      	ldr	r0, [pc, #96]	@ (8000890 <MX_TIM3_Init+0xe4>)
 800082e:	f003 fcea 	bl	8004206 <HAL_TIM_PWM_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000838:	f000 f988 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083c:	2300      	movs	r3, #0
 800083e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	4619      	mov	r1, r3
 800084a:	4811      	ldr	r0, [pc, #68]	@ (8000890 <MX_TIM3_Init+0xe4>)
 800084c:	f004 fb18 	bl	8004e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000856:	f000 f979 	bl	8000b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085a:	2360      	movs	r3, #96	@ 0x60
 800085c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 84-1;
 800085e:	2353      	movs	r3, #83	@ 0x53
 8000860:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	4619      	mov	r1, r3
 8000870:	4807      	ldr	r0, [pc, #28]	@ (8000890 <MX_TIM3_Init+0xe4>)
 8000872:	f003 fdd1 	bl	8004418 <HAL_TIM_PWM_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800087c:	f000 f966 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000880:	4803      	ldr	r0, [pc, #12]	@ (8000890 <MX_TIM3_Init+0xe4>)
 8000882:	f000 fa69 	bl	8000d58 <HAL_TIM_MspPostInit>

}
 8000886:	bf00      	nop
 8000888:	3738      	adds	r7, #56	@ 0x38
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000208 	.word	0x20000208
 8000894:	40000400 	.word	0x40000400

08000898 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08e      	sub	sp, #56	@ 0x38
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ac:	f107 0320 	add.w	r3, r7, #32
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
 80008c4:	615a      	str	r2, [r3, #20]
 80008c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008c8:	4b2a      	ldr	r3, [pc, #168]	@ (8000974 <MX_TIM4_Init+0xdc>)
 80008ca:	4a2b      	ldr	r2, [pc, #172]	@ (8000978 <MX_TIM4_Init+0xe0>)
 80008cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008ce:	4b29      	ldr	r3, [pc, #164]	@ (8000974 <MX_TIM4_Init+0xdc>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d4:	4b27      	ldr	r3, [pc, #156]	@ (8000974 <MX_TIM4_Init+0xdc>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 168-1;
 80008da:	4b26      	ldr	r3, [pc, #152]	@ (8000974 <MX_TIM4_Init+0xdc>)
 80008dc:	22a7      	movs	r2, #167	@ 0xa7
 80008de:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e0:	4b24      	ldr	r3, [pc, #144]	@ (8000974 <MX_TIM4_Init+0xdc>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e6:	4b23      	ldr	r3, [pc, #140]	@ (8000974 <MX_TIM4_Init+0xdc>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008ec:	4821      	ldr	r0, [pc, #132]	@ (8000974 <MX_TIM4_Init+0xdc>)
 80008ee:	f003 fc3b 	bl	8004168 <HAL_TIM_Base_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80008f8:	f000 f928 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000902:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000906:	4619      	mov	r1, r3
 8000908:	481a      	ldr	r0, [pc, #104]	@ (8000974 <MX_TIM4_Init+0xdc>)
 800090a:	f003 fe47 	bl	800459c <HAL_TIM_ConfigClockSource>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000914:	f000 f91a 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000918:	4816      	ldr	r0, [pc, #88]	@ (8000974 <MX_TIM4_Init+0xdc>)
 800091a:	f003 fc74 	bl	8004206 <HAL_TIM_PWM_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000924:	f000 f912 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000930:	f107 0320 	add.w	r3, r7, #32
 8000934:	4619      	mov	r1, r3
 8000936:	480f      	ldr	r0, [pc, #60]	@ (8000974 <MX_TIM4_Init+0xdc>)
 8000938:	f004 faa2 	bl	8004e80 <HAL_TIMEx_MasterConfigSynchronization>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000942:	f000 f903 	bl	8000b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000946:	2360      	movs	r3, #96	@ 0x60
 8000948:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 42-1;
 800094a:	2329      	movs	r3, #41	@ 0x29
 800094c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	220c      	movs	r2, #12
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	@ (8000974 <MX_TIM4_Init+0xdc>)
 800095e:	f003 fd5b 	bl	8004418 <HAL_TIM_PWM_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000968:	f000 f8f0 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3738      	adds	r7, #56	@ 0x38
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000250 	.word	0x20000250
 8000978:	40000800 	.word	0x40000800

0800097c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b092      	sub	sp, #72	@ 0x48
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000982:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009aa:	463b      	mov	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
 80009b8:	615a      	str	r2, [r3, #20]
 80009ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80009bc:	4b34      	ldr	r3, [pc, #208]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009be:	4a35      	ldr	r2, [pc, #212]	@ (8000a94 <MX_TIM5_Init+0x118>)
 80009c0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80009c2:	4b33      	ldr	r3, [pc, #204]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b31      	ldr	r3, [pc, #196]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 525000-1;
 80009ce:	4b30      	ldr	r3, [pc, #192]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009d0:	4a31      	ldr	r2, [pc, #196]	@ (8000a98 <MX_TIM5_Init+0x11c>)
 80009d2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009da:	4b2d      	ldr	r3, [pc, #180]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80009e0:	482b      	ldr	r0, [pc, #172]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009e2:	f003 fbc1 	bl	8004168 <HAL_TIM_Base_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80009ec:	f000 f8ae 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80009f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009fa:	4619      	mov	r1, r3
 80009fc:	4824      	ldr	r0, [pc, #144]	@ (8000a90 <MX_TIM5_Init+0x114>)
 80009fe:	f003 fdcd 	bl	800459c <HAL_TIM_ConfigClockSource>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000a08:	f000 f8a0 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000a0c:	4820      	ldr	r0, [pc, #128]	@ (8000a90 <MX_TIM5_Init+0x114>)
 8000a0e:	f003 fbfa 	bl	8004206 <HAL_TIM_PWM_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000a18:	f000 f898 	bl	8000b4c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a1c:	2306      	movs	r3, #6
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000a24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4819      	ldr	r0, [pc, #100]	@ (8000a90 <MX_TIM5_Init+0x114>)
 8000a2c:	f003 fe7d 	bl	800472a <HAL_TIM_SlaveConfigSynchro>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM5_Init+0xbe>
  {
    Error_Handler();
 8000a36:	f000 f889 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000a3e:	2380      	movs	r3, #128	@ 0x80
 8000a40:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4811      	ldr	r0, [pc, #68]	@ (8000a90 <MX_TIM5_Init+0x114>)
 8000a4a:	f004 fa19 	bl	8004e80 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8000a54:	f000 f87a 	bl	8000b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a58:	2360      	movs	r3, #96	@ 0x60
 8000a5a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 8347-1;
 8000a5c:	f242 039a 	movw	r3, #8346	@ 0x209a
 8000a60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000a62:	2302      	movs	r3, #2
 8000a64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	2208      	movs	r2, #8
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4807      	ldr	r0, [pc, #28]	@ (8000a90 <MX_TIM5_Init+0x114>)
 8000a72:	f003 fcd1 	bl	8004418 <HAL_TIM_PWM_ConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM5_Init+0x104>
  {
    Error_Handler();
 8000a7c:	f000 f866 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000a80:	4803      	ldr	r0, [pc, #12]	@ (8000a90 <MX_TIM5_Init+0x114>)
 8000a82:	f000 f969 	bl	8000d58 <HAL_TIM_MspPostInit>

}
 8000a86:	bf00      	nop
 8000a88:	3748      	adds	r7, #72	@ 0x48
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000298 	.word	0x20000298
 8000a94:	40000c00 	.word	0x40000c00
 8000a98:	000802c7 	.word	0x000802c7

08000a9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <MX_DMA_Init+0x3c>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	@ (8000ad8 <MX_DMA_Init+0x3c>)
 8000aac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <MX_DMA_Init+0x3c>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2038      	movs	r0, #56	@ 0x38
 8000ac4:	f000 ffa5 	bl	8001a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ac8:	2038      	movs	r0, #56	@ 0x38
 8000aca:	f000 ffbe 	bl	8001a4a <HAL_NVIC_EnableIRQ>

}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800

08000adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <MX_GPIO_Init+0x4c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	4a0f      	ldr	r2, [pc, #60]	@ (8000b28 <MX_GPIO_Init+0x4c>)
 8000aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b28 <MX_GPIO_Init+0x4c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <MX_GPIO_Init+0x4c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	4a08      	ldr	r2, [pc, #32]	@ (8000b28 <MX_GPIO_Init+0x4c>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <MX_GPIO_Init+0x4c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800

08000b2c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
CDC_Transmit_FS((uint8_t*) CCDPixelBuffer, CCDBuffer);
 8000b34:	f241 7170 	movw	r1, #6000	@ 0x1770
 8000b38:	4803      	ldr	r0, [pc, #12]	@ (8000b48 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000b3a:	f007 fdd5 	bl	80086e8 <CDC_Transmit_FS>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200002e0 	.word	0x200002e0

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <Error_Handler+0x8>

08000b58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <HAL_MspInit+0x4c>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b66:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba4 <HAL_MspInit+0x4c>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba4 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b82:	4a08      	ldr	r2, [pc, #32]	@ (8000ba4 <HAL_MspInit+0x4c>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	@ 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a2e      	ldr	r2, [pc, #184]	@ (8000c80 <HAL_ADC_MspInit+0xd8>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d156      	bne.n	8000c78 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	4b2d      	ldr	r3, [pc, #180]	@ (8000c84 <HAL_ADC_MspInit+0xdc>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd2:	4a2c      	ldr	r2, [pc, #176]	@ (8000c84 <HAL_ADC_MspInit+0xdc>)
 8000bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bda:	4b2a      	ldr	r3, [pc, #168]	@ (8000c84 <HAL_ADC_MspInit+0xdc>)
 8000bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b26      	ldr	r3, [pc, #152]	@ (8000c84 <HAL_ADC_MspInit+0xdc>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a25      	ldr	r2, [pc, #148]	@ (8000c84 <HAL_ADC_MspInit+0xdc>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b23      	ldr	r3, [pc, #140]	@ (8000c84 <HAL_ADC_MspInit+0xdc>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c02:	2308      	movs	r3, #8
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c06:	2303      	movs	r3, #3
 8000c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	481c      	ldr	r0, [pc, #112]	@ (8000c88 <HAL_ADC_MspInit+0xe0>)
 8000c16:	f001 faa3 	bl	8002160 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c8c <HAL_ADC_MspInit+0xe4>)
 8000c1c:	4a1c      	ldr	r2, [pc, #112]	@ (8000c90 <HAL_ADC_MspInit+0xe8>)
 8000c1e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c20:	4b1a      	ldr	r3, [pc, #104]	@ (8000c8c <HAL_ADC_MspInit+0xe4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c26:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <HAL_ADC_MspInit+0xe4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c2c:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <HAL_ADC_MspInit+0xe4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c32:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <HAL_ADC_MspInit+0xe4>)
 8000c34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c38:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <HAL_ADC_MspInit+0xe4>)
 8000c3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c40:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c42:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <HAL_ADC_MspInit+0xe4>)
 8000c44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c48:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <HAL_ADC_MspInit+0xe4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <HAL_ADC_MspInit+0xe4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c56:	4b0d      	ldr	r3, [pc, #52]	@ (8000c8c <HAL_ADC_MspInit+0xe4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c5c:	480b      	ldr	r0, [pc, #44]	@ (8000c8c <HAL_ADC_MspInit+0xe4>)
 8000c5e:	f000 ff0f 	bl	8001a80 <HAL_DMA_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000c68:	f7ff ff70 	bl	8000b4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a07      	ldr	r2, [pc, #28]	@ (8000c8c <HAL_ADC_MspInit+0xe4>)
 8000c70:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c72:	4a06      	ldr	r2, [pc, #24]	@ (8000c8c <HAL_ADC_MspInit+0xe4>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c78:	bf00      	nop
 8000c7a:	3728      	adds	r7, #40	@ 0x28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40012000 	.word	0x40012000
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000
 8000c8c:	20000160 	.word	0x20000160
 8000c90:	40026410 	.word	0x40026410

08000c94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b087      	sub	sp, #28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ca4:	d10e      	bne.n	8000cc4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	4b27      	ldr	r3, [pc, #156]	@ (8000d48 <HAL_TIM_Base_MspInit+0xb4>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	4a26      	ldr	r2, [pc, #152]	@ (8000d48 <HAL_TIM_Base_MspInit+0xb4>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb6:	4b24      	ldr	r3, [pc, #144]	@ (8000d48 <HAL_TIM_Base_MspInit+0xb4>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000cc2:	e03a      	b.n	8000d3a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a20      	ldr	r2, [pc, #128]	@ (8000d4c <HAL_TIM_Base_MspInit+0xb8>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d10e      	bne.n	8000cec <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d48 <HAL_TIM_Base_MspInit+0xb4>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d48 <HAL_TIM_Base_MspInit+0xb4>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cde:	4b1a      	ldr	r3, [pc, #104]	@ (8000d48 <HAL_TIM_Base_MspInit+0xb4>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
}
 8000cea:	e026      	b.n	8000d3a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a17      	ldr	r2, [pc, #92]	@ (8000d50 <HAL_TIM_Base_MspInit+0xbc>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10e      	bne.n	8000d14 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	4b13      	ldr	r3, [pc, #76]	@ (8000d48 <HAL_TIM_Base_MspInit+0xb4>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	4a12      	ldr	r2, [pc, #72]	@ (8000d48 <HAL_TIM_Base_MspInit+0xb4>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <HAL_TIM_Base_MspInit+0xb4>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
}
 8000d12:	e012      	b.n	8000d3a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0e      	ldr	r2, [pc, #56]	@ (8000d54 <HAL_TIM_Base_MspInit+0xc0>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d10d      	bne.n	8000d3a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <HAL_TIM_Base_MspInit+0xb4>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d26:	4a08      	ldr	r2, [pc, #32]	@ (8000d48 <HAL_TIM_Base_MspInit+0xb4>)
 8000d28:	f043 0308 	orr.w	r3, r3, #8
 8000d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d2e:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <HAL_TIM_Base_MspInit+0xb4>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
}
 8000d3a:	bf00      	nop
 8000d3c:	371c      	adds	r7, #28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40000400 	.word	0x40000400
 8000d50:	40000800 	.word	0x40000800
 8000d54:	40000c00 	.word	0x40000c00

08000d58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	@ 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d78:	d11e      	bne.n	8000db8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b34      	ldr	r3, [pc, #208]	@ (8000e50 <HAL_TIM_MspPostInit+0xf8>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a33      	ldr	r2, [pc, #204]	@ (8000e50 <HAL_TIM_MspPostInit+0xf8>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b31      	ldr	r3, [pc, #196]	@ (8000e50 <HAL_TIM_MspPostInit+0xf8>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d96:	2301      	movs	r3, #1
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000da6:	2301      	movs	r3, #1
 8000da8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4619      	mov	r1, r3
 8000db0:	4828      	ldr	r0, [pc, #160]	@ (8000e54 <HAL_TIM_MspPostInit+0xfc>)
 8000db2:	f001 f9d5 	bl	8002160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000db6:	e046      	b.n	8000e46 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a26      	ldr	r2, [pc, #152]	@ (8000e58 <HAL_TIM_MspPostInit+0x100>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d11e      	bne.n	8000e00 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b22      	ldr	r3, [pc, #136]	@ (8000e50 <HAL_TIM_MspPostInit+0xf8>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a21      	ldr	r2, [pc, #132]	@ (8000e50 <HAL_TIM_MspPostInit+0xf8>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e50 <HAL_TIM_MspPostInit+0xf8>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dde:	2340      	movs	r3, #64	@ 0x40
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dee:	2302      	movs	r3, #2
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4816      	ldr	r0, [pc, #88]	@ (8000e54 <HAL_TIM_MspPostInit+0xfc>)
 8000dfa:	f001 f9b1 	bl	8002160 <HAL_GPIO_Init>
}
 8000dfe:	e022      	b.n	8000e46 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM5)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a15      	ldr	r2, [pc, #84]	@ (8000e5c <HAL_TIM_MspPostInit+0x104>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d11d      	bne.n	8000e46 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <HAL_TIM_MspPostInit+0xf8>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a0f      	ldr	r2, [pc, #60]	@ (8000e50 <HAL_TIM_MspPostInit+0xf8>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e50 <HAL_TIM_MspPostInit+0xf8>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e26:	2304      	movs	r3, #4
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	2300      	movs	r3, #0
 8000e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e36:	2302      	movs	r3, #2
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4804      	ldr	r0, [pc, #16]	@ (8000e54 <HAL_TIM_MspPostInit+0xfc>)
 8000e42:	f001 f98d 	bl	8002160 <HAL_GPIO_Init>
}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	@ 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020000 	.word	0x40020000
 8000e58:	40000400 	.word	0x40000400
 8000e5c:	40000c00 	.word	0x40000c00

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <NMI_Handler+0x4>

08000e68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <HardFault_Handler+0x4>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <MemManage_Handler+0x4>

08000e78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <BusFault_Handler+0x4>

08000e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <UsageFault_Handler+0x4>

08000e88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb6:	f000 f8a5 	bl	8001004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ec4:	4802      	ldr	r0, [pc, #8]	@ (8000ed0 <DMA2_Stream0_IRQHandler+0x10>)
 8000ec6:	f000 fee1 	bl	8001c8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000160 	.word	0x20000160

08000ed4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ed8:	4802      	ldr	r0, [pc, #8]	@ (8000ee4 <OTG_FS_IRQHandler+0x10>)
 8000eda:	f001 fc09 	bl	80026f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20003ea4 	.word	0x20003ea4

08000ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <SystemInit+0x20>)
 8000eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ef2:	4a05      	ldr	r2, [pc, #20]	@ (8000f08 <SystemInit+0x20>)
 8000ef4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ef8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f10:	f7ff ffea 	bl	8000ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f14:	480c      	ldr	r0, [pc, #48]	@ (8000f48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f16:	490d      	ldr	r1, [pc, #52]	@ (8000f4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f18:	4a0d      	ldr	r2, [pc, #52]	@ (8000f50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f1c:	e002      	b.n	8000f24 <LoopCopyDataInit>

08000f1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f22:	3304      	adds	r3, #4

08000f24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f28:	d3f9      	bcc.n	8000f1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f30:	e001      	b.n	8000f36 <LoopFillZerobss>

08000f32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f34:	3204      	adds	r2, #4

08000f36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f38:	d3fb      	bcc.n	8000f32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f3a:	f008 f81f 	bl	8008f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3e:	f7ff fac1 	bl	80004c4 <main>
  bx  lr    
 8000f42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f44:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f4c:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000f50:	0800904c 	.word	0x0800904c
  ldr r2, =_sbss
 8000f54:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000f58:	200045a8 	.word	0x200045a8

08000f5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f5c:	e7fe      	b.n	8000f5c <ADC_IRQHandler>
	...

08000f60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f64:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0d      	ldr	r2, [pc, #52]	@ (8000fa0 <HAL_Init+0x40>)
 8000f6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f70:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <HAL_Init+0x40>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa0 <HAL_Init+0x40>)
 8000f76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a07      	ldr	r2, [pc, #28]	@ (8000fa0 <HAL_Init+0x40>)
 8000f82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f000 fd37 	bl	80019fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8e:	200f      	movs	r0, #15
 8000f90:	f000 f808 	bl	8000fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f94:	f7ff fde0 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40023c00 	.word	0x40023c00

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <HAL_InitTick+0x54>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <HAL_InitTick+0x58>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fd4f 	bl	8001a66 <HAL_SYSTICK_Config>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00e      	b.n	8000ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	d80a      	bhi.n	8000fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 fd17 	bl	8001a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe4:	4a06      	ldr	r2, [pc, #24]	@ (8001000 <HAL_InitTick+0x5c>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000004 	.word	0x20000004

08001004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_IncTick+0x20>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <HAL_IncTick+0x24>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a04      	ldr	r2, [pc, #16]	@ (8001028 <HAL_IncTick+0x24>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000008 	.word	0x20000008
 8001028:	200031c0 	.word	0x200031c0

0800102c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b03      	ldr	r3, [pc, #12]	@ (8001040 <HAL_GetTick+0x14>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	200031c0 	.word	0x200031c0

08001044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800104c:	f7ff ffee 	bl	800102c <HAL_GetTick>
 8001050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800105c:	d005      	beq.n	800106a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105e:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <HAL_Delay+0x44>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800106a:	bf00      	nop
 800106c:	f7ff ffde 	bl	800102c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	429a      	cmp	r2, r3
 800107a:	d8f7      	bhi.n	800106c <HAL_Delay+0x28>
  {
  }
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000008 	.word	0x20000008

0800108c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e033      	b.n	800110a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d109      	bne.n	80010be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff fd7c 	bl	8000ba8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c2:	f003 0310 	and.w	r3, r3, #16
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d118      	bne.n	80010fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80010d2:	f023 0302 	bic.w	r3, r3, #2
 80010d6:	f043 0202 	orr.w	r2, r3, #2
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 fa3e 	bl	8001560 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	f023 0303 	bic.w	r3, r3, #3
 80010f2:	f043 0201 	orr.w	r2, r3, #1
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80010fa:	e001      	b.n	8001100 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800112a:	2b01      	cmp	r3, #1
 800112c:	d101      	bne.n	8001132 <HAL_ADC_Start_DMA+0x1e>
 800112e:	2302      	movs	r3, #2
 8001130:	e0ce      	b.n	80012d0 <HAL_ADC_Start_DMA+0x1bc>
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2201      	movs	r2, #1
 8001136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	2b01      	cmp	r3, #1
 8001146:	d018      	beq.n	800117a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 0201 	orr.w	r2, r2, #1
 8001156:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001158:	4b5f      	ldr	r3, [pc, #380]	@ (80012d8 <HAL_ADC_Start_DMA+0x1c4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a5f      	ldr	r2, [pc, #380]	@ (80012dc <HAL_ADC_Start_DMA+0x1c8>)
 800115e:	fba2 2303 	umull	r2, r3, r2, r3
 8001162:	0c9a      	lsrs	r2, r3, #18
 8001164:	4613      	mov	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4413      	add	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800116c:	e002      	b.n	8001174 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	3b01      	subs	r3, #1
 8001172:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f9      	bne.n	800116e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001184:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001188:	d107      	bne.n	800119a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001198:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	f040 8086 	bne.w	80012b6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80011b2:	f023 0301 	bic.w	r3, r3, #1
 80011b6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d007      	beq.n	80011dc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011d4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80011e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80011e8:	d106      	bne.n	80011f8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	f023 0206 	bic.w	r2, r3, #6
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	645a      	str	r2, [r3, #68]	@ 0x44
 80011f6:	e002      	b.n	80011fe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2200      	movs	r2, #0
 80011fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001206:	4b36      	ldr	r3, [pc, #216]	@ (80012e0 <HAL_ADC_Start_DMA+0x1cc>)
 8001208:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800120e:	4a35      	ldr	r2, [pc, #212]	@ (80012e4 <HAL_ADC_Start_DMA+0x1d0>)
 8001210:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001216:	4a34      	ldr	r2, [pc, #208]	@ (80012e8 <HAL_ADC_Start_DMA+0x1d4>)
 8001218:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800121e:	4a33      	ldr	r2, [pc, #204]	@ (80012ec <HAL_ADC_Start_DMA+0x1d8>)
 8001220:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800122a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800123a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800124a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	334c      	adds	r3, #76	@ 0x4c
 8001256:	4619      	mov	r1, r3
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f000 fcbe 	bl	8001bdc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 031f 	and.w	r3, r3, #31
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10f      	bne.n	800128c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d129      	bne.n	80012ce <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	e020      	b.n	80012ce <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a17      	ldr	r2, [pc, #92]	@ (80012f0 <HAL_ADC_Start_DMA+0x1dc>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d11b      	bne.n	80012ce <HAL_ADC_Start_DMA+0x1ba>
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d114      	bne.n	80012ce <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	e00b      	b.n	80012ce <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	f043 0210 	orr.w	r2, r3, #16
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c6:	f043 0201 	orr.w	r2, r3, #1
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3718      	adds	r7, #24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000000 	.word	0x20000000
 80012dc:	431bde83 	.word	0x431bde83
 80012e0:	40012300 	.word	0x40012300
 80012e4:	08001759 	.word	0x08001759
 80012e8:	08001813 	.word	0x08001813
 80012ec:	0800182f 	.word	0x0800182f
 80012f0:	40012000 	.word	0x40012000

080012f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80012fc:	bf00      	nop
 80012fe:	370c      	adds	r7, #12
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001330:	2b01      	cmp	r3, #1
 8001332:	d101      	bne.n	8001338 <HAL_ADC_ConfigChannel+0x1c>
 8001334:	2302      	movs	r3, #2
 8001336:	e105      	b.n	8001544 <HAL_ADC_ConfigChannel+0x228>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2201      	movs	r2, #1
 800133c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b09      	cmp	r3, #9
 8001346:	d925      	bls.n	8001394 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	68d9      	ldr	r1, [r3, #12]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	b29b      	uxth	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	4613      	mov	r3, r2
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	4413      	add	r3, r2
 800135c:	3b1e      	subs	r3, #30
 800135e:	2207      	movs	r2, #7
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43da      	mvns	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	400a      	ands	r2, r1
 800136c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68d9      	ldr	r1, [r3, #12]
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	b29b      	uxth	r3, r3
 800137e:	4618      	mov	r0, r3
 8001380:	4603      	mov	r3, r0
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	4403      	add	r3, r0
 8001386:	3b1e      	subs	r3, #30
 8001388:	409a      	lsls	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	430a      	orrs	r2, r1
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	e022      	b.n	80013da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6919      	ldr	r1, [r3, #16]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	b29b      	uxth	r3, r3
 80013a0:	461a      	mov	r2, r3
 80013a2:	4613      	mov	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	2207      	movs	r2, #7
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	43da      	mvns	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	400a      	ands	r2, r1
 80013b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6919      	ldr	r1, [r3, #16]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	4618      	mov	r0, r3
 80013ca:	4603      	mov	r3, r0
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4403      	add	r3, r0
 80013d0:	409a      	lsls	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b06      	cmp	r3, #6
 80013e0:	d824      	bhi.n	800142c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	3b05      	subs	r3, #5
 80013f4:	221f      	movs	r2, #31
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	400a      	ands	r2, r1
 8001402:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	4618      	mov	r0, r3
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	3b05      	subs	r3, #5
 800141e:	fa00 f203 	lsl.w	r2, r0, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	635a      	str	r2, [r3, #52]	@ 0x34
 800142a:	e04c      	b.n	80014c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b0c      	cmp	r3, #12
 8001432:	d824      	bhi.n	800147e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	3b23      	subs	r3, #35	@ 0x23
 8001446:	221f      	movs	r2, #31
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43da      	mvns	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	400a      	ands	r2, r1
 8001454:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	b29b      	uxth	r3, r3
 8001462:	4618      	mov	r0, r3
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b23      	subs	r3, #35	@ 0x23
 8001470:	fa00 f203 	lsl.w	r2, r0, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	430a      	orrs	r2, r1
 800147a:	631a      	str	r2, [r3, #48]	@ 0x30
 800147c:	e023      	b.n	80014c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	3b41      	subs	r3, #65	@ 0x41
 8001490:	221f      	movs	r2, #31
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	400a      	ands	r2, r1
 800149e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	4618      	mov	r0, r3
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	3b41      	subs	r3, #65	@ 0x41
 80014ba:	fa00 f203 	lsl.w	r2, r0, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014c6:	4b22      	ldr	r3, [pc, #136]	@ (8001550 <HAL_ADC_ConfigChannel+0x234>)
 80014c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a21      	ldr	r2, [pc, #132]	@ (8001554 <HAL_ADC_ConfigChannel+0x238>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d109      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x1cc>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b12      	cmp	r3, #18
 80014da:	d105      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a19      	ldr	r2, [pc, #100]	@ (8001554 <HAL_ADC_ConfigChannel+0x238>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d123      	bne.n	800153a <HAL_ADC_ConfigChannel+0x21e>
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b10      	cmp	r3, #16
 80014f8:	d003      	beq.n	8001502 <HAL_ADC_ConfigChannel+0x1e6>
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2b11      	cmp	r3, #17
 8001500:	d11b      	bne.n	800153a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b10      	cmp	r3, #16
 8001514:	d111      	bne.n	800153a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001516:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <HAL_ADC_ConfigChannel+0x23c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a10      	ldr	r2, [pc, #64]	@ (800155c <HAL_ADC_ConfigChannel+0x240>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	0c9a      	lsrs	r2, r3, #18
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800152c:	e002      	b.n	8001534 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3b01      	subs	r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f9      	bne.n	800152e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	40012300 	.word	0x40012300
 8001554:	40012000 	.word	0x40012000
 8001558:	20000000 	.word	0x20000000
 800155c:	431bde83 	.word	0x431bde83

08001560 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001568:	4b79      	ldr	r3, [pc, #484]	@ (8001750 <ADC_Init+0x1f0>)
 800156a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	431a      	orrs	r2, r3
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001594:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6859      	ldr	r1, [r3, #4]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	021a      	lsls	r2, r3, #8
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80015b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6859      	ldr	r1, [r3, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689a      	ldr	r2, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6899      	ldr	r1, [r3, #8]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015f2:	4a58      	ldr	r2, [pc, #352]	@ (8001754 <ADC_Init+0x1f4>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d022      	beq.n	800163e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001606:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6899      	ldr	r1, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001628:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6899      	ldr	r1, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	e00f      	b.n	800165e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800164c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800165c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0202 	bic.w	r2, r2, #2
 800166c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6899      	ldr	r1, [r3, #8]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	7e1b      	ldrb	r3, [r3, #24]
 8001678:	005a      	lsls	r2, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d01b      	beq.n	80016c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800169a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80016aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6859      	ldr	r1, [r3, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b6:	3b01      	subs	r3, #1
 80016b8:	035a      	lsls	r2, r3, #13
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	e007      	b.n	80016d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80016e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	051a      	lsls	r2, r3, #20
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001708:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6899      	ldr	r1, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001716:	025a      	lsls	r2, r3, #9
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800172e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6899      	ldr	r1, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	029a      	lsls	r2, r3, #10
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	609a      	str	r2, [r3, #8]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	40012300 	.word	0x40012300
 8001754:	0f000001 	.word	0x0f000001

08001758 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001764:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800176e:	2b00      	cmp	r3, #0
 8001770:	d13c      	bne.n	80017ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d12b      	bne.n	80017e4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001790:	2b00      	cmp	r3, #0
 8001792:	d127      	bne.n	80017e4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d006      	beq.n	80017b0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d119      	bne.n	80017e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0220 	bic.w	r2, r2, #32
 80017be:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017dc:	f043 0201 	orr.w	r2, r3, #1
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f7ff f9a1 	bl	8000b2c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017ea:	e00e      	b.n	800180a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f7ff fd85 	bl	8001308 <HAL_ADC_ErrorCallback>
}
 80017fe:	e004      	b.n	800180a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	4798      	blx	r3
}
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b084      	sub	sp, #16
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800181e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f7ff fd67 	bl	80012f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001826:	bf00      	nop
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b084      	sub	sp, #16
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800183a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2240      	movs	r2, #64	@ 0x40
 8001840:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	f043 0204 	orr.w	r2, r3, #4
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f7ff fd5a 	bl	8001308 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800186c:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001878:	4013      	ands	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001884:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800188c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188e:	4a04      	ldr	r2, [pc, #16]	@ (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60d3      	str	r3, [r2, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a8:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <__NVIC_GetPriorityGrouping+0x18>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	f003 0307 	and.w	r3, r3, #7
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db0b      	blt.n	80018ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	f003 021f 	and.w	r2, r3, #31
 80018d8:	4907      	ldr	r1, [pc, #28]	@ (80018f8 <__NVIC_EnableIRQ+0x38>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	2001      	movs	r0, #1
 80018e2:	fa00 f202 	lsl.w	r2, r0, r2
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000e100 	.word	0xe000e100

080018fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	6039      	str	r1, [r7, #0]
 8001906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	2b00      	cmp	r3, #0
 800190e:	db0a      	blt.n	8001926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	b2da      	uxtb	r2, r3
 8001914:	490c      	ldr	r1, [pc, #48]	@ (8001948 <__NVIC_SetPriority+0x4c>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	0112      	lsls	r2, r2, #4
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	440b      	add	r3, r1
 8001920:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001924:	e00a      	b.n	800193c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4908      	ldr	r1, [pc, #32]	@ (800194c <__NVIC_SetPriority+0x50>)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	3b04      	subs	r3, #4
 8001934:	0112      	lsls	r2, r2, #4
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	440b      	add	r3, r1
 800193a:	761a      	strb	r2, [r3, #24]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000e100 	.word	0xe000e100
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	@ 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f1c3 0307 	rsb	r3, r3, #7
 800196a:	2b04      	cmp	r3, #4
 800196c:	bf28      	it	cs
 800196e:	2304      	movcs	r3, #4
 8001970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3304      	adds	r3, #4
 8001976:	2b06      	cmp	r3, #6
 8001978:	d902      	bls.n	8001980 <NVIC_EncodePriority+0x30>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3b03      	subs	r3, #3
 800197e:	e000      	b.n	8001982 <NVIC_EncodePriority+0x32>
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	f04f 32ff 	mov.w	r2, #4294967295
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	401a      	ands	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001998:	f04f 31ff 	mov.w	r1, #4294967295
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	43d9      	mvns	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	4313      	orrs	r3, r2
         );
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3724      	adds	r7, #36	@ 0x24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019c8:	d301      	bcc.n	80019ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00f      	b.n	80019ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ce:	4a0a      	ldr	r2, [pc, #40]	@ (80019f8 <SysTick_Config+0x40>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d6:	210f      	movs	r1, #15
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f7ff ff8e 	bl	80018fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e0:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <SysTick_Config+0x40>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e6:	4b04      	ldr	r3, [pc, #16]	@ (80019f8 <SysTick_Config+0x40>)
 80019e8:	2207      	movs	r2, #7
 80019ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	e000e010 	.word	0xe000e010

080019fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ff29 	bl	800185c <__NVIC_SetPriorityGrouping>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
 8001a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a24:	f7ff ff3e 	bl	80018a4 <__NVIC_GetPriorityGrouping>
 8001a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	6978      	ldr	r0, [r7, #20]
 8001a30:	f7ff ff8e 	bl	8001950 <NVIC_EncodePriority>
 8001a34:	4602      	mov	r2, r0
 8001a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff5d 	bl	80018fc <__NVIC_SetPriority>
}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff31 	bl	80018c0 <__NVIC_EnableIRQ>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ffa2 	bl	80019b8 <SysTick_Config>
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a8c:	f7ff face 	bl	800102c <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e099      	b.n	8001bd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2202      	movs	r2, #2
 8001aa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 0201 	bic.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001abc:	e00f      	b.n	8001ade <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001abe:	f7ff fab5 	bl	800102c <HAL_GetTick>
 8001ac2:	4602      	mov	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b05      	cmp	r3, #5
 8001aca:	d908      	bls.n	8001ade <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e078      	b.n	8001bd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1e8      	bne.n	8001abe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	4b38      	ldr	r3, [pc, #224]	@ (8001bd8 <HAL_DMA_Init+0x158>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b2a:	697a      	ldr	r2, [r7, #20]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	d107      	bne.n	8001b48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b40:	4313      	orrs	r3, r2
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f023 0307 	bic.w	r3, r3, #7
 8001b5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d117      	bne.n	8001ba2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00e      	beq.n	8001ba2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 fa6f 	bl	8002068 <DMA_CheckFifoParam>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2240      	movs	r2, #64	@ 0x40
 8001b94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e016      	b.n	8001bd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 fa26 	bl	8001ffc <DMA_CalcBaseAndBitshift>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb8:	223f      	movs	r2, #63	@ 0x3f
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	f010803f 	.word	0xf010803f

08001bdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_DMA_Start_IT+0x26>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e040      	b.n	8001c84 <HAL_DMA_Start_IT+0xa8>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d12f      	bne.n	8001c76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2202      	movs	r2, #2
 8001c1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 f9b8 	bl	8001fa0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c34:	223f      	movs	r2, #63	@ 0x3f
 8001c36:	409a      	lsls	r2, r3
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0216 	orr.w	r2, r2, #22
 8001c4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d007      	beq.n	8001c64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0208 	orr.w	r2, r2, #8
 8001c62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	e005      	b.n	8001c82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c98:	4b8e      	ldr	r3, [pc, #568]	@ (8001ed4 <HAL_DMA_IRQHandler+0x248>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a8e      	ldr	r2, [pc, #568]	@ (8001ed8 <HAL_DMA_IRQHandler+0x24c>)
 8001c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca2:	0a9b      	lsrs	r3, r3, #10
 8001ca4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001caa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb6:	2208      	movs	r2, #8
 8001cb8:	409a      	lsls	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d01a      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d013      	beq.n	8001cf8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0204 	bic.w	r2, r2, #4
 8001cde:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce4:	2208      	movs	r2, #8
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf0:	f043 0201 	orr.w	r2, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d012      	beq.n	8001d2e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d26:	f043 0202 	orr.w	r2, r3, #2
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d32:	2204      	movs	r2, #4
 8001d34:	409a      	lsls	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d012      	beq.n	8001d64 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00b      	beq.n	8001d64 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d50:	2204      	movs	r2, #4
 8001d52:	409a      	lsls	r2, r3
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d5c:	f043 0204 	orr.w	r2, r3, #4
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d68:	2210      	movs	r2, #16
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d043      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d03c      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d86:	2210      	movs	r2, #16
 8001d88:	409a      	lsls	r2, r3
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d018      	beq.n	8001dce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d108      	bne.n	8001dbc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d024      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	4798      	blx	r3
 8001dba:	e01f      	b.n	8001dfc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d01b      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	4798      	blx	r3
 8001dcc:	e016      	b.n	8001dfc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d107      	bne.n	8001dec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0208 	bic.w	r2, r2, #8
 8001dea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e00:	2220      	movs	r2, #32
 8001e02:	409a      	lsls	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 808f 	beq.w	8001f2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 8087 	beq.w	8001f2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e22:	2220      	movs	r2, #32
 8001e24:	409a      	lsls	r2, r3
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b05      	cmp	r3, #5
 8001e34:	d136      	bne.n	8001ea4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0216 	bic.w	r2, r2, #22
 8001e44:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	695a      	ldr	r2, [r3, #20]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e54:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d103      	bne.n	8001e66 <HAL_DMA_IRQHandler+0x1da>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d007      	beq.n	8001e76 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0208 	bic.w	r2, r2, #8
 8001e74:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e7a:	223f      	movs	r2, #63	@ 0x3f
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d07e      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	4798      	blx	r3
        }
        return;
 8001ea2:	e079      	b.n	8001f98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d01d      	beq.n	8001eee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10d      	bne.n	8001edc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d031      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	4798      	blx	r3
 8001ed0:	e02c      	b.n	8001f2c <HAL_DMA_IRQHandler+0x2a0>
 8001ed2:	bf00      	nop
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d023      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	4798      	blx	r3
 8001eec:	e01e      	b.n	8001f2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10f      	bne.n	8001f1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0210 	bic.w	r2, r2, #16
 8001f0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d032      	beq.n	8001f9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d022      	beq.n	8001f86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2205      	movs	r2, #5
 8001f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d307      	bcc.n	8001f74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1f2      	bne.n	8001f58 <HAL_DMA_IRQHandler+0x2cc>
 8001f72:	e000      	b.n	8001f76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	4798      	blx	r3
 8001f96:	e000      	b.n	8001f9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f98:	bf00      	nop
    }
  }
}
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001fbc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b40      	cmp	r3, #64	@ 0x40
 8001fcc:	d108      	bne.n	8001fe0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fde:	e007      	b.n	8001ff0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	60da      	str	r2, [r3, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	3b10      	subs	r3, #16
 800200c:	4a14      	ldr	r2, [pc, #80]	@ (8002060 <DMA_CalcBaseAndBitshift+0x64>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	091b      	lsrs	r3, r3, #4
 8002014:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002016:	4a13      	ldr	r2, [pc, #76]	@ (8002064 <DMA_CalcBaseAndBitshift+0x68>)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4413      	add	r3, r2
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d909      	bls.n	800203e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002032:	f023 0303 	bic.w	r3, r3, #3
 8002036:	1d1a      	adds	r2, r3, #4
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	659a      	str	r2, [r3, #88]	@ 0x58
 800203c:	e007      	b.n	800204e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002046:	f023 0303 	bic.w	r3, r3, #3
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002052:	4618      	mov	r0, r3
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	aaaaaaab 	.word	0xaaaaaaab
 8002064:	08009034 	.word	0x08009034

08002068 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002078:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d11f      	bne.n	80020c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b03      	cmp	r3, #3
 8002086:	d856      	bhi.n	8002136 <DMA_CheckFifoParam+0xce>
 8002088:	a201      	add	r2, pc, #4	@ (adr r2, 8002090 <DMA_CheckFifoParam+0x28>)
 800208a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800208e:	bf00      	nop
 8002090:	080020a1 	.word	0x080020a1
 8002094:	080020b3 	.word	0x080020b3
 8002098:	080020a1 	.word	0x080020a1
 800209c:	08002137 	.word	0x08002137
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d046      	beq.n	800213a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020b0:	e043      	b.n	800213a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80020ba:	d140      	bne.n	800213e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020c0:	e03d      	b.n	800213e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80020ca:	d121      	bne.n	8002110 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d837      	bhi.n	8002142 <DMA_CheckFifoParam+0xda>
 80020d2:	a201      	add	r2, pc, #4	@ (adr r2, 80020d8 <DMA_CheckFifoParam+0x70>)
 80020d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d8:	080020e9 	.word	0x080020e9
 80020dc:	080020ef 	.word	0x080020ef
 80020e0:	080020e9 	.word	0x080020e9
 80020e4:	08002101 	.word	0x08002101
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	73fb      	strb	r3, [r7, #15]
      break;
 80020ec:	e030      	b.n	8002150 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d025      	beq.n	8002146 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020fe:	e022      	b.n	8002146 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002104:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002108:	d11f      	bne.n	800214a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800210e:	e01c      	b.n	800214a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d903      	bls.n	800211e <DMA_CheckFifoParam+0xb6>
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2b03      	cmp	r3, #3
 800211a:	d003      	beq.n	8002124 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800211c:	e018      	b.n	8002150 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
      break;
 8002122:	e015      	b.n	8002150 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002128:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00e      	beq.n	800214e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
      break;
 8002134:	e00b      	b.n	800214e <DMA_CheckFifoParam+0xe6>
      break;
 8002136:	bf00      	nop
 8002138:	e00a      	b.n	8002150 <DMA_CheckFifoParam+0xe8>
      break;
 800213a:	bf00      	nop
 800213c:	e008      	b.n	8002150 <DMA_CheckFifoParam+0xe8>
      break;
 800213e:	bf00      	nop
 8002140:	e006      	b.n	8002150 <DMA_CheckFifoParam+0xe8>
      break;
 8002142:	bf00      	nop
 8002144:	e004      	b.n	8002150 <DMA_CheckFifoParam+0xe8>
      break;
 8002146:	bf00      	nop
 8002148:	e002      	b.n	8002150 <DMA_CheckFifoParam+0xe8>
      break;   
 800214a:	bf00      	nop
 800214c:	e000      	b.n	8002150 <DMA_CheckFifoParam+0xe8>
      break;
 800214e:	bf00      	nop
    }
  } 
  
  return status; 
 8002150:	7bfb      	ldrb	r3, [r7, #15]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop

08002160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	@ 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	e159      	b.n	8002430 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800217c:	2201      	movs	r2, #1
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4013      	ands	r3, r2
 800218e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	429a      	cmp	r2, r3
 8002196:	f040 8148 	bne.w	800242a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d005      	beq.n	80021b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d130      	bne.n	8002214 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	2203      	movs	r2, #3
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4013      	ands	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e8:	2201      	movs	r2, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	f003 0201 	and.w	r2, r3, #1
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	2b03      	cmp	r3, #3
 800221e:	d017      	beq.n	8002250 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	2203      	movs	r2, #3
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d123      	bne.n	80022a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	08da      	lsrs	r2, r3, #3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3208      	adds	r2, #8
 8002264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	220f      	movs	r2, #15
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	08da      	lsrs	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3208      	adds	r2, #8
 800229e:	69b9      	ldr	r1, [r7, #24]
 80022a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	2203      	movs	r2, #3
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0203 	and.w	r2, r3, #3
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80a2 	beq.w	800242a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	4b57      	ldr	r3, [pc, #348]	@ (8002448 <HAL_GPIO_Init+0x2e8>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ee:	4a56      	ldr	r2, [pc, #344]	@ (8002448 <HAL_GPIO_Init+0x2e8>)
 80022f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022f6:	4b54      	ldr	r3, [pc, #336]	@ (8002448 <HAL_GPIO_Init+0x2e8>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002302:	4a52      	ldr	r2, [pc, #328]	@ (800244c <HAL_GPIO_Init+0x2ec>)
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	089b      	lsrs	r3, r3, #2
 8002308:	3302      	adds	r3, #2
 800230a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	220f      	movs	r2, #15
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a49      	ldr	r2, [pc, #292]	@ (8002450 <HAL_GPIO_Init+0x2f0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d019      	beq.n	8002362 <HAL_GPIO_Init+0x202>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a48      	ldr	r2, [pc, #288]	@ (8002454 <HAL_GPIO_Init+0x2f4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d013      	beq.n	800235e <HAL_GPIO_Init+0x1fe>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a47      	ldr	r2, [pc, #284]	@ (8002458 <HAL_GPIO_Init+0x2f8>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00d      	beq.n	800235a <HAL_GPIO_Init+0x1fa>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a46      	ldr	r2, [pc, #280]	@ (800245c <HAL_GPIO_Init+0x2fc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d007      	beq.n	8002356 <HAL_GPIO_Init+0x1f6>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a45      	ldr	r2, [pc, #276]	@ (8002460 <HAL_GPIO_Init+0x300>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d101      	bne.n	8002352 <HAL_GPIO_Init+0x1f2>
 800234e:	2304      	movs	r3, #4
 8002350:	e008      	b.n	8002364 <HAL_GPIO_Init+0x204>
 8002352:	2307      	movs	r3, #7
 8002354:	e006      	b.n	8002364 <HAL_GPIO_Init+0x204>
 8002356:	2303      	movs	r3, #3
 8002358:	e004      	b.n	8002364 <HAL_GPIO_Init+0x204>
 800235a:	2302      	movs	r3, #2
 800235c:	e002      	b.n	8002364 <HAL_GPIO_Init+0x204>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <HAL_GPIO_Init+0x204>
 8002362:	2300      	movs	r3, #0
 8002364:	69fa      	ldr	r2, [r7, #28]
 8002366:	f002 0203 	and.w	r2, r2, #3
 800236a:	0092      	lsls	r2, r2, #2
 800236c:	4093      	lsls	r3, r2
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002374:	4935      	ldr	r1, [pc, #212]	@ (800244c <HAL_GPIO_Init+0x2ec>)
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	089b      	lsrs	r3, r3, #2
 800237a:	3302      	adds	r3, #2
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002382:	4b38      	ldr	r3, [pc, #224]	@ (8002464 <HAL_GPIO_Init+0x304>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	43db      	mvns	r3, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4013      	ands	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023a6:	4a2f      	ldr	r2, [pc, #188]	@ (8002464 <HAL_GPIO_Init+0x304>)
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002464 <HAL_GPIO_Init+0x304>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023d0:	4a24      	ldr	r2, [pc, #144]	@ (8002464 <HAL_GPIO_Init+0x304>)
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023d6:	4b23      	ldr	r3, [pc, #140]	@ (8002464 <HAL_GPIO_Init+0x304>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	43db      	mvns	r3, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002464 <HAL_GPIO_Init+0x304>)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002400:	4b18      	ldr	r3, [pc, #96]	@ (8002464 <HAL_GPIO_Init+0x304>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d003      	beq.n	8002424 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002424:	4a0f      	ldr	r2, [pc, #60]	@ (8002464 <HAL_GPIO_Init+0x304>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3301      	adds	r3, #1
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	2b0f      	cmp	r3, #15
 8002434:	f67f aea2 	bls.w	800217c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002438:	bf00      	nop
 800243a:	bf00      	nop
 800243c:	3724      	adds	r7, #36	@ 0x24
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	40023800 	.word	0x40023800
 800244c:	40013800 	.word	0x40013800
 8002450:	40020000 	.word	0x40020000
 8002454:	40020400 	.word	0x40020400
 8002458:	40020800 	.word	0x40020800
 800245c:	40020c00 	.word	0x40020c00
 8002460:	40021000 	.word	0x40021000
 8002464:	40013c00 	.word	0x40013c00

08002468 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af02      	add	r7, sp, #8
 800246e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e101      	b.n	800267e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	d106      	bne.n	800249a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f006 fa5f 	bl	8008958 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2203      	movs	r2, #3
 800249e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024a8:	d102      	bne.n	80024b0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f002 fe68 	bl	800518a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	7c1a      	ldrb	r2, [r3, #16]
 80024c2:	f88d 2000 	strb.w	r2, [sp]
 80024c6:	3304      	adds	r3, #4
 80024c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ca:	f002 fd47 	bl	8004f5c <USB_CoreInit>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0ce      	b.n	800267e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2100      	movs	r1, #0
 80024e6:	4618      	mov	r0, r3
 80024e8:	f002 fe60 	bl	80051ac <USB_SetCurrentMode>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2202      	movs	r2, #2
 80024f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e0bf      	b.n	800267e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024fe:	2300      	movs	r3, #0
 8002500:	73fb      	strb	r3, [r7, #15]
 8002502:	e04a      	b.n	800259a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002504:	7bfa      	ldrb	r2, [r7, #15]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	3315      	adds	r3, #21
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002518:	7bfa      	ldrb	r2, [r7, #15]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	3314      	adds	r3, #20
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800252c:	7bfa      	ldrb	r2, [r7, #15]
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	b298      	uxth	r0, r3
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	332e      	adds	r3, #46	@ 0x2e
 8002540:	4602      	mov	r2, r0
 8002542:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002544:	7bfa      	ldrb	r2, [r7, #15]
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	3318      	adds	r3, #24
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002558:	7bfa      	ldrb	r2, [r7, #15]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	331c      	adds	r3, #28
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800256c:	7bfa      	ldrb	r2, [r7, #15]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	3320      	adds	r3, #32
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002580:	7bfa      	ldrb	r2, [r7, #15]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	4413      	add	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	3324      	adds	r3, #36	@ 0x24
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	3301      	adds	r3, #1
 8002598:	73fb      	strb	r3, [r7, #15]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	791b      	ldrb	r3, [r3, #4]
 800259e:	7bfa      	ldrb	r2, [r7, #15]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d3af      	bcc.n	8002504 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]
 80025a8:	e044      	b.n	8002634 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025aa:	7bfa      	ldrb	r2, [r7, #15]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025c0:	7bfa      	ldrb	r2, [r7, #15]
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4613      	mov	r3, r2
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4413      	add	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80025d2:	7bfa      	ldrb	r2, [r7, #15]
 80025d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025d6:	7bfa      	ldrb	r2, [r7, #15]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002602:	7bfa      	ldrb	r2, [r7, #15]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	3301      	adds	r3, #1
 8002632:	73fb      	strb	r3, [r7, #15]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	791b      	ldrb	r3, [r3, #4]
 8002638:	7bfa      	ldrb	r2, [r7, #15]
 800263a:	429a      	cmp	r2, r3
 800263c:	d3b5      	bcc.n	80025aa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	7c1a      	ldrb	r2, [r3, #16]
 8002646:	f88d 2000 	strb.w	r2, [sp]
 800264a:	3304      	adds	r3, #4
 800264c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800264e:	f002 fdf9 	bl	8005244 <USB_DevInit>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e00c      	b.n	800267e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f003 fe3d 	bl	80062f6 <USB_DevDisconnect>

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_PCD_Start+0x1c>
 800269e:	2302      	movs	r3, #2
 80026a0:	e022      	b.n	80026e8 <HAL_PCD_Start+0x62>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d009      	beq.n	80026ca <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d105      	bne.n	80026ca <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f002 fd4a 	bl	8005168 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f003 fdeb 	bl	80062b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b08d      	sub	sp, #52	@ 0x34
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f003 fea9 	bl	800645e <USB_GetMode>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	f040 848c 	bne.w	800302c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fe0d 	bl	8006338 <USB_ReadInterrupts>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 8482 	beq.w	800302a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	0a1b      	lsrs	r3, r3, #8
 8002730:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f003 fdfa 	bl	8006338 <USB_ReadInterrupts>
 8002744:	4603      	mov	r3, r0
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b02      	cmp	r3, #2
 800274c:	d107      	bne.n	800275e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695a      	ldr	r2, [r3, #20]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f002 0202 	and.w	r2, r2, #2
 800275c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f003 fde8 	bl	8006338 <USB_ReadInterrupts>
 8002768:	4603      	mov	r3, r0
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	2b10      	cmp	r3, #16
 8002770:	d161      	bne.n	8002836 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699a      	ldr	r2, [r3, #24]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0210 	bic.w	r2, r2, #16
 8002780:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	f003 020f 	and.w	r2, r3, #15
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	4413      	add	r3, r2
 800279e:	3304      	adds	r3, #4
 80027a0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	0c5b      	lsrs	r3, r3, #17
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d124      	bne.n	80027f8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d035      	beq.n	8002826 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	6a38      	ldr	r0, [r7, #32]
 80027ce:	f003 fc1f 	bl	8006010 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	091b      	lsrs	r3, r3, #4
 80027da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027de:	441a      	add	r2, r3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027f0:	441a      	add	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	615a      	str	r2, [r3, #20]
 80027f6:	e016      	b.n	8002826 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	0c5b      	lsrs	r3, r3, #17
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	2b06      	cmp	r3, #6
 8002802:	d110      	bne.n	8002826 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800280a:	2208      	movs	r2, #8
 800280c:	4619      	mov	r1, r3
 800280e:	6a38      	ldr	r0, [r7, #32]
 8002810:	f003 fbfe 	bl	8006010 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002820:	441a      	add	r2, r3
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699a      	ldr	r2, [r3, #24]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f042 0210 	orr.w	r2, r2, #16
 8002834:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f003 fd7c 	bl	8006338 <USB_ReadInterrupts>
 8002840:	4603      	mov	r3, r0
 8002842:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002846:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800284a:	f040 80a7 	bne.w	800299c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f003 fd81 	bl	800635e <USB_ReadDevAllOutEpInterrupt>
 800285c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800285e:	e099      	b.n	8002994 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 808e 	beq.w	8002988 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	4611      	mov	r1, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f003 fda5 	bl	80063c6 <USB_ReadDevOutEPInterrupt>
 800287c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00c      	beq.n	80028a2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	4413      	add	r3, r2
 8002890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002894:	461a      	mov	r2, r3
 8002896:	2301      	movs	r3, #1
 8002898:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800289a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 fea1 	bl	80035e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00c      	beq.n	80028c6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028b8:	461a      	mov	r2, r3
 80028ba:	2308      	movs	r3, #8
 80028bc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80028be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 ff77 	bl	80037b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028dc:	461a      	mov	r2, r3
 80028de:	2310      	movs	r3, #16
 80028e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d030      	beq.n	800294e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f4:	2b80      	cmp	r3, #128	@ 0x80
 80028f6:	d109      	bne.n	800290c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002906:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800290a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800290c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	4413      	add	r3, r2
 800291e:	3304      	adds	r3, #4
 8002920:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	78db      	ldrb	r3, [r3, #3]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d108      	bne.n	800293c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2200      	movs	r2, #0
 800292e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	b2db      	uxtb	r3, r3
 8002934:	4619      	mov	r1, r3
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f006 f90a 	bl	8008b50 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	4413      	add	r3, r2
 8002944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002948:	461a      	mov	r2, r3
 800294a:	2302      	movs	r3, #2
 800294c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	4413      	add	r3, r2
 8002960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002964:	461a      	mov	r2, r3
 8002966:	2320      	movs	r3, #32
 8002968:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d009      	beq.n	8002988 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	4413      	add	r3, r2
 800297c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002980:	461a      	mov	r2, r3
 8002982:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002986:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298a:	3301      	adds	r3, #1
 800298c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800298e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002990:	085b      	lsrs	r3, r3, #1
 8002992:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002996:	2b00      	cmp	r3, #0
 8002998:	f47f af62 	bne.w	8002860 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f003 fcc9 	bl	8006338 <USB_ReadInterrupts>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80029b0:	f040 80db 	bne.w	8002b6a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f003 fcea 	bl	8006392 <USB_ReadDevAllInEpInterrupt>
 80029be:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80029c4:	e0cd      	b.n	8002b62 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80c2 	beq.w	8002b56 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f003 fd10 	bl	8006402 <USB_ReadDevInEPInterrupt>
 80029e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d057      	beq.n	8002a9e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	f003 030f 	and.w	r3, r3, #15
 80029f4:	2201      	movs	r2, #1
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69f9      	ldr	r1, [r7, #28]
 8002a0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002a0e:	4013      	ands	r3, r2
 8002a10:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2301      	movs	r3, #1
 8002a22:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	799b      	ldrb	r3, [r3, #6]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d132      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	3320      	adds	r3, #32
 8002a3c:	6819      	ldr	r1, [r3, #0]
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a42:	4613      	mov	r3, r2
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4413      	add	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4403      	add	r3, r0
 8002a4c:	331c      	adds	r3, #28
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4419      	add	r1, r3
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4403      	add	r3, r0
 8002a60:	3320      	adds	r3, #32
 8002a62:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d113      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x3a2>
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	3324      	adds	r3, #36	@ 0x24
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d108      	bne.n	8002a92 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	f003 fd17 	bl	80064c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	4619      	mov	r1, r3
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f005 ffde 	bl	8008a5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d008      	beq.n	8002aba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2310      	movs	r3, #16
 8002ad4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002aec:	461a      	mov	r2, r3
 8002aee:	2340      	movs	r3, #64	@ 0x40
 8002af0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d023      	beq.n	8002b44 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002afc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002afe:	6a38      	ldr	r0, [r7, #32]
 8002b00:	f002 fd04 	bl	800550c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	3310      	adds	r3, #16
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	4413      	add	r3, r2
 8002b14:	3304      	adds	r3, #4
 8002b16:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	78db      	ldrb	r3, [r3, #3]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d108      	bne.n	8002b32 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2200      	movs	r2, #0
 8002b24:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f006 f821 	bl	8008b74 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b34:	015a      	lsls	r2, r3, #5
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b3e:	461a      	mov	r2, r3
 8002b40:	2302      	movs	r3, #2
 8002b42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 fcbb 	bl	80034cc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	3301      	adds	r3, #1
 8002b5a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5e:	085b      	lsrs	r3, r3, #1
 8002b60:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f47f af2e 	bne.w	80029c6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 fbe2 	bl	8006338 <USB_ReadInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002b7e:	d122      	bne.n	8002bc6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	69fa      	ldr	r2, [r7, #28]
 8002b8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b8e:	f023 0301 	bic.w	r3, r3, #1
 8002b92:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d108      	bne.n	8002bb0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 fea1 	bl	80038f0 <HAL_PCDEx_LPM_Callback>
 8002bae:	e002      	b.n	8002bb6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f005 ffbf 	bl	8008b34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f003 fbb4 	bl	8006338 <USB_ReadInterrupts>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bda:	d112      	bne.n	8002c02 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d102      	bne.n	8002bf2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f005 ff7b 	bl	8008ae8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	695a      	ldr	r2, [r3, #20]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002c00:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f003 fb96 	bl	8006338 <USB_ReadInterrupts>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c16:	f040 80b7 	bne.w	8002d88 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	69fa      	ldr	r2, [r7, #28]
 8002c24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c28:	f023 0301 	bic.w	r3, r3, #1
 8002c2c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2110      	movs	r1, #16
 8002c34:	4618      	mov	r0, r3
 8002c36:	f002 fc69 	bl	800550c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c3e:	e046      	b.n	8002cce <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c52:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c64:	0151      	lsls	r1, r2, #5
 8002c66:	69fa      	ldr	r2, [r7, #28]
 8002c68:	440a      	add	r2, r1
 8002c6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002c6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002c72:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c80:	461a      	mov	r2, r3
 8002c82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002c86:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c98:	0151      	lsls	r1, r2, #5
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	440a      	add	r2, r1
 8002c9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002ca2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002ca6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cb8:	0151      	lsls	r1, r2, #5
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	440a      	add	r2, r1
 8002cbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002cc2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002cc6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cca:	3301      	adds	r3, #1
 8002ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	791b      	ldrb	r3, [r3, #4]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d3b2      	bcc.n	8002c40 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ce8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002cec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	7bdb      	ldrb	r3, [r3, #15]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d016      	beq.n	8002d24 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d00:	69fa      	ldr	r2, [r7, #28]
 8002d02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d06:	f043 030b 	orr.w	r3, r3, #11
 8002d0a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d1c:	f043 030b 	orr.w	r3, r3, #11
 8002d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d22:	e015      	b.n	8002d50 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d32:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d36:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002d3a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d4a:	f043 030b 	orr.w	r3, r3, #11
 8002d4e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	69fa      	ldr	r2, [r7, #28]
 8002d5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d5e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002d62:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d72:	461a      	mov	r2, r3
 8002d74:	f003 fba4 	bl	80064c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695a      	ldr	r2, [r3, #20]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002d86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f003 fad3 	bl	8006338 <USB_ReadInterrupts>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d9c:	d123      	bne.n	8002de6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f003 fb69 	bl	800647a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f002 fc26 	bl	80055fe <USB_GetDevSpeed>
 8002db2:	4603      	mov	r3, r0
 8002db4:	461a      	mov	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681c      	ldr	r4, [r3, #0]
 8002dbe:	f001 f9c7 	bl	8004150 <HAL_RCC_GetHCLKFreq>
 8002dc2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4620      	mov	r0, r4
 8002dcc:	f002 f92a 	bl	8005024 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f005 fe6a 	bl	8008aaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695a      	ldr	r2, [r3, #20]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002de4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f003 faa4 	bl	8006338 <USB_ReadInterrupts>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d10a      	bne.n	8002e10 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f005 fe47 	bl	8008a8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f002 0208 	and.w	r2, r2, #8
 8002e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f003 fa8f 	bl	8006338 <USB_ReadInterrupts>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e20:	2b80      	cmp	r3, #128	@ 0x80
 8002e22:	d123      	bne.n	8002e6c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e30:	2301      	movs	r3, #1
 8002e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e34:	e014      	b.n	8002e60 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d105      	bne.n	8002e5a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	4619      	mov	r1, r3
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 fb08 	bl	800346a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	791b      	ldrb	r3, [r3, #4]
 8002e64:	461a      	mov	r2, r3
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d3e4      	bcc.n	8002e36 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f003 fa61 	bl	8006338 <USB_ReadInterrupts>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e80:	d13c      	bne.n	8002efc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e82:	2301      	movs	r3, #1
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e86:	e02b      	b.n	8002ee0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	3318      	adds	r3, #24
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d115      	bne.n	8002eda <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002eae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	da12      	bge.n	8002eda <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	3317      	adds	r3, #23
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f000 fac8 	bl	800346a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	3301      	adds	r3, #1
 8002ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	791b      	ldrb	r3, [r3, #4]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d3cd      	bcc.n	8002e88 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695a      	ldr	r2, [r3, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002efa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f003 fa19 	bl	8006338 <USB_ReadInterrupts>
 8002f06:	4603      	mov	r3, r0
 8002f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f10:	d156      	bne.n	8002fc0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f12:	2301      	movs	r3, #1
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f16:	e045      	b.n	8002fa4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4413      	add	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d12e      	bne.n	8002f9e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f40:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	da2b      	bge.n	8002f9e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002f52:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d121      	bne.n	8002f9e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f5e:	4613      	mov	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4413      	add	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f78:	6a3b      	ldr	r3, [r7, #32]
 8002f7a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	69fa      	ldr	r2, [r7, #28]
 8002f92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f9a:	6053      	str	r3, [r2, #4]
            break;
 8002f9c:	e008      	b.n	8002fb0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	791b      	ldrb	r3, [r3, #4]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d3b3      	bcc.n	8002f18 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f003 f9b7 	bl	8006338 <USB_ReadInterrupts>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fd4:	d10a      	bne.n	8002fec <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f005 fdde 	bl	8008b98 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002fea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f003 f9a1 	bl	8006338 <USB_ReadInterrupts>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d115      	bne.n	800302c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	f003 0304 	and.w	r3, r3, #4
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f005 fdce 	bl	8008bb4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6859      	ldr	r1, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	430a      	orrs	r2, r1
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	e000      	b.n	800302c <HAL_PCD_IRQHandler+0x93c>
      return;
 800302a:	bf00      	nop
    }
  }
}
 800302c:	3734      	adds	r7, #52	@ 0x34
 800302e:	46bd      	mov	sp, r7
 8003030:	bd90      	pop	{r4, r7, pc}

08003032 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
 800303a:	460b      	mov	r3, r1
 800303c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_PCD_SetAddress+0x1a>
 8003048:	2302      	movs	r3, #2
 800304a:	e012      	b.n	8003072 <HAL_PCD_SetAddress+0x40>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	78fa      	ldrb	r2, [r7, #3]
 8003058:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f003 f900 	bl	8006268 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	4608      	mov	r0, r1
 8003084:	4611      	mov	r1, r2
 8003086:	461a      	mov	r2, r3
 8003088:	4603      	mov	r3, r0
 800308a:	70fb      	strb	r3, [r7, #3]
 800308c:	460b      	mov	r3, r1
 800308e:	803b      	strh	r3, [r7, #0]
 8003090:	4613      	mov	r3, r2
 8003092:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003098:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800309c:	2b00      	cmp	r3, #0
 800309e:	da0f      	bge.n	80030c0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	f003 020f 	and.w	r2, r3, #15
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	3310      	adds	r3, #16
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	4413      	add	r3, r2
 80030b4:	3304      	adds	r3, #4
 80030b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	705a      	strb	r2, [r3, #1]
 80030be:	e00f      	b.n	80030e0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	f003 020f 	and.w	r2, r3, #15
 80030c6:	4613      	mov	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	3304      	adds	r3, #4
 80030d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030ec:	883a      	ldrh	r2, [r7, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	78ba      	ldrb	r2, [r7, #2]
 80030f6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	785b      	ldrb	r3, [r3, #1]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d004      	beq.n	800310a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800310a:	78bb      	ldrb	r3, [r7, #2]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d102      	bne.n	8003116 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <HAL_PCD_EP_Open+0xaa>
 8003120:	2302      	movs	r3, #2
 8003122:	e00e      	b.n	8003142 <HAL_PCD_EP_Open+0xc8>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68f9      	ldr	r1, [r7, #12]
 8003132:	4618      	mov	r0, r3
 8003134:	f002 fa88 	bl	8005648 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003140:	7afb      	ldrb	r3, [r7, #11]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
 8003152:	460b      	mov	r3, r1
 8003154:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003156:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800315a:	2b00      	cmp	r3, #0
 800315c:	da0f      	bge.n	800317e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	f003 020f 	and.w	r2, r3, #15
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	3310      	adds	r3, #16
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	3304      	adds	r3, #4
 8003174:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	705a      	strb	r2, [r3, #1]
 800317c:	e00f      	b.n	800319e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	f003 020f 	and.w	r2, r3, #15
 8003184:	4613      	mov	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	4413      	add	r3, r2
 8003194:	3304      	adds	r3, #4
 8003196:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_PCD_EP_Close+0x6e>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e00e      	b.n	80031d6 <HAL_PCD_EP_Close+0x8c>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68f9      	ldr	r1, [r7, #12]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f002 fac6 	bl	8005758 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b086      	sub	sp, #24
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
 80031ea:	460b      	mov	r3, r1
 80031ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031ee:	7afb      	ldrb	r3, [r7, #11]
 80031f0:	f003 020f 	and.w	r2, r3, #15
 80031f4:	4613      	mov	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	4413      	add	r3, r2
 8003204:	3304      	adds	r3, #4
 8003206:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	683a      	ldr	r2, [r7, #0]
 8003212:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2200      	movs	r2, #0
 8003218:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2200      	movs	r2, #0
 800321e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003220:	7afb      	ldrb	r3, [r7, #11]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	b2da      	uxtb	r2, r3
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	799b      	ldrb	r3, [r3, #6]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d102      	bne.n	800323a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	799b      	ldrb	r3, [r3, #6]
 8003242:	461a      	mov	r2, r3
 8003244:	6979      	ldr	r1, [r7, #20]
 8003246:	f002 fb63 	bl	8005910 <USB_EPStartXfer>

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	f003 020f 	and.w	r2, r3, #15
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	607a      	str	r2, [r7, #4]
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	460b      	mov	r3, r1
 8003292:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003294:	7afb      	ldrb	r3, [r7, #11]
 8003296:	f003 020f 	and.w	r2, r3, #15
 800329a:	4613      	mov	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	3310      	adds	r3, #16
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	3304      	adds	r3, #4
 80032aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2200      	movs	r2, #0
 80032bc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2201      	movs	r2, #1
 80032c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032c4:	7afb      	ldrb	r3, [r7, #11]
 80032c6:	f003 030f 	and.w	r3, r3, #15
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	799b      	ldrb	r3, [r3, #6]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d102      	bne.n	80032de <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	799b      	ldrb	r3, [r3, #6]
 80032e6:	461a      	mov	r2, r3
 80032e8:	6979      	ldr	r1, [r7, #20]
 80032ea:	f002 fb11 	bl	8005910 <USB_EPStartXfer>

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	f003 030f 	and.w	r3, r3, #15
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	7912      	ldrb	r2, [r2, #4]
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e04f      	b.n	80033b6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003316:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800331a:	2b00      	cmp	r3, #0
 800331c:	da0f      	bge.n	800333e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	f003 020f 	and.w	r2, r3, #15
 8003324:	4613      	mov	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	4413      	add	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	3310      	adds	r3, #16
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	3304      	adds	r3, #4
 8003334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	705a      	strb	r2, [r3, #1]
 800333c:	e00d      	b.n	800335a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	4613      	mov	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	4413      	add	r3, r2
 8003350:	3304      	adds	r3, #4
 8003352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2201      	movs	r2, #1
 800335e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	b2da      	uxtb	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_PCD_EP_SetStall+0x82>
 8003376:	2302      	movs	r3, #2
 8003378:	e01d      	b.n	80033b6 <HAL_PCD_EP_SetStall+0xbe>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68f9      	ldr	r1, [r7, #12]
 8003388:	4618      	mov	r0, r3
 800338a:	f002 fe99 	bl	80060c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800338e:	78fb      	ldrb	r3, [r7, #3]
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	2b00      	cmp	r3, #0
 8003396:	d109      	bne.n	80033ac <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	7999      	ldrb	r1, [r3, #6]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033a6:	461a      	mov	r2, r3
 80033a8:	f003 f88a 	bl	80064c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	460b      	mov	r3, r1
 80033c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	7912      	ldrb	r2, [r2, #4]
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d901      	bls.n	80033dc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e042      	b.n	8003462 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	da0f      	bge.n	8003404 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	f003 020f 	and.w	r2, r3, #15
 80033ea:	4613      	mov	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	3310      	adds	r3, #16
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	4413      	add	r3, r2
 80033f8:	3304      	adds	r3, #4
 80033fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	705a      	strb	r2, [r3, #1]
 8003402:	e00f      	b.n	8003424 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	f003 020f 	and.w	r2, r3, #15
 800340a:	4613      	mov	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	3304      	adds	r3, #4
 800341c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	b2da      	uxtb	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_PCD_EP_ClrStall+0x86>
 8003440:	2302      	movs	r3, #2
 8003442:	e00e      	b.n	8003462 <HAL_PCD_EP_ClrStall+0xa4>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68f9      	ldr	r1, [r7, #12]
 8003452:	4618      	mov	r0, r3
 8003454:	f002 fea2 	bl	800619c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b084      	sub	sp, #16
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	460b      	mov	r3, r1
 8003474:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003476:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800347a:	2b00      	cmp	r3, #0
 800347c:	da0c      	bge.n	8003498 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	f003 020f 	and.w	r2, r3, #15
 8003484:	4613      	mov	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	3310      	adds	r3, #16
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	3304      	adds	r3, #4
 8003494:	60fb      	str	r3, [r7, #12]
 8003496:	e00c      	b.n	80034b2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	f003 020f 	and.w	r2, r3, #15
 800349e:	4613      	mov	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	4413      	add	r3, r2
 80034ae:	3304      	adds	r3, #4
 80034b0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68f9      	ldr	r1, [r7, #12]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f002 fcc1 	bl	8005e40 <USB_EPStopXfer>
 80034be:	4603      	mov	r3, r0
 80034c0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80034c2:	7afb      	ldrb	r3, [r7, #11]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	@ 0x28
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	4613      	mov	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	3310      	adds	r3, #16
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4413      	add	r3, r2
 80034f0:	3304      	adds	r3, #4
 80034f2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d901      	bls.n	8003504 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e06b      	b.n	80035dc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	429a      	cmp	r2, r3
 8003518:	d902      	bls.n	8003520 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	3303      	adds	r3, #3
 8003524:	089b      	lsrs	r3, r3, #2
 8003526:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003528:	e02a      	b.n	8003580 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	691a      	ldr	r2, [r3, #16]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	429a      	cmp	r2, r3
 800353e:	d902      	bls.n	8003546 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	3303      	adds	r3, #3
 800354a:	089b      	lsrs	r3, r3, #2
 800354c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	68d9      	ldr	r1, [r3, #12]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	b2da      	uxtb	r2, r3
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	4603      	mov	r3, r0
 8003562:	6978      	ldr	r0, [r7, #20]
 8003564:	f002 fd16 	bl	8005f94 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	441a      	add	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	441a      	add	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	429a      	cmp	r2, r3
 8003594:	d809      	bhi.n	80035aa <PCD_WriteEmptyTxFifo+0xde>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	695a      	ldr	r2, [r3, #20]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800359e:	429a      	cmp	r2, r3
 80035a0:	d203      	bcs.n	80035aa <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1bf      	bne.n	800352a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	691a      	ldr	r2, [r3, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d811      	bhi.n	80035da <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	f003 030f 	and.w	r3, r3, #15
 80035bc:	2201      	movs	r2, #1
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	6939      	ldr	r1, [r7, #16]
 80035d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035d6:	4013      	ands	r3, r2
 80035d8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3720      	adds	r7, #32
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	333c      	adds	r3, #60	@ 0x3c
 80035fc:	3304      	adds	r3, #4
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	799b      	ldrb	r3, [r3, #6]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d17b      	bne.n	8003712 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d015      	beq.n	8003650 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	4a61      	ldr	r2, [pc, #388]	@ (80037ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	f240 80b9 	bls.w	80037a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 80b3 	beq.w	80037a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	4413      	add	r3, r2
 8003642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003646:	461a      	mov	r2, r3
 8003648:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800364c:	6093      	str	r3, [r2, #8]
 800364e:	e0a7      	b.n	80037a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b00      	cmp	r3, #0
 8003658:	d009      	beq.n	800366e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003666:	461a      	mov	r2, r3
 8003668:	2320      	movs	r3, #32
 800366a:	6093      	str	r3, [r2, #8]
 800366c:	e098      	b.n	80037a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003674:	2b00      	cmp	r3, #0
 8003676:	f040 8093 	bne.w	80037a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	4a4b      	ldr	r2, [pc, #300]	@ (80037ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d90f      	bls.n	80036a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	4413      	add	r3, r2
 8003694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003698:	461a      	mov	r2, r3
 800369a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800369e:	6093      	str	r3, [r2, #8]
 80036a0:	e07e      	b.n	80037a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	4413      	add	r3, r2
 80036b4:	3304      	adds	r3, #4
 80036b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a1a      	ldr	r2, [r3, #32]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	0159      	lsls	r1, r3, #5
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	440b      	add	r3, r1
 80036c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ce:	1ad2      	subs	r2, r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d114      	bne.n	8003704 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d109      	bne.n	80036f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036ec:	461a      	mov	r2, r3
 80036ee:	2101      	movs	r1, #1
 80036f0:	f002 fee6 	bl	80064c0 <USB_EP0_OutStart>
 80036f4:	e006      	b.n	8003704 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	441a      	add	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	4619      	mov	r1, r3
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f005 f98a 	bl	8008a24 <HAL_PCD_DataOutStageCallback>
 8003710:	e046      	b.n	80037a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	4a26      	ldr	r2, [pc, #152]	@ (80037b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d124      	bne.n	8003764 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003730:	461a      	mov	r2, r3
 8003732:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003736:	6093      	str	r3, [r2, #8]
 8003738:	e032      	b.n	80037a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b00      	cmp	r3, #0
 8003742:	d008      	beq.n	8003756 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003750:	461a      	mov	r2, r3
 8003752:	2320      	movs	r3, #32
 8003754:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	4619      	mov	r1, r3
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f005 f961 	bl	8008a24 <HAL_PCD_DataOutStageCallback>
 8003762:	e01d      	b.n	80037a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d114      	bne.n	8003794 <PCD_EP_OutXfrComplete_int+0x1b0>
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	4613      	mov	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d108      	bne.n	8003794 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800378c:	461a      	mov	r2, r3
 800378e:	2100      	movs	r1, #0
 8003790:	f002 fe96 	bl	80064c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	4619      	mov	r1, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f005 f942 	bl	8008a24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3720      	adds	r7, #32
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	4f54300a 	.word	0x4f54300a
 80037b0:	4f54310a 	.word	0x4f54310a

080037b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	333c      	adds	r3, #60	@ 0x3c
 80037cc:	3304      	adds	r3, #4
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4a15      	ldr	r2, [pc, #84]	@ (800383c <PCD_EP_OutSetupPacket_int+0x88>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d90e      	bls.n	8003808 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d009      	beq.n	8003808 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003800:	461a      	mov	r2, r3
 8003802:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003806:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f005 f8f9 	bl	8008a00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4a0a      	ldr	r2, [pc, #40]	@ (800383c <PCD_EP_OutSetupPacket_int+0x88>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d90c      	bls.n	8003830 <PCD_EP_OutSetupPacket_int+0x7c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	799b      	ldrb	r3, [r3, #6]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d108      	bne.n	8003830 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003828:	461a      	mov	r2, r3
 800382a:	2101      	movs	r1, #1
 800382c:	f002 fe48 	bl	80064c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	4f54300a 	.word	0x4f54300a

08003840 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	70fb      	strb	r3, [r7, #3]
 800384c:	4613      	mov	r3, r2
 800384e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003856:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003858:	78fb      	ldrb	r3, [r7, #3]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d107      	bne.n	800386e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800385e:	883b      	ldrh	r3, [r7, #0]
 8003860:	0419      	lsls	r1, r3, #16
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	430a      	orrs	r2, r1
 800386a:	629a      	str	r2, [r3, #40]	@ 0x28
 800386c:	e028      	b.n	80038c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	4413      	add	r3, r2
 800387a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800387c:	2300      	movs	r3, #0
 800387e:	73fb      	strb	r3, [r7, #15]
 8003880:	e00d      	b.n	800389e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	3340      	adds	r3, #64	@ 0x40
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	0c1b      	lsrs	r3, r3, #16
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	4413      	add	r3, r2
 8003896:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003898:	7bfb      	ldrb	r3, [r7, #15]
 800389a:	3301      	adds	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
 800389e:	7bfa      	ldrb	r2, [r7, #15]
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d3ec      	bcc.n	8003882 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038a8:	883b      	ldrh	r3, [r7, #0]
 80038aa:	0418      	lsls	r0, r3, #16
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6819      	ldr	r1, [r3, #0]
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	3b01      	subs	r3, #1
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	4302      	orrs	r2, r0
 80038b8:	3340      	adds	r3, #64	@ 0x40
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	460b      	mov	r3, r1
 80038d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	887a      	ldrh	r2, [r7, #2]
 80038e0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e267      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d075      	beq.n	8003a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003926:	4b88      	ldr	r3, [pc, #544]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b04      	cmp	r3, #4
 8003930:	d00c      	beq.n	800394c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003932:	4b85      	ldr	r3, [pc, #532]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800393a:	2b08      	cmp	r3, #8
 800393c:	d112      	bne.n	8003964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800393e:	4b82      	ldr	r3, [pc, #520]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003946:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800394a:	d10b      	bne.n	8003964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d05b      	beq.n	8003a10 <HAL_RCC_OscConfig+0x108>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d157      	bne.n	8003a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e242      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800396c:	d106      	bne.n	800397c <HAL_RCC_OscConfig+0x74>
 800396e:	4b76      	ldr	r3, [pc, #472]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a75      	ldr	r2, [pc, #468]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e01d      	b.n	80039b8 <HAL_RCC_OscConfig+0xb0>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003984:	d10c      	bne.n	80039a0 <HAL_RCC_OscConfig+0x98>
 8003986:	4b70      	ldr	r3, [pc, #448]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a6f      	ldr	r2, [pc, #444]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 800398c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003990:	6013      	str	r3, [r2, #0]
 8003992:	4b6d      	ldr	r3, [pc, #436]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a6c      	ldr	r2, [pc, #432]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	e00b      	b.n	80039b8 <HAL_RCC_OscConfig+0xb0>
 80039a0:	4b69      	ldr	r3, [pc, #420]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a68      	ldr	r2, [pc, #416]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 80039a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	4b66      	ldr	r3, [pc, #408]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a65      	ldr	r2, [pc, #404]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 80039b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d013      	beq.n	80039e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7fd fb34 	bl	800102c <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039c8:	f7fd fb30 	bl	800102c <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b64      	cmp	r3, #100	@ 0x64
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e207      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039da:	4b5b      	ldr	r3, [pc, #364]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0xc0>
 80039e6:	e014      	b.n	8003a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e8:	f7fd fb20 	bl	800102c <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039f0:	f7fd fb1c 	bl	800102c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	@ 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e1f3      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a02:	4b51      	ldr	r3, [pc, #324]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0xe8>
 8003a0e:	e000      	b.n	8003a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d063      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 030c 	and.w	r3, r3, #12
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2a:	4b47      	ldr	r3, [pc, #284]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d11c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a36:	4b44      	ldr	r3, [pc, #272]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d116      	bne.n	8003a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a42:	4b41      	ldr	r3, [pc, #260]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <HAL_RCC_OscConfig+0x152>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d001      	beq.n	8003a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e1c7      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	00db      	lsls	r3, r3, #3
 8003a68:	4937      	ldr	r1, [pc, #220]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a6e:	e03a      	b.n	8003ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d020      	beq.n	8003aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a78:	4b34      	ldr	r3, [pc, #208]	@ (8003b4c <HAL_RCC_OscConfig+0x244>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7e:	f7fd fad5 	bl	800102c <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a86:	f7fd fad1 	bl	800102c <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e1a8      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a98:	4b2b      	ldr	r3, [pc, #172]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0302 	and.w	r3, r3, #2
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0f0      	beq.n	8003a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa4:	4b28      	ldr	r3, [pc, #160]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4925      	ldr	r1, [pc, #148]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	600b      	str	r3, [r1, #0]
 8003ab8:	e015      	b.n	8003ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aba:	4b24      	ldr	r3, [pc, #144]	@ (8003b4c <HAL_RCC_OscConfig+0x244>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fd fab4 	bl	800102c <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac8:	f7fd fab0 	bl	800102c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e187      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ada:	4b1b      	ldr	r3, [pc, #108]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d036      	beq.n	8003b60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d016      	beq.n	8003b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003afa:	4b15      	ldr	r3, [pc, #84]	@ (8003b50 <HAL_RCC_OscConfig+0x248>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b00:	f7fd fa94 	bl	800102c <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b08:	f7fd fa90 	bl	800102c <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e167      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b48 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0x200>
 8003b26:	e01b      	b.n	8003b60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b28:	4b09      	ldr	r3, [pc, #36]	@ (8003b50 <HAL_RCC_OscConfig+0x248>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2e:	f7fd fa7d 	bl	800102c <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b34:	e00e      	b.n	8003b54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b36:	f7fd fa79 	bl	800102c <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d907      	bls.n	8003b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b44:	2303      	movs	r3, #3
 8003b46:	e150      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	42470000 	.word	0x42470000
 8003b50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b54:	4b88      	ldr	r3, [pc, #544]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1ea      	bne.n	8003b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f000 8097 	beq.w	8003c9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b72:	4b81      	ldr	r3, [pc, #516]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10f      	bne.n	8003b9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	4b7d      	ldr	r3, [pc, #500]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b86:	4a7c      	ldr	r2, [pc, #496]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b96:	60bb      	str	r3, [r7, #8]
 8003b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b9e:	4b77      	ldr	r3, [pc, #476]	@ (8003d7c <HAL_RCC_OscConfig+0x474>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d118      	bne.n	8003bdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003baa:	4b74      	ldr	r3, [pc, #464]	@ (8003d7c <HAL_RCC_OscConfig+0x474>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a73      	ldr	r2, [pc, #460]	@ (8003d7c <HAL_RCC_OscConfig+0x474>)
 8003bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb6:	f7fd fa39 	bl	800102c <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bbe:	f7fd fa35 	bl	800102c <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e10c      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd0:	4b6a      	ldr	r3, [pc, #424]	@ (8003d7c <HAL_RCC_OscConfig+0x474>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0f0      	beq.n	8003bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d106      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x2ea>
 8003be4:	4b64      	ldr	r3, [pc, #400]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be8:	4a63      	ldr	r2, [pc, #396]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bf0:	e01c      	b.n	8003c2c <HAL_RCC_OscConfig+0x324>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b05      	cmp	r3, #5
 8003bf8:	d10c      	bne.n	8003c14 <HAL_RCC_OscConfig+0x30c>
 8003bfa:	4b5f      	ldr	r3, [pc, #380]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bfe:	4a5e      	ldr	r2, [pc, #376]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c00:	f043 0304 	orr.w	r3, r3, #4
 8003c04:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c06:	4b5c      	ldr	r3, [pc, #368]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c0a:	4a5b      	ldr	r2, [pc, #364]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	f043 0301 	orr.w	r3, r3, #1
 8003c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c12:	e00b      	b.n	8003c2c <HAL_RCC_OscConfig+0x324>
 8003c14:	4b58      	ldr	r3, [pc, #352]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c18:	4a57      	ldr	r2, [pc, #348]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c1a:	f023 0301 	bic.w	r3, r3, #1
 8003c1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c20:	4b55      	ldr	r3, [pc, #340]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c24:	4a54      	ldr	r2, [pc, #336]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c26:	f023 0304 	bic.w	r3, r3, #4
 8003c2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d015      	beq.n	8003c60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c34:	f7fd f9fa 	bl	800102c <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3a:	e00a      	b.n	8003c52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c3c:	f7fd f9f6 	bl	800102c <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e0cb      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c52:	4b49      	ldr	r3, [pc, #292]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0ee      	beq.n	8003c3c <HAL_RCC_OscConfig+0x334>
 8003c5e:	e014      	b.n	8003c8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c60:	f7fd f9e4 	bl	800102c <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c66:	e00a      	b.n	8003c7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c68:	f7fd f9e0 	bl	800102c <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e0b5      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1ee      	bne.n	8003c68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d105      	bne.n	8003c9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c90:	4b39      	ldr	r3, [pc, #228]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c94:	4a38      	ldr	r2, [pc, #224]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003c96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80a1 	beq.w	8003de8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ca6:	4b34      	ldr	r3, [pc, #208]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d05c      	beq.n	8003d6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d141      	bne.n	8003d3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cba:	4b31      	ldr	r3, [pc, #196]	@ (8003d80 <HAL_RCC_OscConfig+0x478>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc0:	f7fd f9b4 	bl	800102c <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc8:	f7fd f9b0 	bl	800102c <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e087      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cda:	4b27      	ldr	r3, [pc, #156]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f0      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69da      	ldr	r2, [r3, #28]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf4:	019b      	lsls	r3, r3, #6
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfc:	085b      	lsrs	r3, r3, #1
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	041b      	lsls	r3, r3, #16
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d08:	061b      	lsls	r3, r3, #24
 8003d0a:	491b      	ldr	r1, [pc, #108]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d10:	4b1b      	ldr	r3, [pc, #108]	@ (8003d80 <HAL_RCC_OscConfig+0x478>)
 8003d12:	2201      	movs	r2, #1
 8003d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d16:	f7fd f989 	bl	800102c <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d1e:	f7fd f985 	bl	800102c <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e05c      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d30:	4b11      	ldr	r3, [pc, #68]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x416>
 8003d3c:	e054      	b.n	8003de8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d3e:	4b10      	ldr	r3, [pc, #64]	@ (8003d80 <HAL_RCC_OscConfig+0x478>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d44:	f7fd f972 	bl	800102c <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d4c:	f7fd f96e 	bl	800102c <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e045      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d5e:	4b06      	ldr	r3, [pc, #24]	@ (8003d78 <HAL_RCC_OscConfig+0x470>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x444>
 8003d6a:	e03d      	b.n	8003de8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d107      	bne.n	8003d84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e038      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	40007000 	.word	0x40007000
 8003d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d84:	4b1b      	ldr	r3, [pc, #108]	@ (8003df4 <HAL_RCC_OscConfig+0x4ec>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d028      	beq.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d121      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d11a      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003db4:	4013      	ands	r3, r2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d111      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dca:	085b      	lsrs	r3, r3, #1
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d107      	bne.n	8003de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40023800 	.word	0x40023800

08003df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e0cc      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e0c:	4b68      	ldr	r3, [pc, #416]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d90c      	bls.n	8003e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1a:	4b65      	ldr	r3, [pc, #404]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e22:	4b63      	ldr	r3, [pc, #396]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e0b8      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d020      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e4c:	4b59      	ldr	r3, [pc, #356]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	4a58      	ldr	r2, [pc, #352]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d005      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e64:	4b53      	ldr	r3, [pc, #332]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	4a52      	ldr	r2, [pc, #328]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e70:	4b50      	ldr	r3, [pc, #320]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	494d      	ldr	r1, [pc, #308]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d044      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d107      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e96:	4b47      	ldr	r3, [pc, #284]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d119      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e07f      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d003      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d107      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d109      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e06f      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e067      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ed6:	4b37      	ldr	r3, [pc, #220]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f023 0203 	bic.w	r2, r3, #3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	4934      	ldr	r1, [pc, #208]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ee8:	f7fd f8a0 	bl	800102c <HAL_GetTick>
 8003eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eee:	e00a      	b.n	8003f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef0:	f7fd f89c 	bl	800102c <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e04f      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f06:	4b2b      	ldr	r3, [pc, #172]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 020c 	and.w	r2, r3, #12
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d1eb      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f18:	4b25      	ldr	r3, [pc, #148]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d20c      	bcs.n	8003f40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f26:	4b22      	ldr	r3, [pc, #136]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2e:	4b20      	ldr	r3, [pc, #128]	@ (8003fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e032      	b.n	8003fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d008      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f4c:	4b19      	ldr	r3, [pc, #100]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	4916      	ldr	r1, [pc, #88]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f6a:	4b12      	ldr	r3, [pc, #72]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	490e      	ldr	r1, [pc, #56]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f7e:	f000 f821 	bl	8003fc4 <HAL_RCC_GetSysClockFreq>
 8003f82:	4602      	mov	r2, r0
 8003f84:	4b0b      	ldr	r3, [pc, #44]	@ (8003fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	091b      	lsrs	r3, r3, #4
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	490a      	ldr	r1, [pc, #40]	@ (8003fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003f90:	5ccb      	ldrb	r3, [r1, r3]
 8003f92:	fa22 f303 	lsr.w	r3, r2, r3
 8003f96:	4a09      	ldr	r2, [pc, #36]	@ (8003fbc <HAL_RCC_ClockConfig+0x1c4>)
 8003f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f9a:	4b09      	ldr	r3, [pc, #36]	@ (8003fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7fd f800 	bl	8000fa4 <HAL_InitTick>

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40023c00 	.word	0x40023c00
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	08009024 	.word	0x08009024
 8003fbc:	20000000 	.word	0x20000000
 8003fc0:	20000004 	.word	0x20000004

08003fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fc8:	b090      	sub	sp, #64	@ 0x40
 8003fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	637b      	str	r3, [r7, #52]	@ 0x34
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fdc:	4b59      	ldr	r3, [pc, #356]	@ (8004144 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f003 030c 	and.w	r3, r3, #12
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d00d      	beq.n	8004004 <HAL_RCC_GetSysClockFreq+0x40>
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	f200 80a1 	bhi.w	8004130 <HAL_RCC_GetSysClockFreq+0x16c>
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d003      	beq.n	8003ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8003ff6:	e09b      	b.n	8004130 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ff8:	4b53      	ldr	r3, [pc, #332]	@ (8004148 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003ffc:	e09b      	b.n	8004136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ffe:	4b53      	ldr	r3, [pc, #332]	@ (800414c <HAL_RCC_GetSysClockFreq+0x188>)
 8004000:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004002:	e098      	b.n	8004136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004004:	4b4f      	ldr	r3, [pc, #316]	@ (8004144 <HAL_RCC_GetSysClockFreq+0x180>)
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800400c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800400e:	4b4d      	ldr	r3, [pc, #308]	@ (8004144 <HAL_RCC_GetSysClockFreq+0x180>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d028      	beq.n	800406c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800401a:	4b4a      	ldr	r3, [pc, #296]	@ (8004144 <HAL_RCC_GetSysClockFreq+0x180>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	099b      	lsrs	r3, r3, #6
 8004020:	2200      	movs	r2, #0
 8004022:	623b      	str	r3, [r7, #32]
 8004024:	627a      	str	r2, [r7, #36]	@ 0x24
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800402c:	2100      	movs	r1, #0
 800402e:	4b47      	ldr	r3, [pc, #284]	@ (800414c <HAL_RCC_GetSysClockFreq+0x188>)
 8004030:	fb03 f201 	mul.w	r2, r3, r1
 8004034:	2300      	movs	r3, #0
 8004036:	fb00 f303 	mul.w	r3, r0, r3
 800403a:	4413      	add	r3, r2
 800403c:	4a43      	ldr	r2, [pc, #268]	@ (800414c <HAL_RCC_GetSysClockFreq+0x188>)
 800403e:	fba0 1202 	umull	r1, r2, r0, r2
 8004042:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004044:	460a      	mov	r2, r1
 8004046:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004048:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800404a:	4413      	add	r3, r2
 800404c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800404e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004050:	2200      	movs	r2, #0
 8004052:	61bb      	str	r3, [r7, #24]
 8004054:	61fa      	str	r2, [r7, #28]
 8004056:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800405a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800405e:	f7fc f8b9 	bl	80001d4 <__aeabi_uldivmod>
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	4613      	mov	r3, r2
 8004068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800406a:	e053      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800406c:	4b35      	ldr	r3, [pc, #212]	@ (8004144 <HAL_RCC_GetSysClockFreq+0x180>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	099b      	lsrs	r3, r3, #6
 8004072:	2200      	movs	r2, #0
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	617a      	str	r2, [r7, #20]
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800407e:	f04f 0b00 	mov.w	fp, #0
 8004082:	4652      	mov	r2, sl
 8004084:	465b      	mov	r3, fp
 8004086:	f04f 0000 	mov.w	r0, #0
 800408a:	f04f 0100 	mov.w	r1, #0
 800408e:	0159      	lsls	r1, r3, #5
 8004090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004094:	0150      	lsls	r0, r2, #5
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	ebb2 080a 	subs.w	r8, r2, sl
 800409e:	eb63 090b 	sbc.w	r9, r3, fp
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80040ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80040b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80040b6:	ebb2 0408 	subs.w	r4, r2, r8
 80040ba:	eb63 0509 	sbc.w	r5, r3, r9
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	00eb      	lsls	r3, r5, #3
 80040c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040cc:	00e2      	lsls	r2, r4, #3
 80040ce:	4614      	mov	r4, r2
 80040d0:	461d      	mov	r5, r3
 80040d2:	eb14 030a 	adds.w	r3, r4, sl
 80040d6:	603b      	str	r3, [r7, #0]
 80040d8:	eb45 030b 	adc.w	r3, r5, fp
 80040dc:	607b      	str	r3, [r7, #4]
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	f04f 0300 	mov.w	r3, #0
 80040e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ea:	4629      	mov	r1, r5
 80040ec:	028b      	lsls	r3, r1, #10
 80040ee:	4621      	mov	r1, r4
 80040f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040f4:	4621      	mov	r1, r4
 80040f6:	028a      	lsls	r2, r1, #10
 80040f8:	4610      	mov	r0, r2
 80040fa:	4619      	mov	r1, r3
 80040fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040fe:	2200      	movs	r2, #0
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	60fa      	str	r2, [r7, #12]
 8004104:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004108:	f7fc f864 	bl	80001d4 <__aeabi_uldivmod>
 800410c:	4602      	mov	r2, r0
 800410e:	460b      	mov	r3, r1
 8004110:	4613      	mov	r3, r2
 8004112:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004114:	4b0b      	ldr	r3, [pc, #44]	@ (8004144 <HAL_RCC_GetSysClockFreq+0x180>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	0c1b      	lsrs	r3, r3, #16
 800411a:	f003 0303 	and.w	r3, r3, #3
 800411e:	3301      	adds	r3, #1
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004124:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004128:	fbb2 f3f3 	udiv	r3, r2, r3
 800412c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800412e:	e002      	b.n	8004136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004130:	4b05      	ldr	r3, [pc, #20]	@ (8004148 <HAL_RCC_GetSysClockFreq+0x184>)
 8004132:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004138:	4618      	mov	r0, r3
 800413a:	3740      	adds	r7, #64	@ 0x40
 800413c:	46bd      	mov	sp, r7
 800413e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004142:	bf00      	nop
 8004144:	40023800 	.word	0x40023800
 8004148:	00f42400 	.word	0x00f42400
 800414c:	017d7840 	.word	0x017d7840

08004150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004154:	4b03      	ldr	r3, [pc, #12]	@ (8004164 <HAL_RCC_GetHCLKFreq+0x14>)
 8004156:	681b      	ldr	r3, [r3, #0]
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	20000000 	.word	0x20000000

08004168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e041      	b.n	80041fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d106      	bne.n	8004194 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fc fd80 	bl	8000c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3304      	adds	r3, #4
 80041a4:	4619      	mov	r1, r3
 80041a6:	4610      	mov	r0, r2
 80041a8:	f000 fb02 	bl	80047b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b082      	sub	sp, #8
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e041      	b.n	800429c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d106      	bne.n	8004232 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f839 	bl	80042a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2202      	movs	r2, #2
 8004236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	3304      	adds	r3, #4
 8004242:	4619      	mov	r1, r3
 8004244:	4610      	mov	r0, r2
 8004246:	f000 fab3 	bl	80047b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2201      	movs	r2, #1
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3708      	adds	r7, #8
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d109      	bne.n	80042dc <HAL_TIM_PWM_Start+0x24>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	bf14      	ite	ne
 80042d4:	2301      	movne	r3, #1
 80042d6:	2300      	moveq	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	e022      	b.n	8004322 <HAL_TIM_PWM_Start+0x6a>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d109      	bne.n	80042f6 <HAL_TIM_PWM_Start+0x3e>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	bf14      	ite	ne
 80042ee:	2301      	movne	r3, #1
 80042f0:	2300      	moveq	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	e015      	b.n	8004322 <HAL_TIM_PWM_Start+0x6a>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d109      	bne.n	8004310 <HAL_TIM_PWM_Start+0x58>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	bf14      	ite	ne
 8004308:	2301      	movne	r3, #1
 800430a:	2300      	moveq	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	e008      	b.n	8004322 <HAL_TIM_PWM_Start+0x6a>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b01      	cmp	r3, #1
 800431a:	bf14      	ite	ne
 800431c:	2301      	movne	r3, #1
 800431e:	2300      	moveq	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e068      	b.n	80043fc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d104      	bne.n	800433a <HAL_TIM_PWM_Start+0x82>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2202      	movs	r2, #2
 8004334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004338:	e013      	b.n	8004362 <HAL_TIM_PWM_Start+0xaa>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b04      	cmp	r3, #4
 800433e:	d104      	bne.n	800434a <HAL_TIM_PWM_Start+0x92>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004348:	e00b      	b.n	8004362 <HAL_TIM_PWM_Start+0xaa>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b08      	cmp	r3, #8
 800434e:	d104      	bne.n	800435a <HAL_TIM_PWM_Start+0xa2>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004358:	e003      	b.n	8004362 <HAL_TIM_PWM_Start+0xaa>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2202      	movs	r2, #2
 800435e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2201      	movs	r2, #1
 8004368:	6839      	ldr	r1, [r7, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fd63 	bl	8004e36 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a23      	ldr	r2, [pc, #140]	@ (8004404 <HAL_TIM_PWM_Start+0x14c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d107      	bne.n	800438a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004388:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1d      	ldr	r2, [pc, #116]	@ (8004404 <HAL_TIM_PWM_Start+0x14c>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d018      	beq.n	80043c6 <HAL_TIM_PWM_Start+0x10e>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800439c:	d013      	beq.n	80043c6 <HAL_TIM_PWM_Start+0x10e>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a19      	ldr	r2, [pc, #100]	@ (8004408 <HAL_TIM_PWM_Start+0x150>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d00e      	beq.n	80043c6 <HAL_TIM_PWM_Start+0x10e>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a17      	ldr	r2, [pc, #92]	@ (800440c <HAL_TIM_PWM_Start+0x154>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d009      	beq.n	80043c6 <HAL_TIM_PWM_Start+0x10e>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a16      	ldr	r2, [pc, #88]	@ (8004410 <HAL_TIM_PWM_Start+0x158>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d004      	beq.n	80043c6 <HAL_TIM_PWM_Start+0x10e>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a14      	ldr	r2, [pc, #80]	@ (8004414 <HAL_TIM_PWM_Start+0x15c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d111      	bne.n	80043ea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 0307 	and.w	r3, r3, #7
 80043d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b06      	cmp	r3, #6
 80043d6:	d010      	beq.n	80043fa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e8:	e007      	b.n	80043fa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0201 	orr.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40010000 	.word	0x40010000
 8004408:	40000400 	.word	0x40000400
 800440c:	40000800 	.word	0x40000800
 8004410:	40000c00 	.word	0x40000c00
 8004414:	40014000 	.word	0x40014000

08004418 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004432:	2302      	movs	r3, #2
 8004434:	e0ae      	b.n	8004594 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b0c      	cmp	r3, #12
 8004442:	f200 809f 	bhi.w	8004584 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004446:	a201      	add	r2, pc, #4	@ (adr r2, 800444c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	08004481 	.word	0x08004481
 8004450:	08004585 	.word	0x08004585
 8004454:	08004585 	.word	0x08004585
 8004458:	08004585 	.word	0x08004585
 800445c:	080044c1 	.word	0x080044c1
 8004460:	08004585 	.word	0x08004585
 8004464:	08004585 	.word	0x08004585
 8004468:	08004585 	.word	0x08004585
 800446c:	08004503 	.word	0x08004503
 8004470:	08004585 	.word	0x08004585
 8004474:	08004585 	.word	0x08004585
 8004478:	08004585 	.word	0x08004585
 800447c:	08004543 	.word	0x08004543
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68b9      	ldr	r1, [r7, #8]
 8004486:	4618      	mov	r0, r3
 8004488:	f000 fa1e 	bl	80048c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699a      	ldr	r2, [r3, #24]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0208 	orr.w	r2, r2, #8
 800449a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699a      	ldr	r2, [r3, #24]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0204 	bic.w	r2, r2, #4
 80044aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6999      	ldr	r1, [r3, #24]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	619a      	str	r2, [r3, #24]
      break;
 80044be:	e064      	b.n	800458a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68b9      	ldr	r1, [r7, #8]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fa64 	bl	8004994 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699a      	ldr	r2, [r3, #24]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	699a      	ldr	r2, [r3, #24]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6999      	ldr	r1, [r3, #24]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	021a      	lsls	r2, r3, #8
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	619a      	str	r2, [r3, #24]
      break;
 8004500:	e043      	b.n	800458a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68b9      	ldr	r1, [r7, #8]
 8004508:	4618      	mov	r0, r3
 800450a:	f000 faaf 	bl	8004a6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69da      	ldr	r2, [r3, #28]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0208 	orr.w	r2, r2, #8
 800451c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	69da      	ldr	r2, [r3, #28]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0204 	bic.w	r2, r2, #4
 800452c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69d9      	ldr	r1, [r3, #28]
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	691a      	ldr	r2, [r3, #16]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	61da      	str	r2, [r3, #28]
      break;
 8004540:	e023      	b.n	800458a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68b9      	ldr	r1, [r7, #8]
 8004548:	4618      	mov	r0, r3
 800454a:	f000 faf9 	bl	8004b40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69da      	ldr	r2, [r3, #28]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800455c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	69da      	ldr	r2, [r3, #28]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800456c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69d9      	ldr	r1, [r3, #28]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	021a      	lsls	r2, r3, #8
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	61da      	str	r2, [r3, #28]
      break;
 8004582:	e002      	b.n	800458a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	75fb      	strb	r3, [r7, #23]
      break;
 8004588:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004592:	7dfb      	ldrb	r3, [r7, #23]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_TIM_ConfigClockSource+0x1c>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e0b4      	b.n	8004722 <HAL_TIM_ConfigClockSource+0x186>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80045d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045f0:	d03e      	beq.n	8004670 <HAL_TIM_ConfigClockSource+0xd4>
 80045f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045f6:	f200 8087 	bhi.w	8004708 <HAL_TIM_ConfigClockSource+0x16c>
 80045fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045fe:	f000 8086 	beq.w	800470e <HAL_TIM_ConfigClockSource+0x172>
 8004602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004606:	d87f      	bhi.n	8004708 <HAL_TIM_ConfigClockSource+0x16c>
 8004608:	2b70      	cmp	r3, #112	@ 0x70
 800460a:	d01a      	beq.n	8004642 <HAL_TIM_ConfigClockSource+0xa6>
 800460c:	2b70      	cmp	r3, #112	@ 0x70
 800460e:	d87b      	bhi.n	8004708 <HAL_TIM_ConfigClockSource+0x16c>
 8004610:	2b60      	cmp	r3, #96	@ 0x60
 8004612:	d050      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x11a>
 8004614:	2b60      	cmp	r3, #96	@ 0x60
 8004616:	d877      	bhi.n	8004708 <HAL_TIM_ConfigClockSource+0x16c>
 8004618:	2b50      	cmp	r3, #80	@ 0x50
 800461a:	d03c      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0xfa>
 800461c:	2b50      	cmp	r3, #80	@ 0x50
 800461e:	d873      	bhi.n	8004708 <HAL_TIM_ConfigClockSource+0x16c>
 8004620:	2b40      	cmp	r3, #64	@ 0x40
 8004622:	d058      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x13a>
 8004624:	2b40      	cmp	r3, #64	@ 0x40
 8004626:	d86f      	bhi.n	8004708 <HAL_TIM_ConfigClockSource+0x16c>
 8004628:	2b30      	cmp	r3, #48	@ 0x30
 800462a:	d064      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0x15a>
 800462c:	2b30      	cmp	r3, #48	@ 0x30
 800462e:	d86b      	bhi.n	8004708 <HAL_TIM_ConfigClockSource+0x16c>
 8004630:	2b20      	cmp	r3, #32
 8004632:	d060      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0x15a>
 8004634:	2b20      	cmp	r3, #32
 8004636:	d867      	bhi.n	8004708 <HAL_TIM_ConfigClockSource+0x16c>
 8004638:	2b00      	cmp	r3, #0
 800463a:	d05c      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0x15a>
 800463c:	2b10      	cmp	r3, #16
 800463e:	d05a      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0x15a>
 8004640:	e062      	b.n	8004708 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004652:	f000 fbd0 	bl	8004df6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004664:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	609a      	str	r2, [r3, #8]
      break;
 800466e:	e04f      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004680:	f000 fbb9 	bl	8004df6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004692:	609a      	str	r2, [r3, #8]
      break;
 8004694:	e03c      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046a2:	461a      	mov	r2, r3
 80046a4:	f000 fb2d 	bl	8004d02 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2150      	movs	r1, #80	@ 0x50
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fb86 	bl	8004dc0 <TIM_ITRx_SetConfig>
      break;
 80046b4:	e02c      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046c2:	461a      	mov	r2, r3
 80046c4:	f000 fb4c 	bl	8004d60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2160      	movs	r1, #96	@ 0x60
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fb76 	bl	8004dc0 <TIM_ITRx_SetConfig>
      break;
 80046d4:	e01c      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e2:	461a      	mov	r2, r3
 80046e4:	f000 fb0d 	bl	8004d02 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2140      	movs	r1, #64	@ 0x40
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fb66 	bl	8004dc0 <TIM_ITRx_SetConfig>
      break;
 80046f4:	e00c      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4619      	mov	r1, r3
 8004700:	4610      	mov	r0, r2
 8004702:	f000 fb5d 	bl	8004dc0 <TIM_ITRx_SetConfig>
      break;
 8004706:	e003      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
      break;
 800470c:	e000      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800470e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004720:	7bfb      	ldrb	r3, [r7, #15]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_TIM_SlaveConfigSynchro+0x18>
 800473e:	2302      	movs	r3, #2
 8004740:	e031      	b.n	80047a6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2202      	movs	r2, #2
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004752:	6839      	ldr	r1, [r7, #0]
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 fa43 	bl	8004be0 <TIM_SlaveTimer_SetConfig>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d009      	beq.n	8004774 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e018      	b.n	80047a6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004782:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004792:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3708      	adds	r7, #8
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a3a      	ldr	r2, [pc, #232]	@ (80048ac <TIM_Base_SetConfig+0xfc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00f      	beq.n	80047e8 <TIM_Base_SetConfig+0x38>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047ce:	d00b      	beq.n	80047e8 <TIM_Base_SetConfig+0x38>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a37      	ldr	r2, [pc, #220]	@ (80048b0 <TIM_Base_SetConfig+0x100>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d007      	beq.n	80047e8 <TIM_Base_SetConfig+0x38>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a36      	ldr	r2, [pc, #216]	@ (80048b4 <TIM_Base_SetConfig+0x104>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d003      	beq.n	80047e8 <TIM_Base_SetConfig+0x38>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a35      	ldr	r2, [pc, #212]	@ (80048b8 <TIM_Base_SetConfig+0x108>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d108      	bne.n	80047fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a2b      	ldr	r2, [pc, #172]	@ (80048ac <TIM_Base_SetConfig+0xfc>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d01b      	beq.n	800483a <TIM_Base_SetConfig+0x8a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004808:	d017      	beq.n	800483a <TIM_Base_SetConfig+0x8a>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a28      	ldr	r2, [pc, #160]	@ (80048b0 <TIM_Base_SetConfig+0x100>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d013      	beq.n	800483a <TIM_Base_SetConfig+0x8a>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a27      	ldr	r2, [pc, #156]	@ (80048b4 <TIM_Base_SetConfig+0x104>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00f      	beq.n	800483a <TIM_Base_SetConfig+0x8a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a26      	ldr	r2, [pc, #152]	@ (80048b8 <TIM_Base_SetConfig+0x108>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d00b      	beq.n	800483a <TIM_Base_SetConfig+0x8a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a25      	ldr	r2, [pc, #148]	@ (80048bc <TIM_Base_SetConfig+0x10c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d007      	beq.n	800483a <TIM_Base_SetConfig+0x8a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a24      	ldr	r2, [pc, #144]	@ (80048c0 <TIM_Base_SetConfig+0x110>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d003      	beq.n	800483a <TIM_Base_SetConfig+0x8a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a23      	ldr	r2, [pc, #140]	@ (80048c4 <TIM_Base_SetConfig+0x114>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d108      	bne.n	800484c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a0e      	ldr	r2, [pc, #56]	@ (80048ac <TIM_Base_SetConfig+0xfc>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d103      	bne.n	8004880 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b01      	cmp	r3, #1
 8004890:	d105      	bne.n	800489e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f023 0201 	bic.w	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	611a      	str	r2, [r3, #16]
  }
}
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40010000 	.word	0x40010000
 80048b0:	40000400 	.word	0x40000400
 80048b4:	40000800 	.word	0x40000800
 80048b8:	40000c00 	.word	0x40000c00
 80048bc:	40014000 	.word	0x40014000
 80048c0:	40014400 	.word	0x40014400
 80048c4:	40014800 	.word	0x40014800

080048c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	f023 0201 	bic.w	r2, r3, #1
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0303 	bic.w	r3, r3, #3
 80048fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f023 0302 	bic.w	r3, r3, #2
 8004910:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a1c      	ldr	r2, [pc, #112]	@ (8004990 <TIM_OC1_SetConfig+0xc8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d10c      	bne.n	800493e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f023 0308 	bic.w	r3, r3, #8
 800492a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f023 0304 	bic.w	r3, r3, #4
 800493c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a13      	ldr	r2, [pc, #76]	@ (8004990 <TIM_OC1_SetConfig+0xc8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d111      	bne.n	800496a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800494c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	621a      	str	r2, [r3, #32]
}
 8004984:	bf00      	nop
 8004986:	371c      	adds	r7, #28
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	40010000 	.word	0x40010000

08004994 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f023 0210 	bic.w	r2, r3, #16
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	021b      	lsls	r3, r3, #8
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f023 0320 	bic.w	r3, r3, #32
 80049de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004a68 <TIM_OC2_SetConfig+0xd4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d10d      	bne.n	8004a10 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a15      	ldr	r2, [pc, #84]	@ (8004a68 <TIM_OC2_SetConfig+0xd4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d113      	bne.n	8004a40 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	621a      	str	r2, [r3, #32]
}
 8004a5a:	bf00      	nop
 8004a5c:	371c      	adds	r7, #28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	40010000 	.word	0x40010000

08004a6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0303 	bic.w	r3, r3, #3
 8004aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	021b      	lsls	r3, r3, #8
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b3c <TIM_OC3_SetConfig+0xd0>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d10d      	bne.n	8004ae6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ad0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	021b      	lsls	r3, r3, #8
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a14      	ldr	r2, [pc, #80]	@ (8004b3c <TIM_OC3_SetConfig+0xd0>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d113      	bne.n	8004b16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	621a      	str	r2, [r3, #32]
}
 8004b30:	bf00      	nop
 8004b32:	371c      	adds	r7, #28
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	40010000 	.word	0x40010000

08004b40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	021b      	lsls	r3, r3, #8
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	031b      	lsls	r3, r3, #12
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a10      	ldr	r2, [pc, #64]	@ (8004bdc <TIM_OC4_SetConfig+0x9c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d109      	bne.n	8004bb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ba6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	019b      	lsls	r3, r3, #6
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	621a      	str	r2, [r3, #32]
}
 8004bce:	bf00      	nop
 8004bd0:	371c      	adds	r7, #28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40010000 	.word	0x40010000

08004be0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bea:	2300      	movs	r3, #0
 8004bec:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bfc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	f023 0307 	bic.w	r3, r3, #7
 8004c0e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b70      	cmp	r3, #112	@ 0x70
 8004c28:	d01a      	beq.n	8004c60 <TIM_SlaveTimer_SetConfig+0x80>
 8004c2a:	2b70      	cmp	r3, #112	@ 0x70
 8004c2c:	d860      	bhi.n	8004cf0 <TIM_SlaveTimer_SetConfig+0x110>
 8004c2e:	2b60      	cmp	r3, #96	@ 0x60
 8004c30:	d054      	beq.n	8004cdc <TIM_SlaveTimer_SetConfig+0xfc>
 8004c32:	2b60      	cmp	r3, #96	@ 0x60
 8004c34:	d85c      	bhi.n	8004cf0 <TIM_SlaveTimer_SetConfig+0x110>
 8004c36:	2b50      	cmp	r3, #80	@ 0x50
 8004c38:	d046      	beq.n	8004cc8 <TIM_SlaveTimer_SetConfig+0xe8>
 8004c3a:	2b50      	cmp	r3, #80	@ 0x50
 8004c3c:	d858      	bhi.n	8004cf0 <TIM_SlaveTimer_SetConfig+0x110>
 8004c3e:	2b40      	cmp	r3, #64	@ 0x40
 8004c40:	d019      	beq.n	8004c76 <TIM_SlaveTimer_SetConfig+0x96>
 8004c42:	2b40      	cmp	r3, #64	@ 0x40
 8004c44:	d854      	bhi.n	8004cf0 <TIM_SlaveTimer_SetConfig+0x110>
 8004c46:	2b30      	cmp	r3, #48	@ 0x30
 8004c48:	d055      	beq.n	8004cf6 <TIM_SlaveTimer_SetConfig+0x116>
 8004c4a:	2b30      	cmp	r3, #48	@ 0x30
 8004c4c:	d850      	bhi.n	8004cf0 <TIM_SlaveTimer_SetConfig+0x110>
 8004c4e:	2b20      	cmp	r3, #32
 8004c50:	d051      	beq.n	8004cf6 <TIM_SlaveTimer_SetConfig+0x116>
 8004c52:	2b20      	cmp	r3, #32
 8004c54:	d84c      	bhi.n	8004cf0 <TIM_SlaveTimer_SetConfig+0x110>
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d04d      	beq.n	8004cf6 <TIM_SlaveTimer_SetConfig+0x116>
 8004c5a:	2b10      	cmp	r3, #16
 8004c5c:	d04b      	beq.n	8004cf6 <TIM_SlaveTimer_SetConfig+0x116>
 8004c5e:	e047      	b.n	8004cf0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004c70:	f000 f8c1 	bl	8004df6 <TIM_ETR_SetConfig>
      break;
 8004c74:	e040      	b.n	8004cf8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b05      	cmp	r3, #5
 8004c7c:	d101      	bne.n	8004c82 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e03b      	b.n	8004cfa <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6a1a      	ldr	r2, [r3, #32]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0201 	bic.w	r2, r2, #1
 8004c98:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ca8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	621a      	str	r2, [r3, #32]
      break;
 8004cc6:	e017      	b.n	8004cf8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f000 f814 	bl	8004d02 <TIM_TI1_ConfigInputStage>
      break;
 8004cda:	e00d      	b.n	8004cf8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ce8:	461a      	mov	r2, r3
 8004cea:	f000 f839 	bl	8004d60 <TIM_TI2_ConfigInputStage>
      break;
 8004cee:	e003      	b.n	8004cf8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8004cf4:	e000      	b.n	8004cf8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004cf6:	bf00      	nop
  }

  return status;
 8004cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b087      	sub	sp, #28
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f023 0201 	bic.w	r2, r3, #1
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f023 030a 	bic.w	r3, r3, #10
 8004d3e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	621a      	str	r2, [r3, #32]
}
 8004d54:	bf00      	nop
 8004d56:	371c      	adds	r7, #28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	f023 0210 	bic.w	r2, r3, #16
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	031b      	lsls	r3, r3, #12
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	011b      	lsls	r3, r3, #4
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	621a      	str	r2, [r3, #32]
}
 8004db4:	bf00      	nop
 8004db6:	371c      	adds	r7, #28
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	f043 0307 	orr.w	r3, r3, #7
 8004de2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	609a      	str	r2, [r3, #8]
}
 8004dea:	bf00      	nop
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b087      	sub	sp, #28
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	60b9      	str	r1, [r7, #8]
 8004e00:	607a      	str	r2, [r7, #4]
 8004e02:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e10:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	021a      	lsls	r2, r3, #8
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	609a      	str	r2, [r3, #8]
}
 8004e2a:	bf00      	nop
 8004e2c:	371c      	adds	r7, #28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b087      	sub	sp, #28
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f003 031f 	and.w	r3, r3, #31
 8004e48:	2201      	movs	r2, #1
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6a1a      	ldr	r2, [r3, #32]
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	43db      	mvns	r3, r3
 8004e58:	401a      	ands	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a1a      	ldr	r2, [r3, #32]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	f003 031f 	and.w	r3, r3, #31
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	621a      	str	r2, [r3, #32]
}
 8004e74:	bf00      	nop
 8004e76:	371c      	adds	r7, #28
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d101      	bne.n	8004e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e94:	2302      	movs	r3, #2
 8004e96:	e050      	b.n	8004f3a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ebe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8004f48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d018      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ee4:	d013      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a18      	ldr	r2, [pc, #96]	@ (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00e      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a16      	ldr	r2, [pc, #88]	@ (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d009      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a15      	ldr	r2, [pc, #84]	@ (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d004      	beq.n	8004f0e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a13      	ldr	r2, [pc, #76]	@ (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d10c      	bne.n	8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40010000 	.word	0x40010000
 8004f4c:	40000400 	.word	0x40000400
 8004f50:	40000800 	.word	0x40000800
 8004f54:	40000c00 	.word	0x40000c00
 8004f58:	40014000 	.word	0x40014000

08004f5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f5c:	b084      	sub	sp, #16
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b084      	sub	sp, #16
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	f107 001c 	add.w	r0, r7, #28
 8004f6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f6e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d123      	bne.n	8004fbe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004f8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d105      	bne.n	8004fb2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f001 fae2 	bl	800657c <USB_CoreReset>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	73fb      	strb	r3, [r7, #15]
 8004fbc:	e01b      	b.n	8004ff6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f001 fad6 	bl	800657c <USB_CoreReset>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004fd4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d106      	bne.n	8004fea <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	639a      	str	r2, [r3, #56]	@ 0x38
 8004fe8:	e005      	b.n	8004ff6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ff6:	7fbb      	ldrb	r3, [r7, #30]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d10b      	bne.n	8005014 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f043 0206 	orr.w	r2, r3, #6
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f043 0220 	orr.w	r2, r3, #32
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005014:	7bfb      	ldrb	r3, [r7, #15]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005020:	b004      	add	sp, #16
 8005022:	4770      	bx	lr

08005024 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	4613      	mov	r3, r2
 8005030:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005032:	79fb      	ldrb	r3, [r7, #7]
 8005034:	2b02      	cmp	r3, #2
 8005036:	d165      	bne.n	8005104 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4a41      	ldr	r2, [pc, #260]	@ (8005140 <USB_SetTurnaroundTime+0x11c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d906      	bls.n	800504e <USB_SetTurnaroundTime+0x2a>
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4a40      	ldr	r2, [pc, #256]	@ (8005144 <USB_SetTurnaroundTime+0x120>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d202      	bcs.n	800504e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005048:	230f      	movs	r3, #15
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	e062      	b.n	8005114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	4a3c      	ldr	r2, [pc, #240]	@ (8005144 <USB_SetTurnaroundTime+0x120>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d306      	bcc.n	8005064 <USB_SetTurnaroundTime+0x40>
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4a3b      	ldr	r2, [pc, #236]	@ (8005148 <USB_SetTurnaroundTime+0x124>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d202      	bcs.n	8005064 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800505e:	230e      	movs	r3, #14
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	e057      	b.n	8005114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4a38      	ldr	r2, [pc, #224]	@ (8005148 <USB_SetTurnaroundTime+0x124>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d306      	bcc.n	800507a <USB_SetTurnaroundTime+0x56>
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4a37      	ldr	r2, [pc, #220]	@ (800514c <USB_SetTurnaroundTime+0x128>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d202      	bcs.n	800507a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005074:	230d      	movs	r3, #13
 8005076:	617b      	str	r3, [r7, #20]
 8005078:	e04c      	b.n	8005114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	4a33      	ldr	r2, [pc, #204]	@ (800514c <USB_SetTurnaroundTime+0x128>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d306      	bcc.n	8005090 <USB_SetTurnaroundTime+0x6c>
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	4a32      	ldr	r2, [pc, #200]	@ (8005150 <USB_SetTurnaroundTime+0x12c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d802      	bhi.n	8005090 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800508a:	230c      	movs	r3, #12
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	e041      	b.n	8005114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	4a2f      	ldr	r2, [pc, #188]	@ (8005150 <USB_SetTurnaroundTime+0x12c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d906      	bls.n	80050a6 <USB_SetTurnaroundTime+0x82>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4a2e      	ldr	r2, [pc, #184]	@ (8005154 <USB_SetTurnaroundTime+0x130>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d802      	bhi.n	80050a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80050a0:	230b      	movs	r3, #11
 80050a2:	617b      	str	r3, [r7, #20]
 80050a4:	e036      	b.n	8005114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	4a2a      	ldr	r2, [pc, #168]	@ (8005154 <USB_SetTurnaroundTime+0x130>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d906      	bls.n	80050bc <USB_SetTurnaroundTime+0x98>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	4a29      	ldr	r2, [pc, #164]	@ (8005158 <USB_SetTurnaroundTime+0x134>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d802      	bhi.n	80050bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80050b6:	230a      	movs	r3, #10
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	e02b      	b.n	8005114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4a26      	ldr	r2, [pc, #152]	@ (8005158 <USB_SetTurnaroundTime+0x134>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d906      	bls.n	80050d2 <USB_SetTurnaroundTime+0xae>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4a25      	ldr	r2, [pc, #148]	@ (800515c <USB_SetTurnaroundTime+0x138>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d202      	bcs.n	80050d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80050cc:	2309      	movs	r3, #9
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	e020      	b.n	8005114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	4a21      	ldr	r2, [pc, #132]	@ (800515c <USB_SetTurnaroundTime+0x138>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d306      	bcc.n	80050e8 <USB_SetTurnaroundTime+0xc4>
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	4a20      	ldr	r2, [pc, #128]	@ (8005160 <USB_SetTurnaroundTime+0x13c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d802      	bhi.n	80050e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80050e2:	2308      	movs	r3, #8
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	e015      	b.n	8005114 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005160 <USB_SetTurnaroundTime+0x13c>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d906      	bls.n	80050fe <USB_SetTurnaroundTime+0xda>
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005164 <USB_SetTurnaroundTime+0x140>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d202      	bcs.n	80050fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80050f8:	2307      	movs	r3, #7
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	e00a      	b.n	8005114 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80050fe:	2306      	movs	r3, #6
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	e007      	b.n	8005114 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d102      	bne.n	8005110 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800510a:	2309      	movs	r3, #9
 800510c:	617b      	str	r3, [r7, #20]
 800510e:	e001      	b.n	8005114 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005110:	2309      	movs	r3, #9
 8005112:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	029b      	lsls	r3, r3, #10
 8005128:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800512c:	431a      	orrs	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	371c      	adds	r7, #28
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr
 8005140:	00d8acbf 	.word	0x00d8acbf
 8005144:	00e4e1c0 	.word	0x00e4e1c0
 8005148:	00f42400 	.word	0x00f42400
 800514c:	01067380 	.word	0x01067380
 8005150:	011a499f 	.word	0x011a499f
 8005154:	01312cff 	.word	0x01312cff
 8005158:	014ca43f 	.word	0x014ca43f
 800515c:	016e3600 	.word	0x016e3600
 8005160:	01a6ab1f 	.word	0x01a6ab1f
 8005164:	01e84800 	.word	0x01e84800

08005168 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f043 0201 	orr.w	r2, r3, #1
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f023 0201 	bic.w	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	460b      	mov	r3, r1
 80051b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051c8:	78fb      	ldrb	r3, [r7, #3]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d115      	bne.n	80051fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80051da:	200a      	movs	r0, #10
 80051dc:	f7fb ff32 	bl	8001044 <HAL_Delay>
      ms += 10U;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	330a      	adds	r3, #10
 80051e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f001 f939 	bl	800645e <USB_GetMode>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d01e      	beq.n	8005230 <USB_SetCurrentMode+0x84>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2bc7      	cmp	r3, #199	@ 0xc7
 80051f6:	d9f0      	bls.n	80051da <USB_SetCurrentMode+0x2e>
 80051f8:	e01a      	b.n	8005230 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051fa:	78fb      	ldrb	r3, [r7, #3]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d115      	bne.n	800522c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800520c:	200a      	movs	r0, #10
 800520e:	f7fb ff19 	bl	8001044 <HAL_Delay>
      ms += 10U;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	330a      	adds	r3, #10
 8005216:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f001 f920 	bl	800645e <USB_GetMode>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d005      	beq.n	8005230 <USB_SetCurrentMode+0x84>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2bc7      	cmp	r3, #199	@ 0xc7
 8005228:	d9f0      	bls.n	800520c <USB_SetCurrentMode+0x60>
 800522a:	e001      	b.n	8005230 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e005      	b.n	800523c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2bc8      	cmp	r3, #200	@ 0xc8
 8005234:	d101      	bne.n	800523a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e000      	b.n	800523c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3710      	adds	r7, #16
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005244:	b084      	sub	sp, #16
 8005246:	b580      	push	{r7, lr}
 8005248:	b086      	sub	sp, #24
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800525e:	2300      	movs	r3, #0
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	e009      	b.n	8005278 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	3340      	adds	r3, #64	@ 0x40
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	2200      	movs	r2, #0
 8005270:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	3301      	adds	r3, #1
 8005276:	613b      	str	r3, [r7, #16]
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	2b0e      	cmp	r3, #14
 800527c:	d9f2      	bls.n	8005264 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800527e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005282:	2b00      	cmp	r3, #0
 8005284:	d11c      	bne.n	80052c0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005294:	f043 0302 	orr.w	r3, r3, #2
 8005298:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800529e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052aa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80052be:	e00b      	b.n	80052d8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052d0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052de:	461a      	mov	r2, r3
 80052e0:	2300      	movs	r3, #0
 80052e2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052e4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d10d      	bne.n	8005308 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d104      	bne.n	80052fe <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80052f4:	2100      	movs	r1, #0
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f968 	bl	80055cc <USB_SetDevSpeed>
 80052fc:	e008      	b.n	8005310 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052fe:	2101      	movs	r1, #1
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f963 	bl	80055cc <USB_SetDevSpeed>
 8005306:	e003      	b.n	8005310 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005308:	2103      	movs	r1, #3
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f95e 	bl	80055cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005310:	2110      	movs	r1, #16
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f8fa 	bl	800550c <USB_FlushTxFifo>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f924 	bl	8005570 <USB_FlushRxFifo>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d001      	beq.n	8005332 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005338:	461a      	mov	r2, r3
 800533a:	2300      	movs	r3, #0
 800533c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005344:	461a      	mov	r2, r3
 8005346:	2300      	movs	r3, #0
 8005348:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005350:	461a      	mov	r2, r3
 8005352:	2300      	movs	r3, #0
 8005354:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005356:	2300      	movs	r3, #0
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	e043      	b.n	80053e4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800536e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005372:	d118      	bne.n	80053a6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d10a      	bne.n	8005390 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005386:	461a      	mov	r2, r3
 8005388:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	e013      	b.n	80053b8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800539c:	461a      	mov	r2, r3
 800539e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80053a2:	6013      	str	r3, [r2, #0]
 80053a4:	e008      	b.n	80053b8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b2:	461a      	mov	r2, r3
 80053b4:	2300      	movs	r3, #0
 80053b6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053c4:	461a      	mov	r2, r3
 80053c6:	2300      	movs	r3, #0
 80053c8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053d6:	461a      	mov	r2, r3
 80053d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80053dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	3301      	adds	r3, #1
 80053e2:	613b      	str	r3, [r7, #16]
 80053e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80053e8:	461a      	mov	r2, r3
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d3b5      	bcc.n	800535c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053f0:	2300      	movs	r3, #0
 80053f2:	613b      	str	r3, [r7, #16]
 80053f4:	e043      	b.n	800547e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005408:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800540c:	d118      	bne.n	8005440 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10a      	bne.n	800542a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005420:	461a      	mov	r2, r3
 8005422:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	e013      	b.n	8005452 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005436:	461a      	mov	r2, r3
 8005438:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	e008      	b.n	8005452 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800544c:	461a      	mov	r2, r3
 800544e:	2300      	movs	r3, #0
 8005450:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800545e:	461a      	mov	r2, r3
 8005460:	2300      	movs	r3, #0
 8005462:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005470:	461a      	mov	r2, r3
 8005472:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005476:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	3301      	adds	r3, #1
 800547c:	613b      	str	r3, [r7, #16]
 800547e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005482:	461a      	mov	r2, r3
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	4293      	cmp	r3, r2
 8005488:	d3b5      	bcc.n	80053f6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005498:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800549c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80054aa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d105      	bne.n	80054c0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	f043 0210 	orr.w	r2, r3, #16
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	699a      	ldr	r2, [r3, #24]
 80054c4:	4b10      	ldr	r3, [pc, #64]	@ (8005508 <USB_DevInit+0x2c4>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d005      	beq.n	80054e0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	f043 0208 	orr.w	r2, r3, #8
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d107      	bne.n	80054f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054f0:	f043 0304 	orr.w	r3, r3, #4
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3718      	adds	r7, #24
 80054fe:	46bd      	mov	sp, r7
 8005500:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005504:	b004      	add	sp, #16
 8005506:	4770      	bx	lr
 8005508:	803c3800 	.word	0x803c3800

0800550c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3301      	adds	r3, #1
 800551e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005526:	d901      	bls.n	800552c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e01b      	b.n	8005564 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	daf2      	bge.n	800551a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	019b      	lsls	r3, r3, #6
 800553c:	f043 0220 	orr.w	r2, r3, #32
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3301      	adds	r3, #1
 8005548:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005550:	d901      	bls.n	8005556 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e006      	b.n	8005564 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	2b20      	cmp	r3, #32
 8005560:	d0f0      	beq.n	8005544 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005570:	b480      	push	{r7}
 8005572:	b085      	sub	sp, #20
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	3301      	adds	r3, #1
 8005580:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005588:	d901      	bls.n	800558e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e018      	b.n	80055c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	daf2      	bge.n	800557c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2210      	movs	r2, #16
 800559e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3301      	adds	r3, #1
 80055a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055ac:	d901      	bls.n	80055b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e006      	b.n	80055c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0310 	and.w	r3, r3, #16
 80055ba:	2b10      	cmp	r3, #16
 80055bc:	d0f0      	beq.n	80055a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	460b      	mov	r3, r1
 80055d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	68f9      	ldr	r1, [r7, #12]
 80055e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055ec:	4313      	orrs	r3, r2
 80055ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80055fe:	b480      	push	{r7}
 8005600:	b087      	sub	sp, #28
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 0306 	and.w	r3, r3, #6
 8005616:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d102      	bne.n	8005624 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800561e:	2300      	movs	r3, #0
 8005620:	75fb      	strb	r3, [r7, #23]
 8005622:	e00a      	b.n	800563a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b02      	cmp	r3, #2
 8005628:	d002      	beq.n	8005630 <USB_GetDevSpeed+0x32>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2b06      	cmp	r3, #6
 800562e:	d102      	bne.n	8005636 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005630:	2302      	movs	r3, #2
 8005632:	75fb      	strb	r3, [r7, #23]
 8005634:	e001      	b.n	800563a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005636:	230f      	movs	r3, #15
 8005638:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800563a:	7dfb      	ldrb	r3, [r7, #23]
}
 800563c:	4618      	mov	r0, r3
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	785b      	ldrb	r3, [r3, #1]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d13a      	bne.n	80056da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800566a:	69da      	ldr	r2, [r3, #28]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	2101      	movs	r1, #1
 8005676:	fa01 f303 	lsl.w	r3, r1, r3
 800567a:	b29b      	uxth	r3, r3
 800567c:	68f9      	ldr	r1, [r7, #12]
 800567e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005682:	4313      	orrs	r3, r2
 8005684:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d155      	bne.n	8005748 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	791b      	ldrb	r3, [r3, #4]
 80056b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	059b      	lsls	r3, r3, #22
 80056be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056c0:	4313      	orrs	r3, r2
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	0151      	lsls	r1, r2, #5
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	440a      	add	r2, r1
 80056ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	e036      	b.n	8005748 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056e0:	69da      	ldr	r2, [r3, #28]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	2101      	movs	r1, #1
 80056ec:	fa01 f303 	lsl.w	r3, r1, r3
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	68f9      	ldr	r1, [r7, #12]
 80056f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056f8:	4313      	orrs	r3, r2
 80056fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d11a      	bne.n	8005748 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	015a      	lsls	r2, r3, #5
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4413      	add	r3, r2
 800571a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	791b      	ldrb	r3, [r3, #4]
 800572c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800572e:	430b      	orrs	r3, r1
 8005730:	4313      	orrs	r3, r2
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	0151      	lsls	r1, r2, #5
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	440a      	add	r2, r1
 800573a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800573e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005742:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005746:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
	...

08005758 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	785b      	ldrb	r3, [r3, #1]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d161      	bne.n	8005838 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005786:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800578a:	d11f      	bne.n	80057cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	0151      	lsls	r1, r2, #5
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	440a      	add	r2, r1
 80057a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80057aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80057ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	2101      	movs	r1, #1
 80057de:	fa01 f303 	lsl.w	r3, r1, r3
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	43db      	mvns	r3, r3
 80057e6:	68f9      	ldr	r1, [r7, #12]
 80057e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057ec:	4013      	ands	r3, r2
 80057ee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	f003 030f 	and.w	r3, r3, #15
 8005800:	2101      	movs	r1, #1
 8005802:	fa01 f303 	lsl.w	r3, r1, r3
 8005806:	b29b      	uxth	r3, r3
 8005808:	43db      	mvns	r3, r3
 800580a:	68f9      	ldr	r1, [r7, #12]
 800580c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005810:	4013      	ands	r3, r2
 8005812:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	0159      	lsls	r1, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	440b      	add	r3, r1
 800582a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800582e:	4619      	mov	r1, r3
 8005830:	4b35      	ldr	r3, [pc, #212]	@ (8005908 <USB_DeactivateEndpoint+0x1b0>)
 8005832:	4013      	ands	r3, r2
 8005834:	600b      	str	r3, [r1, #0]
 8005836:	e060      	b.n	80058fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800584a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800584e:	d11f      	bne.n	8005890 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	015a      	lsls	r2, r3, #5
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	0151      	lsls	r1, r2, #5
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	440a      	add	r2, r1
 8005866:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800586a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800586e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68ba      	ldr	r2, [r7, #8]
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	440a      	add	r2, r1
 8005886:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800588a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800588e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005896:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	f003 030f 	and.w	r3, r3, #15
 80058a0:	2101      	movs	r1, #1
 80058a2:	fa01 f303 	lsl.w	r3, r1, r3
 80058a6:	041b      	lsls	r3, r3, #16
 80058a8:	43db      	mvns	r3, r3
 80058aa:	68f9      	ldr	r1, [r7, #12]
 80058ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058b0:	4013      	ands	r3, r2
 80058b2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	f003 030f 	and.w	r3, r3, #15
 80058c4:	2101      	movs	r1, #1
 80058c6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ca:	041b      	lsls	r3, r3, #16
 80058cc:	43db      	mvns	r3, r3
 80058ce:	68f9      	ldr	r1, [r7, #12]
 80058d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058d4:	4013      	ands	r3, r2
 80058d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	0159      	lsls	r1, r3, #5
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	440b      	add	r3, r1
 80058ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058f2:	4619      	mov	r1, r3
 80058f4:	4b05      	ldr	r3, [pc, #20]	@ (800590c <USB_DeactivateEndpoint+0x1b4>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	ec337800 	.word	0xec337800
 800590c:	eff37800 	.word	0xeff37800

08005910 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08a      	sub	sp, #40	@ 0x28
 8005914:	af02      	add	r7, sp, #8
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	4613      	mov	r3, r2
 800591c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	785b      	ldrb	r3, [r3, #1]
 800592c:	2b01      	cmp	r3, #1
 800592e:	f040 817a 	bne.w	8005c26 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d132      	bne.n	80059a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005954:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005958:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800595c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	0151      	lsls	r1, r2, #5
 8005970:	69fa      	ldr	r2, [r7, #28]
 8005972:	440a      	add	r2, r1
 8005974:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005978:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800597c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	0151      	lsls	r1, r2, #5
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	440a      	add	r2, r1
 8005994:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005998:	0cdb      	lsrs	r3, r3, #19
 800599a:	04db      	lsls	r3, r3, #19
 800599c:	6113      	str	r3, [r2, #16]
 800599e:	e092      	b.n	8005ac6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	0151      	lsls	r1, r2, #5
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	440a      	add	r2, r1
 80059b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059ba:	0cdb      	lsrs	r3, r3, #19
 80059bc:	04db      	lsls	r3, r3, #19
 80059be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	0151      	lsls	r1, r2, #5
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	440a      	add	r2, r1
 80059d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059da:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80059de:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80059e2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d11a      	bne.n	8005a20 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	691a      	ldr	r2, [r3, #16]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d903      	bls.n	80059fe <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	689a      	ldr	r2, [r3, #8]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	0151      	lsls	r1, r2, #5
 8005a10:	69fa      	ldr	r2, [r7, #28]
 8005a12:	440a      	add	r2, r1
 8005a14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a1c:	6113      	str	r3, [r2, #16]
 8005a1e:	e01b      	b.n	8005a58 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a2c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6919      	ldr	r1, [r3, #16]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	440b      	add	r3, r1
 8005a38:	1e59      	subs	r1, r3, #1
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a42:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005a44:	4ba2      	ldr	r3, [pc, #648]	@ (8005cd0 <USB_EPStartXfer+0x3c0>)
 8005a46:	400b      	ands	r3, r1
 8005a48:	69b9      	ldr	r1, [r7, #24]
 8005a4a:	0148      	lsls	r0, r1, #5
 8005a4c:	69f9      	ldr	r1, [r7, #28]
 8005a4e:	4401      	add	r1, r0
 8005a50:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005a54:	4313      	orrs	r3, r2
 8005a56:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a64:	691a      	ldr	r2, [r3, #16]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a6e:	69b9      	ldr	r1, [r7, #24]
 8005a70:	0148      	lsls	r0, r1, #5
 8005a72:	69f9      	ldr	r1, [r7, #28]
 8005a74:	4401      	add	r1, r0
 8005a76:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	791b      	ldrb	r3, [r3, #4]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d11f      	bne.n	8005ac6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	0151      	lsls	r1, r2, #5
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	440a      	add	r2, r1
 8005a9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aa0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005aa4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	0151      	lsls	r1, r2, #5
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	440a      	add	r2, r1
 8005abc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ac0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ac4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d14b      	bne.n	8005b64 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	69db      	ldr	r3, [r3, #28]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d009      	beq.n	8005ae8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	791b      	ldrb	r3, [r3, #4]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d128      	bne.n	8005b42 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d110      	bne.n	8005b22 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	0151      	lsls	r1, r2, #5
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	440a      	add	r2, r1
 8005b16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b1a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005b1e:	6013      	str	r3, [r2, #0]
 8005b20:	e00f      	b.n	8005b42 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	0151      	lsls	r1, r2, #5
 8005b34:	69fa      	ldr	r2, [r7, #28]
 8005b36:	440a      	add	r2, r1
 8005b38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b40:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	0151      	lsls	r1, r2, #5
 8005b54:	69fa      	ldr	r2, [r7, #28]
 8005b56:	440a      	add	r2, r1
 8005b58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b5c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	e165      	b.n	8005e30 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	69fa      	ldr	r2, [r7, #28]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b7e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b82:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	791b      	ldrb	r3, [r3, #4]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d015      	beq.n	8005bb8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 814d 	beq.w	8005e30 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bac:	69f9      	ldr	r1, [r7, #28]
 8005bae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	634b      	str	r3, [r1, #52]	@ 0x34
 8005bb6:	e13b      	b.n	8005e30 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d110      	bne.n	8005bea <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	69fa      	ldr	r2, [r7, #28]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005be2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	e00f      	b.n	8005c0a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	015a      	lsls	r2, r3, #5
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	0151      	lsls	r1, r2, #5
 8005bfc:	69fa      	ldr	r2, [r7, #28]
 8005bfe:	440a      	add	r2, r1
 8005c00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c08:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	68d9      	ldr	r1, [r3, #12]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	781a      	ldrb	r2, [r3, #0]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	b298      	uxth	r0, r3
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 f9b8 	bl	8005f94 <USB_WritePacket>
 8005c24:	e104      	b.n	8005e30 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	0151      	lsls	r1, r2, #5
 8005c38:	69fa      	ldr	r2, [r7, #28]
 8005c3a:	440a      	add	r2, r1
 8005c3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c40:	0cdb      	lsrs	r3, r3, #19
 8005c42:	04db      	lsls	r3, r3, #19
 8005c44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	0151      	lsls	r1, r2, #5
 8005c58:	69fa      	ldr	r2, [r7, #28]
 8005c5a:	440a      	add	r2, r1
 8005c5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c60:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c64:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c68:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d131      	bne.n	8005cd4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c94:	691a      	ldr	r2, [r3, #16]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c9e:	69b9      	ldr	r1, [r7, #24]
 8005ca0:	0148      	lsls	r0, r1, #5
 8005ca2:	69f9      	ldr	r1, [r7, #28]
 8005ca4:	4401      	add	r1, r0
 8005ca6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005caa:	4313      	orrs	r3, r2
 8005cac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	0151      	lsls	r1, r2, #5
 8005cc0:	69fa      	ldr	r2, [r7, #28]
 8005cc2:	440a      	add	r2, r1
 8005cc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cc8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ccc:	6113      	str	r3, [r2, #16]
 8005cce:	e061      	b.n	8005d94 <USB_EPStartXfer+0x484>
 8005cd0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d123      	bne.n	8005d24 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce8:	691a      	ldr	r2, [r3, #16]
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cf2:	69b9      	ldr	r1, [r7, #24]
 8005cf4:	0148      	lsls	r0, r1, #5
 8005cf6:	69f9      	ldr	r1, [r7, #28]
 8005cf8:	4401      	add	r1, r0
 8005cfa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	015a      	lsls	r2, r3, #5
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	0151      	lsls	r1, r2, #5
 8005d14:	69fa      	ldr	r2, [r7, #28]
 8005d16:	440a      	add	r2, r1
 8005d18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d20:	6113      	str	r3, [r2, #16]
 8005d22:	e037      	b.n	8005d94 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	1e5a      	subs	r2, r3, #1
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d38:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	8afa      	ldrh	r2, [r7, #22]
 8005d40:	fb03 f202 	mul.w	r2, r3, r2
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	015a      	lsls	r2, r3, #5
 8005d4c:	69fb      	ldr	r3, [r7, #28]
 8005d4e:	4413      	add	r3, r2
 8005d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	8afb      	ldrh	r3, [r7, #22]
 8005d58:	04d9      	lsls	r1, r3, #19
 8005d5a:	4b38      	ldr	r3, [pc, #224]	@ (8005e3c <USB_EPStartXfer+0x52c>)
 8005d5c:	400b      	ands	r3, r1
 8005d5e:	69b9      	ldr	r1, [r7, #24]
 8005d60:	0148      	lsls	r0, r1, #5
 8005d62:	69f9      	ldr	r1, [r7, #28]
 8005d64:	4401      	add	r1, r0
 8005d66:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d7a:	691a      	ldr	r2, [r3, #16]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d84:	69b9      	ldr	r1, [r7, #24]
 8005d86:	0148      	lsls	r0, r1, #5
 8005d88:	69f9      	ldr	r1, [r7, #28]
 8005d8a:	4401      	add	r1, r0
 8005d8c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005d90:	4313      	orrs	r3, r2
 8005d92:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005d94:	79fb      	ldrb	r3, [r7, #7]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d10d      	bne.n	8005db6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d009      	beq.n	8005db6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	68d9      	ldr	r1, [r3, #12]
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	015a      	lsls	r2, r3, #5
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	4413      	add	r3, r2
 8005dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005db2:	460a      	mov	r2, r1
 8005db4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	791b      	ldrb	r3, [r3, #4]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d128      	bne.n	8005e10 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d110      	bne.n	8005df0 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	015a      	lsls	r2, r3, #5
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	0151      	lsls	r1, r2, #5
 8005de0:	69fa      	ldr	r2, [r7, #28]
 8005de2:	440a      	add	r2, r1
 8005de4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005de8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	e00f      	b.n	8005e10 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	0151      	lsls	r1, r2, #5
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	440a      	add	r2, r1
 8005e06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	0151      	lsls	r1, r2, #5
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	440a      	add	r2, r1
 8005e26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e2a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3720      	adds	r7, #32
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	1ff80000 	.word	0x1ff80000

08005e40 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	785b      	ldrb	r3, [r3, #1]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d14a      	bne.n	8005ef4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e76:	f040 8086 	bne.w	8005f86 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	7812      	ldrb	r2, [r2, #0]
 8005e8e:	0151      	lsls	r1, r2, #5
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	440a      	add	r2, r1
 8005e94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e9c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	683a      	ldr	r2, [r7, #0]
 8005eb0:	7812      	ldrb	r2, [r2, #0]
 8005eb2:	0151      	lsls	r1, r2, #5
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	440a      	add	r2, r1
 8005eb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ebc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ec0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d902      	bls.n	8005ed8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	75fb      	strb	r3, [r7, #23]
          break;
 8005ed6:	e056      	b.n	8005f86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005eec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ef0:	d0e7      	beq.n	8005ec2 <USB_EPStopXfer+0x82>
 8005ef2:	e048      	b.n	8005f86 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	015a      	lsls	r2, r3, #5
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	4413      	add	r3, r2
 8005efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f0c:	d13b      	bne.n	8005f86 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	683a      	ldr	r2, [r7, #0]
 8005f20:	7812      	ldrb	r2, [r2, #0]
 8005f22:	0151      	lsls	r1, r2, #5
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	440a      	add	r2, r1
 8005f28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f30:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	7812      	ldrb	r2, [r2, #0]
 8005f46:	0151      	lsls	r1, r2, #5
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	440a      	add	r2, r1
 8005f4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d902      	bls.n	8005f6c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	75fb      	strb	r3, [r7, #23]
          break;
 8005f6a:	e00c      	b.n	8005f86 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f84:	d0e7      	beq.n	8005f56 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	371c      	adds	r7, #28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b089      	sub	sp, #36	@ 0x24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	71fb      	strb	r3, [r7, #7]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005fb2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d123      	bne.n	8006002 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005fba:	88bb      	ldrh	r3, [r7, #4]
 8005fbc:	3303      	adds	r3, #3
 8005fbe:	089b      	lsrs	r3, r3, #2
 8005fc0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	61bb      	str	r3, [r7, #24]
 8005fc6:	e018      	b.n	8005ffa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fc8:	79fb      	ldrb	r3, [r7, #7]
 8005fca:	031a      	lsls	r2, r3, #12
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	3301      	adds	r3, #1
 8005fec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d3e2      	bcc.n	8005fc8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3724      	adds	r7, #36	@ 0x24
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006010:	b480      	push	{r7}
 8006012:	b08b      	sub	sp, #44	@ 0x2c
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	4613      	mov	r3, r2
 800601c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006026:	88fb      	ldrh	r3, [r7, #6]
 8006028:	089b      	lsrs	r3, r3, #2
 800602a:	b29b      	uxth	r3, r3
 800602c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800602e:	88fb      	ldrh	r3, [r7, #6]
 8006030:	f003 0303 	and.w	r3, r3, #3
 8006034:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006036:	2300      	movs	r3, #0
 8006038:	623b      	str	r3, [r7, #32]
 800603a:	e014      	b.n	8006066 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006046:	601a      	str	r2, [r3, #0]
    pDest++;
 8006048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604a:	3301      	adds	r3, #1
 800604c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800604e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006050:	3301      	adds	r3, #1
 8006052:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006056:	3301      	adds	r3, #1
 8006058:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800605a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605c:	3301      	adds	r3, #1
 800605e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	3301      	adds	r3, #1
 8006064:	623b      	str	r3, [r7, #32]
 8006066:	6a3a      	ldr	r2, [r7, #32]
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	429a      	cmp	r2, r3
 800606c:	d3e6      	bcc.n	800603c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800606e:	8bfb      	ldrh	r3, [r7, #30]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d01e      	beq.n	80060b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800607e:	461a      	mov	r2, r3
 8006080:	f107 0310 	add.w	r3, r7, #16
 8006084:	6812      	ldr	r2, [r2, #0]
 8006086:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	b2db      	uxtb	r3, r3
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	fa22 f303 	lsr.w	r3, r2, r3
 8006094:	b2da      	uxtb	r2, r3
 8006096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006098:	701a      	strb	r2, [r3, #0]
      i++;
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	3301      	adds	r3, #1
 800609e:	623b      	str	r3, [r7, #32]
      pDest++;
 80060a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a2:	3301      	adds	r3, #1
 80060a4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80060a6:	8bfb      	ldrh	r3, [r7, #30]
 80060a8:	3b01      	subs	r3, #1
 80060aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80060ac:	8bfb      	ldrh	r3, [r7, #30]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1ea      	bne.n	8006088 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80060b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	372c      	adds	r7, #44	@ 0x2c
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	785b      	ldrb	r3, [r3, #1]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d12c      	bne.n	8006136 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	015a      	lsls	r2, r3, #5
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4413      	add	r3, r2
 80060e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	db12      	blt.n	8006114 <USB_EPSetStall+0x54>
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00f      	beq.n	8006114 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	0151      	lsls	r1, r2, #5
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	440a      	add	r2, r1
 800610a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800610e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006112:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	0151      	lsls	r1, r2, #5
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	440a      	add	r2, r1
 800612a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800612e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	e02b      	b.n	800618e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4413      	add	r3, r2
 800613e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	db12      	blt.n	800616e <USB_EPSetStall+0xae>
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00f      	beq.n	800616e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	0151      	lsls	r1, r2, #5
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	440a      	add	r2, r1
 8006164:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006168:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800616c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	0151      	lsls	r1, r2, #5
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	440a      	add	r2, r1
 8006184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006188:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800618c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	785b      	ldrb	r3, [r3, #1]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d128      	bne.n	800620a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	015a      	lsls	r2, r3, #5
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	4413      	add	r3, r2
 80061c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	0151      	lsls	r1, r2, #5
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	440a      	add	r2, r1
 80061ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80061d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	791b      	ldrb	r3, [r3, #4]
 80061dc:	2b03      	cmp	r3, #3
 80061de:	d003      	beq.n	80061e8 <USB_EPClearStall+0x4c>
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	791b      	ldrb	r3, [r3, #4]
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d138      	bne.n	800625a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	0151      	lsls	r1, r2, #5
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	440a      	add	r2, r1
 80061fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006202:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	e027      	b.n	800625a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006224:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006228:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	791b      	ldrb	r3, [r3, #4]
 800622e:	2b03      	cmp	r3, #3
 8006230:	d003      	beq.n	800623a <USB_EPClearStall+0x9e>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	791b      	ldrb	r3, [r3, #4]
 8006236:	2b02      	cmp	r3, #2
 8006238:	d10f      	bne.n	800625a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	015a      	lsls	r2, r3, #5
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4413      	add	r3, r2
 8006242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	0151      	lsls	r1, r2, #5
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	440a      	add	r2, r1
 8006250:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006258:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68fa      	ldr	r2, [r7, #12]
 8006282:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006286:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800628a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	78fb      	ldrb	r3, [r7, #3]
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800629c:	68f9      	ldr	r1, [r7, #12]
 800629e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062a2:	4313      	orrs	r3, r2
 80062a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80062ce:	f023 0303 	bic.w	r3, r3, #3
 80062d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80062e2:	f023 0302 	bic.w	r3, r3, #2
 80062e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b085      	sub	sp, #20
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006310:	f023 0303 	bic.w	r3, r3, #3
 8006314:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006324:	f043 0302 	orr.w	r3, r3, #2
 8006328:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	4013      	ands	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006350:	68fb      	ldr	r3, [r7, #12]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800635e:	b480      	push	{r7}
 8006360:	b085      	sub	sp, #20
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800637a:	69db      	ldr	r3, [r3, #28]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	4013      	ands	r3, r2
 8006380:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	0c1b      	lsrs	r3, r3, #16
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006392:	b480      	push	{r7}
 8006394:	b085      	sub	sp, #20
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	4013      	ands	r3, r2
 80063b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	b29b      	uxth	r3, r3
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b085      	sub	sp, #20
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	460b      	mov	r3, r1
 80063d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80063d6:	78fb      	ldrb	r3, [r7, #3]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	4013      	ands	r3, r2
 80063f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063f4:	68bb      	ldr	r3, [r7, #8]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006402:	b480      	push	{r7}
 8006404:	b087      	sub	sp, #28
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	460b      	mov	r3, r1
 800640c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006424:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006426:	78fb      	ldrb	r3, [r7, #3]
 8006428:	f003 030f 	and.w	r3, r3, #15
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	fa22 f303 	lsr.w	r3, r2, r3
 8006432:	01db      	lsls	r3, r3, #7
 8006434:	b2db      	uxtb	r3, r3
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	4313      	orrs	r3, r2
 800643a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800643c:	78fb      	ldrb	r3, [r7, #3]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	4013      	ands	r3, r2
 800644e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006450:	68bb      	ldr	r3, [r7, #8]
}
 8006452:	4618      	mov	r0, r3
 8006454:	371c      	adds	r7, #28
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	695b      	ldr	r3, [r3, #20]
 800646a:	f003 0301 	and.w	r3, r3, #1
}
 800646e:	4618      	mov	r0, r3
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr

0800647a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006494:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006498:	f023 0307 	bic.w	r3, r3, #7
 800649c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	460b      	mov	r3, r1
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	333c      	adds	r3, #60	@ 0x3c
 80064d6:	3304      	adds	r3, #4
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	4a26      	ldr	r2, [pc, #152]	@ (8006578 <USB_EP0_OutStart+0xb8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d90a      	bls.n	80064fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064f4:	d101      	bne.n	80064fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	e037      	b.n	800656a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006500:	461a      	mov	r2, r3
 8006502:	2300      	movs	r3, #0
 8006504:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006514:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006518:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006528:	f043 0318 	orr.w	r3, r3, #24
 800652c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800653c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006540:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006542:	7afb      	ldrb	r3, [r7, #11]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d10f      	bne.n	8006568 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800654e:	461a      	mov	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006562:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006566:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	371c      	adds	r7, #28
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr
 8006576:	bf00      	nop
 8006578:	4f54300a 	.word	0x4f54300a

0800657c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006584:	2300      	movs	r3, #0
 8006586:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3301      	adds	r3, #1
 800658c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006594:	d901      	bls.n	800659a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e01b      	b.n	80065d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	daf2      	bge.n	8006588 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
 80065aa:	f043 0201 	orr.w	r2, r3, #1
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	3301      	adds	r3, #1
 80065b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065be:	d901      	bls.n	80065c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e006      	b.n	80065d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d0f0      	beq.n	80065b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
	...

080065e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	460b      	mov	r3, r1
 80065ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80065ec:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80065f0:	f002 fc78 	bl	8008ee4 <USBD_static_malloc>
 80065f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d109      	bne.n	8006610 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	32b0      	adds	r2, #176	@ 0xb0
 8006606:	2100      	movs	r1, #0
 8006608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800660c:	2302      	movs	r3, #2
 800660e:	e0d4      	b.n	80067ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006610:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006614:	2100      	movs	r1, #0
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f002 fca8 	bl	8008f6c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	32b0      	adds	r2, #176	@ 0xb0
 8006626:	68f9      	ldr	r1, [r7, #12]
 8006628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	32b0      	adds	r2, #176	@ 0xb0
 8006636:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	7c1b      	ldrb	r3, [r3, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d138      	bne.n	80066ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006648:	4b5e      	ldr	r3, [pc, #376]	@ (80067c4 <USBD_CDC_Init+0x1e4>)
 800664a:	7819      	ldrb	r1, [r3, #0]
 800664c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006650:	2202      	movs	r2, #2
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f002 fb23 	bl	8008c9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006658:	4b5a      	ldr	r3, [pc, #360]	@ (80067c4 <USBD_CDC_Init+0x1e4>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	f003 020f 	and.w	r2, r3, #15
 8006660:	6879      	ldr	r1, [r7, #4]
 8006662:	4613      	mov	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	440b      	add	r3, r1
 800666c:	3324      	adds	r3, #36	@ 0x24
 800666e:	2201      	movs	r2, #1
 8006670:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006672:	4b55      	ldr	r3, [pc, #340]	@ (80067c8 <USBD_CDC_Init+0x1e8>)
 8006674:	7819      	ldrb	r1, [r3, #0]
 8006676:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800667a:	2202      	movs	r2, #2
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f002 fb0e 	bl	8008c9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006682:	4b51      	ldr	r3, [pc, #324]	@ (80067c8 <USBD_CDC_Init+0x1e8>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	f003 020f 	and.w	r2, r3, #15
 800668a:	6879      	ldr	r1, [r7, #4]
 800668c:	4613      	mov	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	440b      	add	r3, r1
 8006696:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800669a:	2201      	movs	r2, #1
 800669c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800669e:	4b4b      	ldr	r3, [pc, #300]	@ (80067cc <USBD_CDC_Init+0x1ec>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	f003 020f 	and.w	r2, r3, #15
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	4613      	mov	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	440b      	add	r3, r1
 80066b2:	3326      	adds	r3, #38	@ 0x26
 80066b4:	2210      	movs	r2, #16
 80066b6:	801a      	strh	r2, [r3, #0]
 80066b8:	e035      	b.n	8006726 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80066ba:	4b42      	ldr	r3, [pc, #264]	@ (80067c4 <USBD_CDC_Init+0x1e4>)
 80066bc:	7819      	ldrb	r1, [r3, #0]
 80066be:	2340      	movs	r3, #64	@ 0x40
 80066c0:	2202      	movs	r2, #2
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f002 faeb 	bl	8008c9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80066c8:	4b3e      	ldr	r3, [pc, #248]	@ (80067c4 <USBD_CDC_Init+0x1e4>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	f003 020f 	and.w	r2, r3, #15
 80066d0:	6879      	ldr	r1, [r7, #4]
 80066d2:	4613      	mov	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	440b      	add	r3, r1
 80066dc:	3324      	adds	r3, #36	@ 0x24
 80066de:	2201      	movs	r2, #1
 80066e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80066e2:	4b39      	ldr	r3, [pc, #228]	@ (80067c8 <USBD_CDC_Init+0x1e8>)
 80066e4:	7819      	ldrb	r1, [r3, #0]
 80066e6:	2340      	movs	r3, #64	@ 0x40
 80066e8:	2202      	movs	r2, #2
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f002 fad7 	bl	8008c9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80066f0:	4b35      	ldr	r3, [pc, #212]	@ (80067c8 <USBD_CDC_Init+0x1e8>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	f003 020f 	and.w	r2, r3, #15
 80066f8:	6879      	ldr	r1, [r7, #4]
 80066fa:	4613      	mov	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4413      	add	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	440b      	add	r3, r1
 8006704:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006708:	2201      	movs	r2, #1
 800670a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800670c:	4b2f      	ldr	r3, [pc, #188]	@ (80067cc <USBD_CDC_Init+0x1ec>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	f003 020f 	and.w	r2, r3, #15
 8006714:	6879      	ldr	r1, [r7, #4]
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	440b      	add	r3, r1
 8006720:	3326      	adds	r3, #38	@ 0x26
 8006722:	2210      	movs	r2, #16
 8006724:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006726:	4b29      	ldr	r3, [pc, #164]	@ (80067cc <USBD_CDC_Init+0x1ec>)
 8006728:	7819      	ldrb	r1, [r3, #0]
 800672a:	2308      	movs	r3, #8
 800672c:	2203      	movs	r2, #3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f002 fab5 	bl	8008c9e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006734:	4b25      	ldr	r3, [pc, #148]	@ (80067cc <USBD_CDC_Init+0x1ec>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	f003 020f 	and.w	r2, r3, #15
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	440b      	add	r3, r1
 8006748:	3324      	adds	r3, #36	@ 0x24
 800674a:	2201      	movs	r2, #1
 800674c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	33b0      	adds	r3, #176	@ 0xb0
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2200      	movs	r2, #0
 800676e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006780:	2b00      	cmp	r3, #0
 8006782:	d101      	bne.n	8006788 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006784:	2302      	movs	r3, #2
 8006786:	e018      	b.n	80067ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	7c1b      	ldrb	r3, [r3, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10a      	bne.n	80067a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006790:	4b0d      	ldr	r3, [pc, #52]	@ (80067c8 <USBD_CDC_Init+0x1e8>)
 8006792:	7819      	ldrb	r1, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800679a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f002 fb6c 	bl	8008e7c <USBD_LL_PrepareReceive>
 80067a4:	e008      	b.n	80067b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80067a6:	4b08      	ldr	r3, [pc, #32]	@ (80067c8 <USBD_CDC_Init+0x1e8>)
 80067a8:	7819      	ldrb	r1, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80067b0:	2340      	movs	r3, #64	@ 0x40
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f002 fb62 	bl	8008e7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	20000093 	.word	0x20000093
 80067c8:	20000094 	.word	0x20000094
 80067cc:	20000095 	.word	0x20000095

080067d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80067dc:	4b3a      	ldr	r3, [pc, #232]	@ (80068c8 <USBD_CDC_DeInit+0xf8>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	4619      	mov	r1, r3
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f002 fa81 	bl	8008cea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80067e8:	4b37      	ldr	r3, [pc, #220]	@ (80068c8 <USBD_CDC_DeInit+0xf8>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	f003 020f 	and.w	r2, r3, #15
 80067f0:	6879      	ldr	r1, [r7, #4]
 80067f2:	4613      	mov	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	440b      	add	r3, r1
 80067fc:	3324      	adds	r3, #36	@ 0x24
 80067fe:	2200      	movs	r2, #0
 8006800:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006802:	4b32      	ldr	r3, [pc, #200]	@ (80068cc <USBD_CDC_DeInit+0xfc>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	4619      	mov	r1, r3
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f002 fa6e 	bl	8008cea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800680e:	4b2f      	ldr	r3, [pc, #188]	@ (80068cc <USBD_CDC_DeInit+0xfc>)
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	f003 020f 	and.w	r2, r3, #15
 8006816:	6879      	ldr	r1, [r7, #4]
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	440b      	add	r3, r1
 8006822:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006826:	2200      	movs	r2, #0
 8006828:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800682a:	4b29      	ldr	r3, [pc, #164]	@ (80068d0 <USBD_CDC_DeInit+0x100>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f002 fa5a 	bl	8008cea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006836:	4b26      	ldr	r3, [pc, #152]	@ (80068d0 <USBD_CDC_DeInit+0x100>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	f003 020f 	and.w	r2, r3, #15
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	4613      	mov	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	440b      	add	r3, r1
 800684a:	3324      	adds	r3, #36	@ 0x24
 800684c:	2200      	movs	r2, #0
 800684e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006850:	4b1f      	ldr	r3, [pc, #124]	@ (80068d0 <USBD_CDC_DeInit+0x100>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	f003 020f 	and.w	r2, r3, #15
 8006858:	6879      	ldr	r1, [r7, #4]
 800685a:	4613      	mov	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	440b      	add	r3, r1
 8006864:	3326      	adds	r3, #38	@ 0x26
 8006866:	2200      	movs	r2, #0
 8006868:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	32b0      	adds	r2, #176	@ 0xb0
 8006874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01f      	beq.n	80068bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	33b0      	adds	r3, #176	@ 0xb0
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	32b0      	adds	r2, #176	@ 0xb0
 800689a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800689e:	4618      	mov	r0, r3
 80068a0:	f002 fb2e 	bl	8008f00 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	32b0      	adds	r2, #176	@ 0xb0
 80068ae:	2100      	movs	r1, #0
 80068b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20000093 	.word	0x20000093
 80068cc:	20000094 	.word	0x20000094
 80068d0:	20000095 	.word	0x20000095

080068d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	32b0      	adds	r2, #176	@ 0xb0
 80068e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006900:	2303      	movs	r3, #3
 8006902:	e0bf      	b.n	8006a84 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800690c:	2b00      	cmp	r3, #0
 800690e:	d050      	beq.n	80069b2 <USBD_CDC_Setup+0xde>
 8006910:	2b20      	cmp	r3, #32
 8006912:	f040 80af 	bne.w	8006a74 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	88db      	ldrh	r3, [r3, #6]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d03a      	beq.n	8006994 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	b25b      	sxtb	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	da1b      	bge.n	8006960 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	33b0      	adds	r3, #176	@ 0xb0
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800693e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	88d2      	ldrh	r2, [r2, #6]
 8006944:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	88db      	ldrh	r3, [r3, #6]
 800694a:	2b07      	cmp	r3, #7
 800694c:	bf28      	it	cs
 800694e:	2307      	movcs	r3, #7
 8006950:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	89fa      	ldrh	r2, [r7, #14]
 8006956:	4619      	mov	r1, r3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f001 fd87 	bl	800846c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800695e:	e090      	b.n	8006a82 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	785a      	ldrb	r2, [r3, #1]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	88db      	ldrh	r3, [r3, #6]
 800696e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006970:	d803      	bhi.n	800697a <USBD_CDC_Setup+0xa6>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	88db      	ldrh	r3, [r3, #6]
 8006976:	b2da      	uxtb	r2, r3
 8006978:	e000      	b.n	800697c <USBD_CDC_Setup+0xa8>
 800697a:	2240      	movs	r2, #64	@ 0x40
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006982:	6939      	ldr	r1, [r7, #16]
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800698a:	461a      	mov	r2, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f001 fd99 	bl	80084c4 <USBD_CtlPrepareRx>
      break;
 8006992:	e076      	b.n	8006a82 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	33b0      	adds	r3, #176	@ 0xb0
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	683a      	ldr	r2, [r7, #0]
 80069a8:	7850      	ldrb	r0, [r2, #1]
 80069aa:	2200      	movs	r2, #0
 80069ac:	6839      	ldr	r1, [r7, #0]
 80069ae:	4798      	blx	r3
      break;
 80069b0:	e067      	b.n	8006a82 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	785b      	ldrb	r3, [r3, #1]
 80069b6:	2b0b      	cmp	r3, #11
 80069b8:	d851      	bhi.n	8006a5e <USBD_CDC_Setup+0x18a>
 80069ba:	a201      	add	r2, pc, #4	@ (adr r2, 80069c0 <USBD_CDC_Setup+0xec>)
 80069bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c0:	080069f1 	.word	0x080069f1
 80069c4:	08006a6d 	.word	0x08006a6d
 80069c8:	08006a5f 	.word	0x08006a5f
 80069cc:	08006a5f 	.word	0x08006a5f
 80069d0:	08006a5f 	.word	0x08006a5f
 80069d4:	08006a5f 	.word	0x08006a5f
 80069d8:	08006a5f 	.word	0x08006a5f
 80069dc:	08006a5f 	.word	0x08006a5f
 80069e0:	08006a5f 	.word	0x08006a5f
 80069e4:	08006a5f 	.word	0x08006a5f
 80069e8:	08006a1b 	.word	0x08006a1b
 80069ec:	08006a45 	.word	0x08006a45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b03      	cmp	r3, #3
 80069fa:	d107      	bne.n	8006a0c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80069fc:	f107 030a 	add.w	r3, r7, #10
 8006a00:	2202      	movs	r2, #2
 8006a02:	4619      	mov	r1, r3
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f001 fd31 	bl	800846c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a0a:	e032      	b.n	8006a72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f001 fcbb 	bl	800838a <USBD_CtlError>
            ret = USBD_FAIL;
 8006a14:	2303      	movs	r3, #3
 8006a16:	75fb      	strb	r3, [r7, #23]
          break;
 8006a18:	e02b      	b.n	8006a72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d107      	bne.n	8006a36 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a26:	f107 030d 	add.w	r3, r7, #13
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f001 fd1c 	bl	800846c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a34:	e01d      	b.n	8006a72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 fca6 	bl	800838a <USBD_CtlError>
            ret = USBD_FAIL;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	75fb      	strb	r3, [r7, #23]
          break;
 8006a42:	e016      	b.n	8006a72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d00f      	beq.n	8006a70 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f001 fc99 	bl	800838a <USBD_CtlError>
            ret = USBD_FAIL;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a5c:	e008      	b.n	8006a70 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 fc92 	bl	800838a <USBD_CtlError>
          ret = USBD_FAIL;
 8006a66:	2303      	movs	r3, #3
 8006a68:	75fb      	strb	r3, [r7, #23]
          break;
 8006a6a:	e002      	b.n	8006a72 <USBD_CDC_Setup+0x19e>
          break;
 8006a6c:	bf00      	nop
 8006a6e:	e008      	b.n	8006a82 <USBD_CDC_Setup+0x1ae>
          break;
 8006a70:	bf00      	nop
      }
      break;
 8006a72:	e006      	b.n	8006a82 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006a74:	6839      	ldr	r1, [r7, #0]
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f001 fc87 	bl	800838a <USBD_CtlError>
      ret = USBD_FAIL;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a80:	bf00      	nop
  }

  return (uint8_t)ret;
 8006a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3718      	adds	r7, #24
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	460b      	mov	r3, r1
 8006a96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006a9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	32b0      	adds	r2, #176	@ 0xb0
 8006aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e065      	b.n	8006b82 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	32b0      	adds	r2, #176	@ 0xb0
 8006ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006ac6:	78fb      	ldrb	r3, [r7, #3]
 8006ac8:	f003 020f 	and.w	r2, r3, #15
 8006acc:	6879      	ldr	r1, [r7, #4]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	440b      	add	r3, r1
 8006ad8:	3318      	adds	r3, #24
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d02f      	beq.n	8006b40 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006ae0:	78fb      	ldrb	r3, [r7, #3]
 8006ae2:	f003 020f 	and.w	r2, r3, #15
 8006ae6:	6879      	ldr	r1, [r7, #4]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	440b      	add	r3, r1
 8006af2:	3318      	adds	r3, #24
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	78fb      	ldrb	r3, [r7, #3]
 8006af8:	f003 010f 	and.w	r1, r3, #15
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	460b      	mov	r3, r1
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	440b      	add	r3, r1
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4403      	add	r3, r0
 8006b08:	331c      	adds	r3, #28
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b10:	fb01 f303 	mul.w	r3, r1, r3
 8006b14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d112      	bne.n	8006b40 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006b1a:	78fb      	ldrb	r3, [r7, #3]
 8006b1c:	f003 020f 	and.w	r2, r3, #15
 8006b20:	6879      	ldr	r1, [r7, #4]
 8006b22:	4613      	mov	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	440b      	add	r3, r1
 8006b2c:	3318      	adds	r3, #24
 8006b2e:	2200      	movs	r2, #0
 8006b30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b32:	78f9      	ldrb	r1, [r7, #3]
 8006b34:	2300      	movs	r3, #0
 8006b36:	2200      	movs	r2, #0
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f002 f97e 	bl	8008e3a <USBD_LL_Transmit>
 8006b3e:	e01f      	b.n	8006b80 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	33b0      	adds	r3, #176	@ 0xb0
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d010      	beq.n	8006b80 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	33b0      	adds	r3, #176	@ 0xb0
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	4413      	add	r3, r2
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006b7c:	78fa      	ldrb	r2, [r7, #3]
 8006b7e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	460b      	mov	r3, r1
 8006b94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	32b0      	adds	r2, #176	@ 0xb0
 8006ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	32b0      	adds	r2, #176	@ 0xb0
 8006bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e01a      	b.n	8006bf2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006bbc:	78fb      	ldrb	r3, [r7, #3]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f002 f97c 	bl	8008ebe <USBD_LL_GetRxDataSize>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	33b0      	adds	r3, #176	@ 0xb0
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006bec:	4611      	mov	r1, r2
 8006bee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	32b0      	adds	r2, #176	@ 0xb0
 8006c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e024      	b.n	8006c66 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	33b0      	adds	r3, #176	@ 0xb0
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d019      	beq.n	8006c64 <USBD_CDC_EP0_RxReady+0x6a>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006c36:	2bff      	cmp	r3, #255	@ 0xff
 8006c38:	d014      	beq.n	8006c64 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	33b0      	adds	r3, #176	@ 0xb0
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006c52:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006c54:	68fa      	ldr	r2, [r7, #12]
 8006c56:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006c5a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	22ff      	movs	r2, #255	@ 0xff
 8006c60:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c78:	2182      	movs	r1, #130	@ 0x82
 8006c7a:	4818      	ldr	r0, [pc, #96]	@ (8006cdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c7c:	f000 fd4f 	bl	800771e <USBD_GetEpDesc>
 8006c80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c82:	2101      	movs	r1, #1
 8006c84:	4815      	ldr	r0, [pc, #84]	@ (8006cdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c86:	f000 fd4a 	bl	800771e <USBD_GetEpDesc>
 8006c8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c8c:	2181      	movs	r1, #129	@ 0x81
 8006c8e:	4813      	ldr	r0, [pc, #76]	@ (8006cdc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006c90:	f000 fd45 	bl	800771e <USBD_GetEpDesc>
 8006c94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	2210      	movs	r2, #16
 8006ca0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d006      	beq.n	8006cb6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cb0:	711a      	strb	r2, [r3, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d006      	beq.n	8006cca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cc4:	711a      	strb	r2, [r3, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2243      	movs	r2, #67	@ 0x43
 8006cce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006cd0:	4b02      	ldr	r3, [pc, #8]	@ (8006cdc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000050 	.word	0x20000050

08006ce0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ce8:	2182      	movs	r1, #130	@ 0x82
 8006cea:	4818      	ldr	r0, [pc, #96]	@ (8006d4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006cec:	f000 fd17 	bl	800771e <USBD_GetEpDesc>
 8006cf0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	4815      	ldr	r0, [pc, #84]	@ (8006d4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006cf6:	f000 fd12 	bl	800771e <USBD_GetEpDesc>
 8006cfa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cfc:	2181      	movs	r1, #129	@ 0x81
 8006cfe:	4813      	ldr	r0, [pc, #76]	@ (8006d4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006d00:	f000 fd0d 	bl	800771e <USBD_GetEpDesc>
 8006d04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	2210      	movs	r2, #16
 8006d10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d006      	beq.n	8006d26 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	711a      	strb	r2, [r3, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f042 0202 	orr.w	r2, r2, #2
 8006d24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d006      	beq.n	8006d3a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	711a      	strb	r2, [r3, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f042 0202 	orr.w	r2, r2, #2
 8006d38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2243      	movs	r2, #67	@ 0x43
 8006d3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d40:	4b02      	ldr	r3, [pc, #8]	@ (8006d4c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3718      	adds	r7, #24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20000050 	.word	0x20000050

08006d50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006d58:	2182      	movs	r1, #130	@ 0x82
 8006d5a:	4818      	ldr	r0, [pc, #96]	@ (8006dbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d5c:	f000 fcdf 	bl	800771e <USBD_GetEpDesc>
 8006d60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006d62:	2101      	movs	r1, #1
 8006d64:	4815      	ldr	r0, [pc, #84]	@ (8006dbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d66:	f000 fcda 	bl	800771e <USBD_GetEpDesc>
 8006d6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006d6c:	2181      	movs	r1, #129	@ 0x81
 8006d6e:	4813      	ldr	r0, [pc, #76]	@ (8006dbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006d70:	f000 fcd5 	bl	800771e <USBD_GetEpDesc>
 8006d74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d002      	beq.n	8006d82 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	2210      	movs	r2, #16
 8006d80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d006      	beq.n	8006d96 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d90:	711a      	strb	r2, [r3, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d006      	beq.n	8006daa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006da4:	711a      	strb	r2, [r3, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2243      	movs	r2, #67	@ 0x43
 8006dae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006db0:	4b02      	ldr	r3, [pc, #8]	@ (8006dbc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	20000050 	.word	0x20000050

08006dc0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	220a      	movs	r2, #10
 8006dcc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006dce:	4b03      	ldr	r3, [pc, #12]	@ (8006ddc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	2000000c 	.word	0x2000000c

08006de0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d101      	bne.n	8006df4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e009      	b.n	8006e08 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	33b0      	adds	r3, #176	@ 0xb0
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	32b0      	adds	r2, #176	@ 0xb0
 8006e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e008      	b.n	8006e4c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	371c      	adds	r7, #28
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	32b0      	adds	r2, #176	@ 0xb0
 8006e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e004      	b.n	8006e86 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
	...

08006e94 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	32b0      	adds	r2, #176	@ 0xb0
 8006ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eaa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006eac:	2301      	movs	r3, #1
 8006eae:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d101      	bne.n	8006eba <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e025      	b.n	8006f06 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d11f      	bne.n	8006f04 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006ecc:	4b10      	ldr	r3, [pc, #64]	@ (8006f10 <USBD_CDC_TransmitPacket+0x7c>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	f003 020f 	and.w	r2, r3, #15
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	4613      	mov	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	4413      	add	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	4403      	add	r3, r0
 8006ee6:	3318      	adds	r3, #24
 8006ee8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006eea:	4b09      	ldr	r3, [pc, #36]	@ (8006f10 <USBD_CDC_TransmitPacket+0x7c>)
 8006eec:	7819      	ldrb	r1, [r3, #0]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f001 ff9d 	bl	8008e3a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	20000093 	.word	0x20000093

08006f14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	32b0      	adds	r2, #176	@ 0xb0
 8006f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	32b0      	adds	r2, #176	@ 0xb0
 8006f36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e018      	b.n	8006f74 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	7c1b      	ldrb	r3, [r3, #16]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10a      	bne.n	8006f60 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f7c <USBD_CDC_ReceivePacket+0x68>)
 8006f4c:	7819      	ldrb	r1, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f001 ff8f 	bl	8008e7c <USBD_LL_PrepareReceive>
 8006f5e:	e008      	b.n	8006f72 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f60:	4b06      	ldr	r3, [pc, #24]	@ (8006f7c <USBD_CDC_ReceivePacket+0x68>)
 8006f62:	7819      	ldrb	r1, [r3, #0]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f6a:	2340      	movs	r3, #64	@ 0x40
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f001 ff85 	bl	8008e7c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	20000094 	.word	0x20000094

08006f80 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e01f      	b.n	8006fd8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	79fa      	ldrb	r2, [r7, #7]
 8006fca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f001 fdff 	bl	8008bd0 <USBD_LL_Init>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3718      	adds	r7, #24
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e025      	b.n	8007044 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	32ae      	adds	r2, #174	@ 0xae
 800700a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800700e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00f      	beq.n	8007034 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	32ae      	adds	r2, #174	@ 0xae
 800701e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007024:	f107 020e 	add.w	r2, r7, #14
 8007028:	4610      	mov	r0, r2
 800702a:	4798      	blx	r3
 800702c:	4602      	mov	r2, r0
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f001 fe07 	bl	8008c68 <USBD_LL_Start>
 800705a:	4603      	mov	r3, r0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800706c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800706e:	4618      	mov	r0, r3
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b084      	sub	sp, #16
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
 8007082:	460b      	mov	r3, r1
 8007084:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007090:	2b00      	cmp	r3, #0
 8007092:	d009      	beq.n	80070a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	78fa      	ldrb	r2, [r7, #3]
 800709e:	4611      	mov	r1, r2
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	4798      	blx	r3
 80070a4:	4603      	mov	r3, r0
 80070a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	460b      	mov	r3, r1
 80070bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070be:	2300      	movs	r3, #0
 80070c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	78fa      	ldrb	r2, [r7, #3]
 80070cc:	4611      	mov	r1, r2
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	4798      	blx	r3
 80070d2:	4603      	mov	r3, r0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d001      	beq.n	80070dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80070d8:	2303      	movs	r3, #3
 80070da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b084      	sub	sp, #16
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070f6:	6839      	ldr	r1, [r7, #0]
 80070f8:	4618      	mov	r0, r3
 80070fa:	f001 f90c 	bl	8008316 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2201      	movs	r2, #1
 8007102:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800710c:	461a      	mov	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800711a:	f003 031f 	and.w	r3, r3, #31
 800711e:	2b02      	cmp	r3, #2
 8007120:	d01a      	beq.n	8007158 <USBD_LL_SetupStage+0x72>
 8007122:	2b02      	cmp	r3, #2
 8007124:	d822      	bhi.n	800716c <USBD_LL_SetupStage+0x86>
 8007126:	2b00      	cmp	r3, #0
 8007128:	d002      	beq.n	8007130 <USBD_LL_SetupStage+0x4a>
 800712a:	2b01      	cmp	r3, #1
 800712c:	d00a      	beq.n	8007144 <USBD_LL_SetupStage+0x5e>
 800712e:	e01d      	b.n	800716c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 fb63 	bl	8007804 <USBD_StdDevReq>
 800713e:	4603      	mov	r3, r0
 8007140:	73fb      	strb	r3, [r7, #15]
      break;
 8007142:	e020      	b.n	8007186 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800714a:	4619      	mov	r1, r3
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 fbcb 	bl	80078e8 <USBD_StdItfReq>
 8007152:	4603      	mov	r3, r0
 8007154:	73fb      	strb	r3, [r7, #15]
      break;
 8007156:	e016      	b.n	8007186 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fc2d 	bl	80079c0 <USBD_StdEPReq>
 8007166:	4603      	mov	r3, r0
 8007168:	73fb      	strb	r3, [r7, #15]
      break;
 800716a:	e00c      	b.n	8007186 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007172:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007176:	b2db      	uxtb	r3, r3
 8007178:	4619      	mov	r1, r3
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 fdd4 	bl	8008d28 <USBD_LL_StallEP>
 8007180:	4603      	mov	r3, r0
 8007182:	73fb      	strb	r3, [r7, #15]
      break;
 8007184:	bf00      	nop
  }

  return ret;
 8007186:	7bfb      	ldrb	r3, [r7, #15]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	460b      	mov	r3, r1
 800719a:	607a      	str	r2, [r7, #4]
 800719c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80071a2:	7afb      	ldrb	r3, [r7, #11]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d16e      	bne.n	8007286 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80071ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	f040 8098 	bne.w	80072ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	689a      	ldr	r2, [r3, #8]
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d913      	bls.n	80071f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	689a      	ldr	r2, [r3, #8]
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	1ad2      	subs	r2, r2, r3
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	68da      	ldr	r2, [r3, #12]
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	4293      	cmp	r3, r2
 80071e0:	bf28      	it	cs
 80071e2:	4613      	movcs	r3, r2
 80071e4:	461a      	mov	r2, r3
 80071e6:	6879      	ldr	r1, [r7, #4]
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f001 f988 	bl	80084fe <USBD_CtlContinueRx>
 80071ee:	e07d      	b.n	80072ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80071f6:	f003 031f 	and.w	r3, r3, #31
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d014      	beq.n	8007228 <USBD_LL_DataOutStage+0x98>
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d81d      	bhi.n	800723e <USBD_LL_DataOutStage+0xae>
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <USBD_LL_DataOutStage+0x7c>
 8007206:	2b01      	cmp	r3, #1
 8007208:	d003      	beq.n	8007212 <USBD_LL_DataOutStage+0x82>
 800720a:	e018      	b.n	800723e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	75bb      	strb	r3, [r7, #22]
            break;
 8007210:	e018      	b.n	8007244 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007218:	b2db      	uxtb	r3, r3
 800721a:	4619      	mov	r1, r3
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 fa64 	bl	80076ea <USBD_CoreFindIF>
 8007222:	4603      	mov	r3, r0
 8007224:	75bb      	strb	r3, [r7, #22]
            break;
 8007226:	e00d      	b.n	8007244 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800722e:	b2db      	uxtb	r3, r3
 8007230:	4619      	mov	r1, r3
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f000 fa66 	bl	8007704 <USBD_CoreFindEP>
 8007238:	4603      	mov	r3, r0
 800723a:	75bb      	strb	r3, [r7, #22]
            break;
 800723c:	e002      	b.n	8007244 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800723e:	2300      	movs	r3, #0
 8007240:	75bb      	strb	r3, [r7, #22]
            break;
 8007242:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007244:	7dbb      	ldrb	r3, [r7, #22]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d119      	bne.n	800727e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b03      	cmp	r3, #3
 8007254:	d113      	bne.n	800727e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007256:	7dba      	ldrb	r2, [r7, #22]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	32ae      	adds	r2, #174	@ 0xae
 800725c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00b      	beq.n	800727e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007266:	7dba      	ldrb	r2, [r7, #22]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800726e:	7dba      	ldrb	r2, [r7, #22]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	32ae      	adds	r2, #174	@ 0xae
 8007274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007278:	691b      	ldr	r3, [r3, #16]
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f001 f94e 	bl	8008520 <USBD_CtlSendStatus>
 8007284:	e032      	b.n	80072ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007286:	7afb      	ldrb	r3, [r7, #11]
 8007288:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800728c:	b2db      	uxtb	r3, r3
 800728e:	4619      	mov	r1, r3
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 fa37 	bl	8007704 <USBD_CoreFindEP>
 8007296:	4603      	mov	r3, r0
 8007298:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800729a:	7dbb      	ldrb	r3, [r7, #22]
 800729c:	2bff      	cmp	r3, #255	@ 0xff
 800729e:	d025      	beq.n	80072ec <USBD_LL_DataOutStage+0x15c>
 80072a0:	7dbb      	ldrb	r3, [r7, #22]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d122      	bne.n	80072ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b03      	cmp	r3, #3
 80072b0:	d117      	bne.n	80072e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80072b2:	7dba      	ldrb	r2, [r7, #22]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	32ae      	adds	r2, #174	@ 0xae
 80072b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00f      	beq.n	80072e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80072c2:	7dba      	ldrb	r2, [r7, #22]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80072ca:	7dba      	ldrb	r2, [r7, #22]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	32ae      	adds	r2, #174	@ 0xae
 80072d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	7afa      	ldrb	r2, [r7, #11]
 80072d8:	4611      	mov	r1, r2
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	4798      	blx	r3
 80072de:	4603      	mov	r3, r0
 80072e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80072e2:	7dfb      	ldrb	r3, [r7, #23]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d001      	beq.n	80072ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80072e8:	7dfb      	ldrb	r3, [r7, #23]
 80072ea:	e000      	b.n	80072ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3718      	adds	r7, #24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}

080072f6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b086      	sub	sp, #24
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	60f8      	str	r0, [r7, #12]
 80072fe:	460b      	mov	r3, r1
 8007300:	607a      	str	r2, [r7, #4]
 8007302:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007304:	7afb      	ldrb	r3, [r7, #11]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d16f      	bne.n	80073ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	3314      	adds	r3, #20
 800730e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007316:	2b02      	cmp	r3, #2
 8007318:	d15a      	bne.n	80073d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	689a      	ldr	r2, [r3, #8]
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	429a      	cmp	r2, r3
 8007324:	d914      	bls.n	8007350 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	689a      	ldr	r2, [r3, #8]
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	1ad2      	subs	r2, r2, r3
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	461a      	mov	r2, r3
 800733a:	6879      	ldr	r1, [r7, #4]
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f001 f8b0 	bl	80084a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007342:	2300      	movs	r3, #0
 8007344:	2200      	movs	r2, #0
 8007346:	2100      	movs	r1, #0
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f001 fd97 	bl	8008e7c <USBD_LL_PrepareReceive>
 800734e:	e03f      	b.n	80073d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	68da      	ldr	r2, [r3, #12]
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	429a      	cmp	r2, r3
 800735a:	d11c      	bne.n	8007396 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007364:	429a      	cmp	r2, r3
 8007366:	d316      	bcc.n	8007396 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007372:	429a      	cmp	r2, r3
 8007374:	d20f      	bcs.n	8007396 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007376:	2200      	movs	r2, #0
 8007378:	2100      	movs	r1, #0
 800737a:	68f8      	ldr	r0, [r7, #12]
 800737c:	f001 f891 	bl	80084a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007388:	2300      	movs	r3, #0
 800738a:	2200      	movs	r2, #0
 800738c:	2100      	movs	r1, #0
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f001 fd74 	bl	8008e7c <USBD_LL_PrepareReceive>
 8007394:	e01c      	b.n	80073d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b03      	cmp	r3, #3
 80073a0:	d10f      	bne.n	80073c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d009      	beq.n	80073c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80073c2:	2180      	movs	r1, #128	@ 0x80
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f001 fcaf 	bl	8008d28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f001 f8bb 	bl	8008546 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d03a      	beq.n	8007450 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f7ff fe42 	bl	8007064 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80073e8:	e032      	b.n	8007450 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80073ea:	7afb      	ldrb	r3, [r7, #11]
 80073ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	4619      	mov	r1, r3
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 f985 	bl	8007704 <USBD_CoreFindEP>
 80073fa:	4603      	mov	r3, r0
 80073fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80073fe:	7dfb      	ldrb	r3, [r7, #23]
 8007400:	2bff      	cmp	r3, #255	@ 0xff
 8007402:	d025      	beq.n	8007450 <USBD_LL_DataInStage+0x15a>
 8007404:	7dfb      	ldrb	r3, [r7, #23]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d122      	bne.n	8007450 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b03      	cmp	r3, #3
 8007414:	d11c      	bne.n	8007450 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007416:	7dfa      	ldrb	r2, [r7, #23]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	32ae      	adds	r2, #174	@ 0xae
 800741c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d014      	beq.n	8007450 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007426:	7dfa      	ldrb	r2, [r7, #23]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800742e:	7dfa      	ldrb	r2, [r7, #23]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	32ae      	adds	r2, #174	@ 0xae
 8007434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	7afa      	ldrb	r2, [r7, #11]
 800743c:	4611      	mov	r1, r2
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	4798      	blx	r3
 8007442:	4603      	mov	r3, r0
 8007444:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007446:	7dbb      	ldrb	r3, [r7, #22]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800744c:	7dbb      	ldrb	r3, [r7, #22]
 800744e:	e000      	b.n	8007452 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007462:	2300      	movs	r3, #0
 8007464:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007492:	2b00      	cmp	r3, #0
 8007494:	d014      	beq.n	80074c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00e      	beq.n	80074c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	6852      	ldr	r2, [r2, #4]
 80074ae:	b2d2      	uxtb	r2, r2
 80074b0:	4611      	mov	r1, r2
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	4798      	blx	r3
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80074bc:	2303      	movs	r3, #3
 80074be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074c0:	2340      	movs	r3, #64	@ 0x40
 80074c2:	2200      	movs	r2, #0
 80074c4:	2100      	movs	r1, #0
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f001 fbe9 	bl	8008c9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2240      	movs	r2, #64	@ 0x40
 80074d8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80074dc:	2340      	movs	r3, #64	@ 0x40
 80074de:	2200      	movs	r2, #0
 80074e0:	2180      	movs	r1, #128	@ 0x80
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 fbdb 	bl	8008c9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2240      	movs	r2, #64	@ 0x40
 80074f2:	621a      	str	r2, [r3, #32]

  return ret;
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80074fe:	b480      	push	{r7}
 8007500:	b083      	sub	sp, #12
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
 8007506:	460b      	mov	r3, r1
 8007508:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	78fa      	ldrb	r2, [r7, #3]
 800750e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800751e:	b480      	push	{r7}
 8007520:	b083      	sub	sp, #12
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b04      	cmp	r3, #4
 8007530:	d006      	beq.n	8007540 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007538:	b2da      	uxtb	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2204      	movs	r2, #4
 8007544:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b04      	cmp	r3, #4
 8007568:	d106      	bne.n	8007578 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007570:	b2da      	uxtb	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	370c      	adds	r7, #12
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b03      	cmp	r3, #3
 8007598:	d110      	bne.n	80075bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00b      	beq.n	80075bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075aa:	69db      	ldr	r3, [r3, #28]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d005      	beq.n	80075bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075b6:	69db      	ldr	r3, [r3, #28]
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b082      	sub	sp, #8
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	460b      	mov	r3, r1
 80075d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	32ae      	adds	r2, #174	@ 0xae
 80075dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e01c      	b.n	8007622 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d115      	bne.n	8007620 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	32ae      	adds	r2, #174	@ 0xae
 80075fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00b      	beq.n	8007620 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	32ae      	adds	r2, #174	@ 0xae
 8007612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	78fa      	ldrb	r2, [r7, #3]
 800761a:	4611      	mov	r1, r2
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800762a:	b580      	push	{r7, lr}
 800762c:	b082      	sub	sp, #8
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	460b      	mov	r3, r1
 8007634:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	32ae      	adds	r2, #174	@ 0xae
 8007640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d101      	bne.n	800764c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007648:	2303      	movs	r3, #3
 800764a:	e01c      	b.n	8007686 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b03      	cmp	r3, #3
 8007656:	d115      	bne.n	8007684 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	32ae      	adds	r2, #174	@ 0xae
 8007662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00b      	beq.n	8007684 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	32ae      	adds	r2, #174	@ 0xae
 8007676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800767a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800767c:	78fa      	ldrb	r2, [r7, #3]
 800767e:	4611      	mov	r1, r2
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}

0800768e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00e      	beq.n	80076e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	6852      	ldr	r2, [r2, #4]
 80076ce:	b2d2      	uxtb	r2, r2
 80076d0:	4611      	mov	r1, r2
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	4798      	blx	r3
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d001      	beq.n	80076e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80076dc:	2303      	movs	r3, #3
 80076de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b083      	sub	sp, #12
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	460b      	mov	r3, r1
 80076f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	460b      	mov	r3, r1
 800770e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007710:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007712:	4618      	mov	r0, r3
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b086      	sub	sp, #24
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	460b      	mov	r3, r1
 8007728:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007732:	2300      	movs	r3, #0
 8007734:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	885b      	ldrh	r3, [r3, #2]
 800773a:	b29b      	uxth	r3, r3
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	7812      	ldrb	r2, [r2, #0]
 8007740:	4293      	cmp	r3, r2
 8007742:	d91f      	bls.n	8007784 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800774a:	e013      	b.n	8007774 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800774c:	f107 030a 	add.w	r3, r7, #10
 8007750:	4619      	mov	r1, r3
 8007752:	6978      	ldr	r0, [r7, #20]
 8007754:	f000 f81b 	bl	800778e <USBD_GetNextDesc>
 8007758:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	785b      	ldrb	r3, [r3, #1]
 800775e:	2b05      	cmp	r3, #5
 8007760:	d108      	bne.n	8007774 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	789b      	ldrb	r3, [r3, #2]
 800776a:	78fa      	ldrb	r2, [r7, #3]
 800776c:	429a      	cmp	r2, r3
 800776e:	d008      	beq.n	8007782 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007770:	2300      	movs	r3, #0
 8007772:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	885b      	ldrh	r3, [r3, #2]
 8007778:	b29a      	uxth	r2, r3
 800777a:	897b      	ldrh	r3, [r7, #10]
 800777c:	429a      	cmp	r2, r3
 800777e:	d8e5      	bhi.n	800774c <USBD_GetEpDesc+0x2e>
 8007780:	e000      	b.n	8007784 <USBD_GetEpDesc+0x66>
          break;
 8007782:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007784:	693b      	ldr	r3, [r7, #16]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800778e:	b480      	push	{r7}
 8007790:	b085      	sub	sp, #20
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	7812      	ldrb	r2, [r2, #0]
 80077a4:	4413      	add	r3, r2
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	461a      	mov	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4413      	add	r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80077b8:	68fb      	ldr	r3, [r7, #12]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b087      	sub	sp, #28
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	3301      	adds	r3, #1
 80077dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80077e4:	8a3b      	ldrh	r3, [r7, #16]
 80077e6:	021b      	lsls	r3, r3, #8
 80077e8:	b21a      	sxth	r2, r3
 80077ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	b21b      	sxth	r3, r3
 80077f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80077f4:	89fb      	ldrh	r3, [r7, #14]
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	371c      	adds	r7, #28
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
	...

08007804 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800781a:	2b40      	cmp	r3, #64	@ 0x40
 800781c:	d005      	beq.n	800782a <USBD_StdDevReq+0x26>
 800781e:	2b40      	cmp	r3, #64	@ 0x40
 8007820:	d857      	bhi.n	80078d2 <USBD_StdDevReq+0xce>
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00f      	beq.n	8007846 <USBD_StdDevReq+0x42>
 8007826:	2b20      	cmp	r3, #32
 8007828:	d153      	bne.n	80078d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	32ae      	adds	r2, #174	@ 0xae
 8007834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	6839      	ldr	r1, [r7, #0]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	4798      	blx	r3
 8007840:	4603      	mov	r3, r0
 8007842:	73fb      	strb	r3, [r7, #15]
      break;
 8007844:	e04a      	b.n	80078dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	785b      	ldrb	r3, [r3, #1]
 800784a:	2b09      	cmp	r3, #9
 800784c:	d83b      	bhi.n	80078c6 <USBD_StdDevReq+0xc2>
 800784e:	a201      	add	r2, pc, #4	@ (adr r2, 8007854 <USBD_StdDevReq+0x50>)
 8007850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007854:	080078a9 	.word	0x080078a9
 8007858:	080078bd 	.word	0x080078bd
 800785c:	080078c7 	.word	0x080078c7
 8007860:	080078b3 	.word	0x080078b3
 8007864:	080078c7 	.word	0x080078c7
 8007868:	08007887 	.word	0x08007887
 800786c:	0800787d 	.word	0x0800787d
 8007870:	080078c7 	.word	0x080078c7
 8007874:	0800789f 	.word	0x0800789f
 8007878:	08007891 	.word	0x08007891
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800787c:	6839      	ldr	r1, [r7, #0]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fa3c 	bl	8007cfc <USBD_GetDescriptor>
          break;
 8007884:	e024      	b.n	80078d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fba1 	bl	8007fd0 <USBD_SetAddress>
          break;
 800788e:	e01f      	b.n	80078d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fbe0 	bl	8008058 <USBD_SetConfig>
 8007898:	4603      	mov	r3, r0
 800789a:	73fb      	strb	r3, [r7, #15]
          break;
 800789c:	e018      	b.n	80078d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fc83 	bl	80081ac <USBD_GetConfig>
          break;
 80078a6:	e013      	b.n	80078d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078a8:	6839      	ldr	r1, [r7, #0]
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 fcb4 	bl	8008218 <USBD_GetStatus>
          break;
 80078b0:	e00e      	b.n	80078d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078b2:	6839      	ldr	r1, [r7, #0]
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fce3 	bl	8008280 <USBD_SetFeature>
          break;
 80078ba:	e009      	b.n	80078d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fd07 	bl	80082d2 <USBD_ClrFeature>
          break;
 80078c4:	e004      	b.n	80078d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fd5e 	bl	800838a <USBD_CtlError>
          break;
 80078ce:	bf00      	nop
      }
      break;
 80078d0:	e004      	b.n	80078dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fd58 	bl	800838a <USBD_CtlError>
      break;
 80078da:	bf00      	nop
  }

  return ret;
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop

080078e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078fe:	2b40      	cmp	r3, #64	@ 0x40
 8007900:	d005      	beq.n	800790e <USBD_StdItfReq+0x26>
 8007902:	2b40      	cmp	r3, #64	@ 0x40
 8007904:	d852      	bhi.n	80079ac <USBD_StdItfReq+0xc4>
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <USBD_StdItfReq+0x26>
 800790a:	2b20      	cmp	r3, #32
 800790c:	d14e      	bne.n	80079ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007914:	b2db      	uxtb	r3, r3
 8007916:	3b01      	subs	r3, #1
 8007918:	2b02      	cmp	r3, #2
 800791a:	d840      	bhi.n	800799e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	889b      	ldrh	r3, [r3, #4]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b01      	cmp	r3, #1
 8007924:	d836      	bhi.n	8007994 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	889b      	ldrh	r3, [r3, #4]
 800792a:	b2db      	uxtb	r3, r3
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f7ff fedb 	bl	80076ea <USBD_CoreFindIF>
 8007934:	4603      	mov	r3, r0
 8007936:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007938:	7bbb      	ldrb	r3, [r7, #14]
 800793a:	2bff      	cmp	r3, #255	@ 0xff
 800793c:	d01d      	beq.n	800797a <USBD_StdItfReq+0x92>
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d11a      	bne.n	800797a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007944:	7bba      	ldrb	r2, [r7, #14]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	32ae      	adds	r2, #174	@ 0xae
 800794a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00f      	beq.n	8007974 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007954:	7bba      	ldrb	r2, [r7, #14]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800795c:	7bba      	ldrb	r2, [r7, #14]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	32ae      	adds	r2, #174	@ 0xae
 8007962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	4798      	blx	r3
 800796e:	4603      	mov	r3, r0
 8007970:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007972:	e004      	b.n	800797e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007974:	2303      	movs	r3, #3
 8007976:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007978:	e001      	b.n	800797e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800797a:	2303      	movs	r3, #3
 800797c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	88db      	ldrh	r3, [r3, #6]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d110      	bne.n	80079a8 <USBD_StdItfReq+0xc0>
 8007986:	7bfb      	ldrb	r3, [r7, #15]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10d      	bne.n	80079a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fdc7 	bl	8008520 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007992:	e009      	b.n	80079a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fcf7 	bl	800838a <USBD_CtlError>
          break;
 800799c:	e004      	b.n	80079a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fcf2 	bl	800838a <USBD_CtlError>
          break;
 80079a6:	e000      	b.n	80079aa <USBD_StdItfReq+0xc2>
          break;
 80079a8:	bf00      	nop
      }
      break;
 80079aa:	e004      	b.n	80079b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fceb 	bl	800838a <USBD_CtlError>
      break;
 80079b4:	bf00      	nop
  }

  return ret;
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	889b      	ldrh	r3, [r3, #4]
 80079d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079dc:	2b40      	cmp	r3, #64	@ 0x40
 80079de:	d007      	beq.n	80079f0 <USBD_StdEPReq+0x30>
 80079e0:	2b40      	cmp	r3, #64	@ 0x40
 80079e2:	f200 817f 	bhi.w	8007ce4 <USBD_StdEPReq+0x324>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d02a      	beq.n	8007a40 <USBD_StdEPReq+0x80>
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	f040 817a 	bne.w	8007ce4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7ff fe85 	bl	8007704 <USBD_CoreFindEP>
 80079fa:	4603      	mov	r3, r0
 80079fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079fe:	7b7b      	ldrb	r3, [r7, #13]
 8007a00:	2bff      	cmp	r3, #255	@ 0xff
 8007a02:	f000 8174 	beq.w	8007cee <USBD_StdEPReq+0x32e>
 8007a06:	7b7b      	ldrb	r3, [r7, #13]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f040 8170 	bne.w	8007cee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a0e:	7b7a      	ldrb	r2, [r7, #13]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a16:	7b7a      	ldrb	r2, [r7, #13]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	32ae      	adds	r2, #174	@ 0xae
 8007a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 8163 	beq.w	8007cee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a28:	7b7a      	ldrb	r2, [r7, #13]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	32ae      	adds	r2, #174	@ 0xae
 8007a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	4798      	blx	r3
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a3e:	e156      	b.n	8007cee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	785b      	ldrb	r3, [r3, #1]
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d008      	beq.n	8007a5a <USBD_StdEPReq+0x9a>
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	f300 8145 	bgt.w	8007cd8 <USBD_StdEPReq+0x318>
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 809b 	beq.w	8007b8a <USBD_StdEPReq+0x1ca>
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d03c      	beq.n	8007ad2 <USBD_StdEPReq+0x112>
 8007a58:	e13e      	b.n	8007cd8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d002      	beq.n	8007a6c <USBD_StdEPReq+0xac>
 8007a66:	2b03      	cmp	r3, #3
 8007a68:	d016      	beq.n	8007a98 <USBD_StdEPReq+0xd8>
 8007a6a:	e02c      	b.n	8007ac6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00d      	beq.n	8007a8e <USBD_StdEPReq+0xce>
 8007a72:	7bbb      	ldrb	r3, [r7, #14]
 8007a74:	2b80      	cmp	r3, #128	@ 0x80
 8007a76:	d00a      	beq.n	8007a8e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 f953 	bl	8008d28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a82:	2180      	movs	r1, #128	@ 0x80
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 f94f 	bl	8008d28 <USBD_LL_StallEP>
 8007a8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a8c:	e020      	b.n	8007ad0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fc7a 	bl	800838a <USBD_CtlError>
              break;
 8007a96:	e01b      	b.n	8007ad0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	885b      	ldrh	r3, [r3, #2]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10e      	bne.n	8007abe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00b      	beq.n	8007abe <USBD_StdEPReq+0xfe>
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
 8007aa8:	2b80      	cmp	r3, #128	@ 0x80
 8007aaa:	d008      	beq.n	8007abe <USBD_StdEPReq+0xfe>
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	88db      	ldrh	r3, [r3, #6]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d104      	bne.n	8007abe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ab4:	7bbb      	ldrb	r3, [r7, #14]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 f935 	bl	8008d28 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fd2e 	bl	8008520 <USBD_CtlSendStatus>

              break;
 8007ac4:	e004      	b.n	8007ad0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007ac6:	6839      	ldr	r1, [r7, #0]
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 fc5e 	bl	800838a <USBD_CtlError>
              break;
 8007ace:	bf00      	nop
          }
          break;
 8007ad0:	e107      	b.n	8007ce2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d002      	beq.n	8007ae4 <USBD_StdEPReq+0x124>
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d016      	beq.n	8007b10 <USBD_StdEPReq+0x150>
 8007ae2:	e04b      	b.n	8007b7c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ae4:	7bbb      	ldrb	r3, [r7, #14]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00d      	beq.n	8007b06 <USBD_StdEPReq+0x146>
 8007aea:	7bbb      	ldrb	r3, [r7, #14]
 8007aec:	2b80      	cmp	r3, #128	@ 0x80
 8007aee:	d00a      	beq.n	8007b06 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	4619      	mov	r1, r3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f001 f917 	bl	8008d28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007afa:	2180      	movs	r1, #128	@ 0x80
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f001 f913 	bl	8008d28 <USBD_LL_StallEP>
 8007b02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b04:	e040      	b.n	8007b88 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fc3e 	bl	800838a <USBD_CtlError>
              break;
 8007b0e:	e03b      	b.n	8007b88 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	885b      	ldrh	r3, [r3, #2]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d136      	bne.n	8007b86 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b18:	7bbb      	ldrb	r3, [r7, #14]
 8007b1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d004      	beq.n	8007b2c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b22:	7bbb      	ldrb	r3, [r7, #14]
 8007b24:	4619      	mov	r1, r3
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f001 f91d 	bl	8008d66 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fcf7 	bl	8008520 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	4619      	mov	r1, r3
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff fde4 	bl	8007704 <USBD_CoreFindEP>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b40:	7b7b      	ldrb	r3, [r7, #13]
 8007b42:	2bff      	cmp	r3, #255	@ 0xff
 8007b44:	d01f      	beq.n	8007b86 <USBD_StdEPReq+0x1c6>
 8007b46:	7b7b      	ldrb	r3, [r7, #13]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d11c      	bne.n	8007b86 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007b4c:	7b7a      	ldrb	r2, [r7, #13]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007b54:	7b7a      	ldrb	r2, [r7, #13]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	32ae      	adds	r2, #174	@ 0xae
 8007b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d010      	beq.n	8007b86 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b64:	7b7a      	ldrb	r2, [r7, #13]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	32ae      	adds	r2, #174	@ 0xae
 8007b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	4798      	blx	r3
 8007b76:	4603      	mov	r3, r0
 8007b78:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b7a:	e004      	b.n	8007b86 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b7c:	6839      	ldr	r1, [r7, #0]
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fc03 	bl	800838a <USBD_CtlError>
              break;
 8007b84:	e000      	b.n	8007b88 <USBD_StdEPReq+0x1c8>
              break;
 8007b86:	bf00      	nop
          }
          break;
 8007b88:	e0ab      	b.n	8007ce2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d002      	beq.n	8007b9c <USBD_StdEPReq+0x1dc>
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d032      	beq.n	8007c00 <USBD_StdEPReq+0x240>
 8007b9a:	e097      	b.n	8007ccc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d007      	beq.n	8007bb2 <USBD_StdEPReq+0x1f2>
 8007ba2:	7bbb      	ldrb	r3, [r7, #14]
 8007ba4:	2b80      	cmp	r3, #128	@ 0x80
 8007ba6:	d004      	beq.n	8007bb2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fbed 	bl	800838a <USBD_CtlError>
                break;
 8007bb0:	e091      	b.n	8007cd6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	da0b      	bge.n	8007bd2 <USBD_StdEPReq+0x212>
 8007bba:	7bbb      	ldrb	r3, [r7, #14]
 8007bbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	3310      	adds	r3, #16
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	4413      	add	r3, r2
 8007bce:	3304      	adds	r3, #4
 8007bd0:	e00b      	b.n	8007bea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bd8:	4613      	mov	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	4413      	add	r3, r2
 8007bde:	009b      	lsls	r3, r3, #2
 8007be0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	4413      	add	r3, r2
 8007be8:	3304      	adds	r3, #4
 8007bea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2202      	movs	r2, #2
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fc37 	bl	800846c <USBD_CtlSendData>
              break;
 8007bfe:	e06a      	b.n	8007cd6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	da11      	bge.n	8007c2c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c08:	7bbb      	ldrb	r3, [r7, #14]
 8007c0a:	f003 020f 	and.w	r2, r3, #15
 8007c0e:	6879      	ldr	r1, [r7, #4]
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	440b      	add	r3, r1
 8007c1a:	3324      	adds	r3, #36	@ 0x24
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d117      	bne.n	8007c52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fbb0 	bl	800838a <USBD_CtlError>
                  break;
 8007c2a:	e054      	b.n	8007cd6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	f003 020f 	and.w	r2, r3, #15
 8007c32:	6879      	ldr	r1, [r7, #4]
 8007c34:	4613      	mov	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	440b      	add	r3, r1
 8007c3e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c42:	881b      	ldrh	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d104      	bne.n	8007c52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fb9d 	bl	800838a <USBD_CtlError>
                  break;
 8007c50:	e041      	b.n	8007cd6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	da0b      	bge.n	8007c72 <USBD_StdEPReq+0x2b2>
 8007c5a:	7bbb      	ldrb	r3, [r7, #14]
 8007c5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007c60:	4613      	mov	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	3310      	adds	r3, #16
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	3304      	adds	r3, #4
 8007c70:	e00b      	b.n	8007c8a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c78:	4613      	mov	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	4413      	add	r3, r2
 8007c88:	3304      	adds	r3, #4
 8007c8a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c8c:	7bbb      	ldrb	r3, [r7, #14]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <USBD_StdEPReq+0x2d8>
 8007c92:	7bbb      	ldrb	r3, [r7, #14]
 8007c94:	2b80      	cmp	r3, #128	@ 0x80
 8007c96:	d103      	bne.n	8007ca0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	e00e      	b.n	8007cbe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f001 f87d 	bl	8008da4 <USBD_LL_IsStallEP>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]
 8007cb6:	e002      	b.n	8007cbe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fbd1 	bl	800846c <USBD_CtlSendData>
              break;
 8007cca:	e004      	b.n	8007cd6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fb5b 	bl	800838a <USBD_CtlError>
              break;
 8007cd4:	bf00      	nop
          }
          break;
 8007cd6:	e004      	b.n	8007ce2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fb55 	bl	800838a <USBD_CtlError>
          break;
 8007ce0:	bf00      	nop
      }
      break;
 8007ce2:	e005      	b.n	8007cf0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fb4f 	bl	800838a <USBD_CtlError>
      break;
 8007cec:	e000      	b.n	8007cf0 <USBD_StdEPReq+0x330>
      break;
 8007cee:	bf00      	nop
  }

  return ret;
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
	...

08007cfc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	885b      	ldrh	r3, [r3, #2]
 8007d16:	0a1b      	lsrs	r3, r3, #8
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	2b06      	cmp	r3, #6
 8007d1e:	f200 8128 	bhi.w	8007f72 <USBD_GetDescriptor+0x276>
 8007d22:	a201      	add	r2, pc, #4	@ (adr r2, 8007d28 <USBD_GetDescriptor+0x2c>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007d45 	.word	0x08007d45
 8007d2c:	08007d5d 	.word	0x08007d5d
 8007d30:	08007d9d 	.word	0x08007d9d
 8007d34:	08007f73 	.word	0x08007f73
 8007d38:	08007f73 	.word	0x08007f73
 8007d3c:	08007f13 	.word	0x08007f13
 8007d40:	08007f3f 	.word	0x08007f3f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	7c12      	ldrb	r2, [r2, #16]
 8007d50:	f107 0108 	add.w	r1, r7, #8
 8007d54:	4610      	mov	r0, r2
 8007d56:	4798      	blx	r3
 8007d58:	60f8      	str	r0, [r7, #12]
      break;
 8007d5a:	e112      	b.n	8007f82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	7c1b      	ldrb	r3, [r3, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10d      	bne.n	8007d80 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d6c:	f107 0208 	add.w	r2, r7, #8
 8007d70:	4610      	mov	r0, r2
 8007d72:	4798      	blx	r3
 8007d74:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d7e:	e100      	b.n	8007f82 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d88:	f107 0208 	add.w	r2, r7, #8
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	4798      	blx	r3
 8007d90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	3301      	adds	r3, #1
 8007d96:	2202      	movs	r2, #2
 8007d98:	701a      	strb	r2, [r3, #0]
      break;
 8007d9a:	e0f2      	b.n	8007f82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	885b      	ldrh	r3, [r3, #2]
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b05      	cmp	r3, #5
 8007da4:	f200 80ac 	bhi.w	8007f00 <USBD_GetDescriptor+0x204>
 8007da8:	a201      	add	r2, pc, #4	@ (adr r2, 8007db0 <USBD_GetDescriptor+0xb4>)
 8007daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dae:	bf00      	nop
 8007db0:	08007dc9 	.word	0x08007dc9
 8007db4:	08007dfd 	.word	0x08007dfd
 8007db8:	08007e31 	.word	0x08007e31
 8007dbc:	08007e65 	.word	0x08007e65
 8007dc0:	08007e99 	.word	0x08007e99
 8007dc4:	08007ecd 	.word	0x08007ecd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d00b      	beq.n	8007dec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	7c12      	ldrb	r2, [r2, #16]
 8007de0:	f107 0108 	add.w	r1, r7, #8
 8007de4:	4610      	mov	r0, r2
 8007de6:	4798      	blx	r3
 8007de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dea:	e091      	b.n	8007f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 facb 	bl	800838a <USBD_CtlError>
            err++;
 8007df4:	7afb      	ldrb	r3, [r7, #11]
 8007df6:	3301      	adds	r3, #1
 8007df8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dfa:	e089      	b.n	8007f10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00b      	beq.n	8007e20 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	7c12      	ldrb	r2, [r2, #16]
 8007e14:	f107 0108 	add.w	r1, r7, #8
 8007e18:	4610      	mov	r0, r2
 8007e1a:	4798      	blx	r3
 8007e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e1e:	e077      	b.n	8007f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fab1 	bl	800838a <USBD_CtlError>
            err++;
 8007e28:	7afb      	ldrb	r3, [r7, #11]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e2e:	e06f      	b.n	8007f10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00b      	beq.n	8007e54 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	7c12      	ldrb	r2, [r2, #16]
 8007e48:	f107 0108 	add.w	r1, r7, #8
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	4798      	blx	r3
 8007e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e52:	e05d      	b.n	8007f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fa97 	bl	800838a <USBD_CtlError>
            err++;
 8007e5c:	7afb      	ldrb	r3, [r7, #11]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	72fb      	strb	r3, [r7, #11]
          break;
 8007e62:	e055      	b.n	8007f10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00b      	beq.n	8007e88 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e76:	691b      	ldr	r3, [r3, #16]
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	7c12      	ldrb	r2, [r2, #16]
 8007e7c:	f107 0108 	add.w	r1, r7, #8
 8007e80:	4610      	mov	r0, r2
 8007e82:	4798      	blx	r3
 8007e84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e86:	e043      	b.n	8007f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fa7d 	bl	800838a <USBD_CtlError>
            err++;
 8007e90:	7afb      	ldrb	r3, [r7, #11]
 8007e92:	3301      	adds	r3, #1
 8007e94:	72fb      	strb	r3, [r7, #11]
          break;
 8007e96:	e03b      	b.n	8007f10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00b      	beq.n	8007ebc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	7c12      	ldrb	r2, [r2, #16]
 8007eb0:	f107 0108 	add.w	r1, r7, #8
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	4798      	blx	r3
 8007eb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eba:	e029      	b.n	8007f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ebc:	6839      	ldr	r1, [r7, #0]
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 fa63 	bl	800838a <USBD_CtlError>
            err++;
 8007ec4:	7afb      	ldrb	r3, [r7, #11]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eca:	e021      	b.n	8007f10 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00b      	beq.n	8007ef0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	7c12      	ldrb	r2, [r2, #16]
 8007ee4:	f107 0108 	add.w	r1, r7, #8
 8007ee8:	4610      	mov	r0, r2
 8007eea:	4798      	blx	r3
 8007eec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eee:	e00f      	b.n	8007f10 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fa49 	bl	800838a <USBD_CtlError>
            err++;
 8007ef8:	7afb      	ldrb	r3, [r7, #11]
 8007efa:	3301      	adds	r3, #1
 8007efc:	72fb      	strb	r3, [r7, #11]
          break;
 8007efe:	e007      	b.n	8007f10 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007f00:	6839      	ldr	r1, [r7, #0]
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 fa41 	bl	800838a <USBD_CtlError>
          err++;
 8007f08:	7afb      	ldrb	r3, [r7, #11]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f0e:	bf00      	nop
      }
      break;
 8007f10:	e037      	b.n	8007f82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	7c1b      	ldrb	r3, [r3, #16]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d109      	bne.n	8007f2e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f22:	f107 0208 	add.w	r2, r7, #8
 8007f26:	4610      	mov	r0, r2
 8007f28:	4798      	blx	r3
 8007f2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f2c:	e029      	b.n	8007f82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f2e:	6839      	ldr	r1, [r7, #0]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fa2a 	bl	800838a <USBD_CtlError>
        err++;
 8007f36:	7afb      	ldrb	r3, [r7, #11]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	72fb      	strb	r3, [r7, #11]
      break;
 8007f3c:	e021      	b.n	8007f82 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	7c1b      	ldrb	r3, [r3, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d10d      	bne.n	8007f62 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f4e:	f107 0208 	add.w	r2, r7, #8
 8007f52:	4610      	mov	r0, r2
 8007f54:	4798      	blx	r3
 8007f56:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	2207      	movs	r2, #7
 8007f5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f60:	e00f      	b.n	8007f82 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fa10 	bl	800838a <USBD_CtlError>
        err++;
 8007f6a:	7afb      	ldrb	r3, [r7, #11]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f70:	e007      	b.n	8007f82 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 fa08 	bl	800838a <USBD_CtlError>
      err++;
 8007f7a:	7afb      	ldrb	r3, [r7, #11]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f80:	bf00      	nop
  }

  if (err != 0U)
 8007f82:	7afb      	ldrb	r3, [r7, #11]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d11e      	bne.n	8007fc6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	88db      	ldrh	r3, [r3, #6]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d016      	beq.n	8007fbe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f90:	893b      	ldrh	r3, [r7, #8]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d00e      	beq.n	8007fb4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	88da      	ldrh	r2, [r3, #6]
 8007f9a:	893b      	ldrh	r3, [r7, #8]
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	bf28      	it	cs
 8007fa0:	4613      	movcs	r3, r2
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007fa6:	893b      	ldrh	r3, [r7, #8]
 8007fa8:	461a      	mov	r2, r3
 8007faa:	68f9      	ldr	r1, [r7, #12]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fa5d 	bl	800846c <USBD_CtlSendData>
 8007fb2:	e009      	b.n	8007fc8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007fb4:	6839      	ldr	r1, [r7, #0]
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f9e7 	bl	800838a <USBD_CtlError>
 8007fbc:	e004      	b.n	8007fc8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 faae 	bl	8008520 <USBD_CtlSendStatus>
 8007fc4:	e000      	b.n	8007fc8 <USBD_GetDescriptor+0x2cc>
    return;
 8007fc6:	bf00      	nop
  }
}
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop

08007fd0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	889b      	ldrh	r3, [r3, #4]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d131      	bne.n	8008046 <USBD_SetAddress+0x76>
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	88db      	ldrh	r3, [r3, #6]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d12d      	bne.n	8008046 <USBD_SetAddress+0x76>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	885b      	ldrh	r3, [r3, #2]
 8007fee:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ff0:	d829      	bhi.n	8008046 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	885b      	ldrh	r3, [r3, #2]
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ffc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b03      	cmp	r3, #3
 8008008:	d104      	bne.n	8008014 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f9bc 	bl	800838a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008012:	e01d      	b.n	8008050 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	7bfa      	ldrb	r2, [r7, #15]
 8008018:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800801c:	7bfb      	ldrb	r3, [r7, #15]
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 feeb 	bl	8008dfc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fa7a 	bl	8008520 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d004      	beq.n	800803c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2202      	movs	r2, #2
 8008036:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800803a:	e009      	b.n	8008050 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008044:	e004      	b.n	8008050 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f99e 	bl	800838a <USBD_CtlError>
  }
}
 800804e:	bf00      	nop
 8008050:	bf00      	nop
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008062:	2300      	movs	r3, #0
 8008064:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	885b      	ldrh	r3, [r3, #2]
 800806a:	b2da      	uxtb	r2, r3
 800806c:	4b4e      	ldr	r3, [pc, #312]	@ (80081a8 <USBD_SetConfig+0x150>)
 800806e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008070:	4b4d      	ldr	r3, [pc, #308]	@ (80081a8 <USBD_SetConfig+0x150>)
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d905      	bls.n	8008084 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f985 	bl	800838a <USBD_CtlError>
    return USBD_FAIL;
 8008080:	2303      	movs	r3, #3
 8008082:	e08c      	b.n	800819e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b02      	cmp	r3, #2
 800808e:	d002      	beq.n	8008096 <USBD_SetConfig+0x3e>
 8008090:	2b03      	cmp	r3, #3
 8008092:	d029      	beq.n	80080e8 <USBD_SetConfig+0x90>
 8008094:	e075      	b.n	8008182 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008096:	4b44      	ldr	r3, [pc, #272]	@ (80081a8 <USBD_SetConfig+0x150>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d020      	beq.n	80080e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800809e:	4b42      	ldr	r3, [pc, #264]	@ (80081a8 <USBD_SetConfig+0x150>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	461a      	mov	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080a8:	4b3f      	ldr	r3, [pc, #252]	@ (80081a8 <USBD_SetConfig+0x150>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7fe ffe3 	bl	800707a <USBD_SetClassConfig>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d008      	beq.n	80080d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f962 	bl	800838a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2202      	movs	r2, #2
 80080ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080ce:	e065      	b.n	800819c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fa25 	bl	8008520 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2203      	movs	r2, #3
 80080da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80080de:	e05d      	b.n	800819c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fa1d 	bl	8008520 <USBD_CtlSendStatus>
      break;
 80080e6:	e059      	b.n	800819c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080e8:	4b2f      	ldr	r3, [pc, #188]	@ (80081a8 <USBD_SetConfig+0x150>)
 80080ea:	781b      	ldrb	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d112      	bne.n	8008116 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2202      	movs	r2, #2
 80080f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80080f8:	4b2b      	ldr	r3, [pc, #172]	@ (80081a8 <USBD_SetConfig+0x150>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	461a      	mov	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008102:	4b29      	ldr	r3, [pc, #164]	@ (80081a8 <USBD_SetConfig+0x150>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7fe ffd2 	bl	80070b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 fa06 	bl	8008520 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008114:	e042      	b.n	800819c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008116:	4b24      	ldr	r3, [pc, #144]	@ (80081a8 <USBD_SetConfig+0x150>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	429a      	cmp	r2, r3
 8008122:	d02a      	beq.n	800817a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	b2db      	uxtb	r3, r3
 800812a:	4619      	mov	r1, r3
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7fe ffc0 	bl	80070b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008132:	4b1d      	ldr	r3, [pc, #116]	@ (80081a8 <USBD_SetConfig+0x150>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800813c:	4b1a      	ldr	r3, [pc, #104]	@ (80081a8 <USBD_SetConfig+0x150>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	4619      	mov	r1, r3
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7fe ff99 	bl	800707a <USBD_SetClassConfig>
 8008148:	4603      	mov	r3, r0
 800814a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00f      	beq.n	8008172 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008152:	6839      	ldr	r1, [r7, #0]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f918 	bl	800838a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	b2db      	uxtb	r3, r3
 8008160:	4619      	mov	r1, r3
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7fe ffa5 	bl	80070b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2202      	movs	r2, #2
 800816c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008170:	e014      	b.n	800819c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f9d4 	bl	8008520 <USBD_CtlSendStatus>
      break;
 8008178:	e010      	b.n	800819c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f9d0 	bl	8008520 <USBD_CtlSendStatus>
      break;
 8008180:	e00c      	b.n	800819c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f900 	bl	800838a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800818a:	4b07      	ldr	r3, [pc, #28]	@ (80081a8 <USBD_SetConfig+0x150>)
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	4619      	mov	r1, r3
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f7fe ff8e 	bl	80070b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008196:	2303      	movs	r3, #3
 8008198:	73fb      	strb	r3, [r7, #15]
      break;
 800819a:	bf00      	nop
  }

  return ret;
 800819c:	7bfb      	ldrb	r3, [r7, #15]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	200031c4 	.word	0x200031c4

080081ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	88db      	ldrh	r3, [r3, #6]
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d004      	beq.n	80081c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f8e2 	bl	800838a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081c6:	e023      	b.n	8008210 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081ce:	b2db      	uxtb	r3, r3
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	dc02      	bgt.n	80081da <USBD_GetConfig+0x2e>
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	dc03      	bgt.n	80081e0 <USBD_GetConfig+0x34>
 80081d8:	e015      	b.n	8008206 <USBD_GetConfig+0x5a>
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d00b      	beq.n	80081f6 <USBD_GetConfig+0x4a>
 80081de:	e012      	b.n	8008206 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	3308      	adds	r3, #8
 80081ea:	2201      	movs	r2, #1
 80081ec:	4619      	mov	r1, r3
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 f93c 	bl	800846c <USBD_CtlSendData>
        break;
 80081f4:	e00c      	b.n	8008210 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	3304      	adds	r3, #4
 80081fa:	2201      	movs	r2, #1
 80081fc:	4619      	mov	r1, r3
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f934 	bl	800846c <USBD_CtlSendData>
        break;
 8008204:	e004      	b.n	8008210 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f8be 	bl	800838a <USBD_CtlError>
        break;
 800820e:	bf00      	nop
}
 8008210:	bf00      	nop
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008228:	b2db      	uxtb	r3, r3
 800822a:	3b01      	subs	r3, #1
 800822c:	2b02      	cmp	r3, #2
 800822e:	d81e      	bhi.n	800826e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	88db      	ldrh	r3, [r3, #6]
 8008234:	2b02      	cmp	r3, #2
 8008236:	d004      	beq.n	8008242 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008238:	6839      	ldr	r1, [r7, #0]
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f8a5 	bl	800838a <USBD_CtlError>
        break;
 8008240:	e01a      	b.n	8008278 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800824e:	2b00      	cmp	r3, #0
 8008250:	d005      	beq.n	800825e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	f043 0202 	orr.w	r2, r3, #2
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	330c      	adds	r3, #12
 8008262:	2202      	movs	r2, #2
 8008264:	4619      	mov	r1, r3
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 f900 	bl	800846c <USBD_CtlSendData>
      break;
 800826c:	e004      	b.n	8008278 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f88a 	bl	800838a <USBD_CtlError>
      break;
 8008276:	bf00      	nop
  }
}
 8008278:	bf00      	nop
 800827a:	3708      	adds	r7, #8
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	885b      	ldrh	r3, [r3, #2]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d107      	bne.n	80082a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f940 	bl	8008520 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80082a0:	e013      	b.n	80082ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	885b      	ldrh	r3, [r3, #2]
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d10b      	bne.n	80082c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	889b      	ldrh	r3, [r3, #4]
 80082ae:	0a1b      	lsrs	r3, r3, #8
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f930 	bl	8008520 <USBD_CtlSendStatus>
}
 80082c0:	e003      	b.n	80082ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 f860 	bl	800838a <USBD_CtlError>
}
 80082ca:	bf00      	nop
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b082      	sub	sp, #8
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	3b01      	subs	r3, #1
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	d80b      	bhi.n	8008302 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	885b      	ldrh	r3, [r3, #2]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d10c      	bne.n	800830c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f910 	bl	8008520 <USBD_CtlSendStatus>
      }
      break;
 8008300:	e004      	b.n	800830c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f840 	bl	800838a <USBD_CtlError>
      break;
 800830a:	e000      	b.n	800830e <USBD_ClrFeature+0x3c>
      break;
 800830c:	bf00      	nop
  }
}
 800830e:	bf00      	nop
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b084      	sub	sp, #16
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	781a      	ldrb	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	3301      	adds	r3, #1
 8008330:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	781a      	ldrb	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3301      	adds	r3, #1
 800833e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f7ff fa40 	bl	80077c6 <SWAPBYTE>
 8008346:	4603      	mov	r3, r0
 8008348:	461a      	mov	r2, r3
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	3301      	adds	r3, #1
 8008352:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	3301      	adds	r3, #1
 8008358:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f7ff fa33 	bl	80077c6 <SWAPBYTE>
 8008360:	4603      	mov	r3, r0
 8008362:	461a      	mov	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	3301      	adds	r3, #1
 800836c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	3301      	adds	r3, #1
 8008372:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f7ff fa26 	bl	80077c6 <SWAPBYTE>
 800837a:	4603      	mov	r3, r0
 800837c:	461a      	mov	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	80da      	strh	r2, [r3, #6]
}
 8008382:	bf00      	nop
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b082      	sub	sp, #8
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008394:	2180      	movs	r1, #128	@ 0x80
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 fcc6 	bl	8008d28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800839c:	2100      	movs	r1, #0
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fcc2 	bl	8008d28 <USBD_LL_StallEP>
}
 80083a4:	bf00      	nop
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d036      	beq.n	8008430 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80083c6:	6938      	ldr	r0, [r7, #16]
 80083c8:	f000 f836 	bl	8008438 <USBD_GetLen>
 80083cc:	4603      	mov	r3, r0
 80083ce:	3301      	adds	r3, #1
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	005b      	lsls	r3, r3, #1
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083da:	7dfb      	ldrb	r3, [r7, #23]
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	4413      	add	r3, r2
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	7812      	ldrb	r2, [r2, #0]
 80083e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80083e6:	7dfb      	ldrb	r3, [r7, #23]
 80083e8:	3301      	adds	r3, #1
 80083ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083ec:	7dfb      	ldrb	r3, [r7, #23]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	4413      	add	r3, r2
 80083f2:	2203      	movs	r2, #3
 80083f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80083f6:	7dfb      	ldrb	r3, [r7, #23]
 80083f8:	3301      	adds	r3, #1
 80083fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083fc:	e013      	b.n	8008426 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80083fe:	7dfb      	ldrb	r3, [r7, #23]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	4413      	add	r3, r2
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	7812      	ldrb	r2, [r2, #0]
 8008408:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	3301      	adds	r3, #1
 800840e:	613b      	str	r3, [r7, #16]
    idx++;
 8008410:	7dfb      	ldrb	r3, [r7, #23]
 8008412:	3301      	adds	r3, #1
 8008414:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008416:	7dfb      	ldrb	r3, [r7, #23]
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	4413      	add	r3, r2
 800841c:	2200      	movs	r2, #0
 800841e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008420:	7dfb      	ldrb	r3, [r7, #23]
 8008422:	3301      	adds	r3, #1
 8008424:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e7      	bne.n	80083fe <USBD_GetString+0x52>
 800842e:	e000      	b.n	8008432 <USBD_GetString+0x86>
    return;
 8008430:	bf00      	nop
  }
}
 8008432:	3718      	adds	r7, #24
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008440:	2300      	movs	r3, #0
 8008442:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008448:	e005      	b.n	8008456 <USBD_GetLen+0x1e>
  {
    len++;
 800844a:	7bfb      	ldrb	r3, [r7, #15]
 800844c:	3301      	adds	r3, #1
 800844e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	3301      	adds	r3, #1
 8008454:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1f5      	bne.n	800844a <USBD_GetLen+0x12>
  }

  return len;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2202      	movs	r2, #2
 800847c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	2100      	movs	r1, #0
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 fcd1 	bl	8008e3a <USBD_LL_Transmit>

  return USBD_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b084      	sub	sp, #16
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	60f8      	str	r0, [r7, #12]
 80084aa:	60b9      	str	r1, [r7, #8]
 80084ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	2100      	movs	r1, #0
 80084b4:	68f8      	ldr	r0, [r7, #12]
 80084b6:	f000 fcc0 	bl	8008e3a <USBD_LL_Transmit>

  return USBD_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2203      	movs	r2, #3
 80084d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	2100      	movs	r1, #0
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 fcc4 	bl	8008e7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	60f8      	str	r0, [r7, #12]
 8008506:	60b9      	str	r1, [r7, #8]
 8008508:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	2100      	movs	r1, #0
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f000 fcb3 	bl	8008e7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2204      	movs	r2, #4
 800852c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008530:	2300      	movs	r3, #0
 8008532:	2200      	movs	r2, #0
 8008534:	2100      	movs	r1, #0
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fc7f 	bl	8008e3a <USBD_LL_Transmit>

  return USBD_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b082      	sub	sp, #8
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2205      	movs	r2, #5
 8008552:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008556:	2300      	movs	r3, #0
 8008558:	2200      	movs	r2, #0
 800855a:	2100      	movs	r1, #0
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fc8d 	bl	8008e7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008570:	2200      	movs	r2, #0
 8008572:	4912      	ldr	r1, [pc, #72]	@ (80085bc <MX_USB_DEVICE_Init+0x50>)
 8008574:	4812      	ldr	r0, [pc, #72]	@ (80085c0 <MX_USB_DEVICE_Init+0x54>)
 8008576:	f7fe fd03 	bl	8006f80 <USBD_Init>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d001      	beq.n	8008584 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008580:	f7f8 fae4 	bl	8000b4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008584:	490f      	ldr	r1, [pc, #60]	@ (80085c4 <MX_USB_DEVICE_Init+0x58>)
 8008586:	480e      	ldr	r0, [pc, #56]	@ (80085c0 <MX_USB_DEVICE_Init+0x54>)
 8008588:	f7fe fd2a 	bl	8006fe0 <USBD_RegisterClass>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d001      	beq.n	8008596 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008592:	f7f8 fadb 	bl	8000b4c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008596:	490c      	ldr	r1, [pc, #48]	@ (80085c8 <MX_USB_DEVICE_Init+0x5c>)
 8008598:	4809      	ldr	r0, [pc, #36]	@ (80085c0 <MX_USB_DEVICE_Init+0x54>)
 800859a:	f7fe fc21 	bl	8006de0 <USBD_CDC_RegisterInterface>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80085a4:	f7f8 fad2 	bl	8000b4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80085a8:	4805      	ldr	r0, [pc, #20]	@ (80085c0 <MX_USB_DEVICE_Init+0x54>)
 80085aa:	f7fe fd4f 	bl	800704c <USBD_Start>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80085b4:	f7f8 faca 	bl	8000b4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80085b8:	bf00      	nop
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	200000ac 	.word	0x200000ac
 80085c0:	200031c8 	.word	0x200031c8
 80085c4:	20000018 	.word	0x20000018
 80085c8:	20000098 	.word	0x20000098

080085cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80085d0:	2200      	movs	r2, #0
 80085d2:	4905      	ldr	r1, [pc, #20]	@ (80085e8 <CDC_Init_FS+0x1c>)
 80085d4:	4805      	ldr	r0, [pc, #20]	@ (80085ec <CDC_Init_FS+0x20>)
 80085d6:	f7fe fc1d 	bl	8006e14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80085da:	4905      	ldr	r1, [pc, #20]	@ (80085f0 <CDC_Init_FS+0x24>)
 80085dc:	4803      	ldr	r0, [pc, #12]	@ (80085ec <CDC_Init_FS+0x20>)
 80085de:	f7fe fc3b 	bl	8006e58 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80085e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	200038a4 	.word	0x200038a4
 80085ec:	200031c8 	.word	0x200031c8
 80085f0:	200034a4 	.word	0x200034a4

080085f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80085f4:	b480      	push	{r7}
 80085f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	6039      	str	r1, [r7, #0]
 800860e:	71fb      	strb	r3, [r7, #7]
 8008610:	4613      	mov	r3, r2
 8008612:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008614:	79fb      	ldrb	r3, [r7, #7]
 8008616:	2b23      	cmp	r3, #35	@ 0x23
 8008618:	d84a      	bhi.n	80086b0 <CDC_Control_FS+0xac>
 800861a:	a201      	add	r2, pc, #4	@ (adr r2, 8008620 <CDC_Control_FS+0x1c>)
 800861c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008620:	080086b1 	.word	0x080086b1
 8008624:	080086b1 	.word	0x080086b1
 8008628:	080086b1 	.word	0x080086b1
 800862c:	080086b1 	.word	0x080086b1
 8008630:	080086b1 	.word	0x080086b1
 8008634:	080086b1 	.word	0x080086b1
 8008638:	080086b1 	.word	0x080086b1
 800863c:	080086b1 	.word	0x080086b1
 8008640:	080086b1 	.word	0x080086b1
 8008644:	080086b1 	.word	0x080086b1
 8008648:	080086b1 	.word	0x080086b1
 800864c:	080086b1 	.word	0x080086b1
 8008650:	080086b1 	.word	0x080086b1
 8008654:	080086b1 	.word	0x080086b1
 8008658:	080086b1 	.word	0x080086b1
 800865c:	080086b1 	.word	0x080086b1
 8008660:	080086b1 	.word	0x080086b1
 8008664:	080086b1 	.word	0x080086b1
 8008668:	080086b1 	.word	0x080086b1
 800866c:	080086b1 	.word	0x080086b1
 8008670:	080086b1 	.word	0x080086b1
 8008674:	080086b1 	.word	0x080086b1
 8008678:	080086b1 	.word	0x080086b1
 800867c:	080086b1 	.word	0x080086b1
 8008680:	080086b1 	.word	0x080086b1
 8008684:	080086b1 	.word	0x080086b1
 8008688:	080086b1 	.word	0x080086b1
 800868c:	080086b1 	.word	0x080086b1
 8008690:	080086b1 	.word	0x080086b1
 8008694:	080086b1 	.word	0x080086b1
 8008698:	080086b1 	.word	0x080086b1
 800869c:	080086b1 	.word	0x080086b1
 80086a0:	080086b1 	.word	0x080086b1
 80086a4:	080086b1 	.word	0x080086b1
 80086a8:	080086b1 	.word	0x080086b1
 80086ac:	080086b1 	.word	0x080086b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80086b0:	bf00      	nop
  }

  return (USBD_OK);
 80086b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80086ca:	6879      	ldr	r1, [r7, #4]
 80086cc:	4805      	ldr	r0, [pc, #20]	@ (80086e4 <CDC_Receive_FS+0x24>)
 80086ce:	f7fe fbc3 	bl	8006e58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80086d2:	4804      	ldr	r0, [pc, #16]	@ (80086e4 <CDC_Receive_FS+0x24>)
 80086d4:	f7fe fc1e 	bl	8006f14 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80086d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3708      	adds	r7, #8
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	200031c8 	.word	0x200031c8

080086e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80086f4:	2300      	movs	r3, #0
 80086f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80086f8:	4b0d      	ldr	r3, [pc, #52]	@ (8008730 <CDC_Transmit_FS+0x48>)
 80086fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80086fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800870a:	2301      	movs	r3, #1
 800870c:	e00b      	b.n	8008726 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800870e:	887b      	ldrh	r3, [r7, #2]
 8008710:	461a      	mov	r2, r3
 8008712:	6879      	ldr	r1, [r7, #4]
 8008714:	4806      	ldr	r0, [pc, #24]	@ (8008730 <CDC_Transmit_FS+0x48>)
 8008716:	f7fe fb7d 	bl	8006e14 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800871a:	4805      	ldr	r0, [pc, #20]	@ (8008730 <CDC_Transmit_FS+0x48>)
 800871c:	f7fe fbba 	bl	8006e94 <USBD_CDC_TransmitPacket>
 8008720:	4603      	mov	r3, r0
 8008722:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008724:	7bfb      	ldrb	r3, [r7, #15]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	200031c8 	.word	0x200031c8

08008734 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008734:	b480      	push	{r7}
 8008736:	b087      	sub	sp, #28
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	4613      	mov	r3, r2
 8008740:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008746:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800874a:	4618      	mov	r0, r3
 800874c:	371c      	adds	r7, #28
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
	...

08008758 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	4603      	mov	r3, r0
 8008760:	6039      	str	r1, [r7, #0]
 8008762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	2212      	movs	r2, #18
 8008768:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800876a:	4b03      	ldr	r3, [pc, #12]	@ (8008778 <USBD_FS_DeviceDescriptor+0x20>)
}
 800876c:	4618      	mov	r0, r3
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	200000c8 	.word	0x200000c8

0800877c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	6039      	str	r1, [r7, #0]
 8008786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	2204      	movs	r2, #4
 800878c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800878e:	4b03      	ldr	r3, [pc, #12]	@ (800879c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008790:	4618      	mov	r0, r3
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	200000dc 	.word	0x200000dc

080087a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	4603      	mov	r3, r0
 80087a8:	6039      	str	r1, [r7, #0]
 80087aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087ac:	79fb      	ldrb	r3, [r7, #7]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d105      	bne.n	80087be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087b2:	683a      	ldr	r2, [r7, #0]
 80087b4:	4907      	ldr	r1, [pc, #28]	@ (80087d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80087b6:	4808      	ldr	r0, [pc, #32]	@ (80087d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80087b8:	f7ff fdf8 	bl	80083ac <USBD_GetString>
 80087bc:	e004      	b.n	80087c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	4904      	ldr	r1, [pc, #16]	@ (80087d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80087c2:	4805      	ldr	r0, [pc, #20]	@ (80087d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80087c4:	f7ff fdf2 	bl	80083ac <USBD_GetString>
  }
  return USBD_StrDesc;
 80087c8:	4b02      	ldr	r3, [pc, #8]	@ (80087d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	20003ca4 	.word	0x20003ca4
 80087d8:	08008fdc 	.word	0x08008fdc

080087dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	4603      	mov	r3, r0
 80087e4:	6039      	str	r1, [r7, #0]
 80087e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087e8:	683a      	ldr	r2, [r7, #0]
 80087ea:	4904      	ldr	r1, [pc, #16]	@ (80087fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80087ec:	4804      	ldr	r0, [pc, #16]	@ (8008800 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087ee:	f7ff fddd 	bl	80083ac <USBD_GetString>
  return USBD_StrDesc;
 80087f2:	4b02      	ldr	r3, [pc, #8]	@ (80087fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	20003ca4 	.word	0x20003ca4
 8008800:	08008ff4 	.word	0x08008ff4

08008804 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	4603      	mov	r3, r0
 800880c:	6039      	str	r1, [r7, #0]
 800880e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	221a      	movs	r2, #26
 8008814:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008816:	f000 f843 	bl	80088a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800881a:	4b02      	ldr	r3, [pc, #8]	@ (8008824 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800881c:	4618      	mov	r0, r3
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	200000e0 	.word	0x200000e0

08008828 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	4603      	mov	r3, r0
 8008830:	6039      	str	r1, [r7, #0]
 8008832:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d105      	bne.n	8008846 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	4907      	ldr	r1, [pc, #28]	@ (800885c <USBD_FS_ConfigStrDescriptor+0x34>)
 800883e:	4808      	ldr	r0, [pc, #32]	@ (8008860 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008840:	f7ff fdb4 	bl	80083ac <USBD_GetString>
 8008844:	e004      	b.n	8008850 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	4904      	ldr	r1, [pc, #16]	@ (800885c <USBD_FS_ConfigStrDescriptor+0x34>)
 800884a:	4805      	ldr	r0, [pc, #20]	@ (8008860 <USBD_FS_ConfigStrDescriptor+0x38>)
 800884c:	f7ff fdae 	bl	80083ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8008850:	4b02      	ldr	r3, [pc, #8]	@ (800885c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008852:	4618      	mov	r0, r3
 8008854:	3708      	adds	r7, #8
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	20003ca4 	.word	0x20003ca4
 8008860:	08009008 	.word	0x08009008

08008864 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	4603      	mov	r3, r0
 800886c:	6039      	str	r1, [r7, #0]
 800886e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008870:	79fb      	ldrb	r3, [r7, #7]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d105      	bne.n	8008882 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	4907      	ldr	r1, [pc, #28]	@ (8008898 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800887a:	4808      	ldr	r0, [pc, #32]	@ (800889c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800887c:	f7ff fd96 	bl	80083ac <USBD_GetString>
 8008880:	e004      	b.n	800888c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	4904      	ldr	r1, [pc, #16]	@ (8008898 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008886:	4805      	ldr	r0, [pc, #20]	@ (800889c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008888:	f7ff fd90 	bl	80083ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800888c:	4b02      	ldr	r3, [pc, #8]	@ (8008898 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	20003ca4 	.word	0x20003ca4
 800889c:	08009014 	.word	0x08009014

080088a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 80088a6:	68fa      	ldr	r2, [r7, #12]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	4413      	add	r3, r2
 80088ac:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d009      	beq.n	80088c8 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80088b4:	2208      	movs	r2, #8
 80088b6:	4906      	ldr	r1, [pc, #24]	@ (80088d0 <Get_SerialNum+0x30>)
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	f000 f80d 	bl	80088d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80088be:	2204      	movs	r2, #4
 80088c0:	4904      	ldr	r1, [pc, #16]	@ (80088d4 <Get_SerialNum+0x34>)
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f808 	bl	80088d8 <IntToUnicode>
  }
}
 80088c8:	bf00      	nop
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	200000e2 	.word	0x200000e2
 80088d4:	200000f2 	.word	0x200000f2

080088d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088d8:	b480      	push	{r7}
 80088da:	b087      	sub	sp, #28
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	4613      	mov	r3, r2
 80088e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088e6:	2300      	movs	r3, #0
 80088e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088ea:	2300      	movs	r3, #0
 80088ec:	75fb      	strb	r3, [r7, #23]
 80088ee:	e027      	b.n	8008940 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	0f1b      	lsrs	r3, r3, #28
 80088f4:	2b09      	cmp	r3, #9
 80088f6:	d80b      	bhi.n	8008910 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	0f1b      	lsrs	r3, r3, #28
 80088fc:	b2da      	uxtb	r2, r3
 80088fe:	7dfb      	ldrb	r3, [r7, #23]
 8008900:	005b      	lsls	r3, r3, #1
 8008902:	4619      	mov	r1, r3
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	440b      	add	r3, r1
 8008908:	3230      	adds	r2, #48	@ 0x30
 800890a:	b2d2      	uxtb	r2, r2
 800890c:	701a      	strb	r2, [r3, #0]
 800890e:	e00a      	b.n	8008926 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	0f1b      	lsrs	r3, r3, #28
 8008914:	b2da      	uxtb	r2, r3
 8008916:	7dfb      	ldrb	r3, [r7, #23]
 8008918:	005b      	lsls	r3, r3, #1
 800891a:	4619      	mov	r1, r3
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	440b      	add	r3, r1
 8008920:	3237      	adds	r2, #55	@ 0x37
 8008922:	b2d2      	uxtb	r2, r2
 8008924:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	011b      	lsls	r3, r3, #4
 800892a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800892c:	7dfb      	ldrb	r3, [r7, #23]
 800892e:	005b      	lsls	r3, r3, #1
 8008930:	3301      	adds	r3, #1
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	4413      	add	r3, r2
 8008936:	2200      	movs	r2, #0
 8008938:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800893a:	7dfb      	ldrb	r3, [r7, #23]
 800893c:	3301      	adds	r3, #1
 800893e:	75fb      	strb	r3, [r7, #23]
 8008940:	7dfa      	ldrb	r2, [r7, #23]
 8008942:	79fb      	ldrb	r3, [r7, #7]
 8008944:	429a      	cmp	r2, r3
 8008946:	d3d3      	bcc.n	80088f0 <IntToUnicode+0x18>
  }
}
 8008948:	bf00      	nop
 800894a:	bf00      	nop
 800894c:	371c      	adds	r7, #28
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr
	...

08008958 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b08a      	sub	sp, #40	@ 0x28
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008960:	f107 0314 	add.w	r3, r7, #20
 8008964:	2200      	movs	r2, #0
 8008966:	601a      	str	r2, [r3, #0]
 8008968:	605a      	str	r2, [r3, #4]
 800896a:	609a      	str	r2, [r3, #8]
 800896c:	60da      	str	r2, [r3, #12]
 800896e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008978:	d13a      	bne.n	80089f0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800897a:	2300      	movs	r3, #0
 800897c:	613b      	str	r3, [r7, #16]
 800897e:	4b1e      	ldr	r3, [pc, #120]	@ (80089f8 <HAL_PCD_MspInit+0xa0>)
 8008980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008982:	4a1d      	ldr	r2, [pc, #116]	@ (80089f8 <HAL_PCD_MspInit+0xa0>)
 8008984:	f043 0301 	orr.w	r3, r3, #1
 8008988:	6313      	str	r3, [r2, #48]	@ 0x30
 800898a:	4b1b      	ldr	r3, [pc, #108]	@ (80089f8 <HAL_PCD_MspInit+0xa0>)
 800898c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800898e:	f003 0301 	and.w	r3, r3, #1
 8008992:	613b      	str	r3, [r7, #16]
 8008994:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008996:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800899a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800899c:	2302      	movs	r3, #2
 800899e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089a0:	2300      	movs	r3, #0
 80089a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089a4:	2303      	movs	r3, #3
 80089a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80089a8:	230a      	movs	r3, #10
 80089aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089ac:	f107 0314 	add.w	r3, r7, #20
 80089b0:	4619      	mov	r1, r3
 80089b2:	4812      	ldr	r0, [pc, #72]	@ (80089fc <HAL_PCD_MspInit+0xa4>)
 80089b4:	f7f9 fbd4 	bl	8002160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80089b8:	4b0f      	ldr	r3, [pc, #60]	@ (80089f8 <HAL_PCD_MspInit+0xa0>)
 80089ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089bc:	4a0e      	ldr	r2, [pc, #56]	@ (80089f8 <HAL_PCD_MspInit+0xa0>)
 80089be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089c2:	6353      	str	r3, [r2, #52]	@ 0x34
 80089c4:	2300      	movs	r3, #0
 80089c6:	60fb      	str	r3, [r7, #12]
 80089c8:	4b0b      	ldr	r3, [pc, #44]	@ (80089f8 <HAL_PCD_MspInit+0xa0>)
 80089ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089cc:	4a0a      	ldr	r2, [pc, #40]	@ (80089f8 <HAL_PCD_MspInit+0xa0>)
 80089ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80089d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80089d4:	4b08      	ldr	r3, [pc, #32]	@ (80089f8 <HAL_PCD_MspInit+0xa0>)
 80089d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089dc:	60fb      	str	r3, [r7, #12]
 80089de:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80089e0:	2200      	movs	r2, #0
 80089e2:	2100      	movs	r1, #0
 80089e4:	2043      	movs	r0, #67	@ 0x43
 80089e6:	f7f9 f814 	bl	8001a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80089ea:	2043      	movs	r0, #67	@ 0x43
 80089ec:	f7f9 f82d 	bl	8001a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089f0:	bf00      	nop
 80089f2:	3728      	adds	r7, #40	@ 0x28
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	40023800 	.word	0x40023800
 80089fc:	40020000 	.word	0x40020000

08008a00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008a14:	4619      	mov	r1, r3
 8008a16:	4610      	mov	r0, r2
 8008a18:	f7fe fb65 	bl	80070e6 <USBD_LL_SetupStage>
}
 8008a1c:	bf00      	nop
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008a36:	78fa      	ldrb	r2, [r7, #3]
 8008a38:	6879      	ldr	r1, [r7, #4]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	00db      	lsls	r3, r3, #3
 8008a3e:	4413      	add	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	440b      	add	r3, r1
 8008a44:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	78fb      	ldrb	r3, [r7, #3]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	f7fe fb9f 	bl	8007190 <USBD_LL_DataOutStage>
}
 8008a52:	bf00      	nop
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b082      	sub	sp, #8
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	460b      	mov	r3, r1
 8008a64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008a6c:	78fa      	ldrb	r2, [r7, #3]
 8008a6e:	6879      	ldr	r1, [r7, #4]
 8008a70:	4613      	mov	r3, r2
 8008a72:	00db      	lsls	r3, r3, #3
 8008a74:	4413      	add	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	440b      	add	r3, r1
 8008a7a:	3320      	adds	r3, #32
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	78fb      	ldrb	r3, [r7, #3]
 8008a80:	4619      	mov	r1, r3
 8008a82:	f7fe fc38 	bl	80072f6 <USBD_LL_DataInStage>
}
 8008a86:	bf00      	nop
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7fe fd72 	bl	8007586 <USBD_LL_SOF>
}
 8008aa2:	bf00      	nop
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b084      	sub	sp, #16
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	79db      	ldrb	r3, [r3, #7]
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d001      	beq.n	8008ac2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008abe:	f7f8 f845 	bl	8000b4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ac8:	7bfa      	ldrb	r2, [r7, #15]
 8008aca:	4611      	mov	r1, r2
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7fe fd16 	bl	80074fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fe fcbe 	bl	800745a <USBD_LL_Reset>
}
 8008ade:	bf00      	nop
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
	...

08008ae8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7fe fd11 	bl	800751e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	6812      	ldr	r2, [r2, #0]
 8008b0a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008b0e:	f043 0301 	orr.w	r3, r3, #1
 8008b12:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	7adb      	ldrb	r3, [r3, #11]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d005      	beq.n	8008b28 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b1c:	4b04      	ldr	r3, [pc, #16]	@ (8008b30 <HAL_PCD_SuspendCallback+0x48>)
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	4a03      	ldr	r2, [pc, #12]	@ (8008b30 <HAL_PCD_SuspendCallback+0x48>)
 8008b22:	f043 0306 	orr.w	r3, r3, #6
 8008b26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b28:	bf00      	nop
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	e000ed00 	.word	0xe000ed00

08008b34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7fe fd07 	bl	8007556 <USBD_LL_Resume>
}
 8008b48:	bf00      	nop
 8008b4a:	3708      	adds	r7, #8
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b62:	78fa      	ldrb	r2, [r7, #3]
 8008b64:	4611      	mov	r1, r2
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fe fd5f 	bl	800762a <USBD_LL_IsoOUTIncomplete>
}
 8008b6c:	bf00      	nop
 8008b6e:	3708      	adds	r7, #8
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008b86:	78fa      	ldrb	r2, [r7, #3]
 8008b88:	4611      	mov	r1, r2
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fe fd1b 	bl	80075c6 <USBD_LL_IsoINIncomplete>
}
 8008b90:	bf00      	nop
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f7fe fd71 	bl	800768e <USBD_LL_DevConnected>
}
 8008bac:	bf00      	nop
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fe fd6e 	bl	80076a4 <USBD_LL_DevDisconnected>
}
 8008bc8:	bf00      	nop
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d13c      	bne.n	8008c5a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008be0:	4a20      	ldr	r2, [pc, #128]	@ (8008c64 <USBD_LL_Init+0x94>)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a1e      	ldr	r2, [pc, #120]	@ (8008c64 <USBD_LL_Init+0x94>)
 8008bec:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8008c64 <USBD_LL_Init+0x94>)
 8008bf2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008bf6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8008c64 <USBD_LL_Init+0x94>)
 8008bfa:	2204      	movs	r2, #4
 8008bfc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008bfe:	4b19      	ldr	r3, [pc, #100]	@ (8008c64 <USBD_LL_Init+0x94>)
 8008c00:	2202      	movs	r2, #2
 8008c02:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008c04:	4b17      	ldr	r3, [pc, #92]	@ (8008c64 <USBD_LL_Init+0x94>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008c0a:	4b16      	ldr	r3, [pc, #88]	@ (8008c64 <USBD_LL_Init+0x94>)
 8008c0c:	2202      	movs	r2, #2
 8008c0e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008c10:	4b14      	ldr	r3, [pc, #80]	@ (8008c64 <USBD_LL_Init+0x94>)
 8008c12:	2200      	movs	r2, #0
 8008c14:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008c16:	4b13      	ldr	r3, [pc, #76]	@ (8008c64 <USBD_LL_Init+0x94>)
 8008c18:	2200      	movs	r2, #0
 8008c1a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008c1c:	4b11      	ldr	r3, [pc, #68]	@ (8008c64 <USBD_LL_Init+0x94>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008c22:	4b10      	ldr	r3, [pc, #64]	@ (8008c64 <USBD_LL_Init+0x94>)
 8008c24:	2200      	movs	r2, #0
 8008c26:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008c28:	4b0e      	ldr	r3, [pc, #56]	@ (8008c64 <USBD_LL_Init+0x94>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008c2e:	480d      	ldr	r0, [pc, #52]	@ (8008c64 <USBD_LL_Init+0x94>)
 8008c30:	f7f9 fc1a 	bl	8002468 <HAL_PCD_Init>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d001      	beq.n	8008c3e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008c3a:	f7f7 ff87 	bl	8000b4c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c3e:	2180      	movs	r1, #128	@ 0x80
 8008c40:	4808      	ldr	r0, [pc, #32]	@ (8008c64 <USBD_LL_Init+0x94>)
 8008c42:	f7fa fe44 	bl	80038ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c46:	2240      	movs	r2, #64	@ 0x40
 8008c48:	2100      	movs	r1, #0
 8008c4a:	4806      	ldr	r0, [pc, #24]	@ (8008c64 <USBD_LL_Init+0x94>)
 8008c4c:	f7fa fdf8 	bl	8003840 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c50:	2280      	movs	r2, #128	@ 0x80
 8008c52:	2101      	movs	r1, #1
 8008c54:	4803      	ldr	r0, [pc, #12]	@ (8008c64 <USBD_LL_Init+0x94>)
 8008c56:	f7fa fdf3 	bl	8003840 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	20003ea4 	.word	0x20003ea4

08008c68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7f9 fd01 	bl	8002686 <HAL_PCD_Start>
 8008c84:	4603      	mov	r3, r0
 8008c86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f000 f942 	bl	8008f14 <USBD_Get_USB_Status>
 8008c90:	4603      	mov	r3, r0
 8008c92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c94:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b084      	sub	sp, #16
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	4608      	mov	r0, r1
 8008ca8:	4611      	mov	r1, r2
 8008caa:	461a      	mov	r2, r3
 8008cac:	4603      	mov	r3, r0
 8008cae:	70fb      	strb	r3, [r7, #3]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	70bb      	strb	r3, [r7, #2]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008cc6:	78bb      	ldrb	r3, [r7, #2]
 8008cc8:	883a      	ldrh	r2, [r7, #0]
 8008cca:	78f9      	ldrb	r1, [r7, #3]
 8008ccc:	f7fa f9d5 	bl	800307a <HAL_PCD_EP_Open>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f000 f91c 	bl	8008f14 <USBD_Get_USB_Status>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ce0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cea:	b580      	push	{r7, lr}
 8008cec:	b084      	sub	sp, #16
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d04:	78fa      	ldrb	r2, [r7, #3]
 8008d06:	4611      	mov	r1, r2
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7fa fa1e 	bl	800314a <HAL_PCD_EP_Close>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d12:	7bfb      	ldrb	r3, [r7, #15]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 f8fd 	bl	8008f14 <USBD_Get_USB_Status>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	460b      	mov	r3, r1
 8008d32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d42:	78fa      	ldrb	r2, [r7, #3]
 8008d44:	4611      	mov	r1, r2
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fa fad6 	bl	80032f8 <HAL_PCD_EP_SetStall>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 f8de 	bl	8008f14 <USBD_Get_USB_Status>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	460b      	mov	r3, r1
 8008d70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008d80:	78fa      	ldrb	r2, [r7, #3]
 8008d82:	4611      	mov	r1, r2
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7fa fb1a 	bl	80033be <HAL_PCD_EP_ClrStall>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d8e:	7bfb      	ldrb	r3, [r7, #15]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f000 f8bf 	bl	8008f14 <USBD_Get_USB_Status>
 8008d96:	4603      	mov	r3, r0
 8008d98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	460b      	mov	r3, r1
 8008dae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008db6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008db8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	da0b      	bge.n	8008dd8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008dc0:	78fb      	ldrb	r3, [r7, #3]
 8008dc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008dc6:	68f9      	ldr	r1, [r7, #12]
 8008dc8:	4613      	mov	r3, r2
 8008dca:	00db      	lsls	r3, r3, #3
 8008dcc:	4413      	add	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	440b      	add	r3, r1
 8008dd2:	3316      	adds	r3, #22
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	e00b      	b.n	8008df0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008dd8:	78fb      	ldrb	r3, [r7, #3]
 8008dda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008dde:	68f9      	ldr	r1, [r7, #12]
 8008de0:	4613      	mov	r3, r2
 8008de2:	00db      	lsls	r3, r3, #3
 8008de4:	4413      	add	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	440b      	add	r3, r1
 8008dea:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008dee:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	460b      	mov	r3, r1
 8008e06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e16:	78fa      	ldrb	r2, [r7, #3]
 8008e18:	4611      	mov	r1, r2
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fa f909 	bl	8003032 <HAL_PCD_SetAddress>
 8008e20:	4603      	mov	r3, r0
 8008e22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e24:	7bfb      	ldrb	r3, [r7, #15]
 8008e26:	4618      	mov	r0, r3
 8008e28:	f000 f874 	bl	8008f14 <USBD_Get_USB_Status>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e30:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b086      	sub	sp, #24
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	60f8      	str	r0, [r7, #12]
 8008e42:	607a      	str	r2, [r7, #4]
 8008e44:	603b      	str	r3, [r7, #0]
 8008e46:	460b      	mov	r3, r1
 8008e48:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008e58:	7af9      	ldrb	r1, [r7, #11]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	f7fa fa11 	bl	8003284 <HAL_PCD_EP_Transmit>
 8008e62:	4603      	mov	r3, r0
 8008e64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e66:	7dfb      	ldrb	r3, [r7, #23]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 f853 	bl	8008f14 <USBD_Get_USB_Status>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e72:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3718      	adds	r7, #24
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	607a      	str	r2, [r7, #4]
 8008e86:	603b      	str	r3, [r7, #0]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008e9a:	7af9      	ldrb	r1, [r7, #11]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	f7fa f99d 	bl	80031de <HAL_PCD_EP_Receive>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ea8:	7dfb      	ldrb	r3, [r7, #23]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 f832 	bl	8008f14 <USBD_Get_USB_Status>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008eb4:	7dbb      	ldrb	r3, [r7, #22]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3718      	adds	r7, #24
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b082      	sub	sp, #8
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ed0:	78fa      	ldrb	r2, [r7, #3]
 8008ed2:	4611      	mov	r1, r2
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fa f9bd 	bl	8003254 <HAL_PCD_EP_GetRxCount>
 8008eda:	4603      	mov	r3, r0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3708      	adds	r7, #8
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008eec:	4b03      	ldr	r3, [pc, #12]	@ (8008efc <USBD_static_malloc+0x18>)
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	370c      	adds	r7, #12
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	20004388 	.word	0x20004388

08008f00 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]

}
 8008f08:	bf00      	nop
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f22:	79fb      	ldrb	r3, [r7, #7]
 8008f24:	2b03      	cmp	r3, #3
 8008f26:	d817      	bhi.n	8008f58 <USBD_Get_USB_Status+0x44>
 8008f28:	a201      	add	r2, pc, #4	@ (adr r2, 8008f30 <USBD_Get_USB_Status+0x1c>)
 8008f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2e:	bf00      	nop
 8008f30:	08008f41 	.word	0x08008f41
 8008f34:	08008f47 	.word	0x08008f47
 8008f38:	08008f4d 	.word	0x08008f4d
 8008f3c:	08008f53 	.word	0x08008f53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f40:	2300      	movs	r3, #0
 8008f42:	73fb      	strb	r3, [r7, #15]
    break;
 8008f44:	e00b      	b.n	8008f5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f46:	2303      	movs	r3, #3
 8008f48:	73fb      	strb	r3, [r7, #15]
    break;
 8008f4a:	e008      	b.n	8008f5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f50:	e005      	b.n	8008f5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f52:	2303      	movs	r3, #3
 8008f54:	73fb      	strb	r3, [r7, #15]
    break;
 8008f56:	e002      	b.n	8008f5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f5c:	bf00      	nop
  }
  return usb_status;
 8008f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3714      	adds	r7, #20
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <memset>:
 8008f6c:	4402      	add	r2, r0
 8008f6e:	4603      	mov	r3, r0
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d100      	bne.n	8008f76 <memset+0xa>
 8008f74:	4770      	bx	lr
 8008f76:	f803 1b01 	strb.w	r1, [r3], #1
 8008f7a:	e7f9      	b.n	8008f70 <memset+0x4>

08008f7c <__libc_init_array>:
 8008f7c:	b570      	push	{r4, r5, r6, lr}
 8008f7e:	4d0d      	ldr	r5, [pc, #52]	@ (8008fb4 <__libc_init_array+0x38>)
 8008f80:	4c0d      	ldr	r4, [pc, #52]	@ (8008fb8 <__libc_init_array+0x3c>)
 8008f82:	1b64      	subs	r4, r4, r5
 8008f84:	10a4      	asrs	r4, r4, #2
 8008f86:	2600      	movs	r6, #0
 8008f88:	42a6      	cmp	r6, r4
 8008f8a:	d109      	bne.n	8008fa0 <__libc_init_array+0x24>
 8008f8c:	4d0b      	ldr	r5, [pc, #44]	@ (8008fbc <__libc_init_array+0x40>)
 8008f8e:	4c0c      	ldr	r4, [pc, #48]	@ (8008fc0 <__libc_init_array+0x44>)
 8008f90:	f000 f818 	bl	8008fc4 <_init>
 8008f94:	1b64      	subs	r4, r4, r5
 8008f96:	10a4      	asrs	r4, r4, #2
 8008f98:	2600      	movs	r6, #0
 8008f9a:	42a6      	cmp	r6, r4
 8008f9c:	d105      	bne.n	8008faa <__libc_init_array+0x2e>
 8008f9e:	bd70      	pop	{r4, r5, r6, pc}
 8008fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fa4:	4798      	blx	r3
 8008fa6:	3601      	adds	r6, #1
 8008fa8:	e7ee      	b.n	8008f88 <__libc_init_array+0xc>
 8008faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fae:	4798      	blx	r3
 8008fb0:	3601      	adds	r6, #1
 8008fb2:	e7f2      	b.n	8008f9a <__libc_init_array+0x1e>
 8008fb4:	08009044 	.word	0x08009044
 8008fb8:	08009044 	.word	0x08009044
 8008fbc:	08009044 	.word	0x08009044
 8008fc0:	08009048 	.word	0x08009048

08008fc4 <_init>:
 8008fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc6:	bf00      	nop
 8008fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fca:	bc08      	pop	{r3}
 8008fcc:	469e      	mov	lr, r3
 8008fce:	4770      	bx	lr

08008fd0 <_fini>:
 8008fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd2:	bf00      	nop
 8008fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fd6:	bc08      	pop	{r3}
 8008fd8:	469e      	mov	lr, r3
 8008fda:	4770      	bx	lr
