
tcddriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009188  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800931c  0800931c  0000a31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009394  08009394  0000b0fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009394  08009394  0000a394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800939c  0800939c  0000b0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800939c  0800939c  0000a39c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093a0  080093a0  0000a3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  080093a4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000044f0  200000fc  080094a0  0000b0fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200045ec  080094a0  0000b5ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014588  00000000  00000000  0000b12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000360d  00000000  00000000  0001f6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  00022cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e10  00000000  00000000  00023f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a014  00000000  00000000  00024d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174ed  00000000  00000000  0003ed54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009abc2  00000000  00000000  00056241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0e03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d28  00000000  00000000  000f0e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000f5b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08009304 	.word	0x08009304

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	08009304 	.word	0x08009304

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fde4 	bl	8001094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f84e 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 fb1a 	bl	8000b08 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d4:	f000 faf8 	bl	8000ac8 <MX_DMA_Init>
  MX_TIM2_Init();
 80004d8:	f000 f906 	bl	80006e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004dc:	f000 f97c 	bl	80007d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004e0:	f000 f9f0 	bl	80008c4 <MX_TIM4_Init>
  MX_TIM5_Init();
 80004e4:	f000 fa60 	bl	80009a8 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 80004e8:	f008 f9a4 	bl	8008834 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80004ec:	f000 f8aa 	bl	8000644 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //ICG
 80004f0:	2100      	movs	r1, #0
 80004f2:	4816      	ldr	r0, [pc, #88]	@ (800054c <main+0x88>)
 80004f4:	f004 f844 	bl	8004580 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay
 80004f8:	4b14      	ldr	r3, [pc, #80]	@ (800054c <main+0x88>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2242      	movs	r2, #66	@ 0x42
 80004fe:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
 8000500:	2100      	movs	r1, #0
 8000502:	4813      	ldr	r0, [pc, #76]	@ (8000550 <main+0x8c>)
 8000504:	f004 f83c 	bl	8004580 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
 8000508:	210c      	movs	r1, #12
 800050a:	4812      	ldr	r0, [pc, #72]	@ (8000554 <main+0x90>)
 800050c:	f004 f838 	bl	8004580 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH
 8000510:	2108      	movs	r1, #8
 8000512:	4811      	ldr	r0, [pc, #68]	@ (8000558 <main+0x94>)
 8000514:	f004 f834 	bl	8004580 <HAL_TIM_PWM_Start>

  if (!start_command_received) {
 8000518:	4b10      	ldr	r3, [pc, #64]	@ (800055c <main+0x98>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	b2db      	uxtb	r3, r3
 800051e:	2b00      	cmp	r3, #0
 8000520:	d107      	bne.n	8000532 <main+0x6e>
  CDC_Transmit_FS("Target Ready\r\n",14);
 8000522:	210e      	movs	r1, #14
 8000524:	480e      	ldr	r0, [pc, #56]	@ (8000560 <main+0x9c>)
 8000526:	f008 fa5f 	bl	80089e8 <CDC_Transmit_FS>
  HAL_Delay(1000);}
 800052a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800052e:	f000 fe23 	bl	8001178 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) CCDPixelBuffer, CCDBuffer);

	  if (start_command_received) {
 8000532:	4b0a      	ldr	r3, [pc, #40]	@ (800055c <main+0x98>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	2b00      	cmp	r3, #0
 800053a:	d0fa      	beq.n	8000532 <main+0x6e>
	    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)CCDPixelBuffer, CCDBuffer);
 800053c:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000540:	4908      	ldr	r1, [pc, #32]	@ (8000564 <main+0xa0>)
 8000542:	4809      	ldr	r0, [pc, #36]	@ (8000568 <main+0xa4>)
 8000544:	f000 fe80 	bl	8001248 <HAL_ADC_Start_DMA>
	  if (start_command_received) {
 8000548:	e7f3      	b.n	8000532 <main+0x6e>
 800054a:	bf00      	nop
 800054c:	200001c0 	.word	0x200001c0
 8000550:	20000208 	.word	0x20000208
 8000554:	20000250 	.word	0x20000250
 8000558:	20000298 	.word	0x20000298
 800055c:	200031c0 	.word	0x200031c0
 8000560:	0800931c 	.word	0x0800931c
 8000564:	200002e0 	.word	0x200002e0
 8000568:	20000118 	.word	0x20000118

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	@ 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	@ 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f008 fe76 	bl	800926c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b29      	ldr	r3, [pc, #164]	@ (800063c <SystemClock_Config+0xd0>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	4a28      	ldr	r2, [pc, #160]	@ (800063c <SystemClock_Config+0xd0>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a0:	4b26      	ldr	r3, [pc, #152]	@ (800063c <SystemClock_Config+0xd0>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b23      	ldr	r3, [pc, #140]	@ (8000640 <SystemClock_Config+0xd4>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005b8:	4a21      	ldr	r2, [pc, #132]	@ (8000640 <SystemClock_Config+0xd4>)
 80005ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000640 <SystemClock_Config+0xd4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005e0:	2319      	movs	r3, #25
 80005e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ea:	2304      	movs	r3, #4
 80005ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ee:	2307      	movs	r3, #7
 80005f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 faea 	bl	8003bd0 <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000602:	f000 fb3c 	bl	8000c7e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2302      	movs	r3, #2
 800060c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000612:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000616:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2102      	movs	r1, #2
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fd4c 	bl	80040c0 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800062e:	f000 fb26 	bl	8000c7e <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	@ 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	463b      	mov	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000656:	4b22      	ldr	r3, [pc, #136]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 8000658:	4a22      	ldr	r2, [pc, #136]	@ (80006e4 <MX_ADC1_Init+0xa0>)
 800065a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800065c:	4b20      	ldr	r3, [pc, #128]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 800065e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000662:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000664:	4b1e      	ldr	r3, [pc, #120]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800066a:	4b1d      	ldr	r3, [pc, #116]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000670:	4b1b      	ldr	r3, [pc, #108]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 8000672:	2200      	movs	r2, #0
 8000674:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000676:	4b1a      	ldr	r3, [pc, #104]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800067e:	4b18      	ldr	r3, [pc, #96]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 8000680:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000684:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8000686:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 8000688:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 800068c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800068e:	4b14      	ldr	r3, [pc, #80]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 8000690:	2200      	movs	r2, #0
 8000692:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000694:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 8000696:	2201      	movs	r2, #1
 8000698:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800069a:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 800069c:	2201      	movs	r2, #1
 800069e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a2:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a8:	480d      	ldr	r0, [pc, #52]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 80006aa:	f000 fd89 	bl	80011c0 <HAL_ADC_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80006b4:	f000 fae3 	bl	8000c7e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006b8:	2303      	movs	r3, #3
 80006ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006bc:	2301      	movs	r3, #1
 80006be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c4:	463b      	mov	r3, r7
 80006c6:	4619      	mov	r1, r3
 80006c8:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <MX_ADC1_Init+0x9c>)
 80006ca:	f000 ff1b 	bl	8001504 <HAL_ADC_ConfigChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80006d4:	f000 fad3 	bl	8000c7e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000118 	.word	0x20000118
 80006e4:	40012000 	.word	0x40012000

080006e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08e      	sub	sp, #56	@ 0x38
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
 8000714:	615a      	str	r2, [r3, #20]
 8000716:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000718:	4b2d      	ldr	r3, [pc, #180]	@ (80007d0 <MX_TIM2_Init+0xe8>)
 800071a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800071e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000720:	4b2b      	ldr	r3, [pc, #172]	@ (80007d0 <MX_TIM2_Init+0xe8>)
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000726:	4b2a      	ldr	r3, [pc, #168]	@ (80007d0 <MX_TIM2_Init+0xe8>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 525000-1;
 800072c:	4b28      	ldr	r3, [pc, #160]	@ (80007d0 <MX_TIM2_Init+0xe8>)
 800072e:	4a29      	ldr	r2, [pc, #164]	@ (80007d4 <MX_TIM2_Init+0xec>)
 8000730:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000732:	4b27      	ldr	r3, [pc, #156]	@ (80007d0 <MX_TIM2_Init+0xe8>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000738:	4b25      	ldr	r3, [pc, #148]	@ (80007d0 <MX_TIM2_Init+0xe8>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800073e:	4824      	ldr	r0, [pc, #144]	@ (80007d0 <MX_TIM2_Init+0xe8>)
 8000740:	f003 fe76 	bl	8004430 <HAL_TIM_Base_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800074a:	f000 fa98 	bl	8000c7e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000752:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000754:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000758:	4619      	mov	r1, r3
 800075a:	481d      	ldr	r0, [pc, #116]	@ (80007d0 <MX_TIM2_Init+0xe8>)
 800075c:	f004 f882 	bl	8004864 <HAL_TIM_ConfigClockSource>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000766:	f000 fa8a 	bl	8000c7e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800076a:	4819      	ldr	r0, [pc, #100]	@ (80007d0 <MX_TIM2_Init+0xe8>)
 800076c:	f003 feaf 	bl	80044ce <HAL_TIM_PWM_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000776:	f000 fa82 	bl	8000c7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800077a:	2310      	movs	r3, #16
 800077c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800077e:	2380      	movs	r3, #128	@ 0x80
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	4619      	mov	r1, r3
 8000788:	4811      	ldr	r0, [pc, #68]	@ (80007d0 <MX_TIM2_Init+0xe8>)
 800078a:	f004 fcdd 	bl	8005148 <HAL_TIMEx_MasterConfigSynchronization>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000794:	f000 fa73 	bl	8000c7e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000798:	2360      	movs	r3, #96	@ 0x60
 800079a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 8820-1;
 800079c:	f242 2373 	movw	r3, #8819	@ 0x2273
 80007a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	4619      	mov	r1, r3
 80007b0:	4807      	ldr	r0, [pc, #28]	@ (80007d0 <MX_TIM2_Init+0xe8>)
 80007b2:	f003 ff95 	bl	80046e0 <HAL_TIM_PWM_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007bc:	f000 fa5f 	bl	8000c7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007c0:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <MX_TIM2_Init+0xe8>)
 80007c2:	f000 fb63 	bl	8000e8c <HAL_TIM_MspPostInit>

}
 80007c6:	bf00      	nop
 80007c8:	3738      	adds	r7, #56	@ 0x38
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200001c0 	.word	0x200001c0
 80007d4:	000802c7 	.word	0x000802c7

080007d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08e      	sub	sp, #56	@ 0x38
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	f107 0320 	add.w	r3, r7, #32
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
 8000804:	615a      	str	r2, [r3, #20]
 8000806:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000808:	4b2c      	ldr	r3, [pc, #176]	@ (80008bc <MX_TIM3_Init+0xe4>)
 800080a:	4a2d      	ldr	r2, [pc, #180]	@ (80008c0 <MX_TIM3_Init+0xe8>)
 800080c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800080e:	4b2b      	ldr	r3, [pc, #172]	@ (80008bc <MX_TIM3_Init+0xe4>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000814:	4b29      	ldr	r3, [pc, #164]	@ (80008bc <MX_TIM3_Init+0xe4>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168-1;
 800081a:	4b28      	ldr	r3, [pc, #160]	@ (80008bc <MX_TIM3_Init+0xe4>)
 800081c:	22a7      	movs	r2, #167	@ 0xa7
 800081e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000820:	4b26      	ldr	r3, [pc, #152]	@ (80008bc <MX_TIM3_Init+0xe4>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000826:	4b25      	ldr	r3, [pc, #148]	@ (80008bc <MX_TIM3_Init+0xe4>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800082c:	4823      	ldr	r0, [pc, #140]	@ (80008bc <MX_TIM3_Init+0xe4>)
 800082e:	f003 fdff 	bl	8004430 <HAL_TIM_Base_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000838:	f000 fa21 	bl	8000c7e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000840:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000842:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000846:	4619      	mov	r1, r3
 8000848:	481c      	ldr	r0, [pc, #112]	@ (80008bc <MX_TIM3_Init+0xe4>)
 800084a:	f004 f80b 	bl	8004864 <HAL_TIM_ConfigClockSource>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000854:	f000 fa13 	bl	8000c7e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000858:	4818      	ldr	r0, [pc, #96]	@ (80008bc <MX_TIM3_Init+0xe4>)
 800085a:	f003 fe38 	bl	80044ce <HAL_TIM_PWM_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000864:	f000 fa0b 	bl	8000c7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000868:	2300      	movs	r3, #0
 800086a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000870:	f107 0320 	add.w	r3, r7, #32
 8000874:	4619      	mov	r1, r3
 8000876:	4811      	ldr	r0, [pc, #68]	@ (80008bc <MX_TIM3_Init+0xe4>)
 8000878:	f004 fc66 	bl	8005148 <HAL_TIMEx_MasterConfigSynchronization>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000882:	f000 f9fc 	bl	8000c7e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000886:	2360      	movs	r3, #96	@ 0x60
 8000888:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 84-1;
 800088a:	2353      	movs	r3, #83	@ 0x53
 800088c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2200      	movs	r2, #0
 800089a:	4619      	mov	r1, r3
 800089c:	4807      	ldr	r0, [pc, #28]	@ (80008bc <MX_TIM3_Init+0xe4>)
 800089e:	f003 ff1f 	bl	80046e0 <HAL_TIM_PWM_ConfigChannel>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80008a8:	f000 f9e9 	bl	8000c7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008ac:	4803      	ldr	r0, [pc, #12]	@ (80008bc <MX_TIM3_Init+0xe4>)
 80008ae:	f000 faed 	bl	8000e8c <HAL_TIM_MspPostInit>

}
 80008b2:	bf00      	nop
 80008b4:	3738      	adds	r7, #56	@ 0x38
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000208 	.word	0x20000208
 80008c0:	40000400 	.word	0x40000400

080008c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08e      	sub	sp, #56	@ 0x38
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d8:	f107 0320 	add.w	r3, r7, #32
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
 80008f0:	615a      	str	r2, [r3, #20]
 80008f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008f4:	4b2a      	ldr	r3, [pc, #168]	@ (80009a0 <MX_TIM4_Init+0xdc>)
 80008f6:	4a2b      	ldr	r2, [pc, #172]	@ (80009a4 <MX_TIM4_Init+0xe0>)
 80008f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008fa:	4b29      	ldr	r3, [pc, #164]	@ (80009a0 <MX_TIM4_Init+0xdc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000900:	4b27      	ldr	r3, [pc, #156]	@ (80009a0 <MX_TIM4_Init+0xdc>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 168-1;
 8000906:	4b26      	ldr	r3, [pc, #152]	@ (80009a0 <MX_TIM4_Init+0xdc>)
 8000908:	22a7      	movs	r2, #167	@ 0xa7
 800090a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090c:	4b24      	ldr	r3, [pc, #144]	@ (80009a0 <MX_TIM4_Init+0xdc>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000912:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <MX_TIM4_Init+0xdc>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000918:	4821      	ldr	r0, [pc, #132]	@ (80009a0 <MX_TIM4_Init+0xdc>)
 800091a:	f003 fd89 	bl	8004430 <HAL_TIM_Base_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000924:	f000 f9ab 	bl	8000c7e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000928:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800092e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000932:	4619      	mov	r1, r3
 8000934:	481a      	ldr	r0, [pc, #104]	@ (80009a0 <MX_TIM4_Init+0xdc>)
 8000936:	f003 ff95 	bl	8004864 <HAL_TIM_ConfigClockSource>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000940:	f000 f99d 	bl	8000c7e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000944:	4816      	ldr	r0, [pc, #88]	@ (80009a0 <MX_TIM4_Init+0xdc>)
 8000946:	f003 fdc2 	bl	80044ce <HAL_TIM_PWM_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000950:	f000 f995 	bl	8000c7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800095c:	f107 0320 	add.w	r3, r7, #32
 8000960:	4619      	mov	r1, r3
 8000962:	480f      	ldr	r0, [pc, #60]	@ (80009a0 <MX_TIM4_Init+0xdc>)
 8000964:	f004 fbf0 	bl	8005148 <HAL_TIMEx_MasterConfigSynchronization>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800096e:	f000 f986 	bl	8000c7e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000972:	2360      	movs	r3, #96	@ 0x60
 8000974:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 42-1;
 8000976:	2329      	movs	r3, #41	@ 0x29
 8000978:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	220c      	movs	r2, #12
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_TIM4_Init+0xdc>)
 800098a:	f003 fea9 	bl	80046e0 <HAL_TIM_PWM_ConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000994:	f000 f973 	bl	8000c7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	3738      	adds	r7, #56	@ 0x38
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000250 	.word	0x20000250
 80009a4:	40000800 	.word	0x40000800

080009a8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b092      	sub	sp, #72	@ 0x48
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d6:	463b      	mov	r3, r7
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
 80009e4:	615a      	str	r2, [r3, #20]
 80009e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80009e8:	4b34      	ldr	r3, [pc, #208]	@ (8000abc <MX_TIM5_Init+0x114>)
 80009ea:	4a35      	ldr	r2, [pc, #212]	@ (8000ac0 <MX_TIM5_Init+0x118>)
 80009ec:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80009ee:	4b33      	ldr	r3, [pc, #204]	@ (8000abc <MX_TIM5_Init+0x114>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f4:	4b31      	ldr	r3, [pc, #196]	@ (8000abc <MX_TIM5_Init+0x114>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 525000-1;
 80009fa:	4b30      	ldr	r3, [pc, #192]	@ (8000abc <MX_TIM5_Init+0x114>)
 80009fc:	4a31      	ldr	r2, [pc, #196]	@ (8000ac4 <MX_TIM5_Init+0x11c>)
 80009fe:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a00:	4b2e      	ldr	r3, [pc, #184]	@ (8000abc <MX_TIM5_Init+0x114>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a06:	4b2d      	ldr	r3, [pc, #180]	@ (8000abc <MX_TIM5_Init+0x114>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000a0c:	482b      	ldr	r0, [pc, #172]	@ (8000abc <MX_TIM5_Init+0x114>)
 8000a0e:	f003 fd0f 	bl	8004430 <HAL_TIM_Base_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000a18:	f000 f931 	bl	8000c7e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a20:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000a22:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a26:	4619      	mov	r1, r3
 8000a28:	4824      	ldr	r0, [pc, #144]	@ (8000abc <MX_TIM5_Init+0x114>)
 8000a2a:	f003 ff1b 	bl	8004864 <HAL_TIM_ConfigClockSource>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000a34:	f000 f923 	bl	8000c7e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000a38:	4820      	ldr	r0, [pc, #128]	@ (8000abc <MX_TIM5_Init+0x114>)
 8000a3a:	f003 fd48 	bl	80044ce <HAL_TIM_PWM_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000a44:	f000 f91b 	bl	8000c7e <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000a48:	2306      	movs	r3, #6
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	4819      	ldr	r0, [pc, #100]	@ (8000abc <MX_TIM5_Init+0x114>)
 8000a58:	f003 ffcb 	bl	80049f2 <HAL_TIM_SlaveConfigSynchro>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM5_Init+0xbe>
  {
    Error_Handler();
 8000a62:	f000 f90c 	bl	8000c7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000a6a:	2380      	movs	r3, #128	@ 0x80
 8000a6c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4811      	ldr	r0, [pc, #68]	@ (8000abc <MX_TIM5_Init+0x114>)
 8000a76:	f004 fb67 	bl	8005148 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8000a80:	f000 f8fd 	bl	8000c7e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a84:	2360      	movs	r3, #96	@ 0x60
 8000a86:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 8347-1;
 8000a88:	f242 039a 	movw	r3, #8346	@ 0x209a
 8000a8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a96:	463b      	mov	r3, r7
 8000a98:	2208      	movs	r2, #8
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4807      	ldr	r0, [pc, #28]	@ (8000abc <MX_TIM5_Init+0x114>)
 8000a9e:	f003 fe1f 	bl	80046e0 <HAL_TIM_PWM_ConfigChannel>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM5_Init+0x104>
  {
    Error_Handler();
 8000aa8:	f000 f8e9 	bl	8000c7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000aac:	4803      	ldr	r0, [pc, #12]	@ (8000abc <MX_TIM5_Init+0x114>)
 8000aae:	f000 f9ed 	bl	8000e8c <HAL_TIM_MspPostInit>

}
 8000ab2:	bf00      	nop
 8000ab4:	3748      	adds	r7, #72	@ 0x48
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000298 	.word	0x20000298
 8000ac0:	40000c00 	.word	0x40000c00
 8000ac4:	000802c7 	.word	0x000802c7

08000ac8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <MX_DMA_Init+0x3c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	@ (8000b04 <MX_DMA_Init+0x3c>)
 8000ad8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <MX_DMA_Init+0x3c>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	2038      	movs	r0, #56	@ 0x38
 8000af0:	f001 f883 	bl	8001bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000af4:	2038      	movs	r0, #56	@ 0x38
 8000af6:	f001 f89c 	bl	8001c32 <HAL_NVIC_EnableIRQ>

}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800

08000b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <MX_GPIO_Init+0x4c>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a0f      	ldr	r2, [pc, #60]	@ (8000b54 <MX_GPIO_Init+0x4c>)
 8000b18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <MX_GPIO_Init+0x4c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <MX_GPIO_Init+0x4c>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a08      	ldr	r2, [pc, #32]	@ (8000b54 <MX_GPIO_Init+0x4c>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <MX_GPIO_Init+0x4c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b46:	bf00      	nop
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
//CDC_Transmit_FS((uint8_t*) CCDPixelBuffer, CCDBuffer);
HAL_ADC_Stop_DMA(&hadc1); //stop the dma
 8000b60:	4808      	ldr	r0, [pc, #32]	@ (8000b84 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000b62:	f000 fc61 	bl	8001428 <HAL_ADC_Stop_DMA>
IdentifySpectrum(CCDPixelBuffer, CCDBuffer, 3100);// the last value is the threshold
 8000b66:	f640 421c 	movw	r2, #3100	@ 0xc1c
 8000b6a:	f241 7170 	movw	r1, #6000	@ 0x1770
 8000b6e:	4806      	ldr	r0, [pc, #24]	@ (8000b88 <HAL_ADC_ConvCpltCallback+0x30>)
 8000b70:	f000 f82a 	bl	8000bc8 <IdentifySpectrum>
start_command_received = 0; // Set the flag
 8000b74:	4b05      	ldr	r3, [pc, #20]	@ (8000b8c <HAL_ADC_ConvCpltCallback+0x34>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000118 	.word	0x20000118
 8000b88:	200002e0 	.word	0x200002e0
 8000b8c:	200031c0 	.word	0x200031c0

08000b90 <CDCReceiveCallback>:


void CDCReceiveCallback(uint8_t* Buf, uint32_t Len) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  // Check for the "start" command
  if (Len >= 5 && strncmp((char*)Buf, "start", 5) == 0) {
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	2b04      	cmp	r3, #4
 8000b9e:	d90a      	bls.n	8000bb6 <CDCReceiveCallback+0x26>
 8000ba0:	2205      	movs	r2, #5
 8000ba2:	4907      	ldr	r1, [pc, #28]	@ (8000bc0 <CDCReceiveCallback+0x30>)
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f008 fb69 	bl	800927c <strncmp>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d102      	bne.n	8000bb6 <CDCReceiveCallback+0x26>
    start_command_received = 1; // Set the flag
 8000bb0:	4b04      	ldr	r3, [pc, #16]	@ (8000bc4 <CDCReceiveCallback+0x34>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	0800932c 	.word	0x0800932c
 8000bc4:	200031c0 	.word	0x200031c0

08000bc8 <IdentifySpectrum>:

void IdentifySpectrum(volatile uint16_t* buffer, uint32_t buffer_size, uint16_t threshold) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	80fb      	strh	r3, [r7, #6]
    uint32_t spectrum_start_index = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    uint32_t spectrum_end_index = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	623b      	str	r3, [r7, #32]
    uint8_t spectrum_found = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	77fb      	strb	r3, [r7, #31]

    // Iterate through the buffer to find the start and end of a valid spectrum
    for (uint32_t i = 0; i < buffer_size - 1; i += 2) {
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
 8000be6:	e02c      	b.n	8000c42 <IdentifySpectrum+0x7a>
        // Combine two consecutive half-words to form one value
        uint16_t pixel_value = (buffer[i] | (buffer[i + 1] << 8));
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	881b      	ldrh	r3, [r3, #0]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	b21a      	sxth	r2, r3
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	68f9      	ldr	r1, [r7, #12]
 8000bfe:	440b      	add	r3, r1
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	021b      	lsls	r3, r3, #8
 8000c06:	b21b      	sxth	r3, r3
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	b21b      	sxth	r3, r3
 8000c0c:	82fb      	strh	r3, [r7, #22]

        if (!spectrum_found) {
 8000c0e:	7ffb      	ldrb	r3, [r7, #31]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d10b      	bne.n	8000c2c <IdentifySpectrum+0x64>
            // start of the spectrum
            if (pixel_value > threshold) {
 8000c14:	8afa      	ldrh	r2, [r7, #22]
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d90f      	bls.n	8000c3c <IdentifySpectrum+0x74>
                spectrum_start_index = i;
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
                spectrum_found = 1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	77fb      	strb	r3, [r7, #31]
                i += 100; // skip a few values so that it just doesnt take the same dummy pixel
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	3364      	adds	r3, #100	@ 0x64
 8000c28:	61bb      	str	r3, [r7, #24]
 8000c2a:	e007      	b.n	8000c3c <IdentifySpectrum+0x74>
            }
        } else {
            // end of the spectrum
            if (pixel_value > threshold) {
 8000c2c:	8afa      	ldrh	r2, [r7, #22]
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d903      	bls.n	8000c3c <IdentifySpectrum+0x74>
                spectrum_end_index = i + 2; // End index just after the threshold
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	3302      	adds	r3, #2
 8000c38:	623b      	str	r3, [r7, #32]
                break; // Exit the loop once the end is found
 8000c3a:	e007      	b.n	8000c4c <IdentifySpectrum+0x84>
    for (uint32_t i = 0; i < buffer_size - 1; i += 2) {
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	3302      	adds	r3, #2
 8000c40:	61bb      	str	r3, [r7, #24]
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d3cd      	bcc.n	8000be8 <IdentifySpectrum+0x20>
            }
        }
    }

    // Ensure the spectrum does not exceed the buffer size
    if (spectrum_end_index > buffer_size) {
 8000c4c:	6a3a      	ldr	r2, [r7, #32]
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d901      	bls.n	8000c58 <IdentifySpectrum+0x90>
        spectrum_end_index = buffer_size;
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	623b      	str	r3, [r7, #32]
    }

    // Calculate the length of the spectrum
    uint32_t spectrum_length = spectrum_end_index - spectrum_start_index;
 8000c58:	6a3a      	ldr	r2, [r7, #32]
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	613b      	str	r3, [r7, #16]

    // Transmit the identified spectrum
    if (spectrum_length > 0) {
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d007      	beq.n	8000c76 <IdentifySpectrum+0xae>
        CDC_Transmit_FS((uint8_t*)&buffer[spectrum_start_index], spectrum_length);
 8000c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	6939      	ldr	r1, [r7, #16]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f007 feb9 	bl	80089e8 <CDC_Transmit_FS>
    }
}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	@ 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c82:	b672      	cpsid	i
}
 8000c84:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c86:	bf00      	nop
 8000c88:	e7fd      	b.n	8000c86 <Error_Handler+0x8>
	...

08000c8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000c9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	4a08      	ldr	r2, [pc, #32]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800

08000cdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a2e      	ldr	r2, [pc, #184]	@ (8000db4 <HAL_ADC_MspInit+0xd8>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d156      	bne.n	8000dac <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b2d      	ldr	r3, [pc, #180]	@ (8000db8 <HAL_ADC_MspInit+0xdc>)
 8000d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d06:	4a2c      	ldr	r2, [pc, #176]	@ (8000db8 <HAL_ADC_MspInit+0xdc>)
 8000d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000db8 <HAL_ADC_MspInit+0xdc>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b26      	ldr	r3, [pc, #152]	@ (8000db8 <HAL_ADC_MspInit+0xdc>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a25      	ldr	r2, [pc, #148]	@ (8000db8 <HAL_ADC_MspInit+0xdc>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b23      	ldr	r3, [pc, #140]	@ (8000db8 <HAL_ADC_MspInit+0xdc>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d36:	2308      	movs	r3, #8
 8000d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	481c      	ldr	r0, [pc, #112]	@ (8000dbc <HAL_ADC_MspInit+0xe0>)
 8000d4a:	f001 fb6d 	bl	8002428 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc0 <HAL_ADC_MspInit+0xe4>)
 8000d50:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc4 <HAL_ADC_MspInit+0xe8>)
 8000d52:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <HAL_ADC_MspInit+0xe4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	@ (8000dc0 <HAL_ADC_MspInit+0xe4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d60:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <HAL_ADC_MspInit+0xe4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d66:	4b16      	ldr	r3, [pc, #88]	@ (8000dc0 <HAL_ADC_MspInit+0xe4>)
 8000d68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d6c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <HAL_ADC_MspInit+0xe4>)
 8000d70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d74:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d76:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <HAL_ADC_MspInit+0xe4>)
 8000d78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d7c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <HAL_ADC_MspInit+0xe4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d84:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <HAL_ADC_MspInit+0xe4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc0 <HAL_ADC_MspInit+0xe4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d90:	480b      	ldr	r0, [pc, #44]	@ (8000dc0 <HAL_ADC_MspInit+0xe4>)
 8000d92:	f000 ff69 	bl	8001c68 <HAL_DMA_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000d9c:	f7ff ff6f 	bl	8000c7e <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a07      	ldr	r2, [pc, #28]	@ (8000dc0 <HAL_ADC_MspInit+0xe4>)
 8000da4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000da6:	4a06      	ldr	r2, [pc, #24]	@ (8000dc0 <HAL_ADC_MspInit+0xe4>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dac:	bf00      	nop
 8000dae:	3728      	adds	r7, #40	@ 0x28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40012000 	.word	0x40012000
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020000 	.word	0x40020000
 8000dc0:	20000160 	.word	0x20000160
 8000dc4:	40026410 	.word	0x40026410

08000dc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b087      	sub	sp, #28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000dd8:	d10e      	bne.n	8000df8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	4b27      	ldr	r3, [pc, #156]	@ (8000e7c <HAL_TIM_Base_MspInit+0xb4>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de2:	4a26      	ldr	r2, [pc, #152]	@ (8000e7c <HAL_TIM_Base_MspInit+0xb4>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dea:	4b24      	ldr	r3, [pc, #144]	@ (8000e7c <HAL_TIM_Base_MspInit+0xb4>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000df6:	e03a      	b.n	8000e6e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a20      	ldr	r2, [pc, #128]	@ (8000e80 <HAL_TIM_Base_MspInit+0xb8>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d10e      	bne.n	8000e20 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b1d      	ldr	r3, [pc, #116]	@ (8000e7c <HAL_TIM_Base_MspInit+0xb4>)
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000e7c <HAL_TIM_Base_MspInit+0xb4>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e12:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <HAL_TIM_Base_MspInit+0xb4>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
}
 8000e1e:	e026      	b.n	8000e6e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a17      	ldr	r2, [pc, #92]	@ (8000e84 <HAL_TIM_Base_MspInit+0xbc>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d10e      	bne.n	8000e48 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <HAL_TIM_Base_MspInit+0xb4>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	4a12      	ldr	r2, [pc, #72]	@ (8000e7c <HAL_TIM_Base_MspInit+0xb4>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3a:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <HAL_TIM_Base_MspInit+0xb4>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
}
 8000e46:	e012      	b.n	8000e6e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	@ (8000e88 <HAL_TIM_Base_MspInit+0xc0>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d10d      	bne.n	8000e6e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <HAL_TIM_Base_MspInit+0xb4>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	4a08      	ldr	r2, [pc, #32]	@ (8000e7c <HAL_TIM_Base_MspInit+0xb4>)
 8000e5c:	f043 0308 	orr.w	r3, r3, #8
 8000e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e62:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <HAL_TIM_Base_MspInit+0xb4>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
}
 8000e6e:	bf00      	nop
 8000e70:	371c      	adds	r7, #28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40000400 	.word	0x40000400
 8000e84:	40000800 	.word	0x40000800
 8000e88:	40000c00 	.word	0x40000c00

08000e8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	@ 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000eac:	d11e      	bne.n	8000eec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	4b34      	ldr	r3, [pc, #208]	@ (8000f84 <HAL_TIM_MspPostInit+0xf8>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	4a33      	ldr	r2, [pc, #204]	@ (8000f84 <HAL_TIM_MspPostInit+0xf8>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ebe:	4b31      	ldr	r3, [pc, #196]	@ (8000f84 <HAL_TIM_MspPostInit+0xf8>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	613b      	str	r3, [r7, #16]
 8000ec8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000eda:	2301      	movs	r3, #1
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4828      	ldr	r0, [pc, #160]	@ (8000f88 <HAL_TIM_MspPostInit+0xfc>)
 8000ee6:	f001 fa9f 	bl	8002428 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000eea:	e046      	b.n	8000f7a <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a26      	ldr	r2, [pc, #152]	@ (8000f8c <HAL_TIM_MspPostInit+0x100>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d11e      	bne.n	8000f34 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	4b22      	ldr	r3, [pc, #136]	@ (8000f84 <HAL_TIM_MspPostInit+0xf8>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efe:	4a21      	ldr	r2, [pc, #132]	@ (8000f84 <HAL_TIM_MspPostInit+0xf8>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f06:	4b1f      	ldr	r3, [pc, #124]	@ (8000f84 <HAL_TIM_MspPostInit+0xf8>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
 8000f10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f12:	2340      	movs	r3, #64	@ 0x40
 8000f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f22:	2302      	movs	r3, #2
 8000f24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	f107 0314 	add.w	r3, r7, #20
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4816      	ldr	r0, [pc, #88]	@ (8000f88 <HAL_TIM_MspPostInit+0xfc>)
 8000f2e:	f001 fa7b 	bl	8002428 <HAL_GPIO_Init>
}
 8000f32:	e022      	b.n	8000f7a <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM5)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a15      	ldr	r2, [pc, #84]	@ (8000f90 <HAL_TIM_MspPostInit+0x104>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d11d      	bne.n	8000f7a <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <HAL_TIM_MspPostInit+0xf8>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a0f      	ldr	r2, [pc, #60]	@ (8000f84 <HAL_TIM_MspPostInit+0xf8>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f84 <HAL_TIM_MspPostInit+0xf8>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4804      	ldr	r0, [pc, #16]	@ (8000f88 <HAL_TIM_MspPostInit+0xfc>)
 8000f76:	f001 fa57 	bl	8002428 <HAL_GPIO_Init>
}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	@ 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40000400 	.word	0x40000400
 8000f90:	40000c00 	.word	0x40000c00

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <NMI_Handler+0x4>

08000f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <MemManage_Handler+0x4>

08000fac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fea:	f000 f8a5 	bl	8001138 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ff8:	4802      	ldr	r0, [pc, #8]	@ (8001004 <DMA2_Stream0_IRQHandler+0x10>)
 8000ffa:	f000 ffab 	bl	8001f54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20000160 	.word	0x20000160

08001008 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800100c:	4802      	ldr	r0, [pc, #8]	@ (8001018 <OTG_FS_IRQHandler+0x10>)
 800100e:	f001 fcd3 	bl	80029b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20003ee8 	.word	0x20003ee8

0800101c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <SystemInit+0x20>)
 8001022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001026:	4a05      	ldr	r2, [pc, #20]	@ (800103c <SystemInit+0x20>)
 8001028:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800102c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001040:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001078 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001044:	f7ff ffea 	bl	800101c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001048:	480c      	ldr	r0, [pc, #48]	@ (800107c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800104a:	490d      	ldr	r1, [pc, #52]	@ (8001080 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800104c:	4a0d      	ldr	r2, [pc, #52]	@ (8001084 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001050:	e002      	b.n	8001058 <LoopCopyDataInit>

08001052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001056:	3304      	adds	r3, #4

08001058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800105c:	d3f9      	bcc.n	8001052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105e:	4a0a      	ldr	r2, [pc, #40]	@ (8001088 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001060:	4c0a      	ldr	r4, [pc, #40]	@ (800108c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001064:	e001      	b.n	800106a <LoopFillZerobss>

08001066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001068:	3204      	adds	r2, #4

0800106a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800106c:	d3fb      	bcc.n	8001066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800106e:	f008 f917 	bl	80092a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001072:	f7ff fa27 	bl	80004c4 <main>
  bx  lr    
 8001076:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001078:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800107c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001080:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001084:	080093a4 	.word	0x080093a4
  ldr r2, =_sbss
 8001088:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 800108c:	200045ec 	.word	0x200045ec

08001090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <ADC_IRQHandler>
	...

08001094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001098:	4b0e      	ldr	r3, [pc, #56]	@ (80010d4 <HAL_Init+0x40>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a0d      	ldr	r2, [pc, #52]	@ (80010d4 <HAL_Init+0x40>)
 800109e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010a4:	4b0b      	ldr	r3, [pc, #44]	@ (80010d4 <HAL_Init+0x40>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <HAL_Init+0x40>)
 80010aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b0:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <HAL_Init+0x40>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a07      	ldr	r2, [pc, #28]	@ (80010d4 <HAL_Init+0x40>)
 80010b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010bc:	2003      	movs	r0, #3
 80010be:	f000 fd91 	bl	8001be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c2:	200f      	movs	r0, #15
 80010c4:	f000 f808 	bl	80010d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c8:	f7ff fde0 	bl	8000c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40023c00 	.word	0x40023c00

080010d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <HAL_InitTick+0x54>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <HAL_InitTick+0x58>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fda9 	bl	8001c4e <HAL_SYSTICK_Config>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e00e      	b.n	8001124 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b0f      	cmp	r3, #15
 800110a:	d80a      	bhi.n	8001122 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110c:	2200      	movs	r2, #0
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	f04f 30ff 	mov.w	r0, #4294967295
 8001114:	f000 fd71 	bl	8001bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001118:	4a06      	ldr	r2, [pc, #24]	@ (8001134 <HAL_InitTick+0x5c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800111e:	2300      	movs	r3, #0
 8001120:	e000      	b.n	8001124 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000000 	.word	0x20000000
 8001130:	20000008 	.word	0x20000008
 8001134:	20000004 	.word	0x20000004

08001138 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <HAL_IncTick+0x20>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	461a      	mov	r2, r3
 8001142:	4b06      	ldr	r3, [pc, #24]	@ (800115c <HAL_IncTick+0x24>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4413      	add	r3, r2
 8001148:	4a04      	ldr	r2, [pc, #16]	@ (800115c <HAL_IncTick+0x24>)
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000008 	.word	0x20000008
 800115c:	20003204 	.word	0x20003204

08001160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b03      	ldr	r3, [pc, #12]	@ (8001174 <HAL_GetTick+0x14>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20003204 	.word	0x20003204

08001178 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001180:	f7ff ffee 	bl	8001160 <HAL_GetTick>
 8001184:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001190:	d005      	beq.n	800119e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001192:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <HAL_Delay+0x44>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4413      	add	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800119e:	bf00      	nop
 80011a0:	f7ff ffde 	bl	8001160 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d8f7      	bhi.n	80011a0 <HAL_Delay+0x28>
  {
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000008 	.word	0x20000008

080011c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c8:	2300      	movs	r3, #0
 80011ca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e033      	b.n	800123e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d109      	bne.n	80011f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fd7c 	bl	8000cdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	f003 0310 	and.w	r3, r3, #16
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d118      	bne.n	8001230 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001206:	f023 0302 	bic.w	r3, r3, #2
 800120a:	f043 0202 	orr.w	r2, r3, #2
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 fa98 	bl	8001748 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001222:	f023 0303 	bic.w	r3, r3, #3
 8001226:	f043 0201 	orr.w	r2, r3, #1
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	641a      	str	r2, [r3, #64]	@ 0x40
 800122e:	e001      	b.n	8001234 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800123c:	7bfb      	ldrb	r3, [r7, #15]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001254:	2300      	movs	r3, #0
 8001256:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800125e:	2b01      	cmp	r3, #1
 8001260:	d101      	bne.n	8001266 <HAL_ADC_Start_DMA+0x1e>
 8001262:	2302      	movs	r3, #2
 8001264:	e0ce      	b.n	8001404 <HAL_ADC_Start_DMA+0x1bc>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2201      	movs	r2, #1
 800126a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b01      	cmp	r3, #1
 800127a:	d018      	beq.n	80012ae <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f042 0201 	orr.w	r2, r2, #1
 800128a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800128c:	4b5f      	ldr	r3, [pc, #380]	@ (800140c <HAL_ADC_Start_DMA+0x1c4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a5f      	ldr	r2, [pc, #380]	@ (8001410 <HAL_ADC_Start_DMA+0x1c8>)
 8001292:	fba2 2303 	umull	r2, r3, r2, r3
 8001296:	0c9a      	lsrs	r2, r3, #18
 8001298:	4613      	mov	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	4413      	add	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80012a0:	e002      	b.n	80012a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f9      	bne.n	80012a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012bc:	d107      	bne.n	80012ce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012cc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b01      	cmp	r3, #1
 80012da:	f040 8086 	bne.w	80013ea <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80012e6:	f023 0301 	bic.w	r3, r3, #1
 80012ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d007      	beq.n	8001310 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001308:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001314:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800131c:	d106      	bne.n	800132c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001322:	f023 0206 	bic.w	r2, r3, #6
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	645a      	str	r2, [r3, #68]	@ 0x44
 800132a:	e002      	b.n	8001332 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2200      	movs	r2, #0
 8001330:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800133a:	4b36      	ldr	r3, [pc, #216]	@ (8001414 <HAL_ADC_Start_DMA+0x1cc>)
 800133c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001342:	4a35      	ldr	r2, [pc, #212]	@ (8001418 <HAL_ADC_Start_DMA+0x1d0>)
 8001344:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800134a:	4a34      	ldr	r2, [pc, #208]	@ (800141c <HAL_ADC_Start_DMA+0x1d4>)
 800134c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001352:	4a33      	ldr	r2, [pc, #204]	@ (8001420 <HAL_ADC_Start_DMA+0x1d8>)
 8001354:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800135e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800136e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800137e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	334c      	adds	r3, #76	@ 0x4c
 800138a:	4619      	mov	r1, r3
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f000 fd18 	bl	8001dc4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 031f 	and.w	r3, r3, #31
 800139c:	2b00      	cmp	r3, #0
 800139e:	d10f      	bne.n	80013c0 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d129      	bne.n	8001402 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689a      	ldr	r2, [r3, #8]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	e020      	b.n	8001402 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a17      	ldr	r2, [pc, #92]	@ (8001424 <HAL_ADC_Start_DMA+0x1dc>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d11b      	bne.n	8001402 <HAL_ADC_Start_DMA+0x1ba>
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d114      	bne.n	8001402 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	e00b      	b.n	8001402 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ee:	f043 0210 	orr.w	r2, r3, #16
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	f043 0201 	orr.w	r2, r3, #1
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000000 	.word	0x20000000
 8001410:	431bde83 	.word	0x431bde83
 8001414:	40012300 	.word	0x40012300
 8001418:	08001941 	.word	0x08001941
 800141c:	080019fb 	.word	0x080019fb
 8001420:	08001a17 	.word	0x08001a17
 8001424:	40012000 	.word	0x40012000

08001428 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800143a:	2b01      	cmp	r3, #1
 800143c:	d101      	bne.n	8001442 <HAL_ADC_Stop_DMA+0x1a>
 800143e:	2302      	movs	r3, #2
 8001440:	e048      	b.n	80014d4 <HAL_ADC_Stop_DMA+0xac>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0201 	bic.w	r2, r2, #1
 8001458:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d130      	bne.n	80014ca <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001476:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800147c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d10f      	bne.n	80014a6 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fcf2 	bl	8001e74 <HAL_DMA_Abort>
 8001490:	4603      	mov	r3, r0
 8001492:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d005      	beq.n	80014a6 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800149e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80014b4:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80014be:	f023 0301 	bic.w	r3, r3, #1
 80014c2:	f043 0201 	orr.w	r2, r3, #1
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x1c>
 800151c:	2302      	movs	r3, #2
 800151e:	e105      	b.n	800172c <HAL_ADC_ConfigChannel+0x228>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b09      	cmp	r3, #9
 800152e:	d925      	bls.n	800157c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68d9      	ldr	r1, [r3, #12]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	461a      	mov	r2, r3
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	3b1e      	subs	r3, #30
 8001546:	2207      	movs	r2, #7
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43da      	mvns	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	400a      	ands	r2, r1
 8001554:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68d9      	ldr	r1, [r3, #12]
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	b29b      	uxth	r3, r3
 8001566:	4618      	mov	r0, r3
 8001568:	4603      	mov	r3, r0
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	4403      	add	r3, r0
 800156e:	3b1e      	subs	r3, #30
 8001570:	409a      	lsls	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	e022      	b.n	80015c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6919      	ldr	r1, [r3, #16]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b29b      	uxth	r3, r3
 8001588:	461a      	mov	r2, r3
 800158a:	4613      	mov	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	2207      	movs	r2, #7
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	400a      	ands	r2, r1
 800159e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6919      	ldr	r1, [r3, #16]
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	689a      	ldr	r2, [r3, #8]
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	4618      	mov	r0, r3
 80015b2:	4603      	mov	r3, r0
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4403      	add	r3, r0
 80015b8:	409a      	lsls	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d824      	bhi.n	8001614 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	3b05      	subs	r3, #5
 80015dc:	221f      	movs	r2, #31
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	400a      	ands	r2, r1
 80015ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4618      	mov	r0, r3
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	3b05      	subs	r3, #5
 8001606:	fa00 f203 	lsl.w	r2, r0, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	430a      	orrs	r2, r1
 8001610:	635a      	str	r2, [r3, #52]	@ 0x34
 8001612:	e04c      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b0c      	cmp	r3, #12
 800161a:	d824      	bhi.n	8001666 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	3b23      	subs	r3, #35	@ 0x23
 800162e:	221f      	movs	r2, #31
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43da      	mvns	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	400a      	ands	r2, r1
 800163c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	b29b      	uxth	r3, r3
 800164a:	4618      	mov	r0, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	3b23      	subs	r3, #35	@ 0x23
 8001658:	fa00 f203 	lsl.w	r2, r0, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	430a      	orrs	r2, r1
 8001662:	631a      	str	r2, [r3, #48]	@ 0x30
 8001664:	e023      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	3b41      	subs	r3, #65	@ 0x41
 8001678:	221f      	movs	r2, #31
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	400a      	ands	r2, r1
 8001686:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	b29b      	uxth	r3, r3
 8001694:	4618      	mov	r0, r3
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	3b41      	subs	r3, #65	@ 0x41
 80016a2:	fa00 f203 	lsl.w	r2, r0, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016ae:	4b22      	ldr	r3, [pc, #136]	@ (8001738 <HAL_ADC_ConfigChannel+0x234>)
 80016b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a21      	ldr	r2, [pc, #132]	@ (800173c <HAL_ADC_ConfigChannel+0x238>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d109      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x1cc>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b12      	cmp	r3, #18
 80016c2:	d105      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a19      	ldr	r2, [pc, #100]	@ (800173c <HAL_ADC_ConfigChannel+0x238>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d123      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x21e>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b10      	cmp	r3, #16
 80016e0:	d003      	beq.n	80016ea <HAL_ADC_ConfigChannel+0x1e6>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b11      	cmp	r3, #17
 80016e8:	d11b      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b10      	cmp	r3, #16
 80016fc:	d111      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016fe:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <HAL_ADC_ConfigChannel+0x23c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a10      	ldr	r2, [pc, #64]	@ (8001744 <HAL_ADC_ConfigChannel+0x240>)
 8001704:	fba2 2303 	umull	r2, r3, r2, r3
 8001708:	0c9a      	lsrs	r2, r3, #18
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001714:	e002      	b.n	800171c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	3b01      	subs	r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f9      	bne.n	8001716 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	40012300 	.word	0x40012300
 800173c:	40012000 	.word	0x40012000
 8001740:	20000000 	.word	0x20000000
 8001744:	431bde83 	.word	0x431bde83

08001748 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001750:	4b79      	ldr	r3, [pc, #484]	@ (8001938 <ADC_Init+0x1f0>)
 8001752:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	431a      	orrs	r2, r3
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800177c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	021a      	lsls	r2, r3, #8
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80017a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6859      	ldr	r1, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6899      	ldr	r1, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017da:	4a58      	ldr	r2, [pc, #352]	@ (800193c <ADC_Init+0x1f4>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d022      	beq.n	8001826 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6899      	ldr	r1, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	430a      	orrs	r2, r1
 8001800:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6899      	ldr	r1, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	e00f      	b.n	8001846 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001834:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001844:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 0202 	bic.w	r2, r2, #2
 8001854:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6899      	ldr	r1, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	7e1b      	ldrb	r3, [r3, #24]
 8001860:	005a      	lsls	r2, r3, #1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d01b      	beq.n	80018ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001882:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001892:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6859      	ldr	r1, [r3, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189e:	3b01      	subs	r3, #1
 80018a0:	035a      	lsls	r2, r3, #13
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	e007      	b.n	80018bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018ba:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80018ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	051a      	lsls	r2, r3, #20
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80018f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6899      	ldr	r1, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018fe:	025a      	lsls	r2, r3, #9
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001916:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6899      	ldr	r1, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	029a      	lsls	r2, r3, #10
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	609a      	str	r2, [r3, #8]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	40012300 	.word	0x40012300
 800193c:	0f000001 	.word	0x0f000001

08001940 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800194c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001956:	2b00      	cmp	r3, #0
 8001958:	d13c      	bne.n	80019d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d12b      	bne.n	80019cc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001978:	2b00      	cmp	r3, #0
 800197a:	d127      	bne.n	80019cc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001982:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001986:	2b00      	cmp	r3, #0
 8001988:	d006      	beq.n	8001998 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001994:	2b00      	cmp	r3, #0
 8001996:	d119      	bne.n	80019cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0220 	bic.w	r2, r2, #32
 80019a6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d105      	bne.n	80019cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	f043 0201 	orr.w	r2, r3, #1
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f7ff f8c3 	bl	8000b58 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80019d2:	e00e      	b.n	80019f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	f003 0310 	and.w	r3, r3, #16
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f7ff fd85 	bl	80014f0 <HAL_ADC_ErrorCallback>
}
 80019e6:	e004      	b.n	80019f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	4798      	blx	r3
}
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a06:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7ff fd67 	bl	80014dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b084      	sub	sp, #16
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a22:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2240      	movs	r2, #64	@ 0x40
 8001a28:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2e:	f043 0204 	orr.w	r2, r3, #4
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f7ff fd5a 	bl	80014f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a3c:	bf00      	nop
 8001a3e:	3710      	adds	r7, #16
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a54:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a60:	4013      	ands	r3, r2
 8001a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a76:	4a04      	ldr	r2, [pc, #16]	@ (8001a88 <__NVIC_SetPriorityGrouping+0x44>)
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	60d3      	str	r3, [r2, #12]
}
 8001a7c:	bf00      	nop
 8001a7e:	3714      	adds	r7, #20
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a90:	4b04      	ldr	r3, [pc, #16]	@ (8001aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	0a1b      	lsrs	r3, r3, #8
 8001a96:	f003 0307 	and.w	r3, r3, #7
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	db0b      	blt.n	8001ad2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	f003 021f 	and.w	r2, r3, #31
 8001ac0:	4907      	ldr	r1, [pc, #28]	@ (8001ae0 <__NVIC_EnableIRQ+0x38>)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	095b      	lsrs	r3, r3, #5
 8001ac8:	2001      	movs	r0, #1
 8001aca:	fa00 f202 	lsl.w	r2, r0, r2
 8001ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	e000e100 	.word	0xe000e100

08001ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	6039      	str	r1, [r7, #0]
 8001aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	db0a      	blt.n	8001b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	490c      	ldr	r1, [pc, #48]	@ (8001b30 <__NVIC_SetPriority+0x4c>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	0112      	lsls	r2, r2, #4
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	440b      	add	r3, r1
 8001b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b0c:	e00a      	b.n	8001b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4908      	ldr	r1, [pc, #32]	@ (8001b34 <__NVIC_SetPriority+0x50>)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	3b04      	subs	r3, #4
 8001b1c:	0112      	lsls	r2, r2, #4
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	440b      	add	r3, r1
 8001b22:	761a      	strb	r2, [r3, #24]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000e100 	.word	0xe000e100
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	@ 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f1c3 0307 	rsb	r3, r3, #7
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	bf28      	it	cs
 8001b56:	2304      	movcs	r3, #4
 8001b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	2b06      	cmp	r3, #6
 8001b60:	d902      	bls.n	8001b68 <NVIC_EncodePriority+0x30>
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3b03      	subs	r3, #3
 8001b66:	e000      	b.n	8001b6a <NVIC_EncodePriority+0x32>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43da      	mvns	r2, r3
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b80:	f04f 31ff 	mov.w	r1, #4294967295
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8a:	43d9      	mvns	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b90:	4313      	orrs	r3, r2
         );
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3724      	adds	r7, #36	@ 0x24
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bb0:	d301      	bcc.n	8001bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e00f      	b.n	8001bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001be0 <SysTick_Config+0x40>)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bbe:	210f      	movs	r1, #15
 8001bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc4:	f7ff ff8e 	bl	8001ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc8:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <SysTick_Config+0x40>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bce:	4b04      	ldr	r3, [pc, #16]	@ (8001be0 <SysTick_Config+0x40>)
 8001bd0:	2207      	movs	r2, #7
 8001bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	e000e010 	.word	0xe000e010

08001be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff29 	bl	8001a44 <__NVIC_SetPriorityGrouping>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
 8001c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c0c:	f7ff ff3e 	bl	8001a8c <__NVIC_GetPriorityGrouping>
 8001c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68b9      	ldr	r1, [r7, #8]
 8001c16:	6978      	ldr	r0, [r7, #20]
 8001c18:	f7ff ff8e 	bl	8001b38 <NVIC_EncodePriority>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff5d 	bl	8001ae4 <__NVIC_SetPriority>
}
 8001c2a:	bf00      	nop
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff31 	bl	8001aa8 <__NVIC_EnableIRQ>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ffa2 	bl	8001ba0 <SysTick_Config>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c74:	f7ff fa74 	bl	8001160 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e099      	b.n	8001db8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2202      	movs	r2, #2
 8001c88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0201 	bic.w	r2, r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ca4:	e00f      	b.n	8001cc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ca6:	f7ff fa5b 	bl	8001160 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b05      	cmp	r3, #5
 8001cb2:	d908      	bls.n	8001cc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e078      	b.n	8001db8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1e8      	bne.n	8001ca6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	4b38      	ldr	r3, [pc, #224]	@ (8001dc0 <HAL_DMA_Init+0x158>)
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1c:	2b04      	cmp	r3, #4
 8001d1e:	d107      	bne.n	8001d30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f023 0307 	bic.w	r3, r3, #7
 8001d46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d117      	bne.n	8001d8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00e      	beq.n	8001d8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 fadf 	bl	8002330 <DMA_CheckFifoParam>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d008      	beq.n	8001d8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2240      	movs	r2, #64	@ 0x40
 8001d7c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d86:	2301      	movs	r3, #1
 8001d88:	e016      	b.n	8001db8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 fa96 	bl	80022c4 <DMA_CalcBaseAndBitshift>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da0:	223f      	movs	r2, #63	@ 0x3f
 8001da2:	409a      	lsls	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	f010803f 	.word	0xf010803f

08001dc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
 8001dd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_DMA_Start_IT+0x26>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e040      	b.n	8001e6c <HAL_DMA_Start_IT+0xa8>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d12f      	bne.n	8001e5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2202      	movs	r2, #2
 8001e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 fa28 	bl	8002268 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1c:	223f      	movs	r2, #63	@ 0x3f
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0216 	orr.w	r2, r2, #22
 8001e32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0208 	orr.w	r2, r2, #8
 8001e4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	e005      	b.n	8001e6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e66:	2302      	movs	r3, #2
 8001e68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e80:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e82:	f7ff f96d 	bl	8001160 <HAL_GetTick>
 8001e86:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d008      	beq.n	8001ea6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2280      	movs	r2, #128	@ 0x80
 8001e98:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e052      	b.n	8001f4c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0216 	bic.w	r2, r2, #22
 8001eb4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ec4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d103      	bne.n	8001ed6 <HAL_DMA_Abort+0x62>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d007      	beq.n	8001ee6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0208 	bic.w	r2, r2, #8
 8001ee4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0201 	bic.w	r2, r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ef6:	e013      	b.n	8001f20 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ef8:	f7ff f932 	bl	8001160 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b05      	cmp	r3, #5
 8001f04:	d90c      	bls.n	8001f20 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2203      	movs	r2, #3
 8001f10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e015      	b.n	8001f4c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1e4      	bne.n	8001ef8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f32:	223f      	movs	r2, #63	@ 0x3f
 8001f34:	409a      	lsls	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f60:	4b8e      	ldr	r3, [pc, #568]	@ (800219c <HAL_DMA_IRQHandler+0x248>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a8e      	ldr	r2, [pc, #568]	@ (80021a0 <HAL_DMA_IRQHandler+0x24c>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	0a9b      	lsrs	r3, r3, #10
 8001f6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f7e:	2208      	movs	r2, #8
 8001f80:	409a      	lsls	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d01a      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d013      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0204 	bic.w	r2, r2, #4
 8001fa6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fac:	2208      	movs	r2, #8
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb8:	f043 0201 	orr.w	r2, r3, #1
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d012      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fee:	f043 0202 	orr.w	r2, r3, #2
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4013      	ands	r3, r2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d012      	beq.n	800202c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00b      	beq.n	800202c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002018:	2204      	movs	r2, #4
 800201a:	409a      	lsls	r2, r3
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002024:	f043 0204 	orr.w	r2, r3, #4
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002030:	2210      	movs	r2, #16
 8002032:	409a      	lsls	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d043      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d03c      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204e:	2210      	movs	r2, #16
 8002050:	409a      	lsls	r2, r3
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d018      	beq.n	8002096 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d108      	bne.n	8002084 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d024      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	4798      	blx	r3
 8002082:	e01f      	b.n	80020c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01b      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	4798      	blx	r3
 8002094:	e016      	b.n	80020c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d107      	bne.n	80020b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0208 	bic.w	r2, r2, #8
 80020b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c8:	2220      	movs	r2, #32
 80020ca:	409a      	lsls	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 808f 	beq.w	80021f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0310 	and.w	r3, r3, #16
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 8087 	beq.w	80021f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ea:	2220      	movs	r2, #32
 80020ec:	409a      	lsls	r2, r3
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b05      	cmp	r3, #5
 80020fc:	d136      	bne.n	800216c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0216 	bic.w	r2, r2, #22
 800210c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800211c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d103      	bne.n	800212e <HAL_DMA_IRQHandler+0x1da>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800212a:	2b00      	cmp	r3, #0
 800212c:	d007      	beq.n	800213e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0208 	bic.w	r2, r2, #8
 800213c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002142:	223f      	movs	r2, #63	@ 0x3f
 8002144:	409a      	lsls	r2, r3
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800215e:	2b00      	cmp	r3, #0
 8002160:	d07e      	beq.n	8002260 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	4798      	blx	r3
        }
        return;
 800216a:	e079      	b.n	8002260 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d01d      	beq.n	80021b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10d      	bne.n	80021a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218c:	2b00      	cmp	r3, #0
 800218e:	d031      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	4798      	blx	r3
 8002198:	e02c      	b.n	80021f4 <HAL_DMA_IRQHandler+0x2a0>
 800219a:	bf00      	nop
 800219c:	20000000 	.word	0x20000000
 80021a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d023      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	4798      	blx	r3
 80021b4:	e01e      	b.n	80021f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10f      	bne.n	80021e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0210 	bic.w	r2, r2, #16
 80021d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d032      	beq.n	8002262 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d022      	beq.n	800224e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2205      	movs	r2, #5
 800220c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	3301      	adds	r3, #1
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	429a      	cmp	r2, r3
 800222a:	d307      	bcc.n	800223c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f2      	bne.n	8002220 <HAL_DMA_IRQHandler+0x2cc>
 800223a:	e000      	b.n	800223e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800223c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	4798      	blx	r3
 800225e:	e000      	b.n	8002262 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002260:	bf00      	nop
    }
  }
}
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002284:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b40      	cmp	r3, #64	@ 0x40
 8002294:	d108      	bne.n	80022a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68ba      	ldr	r2, [r7, #8]
 80022a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022a6:	e007      	b.n	80022b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68ba      	ldr	r2, [r7, #8]
 80022ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	60da      	str	r2, [r3, #12]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	3b10      	subs	r3, #16
 80022d4:	4a14      	ldr	r2, [pc, #80]	@ (8002328 <DMA_CalcBaseAndBitshift+0x64>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	091b      	lsrs	r3, r3, #4
 80022dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022de:	4a13      	ldr	r2, [pc, #76]	@ (800232c <DMA_CalcBaseAndBitshift+0x68>)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4413      	add	r3, r2
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	461a      	mov	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d909      	bls.n	8002306 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022fa:	f023 0303 	bic.w	r3, r3, #3
 80022fe:	1d1a      	adds	r2, r3, #4
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	659a      	str	r2, [r3, #88]	@ 0x58
 8002304:	e007      	b.n	8002316 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800230e:	f023 0303 	bic.w	r3, r3, #3
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800231a:	4618      	mov	r0, r3
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	aaaaaaab 	.word	0xaaaaaaab
 800232c:	0800938c 	.word	0x0800938c

08002330 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002340:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d11f      	bne.n	800238a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d856      	bhi.n	80023fe <DMA_CheckFifoParam+0xce>
 8002350:	a201      	add	r2, pc, #4	@ (adr r2, 8002358 <DMA_CheckFifoParam+0x28>)
 8002352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002356:	bf00      	nop
 8002358:	08002369 	.word	0x08002369
 800235c:	0800237b 	.word	0x0800237b
 8002360:	08002369 	.word	0x08002369
 8002364:	080023ff 	.word	0x080023ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d046      	beq.n	8002402 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002378:	e043      	b.n	8002402 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800237e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002382:	d140      	bne.n	8002406 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002388:	e03d      	b.n	8002406 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002392:	d121      	bne.n	80023d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b03      	cmp	r3, #3
 8002398:	d837      	bhi.n	800240a <DMA_CheckFifoParam+0xda>
 800239a:	a201      	add	r2, pc, #4	@ (adr r2, 80023a0 <DMA_CheckFifoParam+0x70>)
 800239c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a0:	080023b1 	.word	0x080023b1
 80023a4:	080023b7 	.word	0x080023b7
 80023a8:	080023b1 	.word	0x080023b1
 80023ac:	080023c9 	.word	0x080023c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
      break;
 80023b4:	e030      	b.n	8002418 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d025      	beq.n	800240e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c6:	e022      	b.n	800240e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023d0:	d11f      	bne.n	8002412 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023d6:	e01c      	b.n	8002412 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d903      	bls.n	80023e6 <DMA_CheckFifoParam+0xb6>
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d003      	beq.n	80023ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023e4:	e018      	b.n	8002418 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	73fb      	strb	r3, [r7, #15]
      break;
 80023ea:	e015      	b.n	8002418 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00e      	beq.n	8002416 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
      break;
 80023fc:	e00b      	b.n	8002416 <DMA_CheckFifoParam+0xe6>
      break;
 80023fe:	bf00      	nop
 8002400:	e00a      	b.n	8002418 <DMA_CheckFifoParam+0xe8>
      break;
 8002402:	bf00      	nop
 8002404:	e008      	b.n	8002418 <DMA_CheckFifoParam+0xe8>
      break;
 8002406:	bf00      	nop
 8002408:	e006      	b.n	8002418 <DMA_CheckFifoParam+0xe8>
      break;
 800240a:	bf00      	nop
 800240c:	e004      	b.n	8002418 <DMA_CheckFifoParam+0xe8>
      break;
 800240e:	bf00      	nop
 8002410:	e002      	b.n	8002418 <DMA_CheckFifoParam+0xe8>
      break;   
 8002412:	bf00      	nop
 8002414:	e000      	b.n	8002418 <DMA_CheckFifoParam+0xe8>
      break;
 8002416:	bf00      	nop
    }
  } 
  
  return status; 
 8002418:	7bfb      	ldrb	r3, [r7, #15]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop

08002428 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	@ 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	e159      	b.n	80026f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002444:	2201      	movs	r2, #1
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4013      	ands	r3, r2
 8002456:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	429a      	cmp	r2, r3
 800245e:	f040 8148 	bne.w	80026f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b01      	cmp	r3, #1
 800246c:	d005      	beq.n	800247a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002476:	2b02      	cmp	r3, #2
 8002478:	d130      	bne.n	80024dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	2203      	movs	r2, #3
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4013      	ands	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024b0:	2201      	movs	r2, #1
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	091b      	lsrs	r3, r3, #4
 80024c6:	f003 0201 	and.w	r2, r3, #1
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d017      	beq.n	8002518 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	2203      	movs	r2, #3
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d123      	bne.n	800256c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	08da      	lsrs	r2, r3, #3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3208      	adds	r2, #8
 800252c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	220f      	movs	r2, #15
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	691a      	ldr	r2, [r3, #16]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	08da      	lsrs	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3208      	adds	r2, #8
 8002566:	69b9      	ldr	r1, [r7, #24]
 8002568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	2203      	movs	r2, #3
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0203 	and.w	r2, r3, #3
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 80a2 	beq.w	80026f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	4b57      	ldr	r3, [pc, #348]	@ (8002710 <HAL_GPIO_Init+0x2e8>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	4a56      	ldr	r2, [pc, #344]	@ (8002710 <HAL_GPIO_Init+0x2e8>)
 80025b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025be:	4b54      	ldr	r3, [pc, #336]	@ (8002710 <HAL_GPIO_Init+0x2e8>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ca:	4a52      	ldr	r2, [pc, #328]	@ (8002714 <HAL_GPIO_Init+0x2ec>)
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	089b      	lsrs	r3, r3, #2
 80025d0:	3302      	adds	r3, #2
 80025d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	220f      	movs	r2, #15
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a49      	ldr	r2, [pc, #292]	@ (8002718 <HAL_GPIO_Init+0x2f0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d019      	beq.n	800262a <HAL_GPIO_Init+0x202>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a48      	ldr	r2, [pc, #288]	@ (800271c <HAL_GPIO_Init+0x2f4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d013      	beq.n	8002626 <HAL_GPIO_Init+0x1fe>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a47      	ldr	r2, [pc, #284]	@ (8002720 <HAL_GPIO_Init+0x2f8>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d00d      	beq.n	8002622 <HAL_GPIO_Init+0x1fa>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a46      	ldr	r2, [pc, #280]	@ (8002724 <HAL_GPIO_Init+0x2fc>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d007      	beq.n	800261e <HAL_GPIO_Init+0x1f6>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a45      	ldr	r2, [pc, #276]	@ (8002728 <HAL_GPIO_Init+0x300>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d101      	bne.n	800261a <HAL_GPIO_Init+0x1f2>
 8002616:	2304      	movs	r3, #4
 8002618:	e008      	b.n	800262c <HAL_GPIO_Init+0x204>
 800261a:	2307      	movs	r3, #7
 800261c:	e006      	b.n	800262c <HAL_GPIO_Init+0x204>
 800261e:	2303      	movs	r3, #3
 8002620:	e004      	b.n	800262c <HAL_GPIO_Init+0x204>
 8002622:	2302      	movs	r3, #2
 8002624:	e002      	b.n	800262c <HAL_GPIO_Init+0x204>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_GPIO_Init+0x204>
 800262a:	2300      	movs	r3, #0
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	f002 0203 	and.w	r2, r2, #3
 8002632:	0092      	lsls	r2, r2, #2
 8002634:	4093      	lsls	r3, r2
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800263c:	4935      	ldr	r1, [pc, #212]	@ (8002714 <HAL_GPIO_Init+0x2ec>)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	089b      	lsrs	r3, r3, #2
 8002642:	3302      	adds	r3, #2
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800264a:	4b38      	ldr	r3, [pc, #224]	@ (800272c <HAL_GPIO_Init+0x304>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800266e:	4a2f      	ldr	r2, [pc, #188]	@ (800272c <HAL_GPIO_Init+0x304>)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002674:	4b2d      	ldr	r3, [pc, #180]	@ (800272c <HAL_GPIO_Init+0x304>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002698:	4a24      	ldr	r2, [pc, #144]	@ (800272c <HAL_GPIO_Init+0x304>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800269e:	4b23      	ldr	r3, [pc, #140]	@ (800272c <HAL_GPIO_Init+0x304>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026c2:	4a1a      	ldr	r2, [pc, #104]	@ (800272c <HAL_GPIO_Init+0x304>)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c8:	4b18      	ldr	r3, [pc, #96]	@ (800272c <HAL_GPIO_Init+0x304>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ec:	4a0f      	ldr	r2, [pc, #60]	@ (800272c <HAL_GPIO_Init+0x304>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3301      	adds	r3, #1
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	2b0f      	cmp	r3, #15
 80026fc:	f67f aea2 	bls.w	8002444 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3724      	adds	r7, #36	@ 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800
 8002714:	40013800 	.word	0x40013800
 8002718:	40020000 	.word	0x40020000
 800271c:	40020400 	.word	0x40020400
 8002720:	40020800 	.word	0x40020800
 8002724:	40020c00 	.word	0x40020c00
 8002728:	40021000 	.word	0x40021000
 800272c:	40013c00 	.word	0x40013c00

08002730 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af02      	add	r7, sp, #8
 8002736:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e101      	b.n	8002946 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d106      	bne.n	8002762 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f006 fa7b 	bl	8008c58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2203      	movs	r2, #3
 8002766:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002770:	d102      	bne.n	8002778 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f002 fe68 	bl	8005452 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	7c1a      	ldrb	r2, [r3, #16]
 800278a:	f88d 2000 	strb.w	r2, [sp]
 800278e:	3304      	adds	r3, #4
 8002790:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002792:	f002 fd47 	bl	8005224 <USB_CoreInit>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d005      	beq.n	80027a8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0ce      	b.n	8002946 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f002 fe60 	bl	8005474 <USB_SetCurrentMode>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d005      	beq.n	80027c6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2202      	movs	r2, #2
 80027be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e0bf      	b.n	8002946 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027c6:	2300      	movs	r3, #0
 80027c8:	73fb      	strb	r3, [r7, #15]
 80027ca:	e04a      	b.n	8002862 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80027cc:	7bfa      	ldrb	r2, [r7, #15]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	3315      	adds	r3, #21
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	3314      	adds	r3, #20
 80027f0:	7bfa      	ldrb	r2, [r7, #15]
 80027f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027f4:	7bfa      	ldrb	r2, [r7, #15]
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	b298      	uxth	r0, r3
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	332e      	adds	r3, #46	@ 0x2e
 8002808:	4602      	mov	r2, r0
 800280a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800280c:	7bfa      	ldrb	r2, [r7, #15]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	3318      	adds	r3, #24
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002820:	7bfa      	ldrb	r2, [r7, #15]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	331c      	adds	r3, #28
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002834:	7bfa      	ldrb	r2, [r7, #15]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	3320      	adds	r3, #32
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002848:	7bfa      	ldrb	r2, [r7, #15]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4413      	add	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	3324      	adds	r3, #36	@ 0x24
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	3301      	adds	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	791b      	ldrb	r3, [r3, #4]
 8002866:	7bfa      	ldrb	r2, [r7, #15]
 8002868:	429a      	cmp	r2, r3
 800286a:	d3af      	bcc.n	80027cc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800286c:	2300      	movs	r3, #0
 800286e:	73fb      	strb	r3, [r7, #15]
 8002870:	e044      	b.n	80028fc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002872:	7bfa      	ldrb	r2, [r7, #15]
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	440b      	add	r3, r1
 8002880:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002888:	7bfa      	ldrb	r2, [r7, #15]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800289a:	7bfa      	ldrb	r2, [r7, #15]
 800289c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800289e:	7bfa      	ldrb	r2, [r7, #15]
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80028b4:	7bfa      	ldrb	r2, [r7, #15]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028ca:	7bfa      	ldrb	r2, [r7, #15]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028e0:	7bfa      	ldrb	r2, [r7, #15]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4413      	add	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	3301      	adds	r3, #1
 80028fa:	73fb      	strb	r3, [r7, #15]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	791b      	ldrb	r3, [r3, #4]
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	429a      	cmp	r2, r3
 8002904:	d3b5      	bcc.n	8002872 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	7c1a      	ldrb	r2, [r3, #16]
 800290e:	f88d 2000 	strb.w	r2, [sp]
 8002912:	3304      	adds	r3, #4
 8002914:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002916:	f002 fdf9 	bl	800550c <USB_DevInit>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e00c      	b.n	8002946 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f003 fe3d 	bl	80065be <USB_DevDisconnect>

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_PCD_Start+0x1c>
 8002966:	2302      	movs	r3, #2
 8002968:	e022      	b.n	80029b0 <HAL_PCD_Start+0x62>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d009      	beq.n	8002992 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002982:	2b01      	cmp	r3, #1
 8002984:	d105      	bne.n	8002992 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f002 fd4a 	bl	8005430 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f003 fdeb 	bl	800657c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	b08d      	sub	sp, #52	@ 0x34
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f003 fea9 	bl	8006726 <USB_GetMode>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f040 848c 	bne.w	80032f4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f003 fe0d 	bl	8006600 <USB_ReadInterrupts>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 8482 	beq.w	80032f2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f003 fdfa 	bl	8006600 <USB_ReadInterrupts>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d107      	bne.n	8002a26 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695a      	ldr	r2, [r3, #20]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f002 0202 	and.w	r2, r2, #2
 8002a24:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f003 fde8 	bl	8006600 <USB_ReadInterrupts>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	2b10      	cmp	r3, #16
 8002a38:	d161      	bne.n	8002afe <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699a      	ldr	r2, [r3, #24]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0210 	bic.w	r2, r2, #16
 8002a48:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	f003 020f 	and.w	r2, r3, #15
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	3304      	adds	r3, #4
 8002a68:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	0c5b      	lsrs	r3, r3, #17
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d124      	bne.n	8002ac0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d035      	beq.n	8002aee <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	461a      	mov	r2, r3
 8002a94:	6a38      	ldr	r0, [r7, #32]
 8002a96:	f003 fc1f 	bl	80062d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	091b      	lsrs	r3, r3, #4
 8002aa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aa6:	441a      	add	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	695a      	ldr	r2, [r3, #20]
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ab8:	441a      	add	r2, r3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	615a      	str	r2, [r3, #20]
 8002abe:	e016      	b.n	8002aee <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	0c5b      	lsrs	r3, r3, #17
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	2b06      	cmp	r3, #6
 8002aca:	d110      	bne.n	8002aee <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ad2:	2208      	movs	r2, #8
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	6a38      	ldr	r0, [r7, #32]
 8002ad8:	f003 fbfe 	bl	80062d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	695a      	ldr	r2, [r3, #20]
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	091b      	lsrs	r3, r3, #4
 8002ae4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ae8:	441a      	add	r2, r3
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699a      	ldr	r2, [r3, #24]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0210 	orr.w	r2, r2, #16
 8002afc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f003 fd7c 	bl	8006600 <USB_ReadInterrupts>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b0e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002b12:	f040 80a7 	bne.w	8002c64 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f003 fd81 	bl	8006626 <USB_ReadDevAllOutEpInterrupt>
 8002b24:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002b26:	e099      	b.n	8002c5c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 808e 	beq.w	8002c50 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f003 fda5 	bl	800668e <USB_ReadDevOutEPInterrupt>
 8002b44:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00c      	beq.n	8002b6a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	2301      	movs	r3, #1
 8002b60:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002b62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 fea1 	bl	80038ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00c      	beq.n	8002b8e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b80:	461a      	mov	r2, r3
 8002b82:	2308      	movs	r3, #8
 8002b84:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002b86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 ff77 	bl	8003a7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	2310      	movs	r3, #16
 8002ba8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d030      	beq.n	8002c16 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bbc:	2b80      	cmp	r3, #128	@ 0x80
 8002bbe:	d109      	bne.n	8002bd4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bd2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	4413      	add	r3, r2
 8002be6:	3304      	adds	r3, #4
 8002be8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	78db      	ldrb	r3, [r3, #3]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d108      	bne.n	8002c04 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f006 f926 	bl	8008e50 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c06:	015a      	lsls	r2, r3, #5
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c10:	461a      	mov	r2, r3
 8002c12:	2302      	movs	r3, #2
 8002c14:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	2320      	movs	r3, #32
 8002c30:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d009      	beq.n	8002c50 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3e:	015a      	lsls	r2, r3, #5
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	4413      	add	r3, r2
 8002c44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c4e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c52:	3301      	adds	r3, #1
 8002c54:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c58:	085b      	lsrs	r3, r3, #1
 8002c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f47f af62 	bne.w	8002b28 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f003 fcc9 	bl	8006600 <USB_ReadInterrupts>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c78:	f040 80db 	bne.w	8002e32 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f003 fcea 	bl	800665a <USB_ReadDevAllInEpInterrupt>
 8002c86:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002c8c:	e0cd      	b.n	8002e2a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80c2 	beq.w	8002e1e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f003 fd10 	bl	80066ca <USB_ReadDevInEPInterrupt>
 8002caa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d057      	beq.n	8002d66 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb8:	f003 030f 	and.w	r3, r3, #15
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	69f9      	ldr	r1, [r7, #28]
 8002cd2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	015a      	lsls	r2, r3, #5
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	2301      	movs	r3, #1
 8002cea:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	799b      	ldrb	r3, [r3, #6]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d132      	bne.n	8002d5a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	3320      	adds	r3, #32
 8002d04:	6819      	ldr	r1, [r3, #0]
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4403      	add	r3, r0
 8002d14:	331c      	adds	r3, #28
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4419      	add	r1, r3
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	4413      	add	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4403      	add	r3, r0
 8002d28:	3320      	adds	r3, #32
 8002d2a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d113      	bne.n	8002d5a <HAL_PCD_IRQHandler+0x3a2>
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	440b      	add	r3, r1
 8002d40:	3324      	adds	r3, #36	@ 0x24
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d108      	bne.n	8002d5a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d52:	461a      	mov	r2, r3
 8002d54:	2101      	movs	r1, #1
 8002d56:	f003 fd17 	bl	8006788 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	4619      	mov	r1, r3
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f005 fffa 	bl	8008d5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	015a      	lsls	r2, r3, #5
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	2308      	movs	r3, #8
 8002d80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d008      	beq.n	8002d9e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d98:	461a      	mov	r2, r3
 8002d9a:	2310      	movs	r3, #16
 8002d9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002db4:	461a      	mov	r2, r3
 8002db6:	2340      	movs	r3, #64	@ 0x40
 8002db8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d023      	beq.n	8002e0c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002dc4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dc6:	6a38      	ldr	r0, [r7, #32]
 8002dc8:	f002 fd04 	bl	80057d4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	3310      	adds	r3, #16
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	4413      	add	r3, r2
 8002ddc:	3304      	adds	r3, #4
 8002dde:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	78db      	ldrb	r3, [r3, #3]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d108      	bne.n	8002dfa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2200      	movs	r2, #0
 8002dec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	4619      	mov	r1, r3
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f006 f83d 	bl	8008e74 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfc:	015a      	lsls	r2, r3, #5
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	4413      	add	r3, r2
 8002e02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e06:	461a      	mov	r2, r3
 8002e08:	2302      	movs	r3, #2
 8002e0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002e16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fcbb 	bl	8003794 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	3301      	adds	r3, #1
 8002e22:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f47f af2e 	bne.w	8002c8e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f003 fbe2 	bl	8006600 <USB_ReadInterrupts>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e46:	d122      	bne.n	8002e8e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e56:	f023 0301 	bic.w	r3, r3, #1
 8002e5a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d108      	bne.n	8002e78 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e6e:	2100      	movs	r1, #0
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 fea1 	bl	8003bb8 <HAL_PCDEx_LPM_Callback>
 8002e76:	e002      	b.n	8002e7e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f005 ffdb 	bl	8008e34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695a      	ldr	r2, [r3, #20]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002e8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f003 fbb4 	bl	8006600 <USB_ReadInterrupts>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ea2:	d112      	bne.n	8002eca <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d102      	bne.n	8002eba <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f005 ff97 	bl	8008de8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002ec8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f003 fb96 	bl	8006600 <USB_ReadInterrupts>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ede:	f040 80b7 	bne.w	8003050 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	69fa      	ldr	r2, [r7, #28]
 8002eec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ef0:	f023 0301 	bic.w	r3, r3, #1
 8002ef4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2110      	movs	r1, #16
 8002efc:	4618      	mov	r0, r3
 8002efe:	f002 fc69 	bl	80057d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f02:	2300      	movs	r3, #0
 8002f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f06:	e046      	b.n	8002f96 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f0a:	015a      	lsls	r2, r3, #5
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	4413      	add	r3, r2
 8002f10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f14:	461a      	mov	r2, r3
 8002f16:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f1a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f2c:	0151      	lsls	r1, r2, #5
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	440a      	add	r2, r1
 8002f32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002f36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f48:	461a      	mov	r2, r3
 8002f4a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f4e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f60:	0151      	lsls	r1, r2, #5
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	440a      	add	r2, r1
 8002f66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002f6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002f6e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f80:	0151      	lsls	r1, r2, #5
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	440a      	add	r2, r1
 8002f86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002f8a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002f8e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f92:	3301      	adds	r3, #1
 8002f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	791b      	ldrb	r3, [r3, #4]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d3b2      	bcc.n	8002f08 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	69fa      	ldr	r2, [r7, #28]
 8002fac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fb0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002fb4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	7bdb      	ldrb	r3, [r3, #15]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d016      	beq.n	8002fec <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fce:	f043 030b 	orr.w	r3, r3, #11
 8002fd2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fde:	69fa      	ldr	r2, [r7, #28]
 8002fe0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fe4:	f043 030b 	orr.w	r3, r3, #11
 8002fe8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fea:	e015      	b.n	8003018 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ffa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ffe:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003002:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	69fa      	ldr	r2, [r7, #28]
 800300e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003012:	f043 030b 	orr.w	r3, r3, #11
 8003016:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003026:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800302a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800303a:	461a      	mov	r2, r3
 800303c:	f003 fba4 	bl	8006788 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800304e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4618      	mov	r0, r3
 8003056:	f003 fad3 	bl	8006600 <USB_ReadInterrupts>
 800305a:	4603      	mov	r3, r0
 800305c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003060:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003064:	d123      	bne.n	80030ae <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f003 fb69 	bl	8006742 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f002 fc26 	bl	80058c6 <USB_GetDevSpeed>
 800307a:	4603      	mov	r3, r0
 800307c:	461a      	mov	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681c      	ldr	r4, [r3, #0]
 8003086:	f001 f9c7 	bl	8004418 <HAL_RCC_GetHCLKFreq>
 800308a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003090:	461a      	mov	r2, r3
 8003092:	4620      	mov	r0, r4
 8003094:	f002 f92a 	bl	80052ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f005 fe86 	bl	8008daa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695a      	ldr	r2, [r3, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80030ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f003 faa4 	bl	8006600 <USB_ReadInterrupts>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b08      	cmp	r3, #8
 80030c0:	d10a      	bne.n	80030d8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f005 fe63 	bl	8008d8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f002 0208 	and.w	r2, r2, #8
 80030d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f003 fa8f 	bl	8006600 <USB_ReadInterrupts>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e8:	2b80      	cmp	r3, #128	@ 0x80
 80030ea:	d123      	bne.n	8003134 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030f8:	2301      	movs	r3, #1
 80030fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80030fc:	e014      	b.n	8003128 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003102:	4613      	mov	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d105      	bne.n	8003122 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003118:	b2db      	uxtb	r3, r3
 800311a:	4619      	mov	r1, r3
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fb08 	bl	8003732 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	3301      	adds	r3, #1
 8003126:	627b      	str	r3, [r7, #36]	@ 0x24
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	791b      	ldrb	r3, [r3, #4]
 800312c:	461a      	mov	r2, r3
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	4293      	cmp	r3, r2
 8003132:	d3e4      	bcc.n	80030fe <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f003 fa61 	bl	8006600 <USB_ReadInterrupts>
 800313e:	4603      	mov	r3, r0
 8003140:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003144:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003148:	d13c      	bne.n	80031c4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800314a:	2301      	movs	r3, #1
 800314c:	627b      	str	r3, [r7, #36]	@ 0x24
 800314e:	e02b      	b.n	80031a8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	4413      	add	r3, r2
 8003158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	3318      	adds	r3, #24
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d115      	bne.n	80031a2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003176:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003178:	2b00      	cmp	r3, #0
 800317a:	da12      	bge.n	80031a2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	3317      	adds	r3, #23
 800318c:	2201      	movs	r2, #1
 800318e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	b2db      	uxtb	r3, r3
 8003194:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003198:	b2db      	uxtb	r3, r3
 800319a:	4619      	mov	r1, r3
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 fac8 	bl	8003732 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a4:	3301      	adds	r3, #1
 80031a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	791b      	ldrb	r3, [r3, #4]
 80031ac:	461a      	mov	r2, r3
 80031ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d3cd      	bcc.n	8003150 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695a      	ldr	r2, [r3, #20]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80031c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f003 fa19 	bl	8006600 <USB_ReadInterrupts>
 80031ce:	4603      	mov	r3, r0
 80031d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031d8:	d156      	bne.n	8003288 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031da:	2301      	movs	r3, #1
 80031dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80031de:	e045      	b.n	800326c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80031e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f4:	4613      	mov	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d12e      	bne.n	8003266 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003208:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800320a:	2b00      	cmp	r3, #0
 800320c:	da2b      	bge.n	8003266 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800321a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800321e:	429a      	cmp	r2, r3
 8003220:	d121      	bne.n	8003266 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003226:	4613      	mov	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003234:	2201      	movs	r2, #1
 8003236:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10a      	bne.n	8003266 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800325e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003262:	6053      	str	r3, [r2, #4]
            break;
 8003264:	e008      	b.n	8003278 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003268:	3301      	adds	r3, #1
 800326a:	627b      	str	r3, [r7, #36]	@ 0x24
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	791b      	ldrb	r3, [r3, #4]
 8003270:	461a      	mov	r2, r3
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003274:	4293      	cmp	r3, r2
 8003276:	d3b3      	bcc.n	80031e0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695a      	ldr	r2, [r3, #20]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003286:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f003 f9b7 	bl	8006600 <USB_ReadInterrupts>
 8003292:	4603      	mov	r3, r0
 8003294:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003298:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800329c:	d10a      	bne.n	80032b4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f005 fdfa 	bl	8008e98 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80032b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f003 f9a1 	bl	8006600 <USB_ReadInterrupts>
 80032be:	4603      	mov	r3, r0
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d115      	bne.n	80032f4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f005 fdea 	bl	8008eb4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6859      	ldr	r1, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	605a      	str	r2, [r3, #4]
 80032f0:	e000      	b.n	80032f4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80032f2:	bf00      	nop
    }
  }
}
 80032f4:	3734      	adds	r7, #52	@ 0x34
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd90      	pop	{r4, r7, pc}

080032fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
 8003302:	460b      	mov	r3, r1
 8003304:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_PCD_SetAddress+0x1a>
 8003310:	2302      	movs	r3, #2
 8003312:	e012      	b.n	800333a <HAL_PCD_SetAddress+0x40>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	4611      	mov	r1, r2
 800332a:	4618      	mov	r0, r3
 800332c:	f003 f900 	bl	8006530 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b084      	sub	sp, #16
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	4608      	mov	r0, r1
 800334c:	4611      	mov	r1, r2
 800334e:	461a      	mov	r2, r3
 8003350:	4603      	mov	r3, r0
 8003352:	70fb      	strb	r3, [r7, #3]
 8003354:	460b      	mov	r3, r1
 8003356:	803b      	strh	r3, [r7, #0]
 8003358:	4613      	mov	r3, r2
 800335a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003360:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003364:	2b00      	cmp	r3, #0
 8003366:	da0f      	bge.n	8003388 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	f003 020f 	and.w	r2, r3, #15
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	3310      	adds	r3, #16
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	4413      	add	r3, r2
 800337c:	3304      	adds	r3, #4
 800337e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2201      	movs	r2, #1
 8003384:	705a      	strb	r2, [r3, #1]
 8003386:	e00f      	b.n	80033a8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	f003 020f 	and.w	r2, r3, #15
 800338e:	4613      	mov	r3, r2
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	4413      	add	r3, r2
 800339e:	3304      	adds	r3, #4
 80033a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80033b4:	883a      	ldrh	r2, [r7, #0]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	78ba      	ldrb	r2, [r7, #2]
 80033be:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	785b      	ldrb	r3, [r3, #1]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d004      	beq.n	80033d2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	461a      	mov	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80033d2:	78bb      	ldrb	r3, [r7, #2]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d102      	bne.n	80033de <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_PCD_EP_Open+0xaa>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e00e      	b.n	800340a <HAL_PCD_EP_Open+0xc8>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68f9      	ldr	r1, [r7, #12]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f002 fa88 	bl	8005910 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003408:	7afb      	ldrb	r3, [r7, #11]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b084      	sub	sp, #16
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	460b      	mov	r3, r1
 800341c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800341e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003422:	2b00      	cmp	r3, #0
 8003424:	da0f      	bge.n	8003446 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003426:	78fb      	ldrb	r3, [r7, #3]
 8003428:	f003 020f 	and.w	r2, r3, #15
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	3310      	adds	r3, #16
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4413      	add	r3, r2
 800343a:	3304      	adds	r3, #4
 800343c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2201      	movs	r2, #1
 8003442:	705a      	strb	r2, [r3, #1]
 8003444:	e00f      	b.n	8003466 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	f003 020f 	and.w	r2, r3, #15
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	4413      	add	r3, r2
 800345c:	3304      	adds	r3, #4
 800345e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	f003 030f 	and.w	r3, r3, #15
 800346c:	b2da      	uxtb	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_PCD_EP_Close+0x6e>
 800347c:	2302      	movs	r3, #2
 800347e:	e00e      	b.n	800349e <HAL_PCD_EP_Close+0x8c>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68f9      	ldr	r1, [r7, #12]
 800348e:	4618      	mov	r0, r3
 8003490:	f002 fac6 	bl	8005a20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b086      	sub	sp, #24
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	60f8      	str	r0, [r7, #12]
 80034ae:	607a      	str	r2, [r7, #4]
 80034b0:	603b      	str	r3, [r7, #0]
 80034b2:	460b      	mov	r3, r1
 80034b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034b6:	7afb      	ldrb	r3, [r7, #11]
 80034b8:	f003 020f 	and.w	r2, r3, #15
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	4413      	add	r3, r2
 80034cc:	3304      	adds	r3, #4
 80034ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2200      	movs	r2, #0
 80034e0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	2200      	movs	r2, #0
 80034e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034e8:	7afb      	ldrb	r3, [r7, #11]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	799b      	ldrb	r3, [r3, #6]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d102      	bne.n	8003502 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	799b      	ldrb	r3, [r3, #6]
 800350a:	461a      	mov	r2, r3
 800350c:	6979      	ldr	r1, [r7, #20]
 800350e:	f002 fb63 	bl	8005bd8 <USB_EPStartXfer>

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	f003 020f 	and.w	r2, r3, #15
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800353e:	681b      	ldr	r3, [r3, #0]
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	607a      	str	r2, [r7, #4]
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	460b      	mov	r3, r1
 800355a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800355c:	7afb      	ldrb	r3, [r7, #11]
 800355e:	f003 020f 	and.w	r2, r3, #15
 8003562:	4613      	mov	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	3310      	adds	r3, #16
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4413      	add	r3, r2
 8003570:	3304      	adds	r3, #4
 8003572:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2200      	movs	r2, #0
 8003584:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2201      	movs	r2, #1
 800358a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800358c:	7afb      	ldrb	r3, [r7, #11]
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	b2da      	uxtb	r2, r3
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	799b      	ldrb	r3, [r3, #6]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d102      	bne.n	80035a6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	799b      	ldrb	r3, [r3, #6]
 80035ae:	461a      	mov	r2, r3
 80035b0:	6979      	ldr	r1, [r7, #20]
 80035b2:	f002 fb11 	bl	8005bd8 <USB_EPStartXfer>

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	7912      	ldrb	r2, [r2, #4]
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e04f      	b.n	800367e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	da0f      	bge.n	8003606 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035e6:	78fb      	ldrb	r3, [r7, #3]
 80035e8:	f003 020f 	and.w	r2, r3, #15
 80035ec:	4613      	mov	r3, r2
 80035ee:	00db      	lsls	r3, r3, #3
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	3310      	adds	r3, #16
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	4413      	add	r3, r2
 80035fa:	3304      	adds	r3, #4
 80035fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2201      	movs	r2, #1
 8003602:	705a      	strb	r2, [r3, #1]
 8003604:	e00d      	b.n	8003622 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003606:	78fa      	ldrb	r2, [r7, #3]
 8003608:	4613      	mov	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	4413      	add	r3, r2
 8003618:	3304      	adds	r3, #4
 800361a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2201      	movs	r2, #1
 8003626:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	b2da      	uxtb	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_PCD_EP_SetStall+0x82>
 800363e:	2302      	movs	r3, #2
 8003640:	e01d      	b.n	800367e <HAL_PCD_EP_SetStall+0xbe>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68f9      	ldr	r1, [r7, #12]
 8003650:	4618      	mov	r0, r3
 8003652:	f002 fe99 	bl	8006388 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	2b00      	cmp	r3, #0
 800365e:	d109      	bne.n	8003674 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	7999      	ldrb	r1, [r3, #6]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800366e:	461a      	mov	r2, r3
 8003670:	f003 f88a 	bl	8006788 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	460b      	mov	r3, r1
 8003690:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	f003 030f 	and.w	r3, r3, #15
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	7912      	ldrb	r2, [r2, #4]
 800369c:	4293      	cmp	r3, r2
 800369e:	d901      	bls.n	80036a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e042      	b.n	800372a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	da0f      	bge.n	80036cc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036ac:	78fb      	ldrb	r3, [r7, #3]
 80036ae:	f003 020f 	and.w	r2, r3, #15
 80036b2:	4613      	mov	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	3310      	adds	r3, #16
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	4413      	add	r3, r2
 80036c0:	3304      	adds	r3, #4
 80036c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2201      	movs	r2, #1
 80036c8:	705a      	strb	r2, [r3, #1]
 80036ca:	e00f      	b.n	80036ec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	f003 020f 	and.w	r2, r3, #15
 80036d2:	4613      	mov	r3, r2
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4413      	add	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	4413      	add	r3, r2
 80036e2:	3304      	adds	r3, #4
 80036e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036f2:	78fb      	ldrb	r3, [r7, #3]
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_PCD_EP_ClrStall+0x86>
 8003708:	2302      	movs	r3, #2
 800370a:	e00e      	b.n	800372a <HAL_PCD_EP_ClrStall+0xa4>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68f9      	ldr	r1, [r7, #12]
 800371a:	4618      	mov	r0, r3
 800371c:	f002 fea2 	bl	8006464 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b084      	sub	sp, #16
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	460b      	mov	r3, r1
 800373c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800373e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003742:	2b00      	cmp	r3, #0
 8003744:	da0c      	bge.n	8003760 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003746:	78fb      	ldrb	r3, [r7, #3]
 8003748:	f003 020f 	and.w	r2, r3, #15
 800374c:	4613      	mov	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	3310      	adds	r3, #16
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	4413      	add	r3, r2
 800375a:	3304      	adds	r3, #4
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	e00c      	b.n	800377a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	f003 020f 	and.w	r2, r3, #15
 8003766:	4613      	mov	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	4413      	add	r3, r2
 8003776:	3304      	adds	r3, #4
 8003778:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68f9      	ldr	r1, [r7, #12]
 8003780:	4618      	mov	r0, r3
 8003782:	f002 fcc1 	bl	8006108 <USB_EPStopXfer>
 8003786:	4603      	mov	r3, r0
 8003788:	72fb      	strb	r3, [r7, #11]

  return ret;
 800378a:	7afb      	ldrb	r3, [r7, #11]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	@ 0x28
 8003798:	af02      	add	r7, sp, #8
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	3310      	adds	r3, #16
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	4413      	add	r3, r2
 80037b8:	3304      	adds	r3, #4
 80037ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	695a      	ldr	r2, [r3, #20]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d901      	bls.n	80037cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e06b      	b.n	80038a4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d902      	bls.n	80037e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	3303      	adds	r3, #3
 80037ec:	089b      	lsrs	r3, r3, #2
 80037ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037f0:	e02a      	b.n	8003848 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	69fa      	ldr	r2, [r7, #28]
 8003804:	429a      	cmp	r2, r3
 8003806:	d902      	bls.n	800380e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3303      	adds	r3, #3
 8003812:	089b      	lsrs	r3, r3, #2
 8003814:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	68d9      	ldr	r1, [r3, #12]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	b2da      	uxtb	r2, r3
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	4603      	mov	r3, r0
 800382a:	6978      	ldr	r0, [r7, #20]
 800382c:	f002 fd16 	bl	800625c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	441a      	add	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	695a      	ldr	r2, [r3, #20]
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	441a      	add	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	015a      	lsls	r2, r3, #5
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	4413      	add	r3, r2
 8003850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	429a      	cmp	r2, r3
 800385c:	d809      	bhi.n	8003872 <PCD_WriteEmptyTxFifo+0xde>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	695a      	ldr	r2, [r3, #20]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003866:	429a      	cmp	r2, r3
 8003868:	d203      	bcs.n	8003872 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1bf      	bne.n	80037f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	691a      	ldr	r2, [r3, #16]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	429a      	cmp	r2, r3
 800387c:	d811      	bhi.n	80038a2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	2201      	movs	r2, #1
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003892:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	43db      	mvns	r3, r3
 8003898:	6939      	ldr	r1, [r7, #16]
 800389a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800389e:	4013      	ands	r3, r2
 80038a0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3720      	adds	r7, #32
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	333c      	adds	r3, #60	@ 0x3c
 80038c4:	3304      	adds	r3, #4
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	799b      	ldrb	r3, [r3, #6]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d17b      	bne.n	80039da <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d015      	beq.n	8003918 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	4a61      	ldr	r2, [pc, #388]	@ (8003a74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	f240 80b9 	bls.w	8003a68 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 80b3 	beq.w	8003a68 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	4413      	add	r3, r2
 800390a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800390e:	461a      	mov	r2, r3
 8003910:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003914:	6093      	str	r3, [r2, #8]
 8003916:	e0a7      	b.n	8003a68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f003 0320 	and.w	r3, r3, #32
 800391e:	2b00      	cmp	r3, #0
 8003920:	d009      	beq.n	8003936 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	4413      	add	r3, r2
 800392a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800392e:	461a      	mov	r2, r3
 8003930:	2320      	movs	r3, #32
 8003932:	6093      	str	r3, [r2, #8]
 8003934:	e098      	b.n	8003a68 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800393c:	2b00      	cmp	r3, #0
 800393e:	f040 8093 	bne.w	8003a68 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	4a4b      	ldr	r2, [pc, #300]	@ (8003a74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d90f      	bls.n	800396a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003960:	461a      	mov	r2, r3
 8003962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003966:	6093      	str	r3, [r2, #8]
 8003968:	e07e      	b.n	8003a68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	4613      	mov	r3, r2
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4413      	add	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	4413      	add	r3, r2
 800397c:	3304      	adds	r3, #4
 800397e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a1a      	ldr	r2, [r3, #32]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	0159      	lsls	r1, r3, #5
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	440b      	add	r3, r1
 800398c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003996:	1ad2      	subs	r2, r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d114      	bne.n	80039cc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039b4:	461a      	mov	r2, r3
 80039b6:	2101      	movs	r1, #1
 80039b8:	f002 fee6 	bl	8006788 <USB_EP0_OutStart>
 80039bc:	e006      	b.n	80039cc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	441a      	add	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	4619      	mov	r1, r3
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f005 f9a6 	bl	8008d24 <HAL_PCD_DataOutStageCallback>
 80039d8:	e046      	b.n	8003a68 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	4a26      	ldr	r2, [pc, #152]	@ (8003a78 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d124      	bne.n	8003a2c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039f8:	461a      	mov	r2, r3
 80039fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039fe:	6093      	str	r3, [r2, #8]
 8003a00:	e032      	b.n	8003a68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d008      	beq.n	8003a1e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a18:	461a      	mov	r2, r3
 8003a1a:	2320      	movs	r3, #32
 8003a1c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	4619      	mov	r1, r3
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f005 f97d 	bl	8008d24 <HAL_PCD_DataOutStageCallback>
 8003a2a:	e01d      	b.n	8003a68 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d114      	bne.n	8003a5c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d108      	bne.n	8003a5c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a54:	461a      	mov	r2, r3
 8003a56:	2100      	movs	r1, #0
 8003a58:	f002 fe96 	bl	8006788 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	4619      	mov	r1, r3
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f005 f95e 	bl	8008d24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3720      	adds	r7, #32
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	4f54300a 	.word	0x4f54300a
 8003a78:	4f54310a 	.word	0x4f54310a

08003a7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	333c      	adds	r3, #60	@ 0x3c
 8003a94:	3304      	adds	r3, #4
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4a15      	ldr	r2, [pc, #84]	@ (8003b04 <PCD_EP_OutSetupPacket_int+0x88>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d90e      	bls.n	8003ad0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d009      	beq.n	8003ad0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ace:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f005 f915 	bl	8008d00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8003b04 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d90c      	bls.n	8003af8 <PCD_EP_OutSetupPacket_int+0x7c>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	799b      	ldrb	r3, [r3, #6]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d108      	bne.n	8003af8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003af0:	461a      	mov	r2, r3
 8003af2:	2101      	movs	r1, #1
 8003af4:	f002 fe48 	bl	8006788 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	4f54300a 	.word	0x4f54300a

08003b08 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
 8003b14:	4613      	mov	r3, r2
 8003b16:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d107      	bne.n	8003b36 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003b26:	883b      	ldrh	r3, [r7, #0]
 8003b28:	0419      	lsls	r1, r3, #16
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b34:	e028      	b.n	8003b88 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	4413      	add	r3, r2
 8003b42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b44:	2300      	movs	r3, #0
 8003b46:	73fb      	strb	r3, [r7, #15]
 8003b48:	e00d      	b.n	8003b66 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	3340      	adds	r3, #64	@ 0x40
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	0c1b      	lsrs	r3, r3, #16
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	3301      	adds	r3, #1
 8003b64:	73fb      	strb	r3, [r7, #15]
 8003b66:	7bfa      	ldrb	r2, [r7, #15]
 8003b68:	78fb      	ldrb	r3, [r7, #3]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d3ec      	bcc.n	8003b4a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003b70:	883b      	ldrh	r3, [r7, #0]
 8003b72:	0418      	lsls	r0, r3, #16
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6819      	ldr	r1, [r3, #0]
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	4302      	orrs	r2, r0
 8003b80:	3340      	adds	r3, #64	@ 0x40
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	887a      	ldrh	r2, [r7, #2]
 8003ba8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e267      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d075      	beq.n	8003cda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bee:	4b88      	ldr	r3, [pc, #544]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d00c      	beq.n	8003c14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfa:	4b85      	ldr	r3, [pc, #532]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d112      	bne.n	8003c2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c06:	4b82      	ldr	r3, [pc, #520]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c12:	d10b      	bne.n	8003c2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c14:	4b7e      	ldr	r3, [pc, #504]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d05b      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x108>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d157      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e242      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c34:	d106      	bne.n	8003c44 <HAL_RCC_OscConfig+0x74>
 8003c36:	4b76      	ldr	r3, [pc, #472]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a75      	ldr	r2, [pc, #468]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e01d      	b.n	8003c80 <HAL_RCC_OscConfig+0xb0>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c4c:	d10c      	bne.n	8003c68 <HAL_RCC_OscConfig+0x98>
 8003c4e:	4b70      	ldr	r3, [pc, #448]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a6f      	ldr	r2, [pc, #444]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a6c      	ldr	r2, [pc, #432]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	e00b      	b.n	8003c80 <HAL_RCC_OscConfig+0xb0>
 8003c68:	4b69      	ldr	r3, [pc, #420]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a68      	ldr	r2, [pc, #416]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	4b66      	ldr	r3, [pc, #408]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a65      	ldr	r2, [pc, #404]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d013      	beq.n	8003cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c88:	f7fd fa6a 	bl	8001160 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c90:	f7fd fa66 	bl	8001160 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b64      	cmp	r3, #100	@ 0x64
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e207      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca2:	4b5b      	ldr	r3, [pc, #364]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0xc0>
 8003cae:	e014      	b.n	8003cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7fd fa56 	bl	8001160 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb8:	f7fd fa52 	bl	8001160 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	@ 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e1f3      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cca:	4b51      	ldr	r3, [pc, #324]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0xe8>
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d063      	beq.n	8003dae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ce6:	4b4a      	ldr	r3, [pc, #296]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00b      	beq.n	8003d0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cf2:	4b47      	ldr	r3, [pc, #284]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d11c      	bne.n	8003d38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfe:	4b44      	ldr	r3, [pc, #272]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d116      	bne.n	8003d38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d0a:	4b41      	ldr	r3, [pc, #260]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d005      	beq.n	8003d22 <HAL_RCC_OscConfig+0x152>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e1c7      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d22:	4b3b      	ldr	r3, [pc, #236]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4937      	ldr	r1, [pc, #220]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d36:	e03a      	b.n	8003dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d020      	beq.n	8003d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d40:	4b34      	ldr	r3, [pc, #208]	@ (8003e14 <HAL_RCC_OscConfig+0x244>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d46:	f7fd fa0b 	bl	8001160 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d4e:	f7fd fa07 	bl	8001160 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e1a8      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d60:	4b2b      	ldr	r3, [pc, #172]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f0      	beq.n	8003d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6c:	4b28      	ldr	r3, [pc, #160]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	4925      	ldr	r1, [pc, #148]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	600b      	str	r3, [r1, #0]
 8003d80:	e015      	b.n	8003dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d82:	4b24      	ldr	r3, [pc, #144]	@ (8003e14 <HAL_RCC_OscConfig+0x244>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7fd f9ea 	bl	8001160 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d90:	f7fd f9e6 	bl	8001160 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e187      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da2:	4b1b      	ldr	r3, [pc, #108]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d036      	beq.n	8003e28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d016      	beq.n	8003df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dc2:	4b15      	ldr	r3, [pc, #84]	@ (8003e18 <HAL_RCC_OscConfig+0x248>)
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc8:	f7fd f9ca 	bl	8001160 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd0:	f7fd f9c6 	bl	8001160 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e167      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de2:	4b0b      	ldr	r3, [pc, #44]	@ (8003e10 <HAL_RCC_OscConfig+0x240>)
 8003de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x200>
 8003dee:	e01b      	b.n	8003e28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df0:	4b09      	ldr	r3, [pc, #36]	@ (8003e18 <HAL_RCC_OscConfig+0x248>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df6:	f7fd f9b3 	bl	8001160 <HAL_GetTick>
 8003dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dfc:	e00e      	b.n	8003e1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dfe:	f7fd f9af 	bl	8001160 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d907      	bls.n	8003e1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e150      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
 8003e10:	40023800 	.word	0x40023800
 8003e14:	42470000 	.word	0x42470000
 8003e18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e1c:	4b88      	ldr	r3, [pc, #544]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1ea      	bne.n	8003dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 8097 	beq.w	8003f64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e36:	2300      	movs	r3, #0
 8003e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3a:	4b81      	ldr	r3, [pc, #516]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10f      	bne.n	8003e66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e46:	2300      	movs	r3, #0
 8003e48:	60bb      	str	r3, [r7, #8]
 8003e4a:	4b7d      	ldr	r3, [pc, #500]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	4a7c      	ldr	r2, [pc, #496]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e56:	4b7a      	ldr	r3, [pc, #488]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e5e:	60bb      	str	r3, [r7, #8]
 8003e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e62:	2301      	movs	r3, #1
 8003e64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e66:	4b77      	ldr	r3, [pc, #476]	@ (8004044 <HAL_RCC_OscConfig+0x474>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d118      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e72:	4b74      	ldr	r3, [pc, #464]	@ (8004044 <HAL_RCC_OscConfig+0x474>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a73      	ldr	r2, [pc, #460]	@ (8004044 <HAL_RCC_OscConfig+0x474>)
 8003e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e7e:	f7fd f96f 	bl	8001160 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e86:	f7fd f96b 	bl	8001160 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e10c      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e98:	4b6a      	ldr	r3, [pc, #424]	@ (8004044 <HAL_RCC_OscConfig+0x474>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d106      	bne.n	8003eba <HAL_RCC_OscConfig+0x2ea>
 8003eac:	4b64      	ldr	r3, [pc, #400]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb0:	4a63      	ldr	r2, [pc, #396]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eb8:	e01c      	b.n	8003ef4 <HAL_RCC_OscConfig+0x324>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2b05      	cmp	r3, #5
 8003ec0:	d10c      	bne.n	8003edc <HAL_RCC_OscConfig+0x30c>
 8003ec2:	4b5f      	ldr	r3, [pc, #380]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec6:	4a5e      	ldr	r2, [pc, #376]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	f043 0304 	orr.w	r3, r3, #4
 8003ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ece:	4b5c      	ldr	r3, [pc, #368]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ed2:	4a5b      	ldr	r2, [pc, #364]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eda:	e00b      	b.n	8003ef4 <HAL_RCC_OscConfig+0x324>
 8003edc:	4b58      	ldr	r3, [pc, #352]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee0:	4a57      	ldr	r2, [pc, #348]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ee2:	f023 0301 	bic.w	r3, r3, #1
 8003ee6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ee8:	4b55      	ldr	r3, [pc, #340]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eec:	4a54      	ldr	r2, [pc, #336]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003eee:	f023 0304 	bic.w	r3, r3, #4
 8003ef2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d015      	beq.n	8003f28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efc:	f7fd f930 	bl	8001160 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f02:	e00a      	b.n	8003f1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f04:	f7fd f92c 	bl	8001160 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e0cb      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1a:	4b49      	ldr	r3, [pc, #292]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0ee      	beq.n	8003f04 <HAL_RCC_OscConfig+0x334>
 8003f26:	e014      	b.n	8003f52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f28:	f7fd f91a 	bl	8001160 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f2e:	e00a      	b.n	8003f46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f30:	f7fd f916 	bl	8001160 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e0b5      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f46:	4b3e      	ldr	r3, [pc, #248]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1ee      	bne.n	8003f30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d105      	bne.n	8003f64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f58:	4b39      	ldr	r3, [pc, #228]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5c:	4a38      	ldr	r2, [pc, #224]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 80a1 	beq.w	80040b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f6e:	4b34      	ldr	r3, [pc, #208]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
 8003f76:	2b08      	cmp	r3, #8
 8003f78:	d05c      	beq.n	8004034 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d141      	bne.n	8004006 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f82:	4b31      	ldr	r3, [pc, #196]	@ (8004048 <HAL_RCC_OscConfig+0x478>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7fd f8ea 	bl	8001160 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f90:	f7fd f8e6 	bl	8001160 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e087      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa2:	4b27      	ldr	r3, [pc, #156]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f0      	bne.n	8003f90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69da      	ldr	r2, [r3, #28]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbc:	019b      	lsls	r3, r3, #6
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc4:	085b      	lsrs	r3, r3, #1
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	041b      	lsls	r3, r3, #16
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd0:	061b      	lsls	r3, r3, #24
 8003fd2:	491b      	ldr	r1, [pc, #108]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8004048 <HAL_RCC_OscConfig+0x478>)
 8003fda:	2201      	movs	r2, #1
 8003fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fde:	f7fd f8bf 	bl	8001160 <HAL_GetTick>
 8003fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe6:	f7fd f8bb 	bl	8001160 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e05c      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff8:	4b11      	ldr	r3, [pc, #68]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f0      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x416>
 8004004:	e054      	b.n	80040b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004006:	4b10      	ldr	r3, [pc, #64]	@ (8004048 <HAL_RCC_OscConfig+0x478>)
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400c:	f7fd f8a8 	bl	8001160 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004014:	f7fd f8a4 	bl	8001160 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e045      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004026:	4b06      	ldr	r3, [pc, #24]	@ (8004040 <HAL_RCC_OscConfig+0x470>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0x444>
 8004032:	e03d      	b.n	80040b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d107      	bne.n	800404c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e038      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
 8004040:	40023800 	.word	0x40023800
 8004044:	40007000 	.word	0x40007000
 8004048:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800404c:	4b1b      	ldr	r3, [pc, #108]	@ (80040bc <HAL_RCC_OscConfig+0x4ec>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d028      	beq.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004064:	429a      	cmp	r2, r3
 8004066:	d121      	bne.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004072:	429a      	cmp	r2, r3
 8004074:	d11a      	bne.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800407c:	4013      	ands	r3, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004082:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004084:	4293      	cmp	r3, r2
 8004086:	d111      	bne.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004092:	085b      	lsrs	r3, r3, #1
 8004094:	3b01      	subs	r3, #1
 8004096:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004098:	429a      	cmp	r2, r3
 800409a:	d107      	bne.n	80040ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800

080040c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0cc      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040d4:	4b68      	ldr	r3, [pc, #416]	@ (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d90c      	bls.n	80040fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e2:	4b65      	ldr	r3, [pc, #404]	@ (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ea:	4b63      	ldr	r3, [pc, #396]	@ (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	683a      	ldr	r2, [r7, #0]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d001      	beq.n	80040fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0b8      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d020      	beq.n	800414a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004114:	4b59      	ldr	r3, [pc, #356]	@ (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	4a58      	ldr	r2, [pc, #352]	@ (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800411e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800412c:	4b53      	ldr	r3, [pc, #332]	@ (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4a52      	ldr	r2, [pc, #328]	@ (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004138:	4b50      	ldr	r3, [pc, #320]	@ (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	494d      	ldr	r1, [pc, #308]	@ (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	4313      	orrs	r3, r2
 8004148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d044      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d107      	bne.n	800416e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415e:	4b47      	ldr	r3, [pc, #284]	@ (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d119      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e07f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d003      	beq.n	800417e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417a:	2b03      	cmp	r3, #3
 800417c:	d107      	bne.n	800418e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417e:	4b3f      	ldr	r3, [pc, #252]	@ (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d109      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e06f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418e:	4b3b      	ldr	r3, [pc, #236]	@ (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e067      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800419e:	4b37      	ldr	r3, [pc, #220]	@ (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f023 0203 	bic.w	r2, r3, #3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4934      	ldr	r1, [pc, #208]	@ (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b0:	f7fc ffd6 	bl	8001160 <HAL_GetTick>
 80041b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b6:	e00a      	b.n	80041ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b8:	f7fc ffd2 	bl	8001160 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e04f      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	4b2b      	ldr	r3, [pc, #172]	@ (800427c <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 020c 	and.w	r2, r3, #12
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	429a      	cmp	r2, r3
 80041de:	d1eb      	bne.n	80041b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e0:	4b25      	ldr	r3, [pc, #148]	@ (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d20c      	bcs.n	8004208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b22      	ldr	r3, [pc, #136]	@ (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f6:	4b20      	ldr	r3, [pc, #128]	@ (8004278 <HAL_RCC_ClockConfig+0x1b8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e032      	b.n	800426e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004214:	4b19      	ldr	r3, [pc, #100]	@ (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4916      	ldr	r1, [pc, #88]	@ (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d009      	beq.n	8004246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004232:	4b12      	ldr	r3, [pc, #72]	@ (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	490e      	ldr	r1, [pc, #56]	@ (800427c <HAL_RCC_ClockConfig+0x1bc>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004246:	f000 f821 	bl	800428c <HAL_RCC_GetSysClockFreq>
 800424a:	4602      	mov	r2, r0
 800424c:	4b0b      	ldr	r3, [pc, #44]	@ (800427c <HAL_RCC_ClockConfig+0x1bc>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	490a      	ldr	r1, [pc, #40]	@ (8004280 <HAL_RCC_ClockConfig+0x1c0>)
 8004258:	5ccb      	ldrb	r3, [r1, r3]
 800425a:	fa22 f303 	lsr.w	r3, r2, r3
 800425e:	4a09      	ldr	r2, [pc, #36]	@ (8004284 <HAL_RCC_ClockConfig+0x1c4>)
 8004260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004262:	4b09      	ldr	r3, [pc, #36]	@ (8004288 <HAL_RCC_ClockConfig+0x1c8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f7fc ff36 	bl	80010d8 <HAL_InitTick>

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40023c00 	.word	0x40023c00
 800427c:	40023800 	.word	0x40023800
 8004280:	0800937c 	.word	0x0800937c
 8004284:	20000000 	.word	0x20000000
 8004288:	20000004 	.word	0x20000004

0800428c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800428c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004290:	b090      	sub	sp, #64	@ 0x40
 8004292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	637b      	str	r3, [r7, #52]	@ 0x34
 8004298:	2300      	movs	r3, #0
 800429a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800429c:	2300      	movs	r3, #0
 800429e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042a4:	4b59      	ldr	r3, [pc, #356]	@ (800440c <HAL_RCC_GetSysClockFreq+0x180>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 030c 	and.w	r3, r3, #12
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d00d      	beq.n	80042cc <HAL_RCC_GetSysClockFreq+0x40>
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	f200 80a1 	bhi.w	80043f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_RCC_GetSysClockFreq+0x34>
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d003      	beq.n	80042c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80042be:	e09b      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042c0:	4b53      	ldr	r3, [pc, #332]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x184>)
 80042c2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80042c4:	e09b      	b.n	80043fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042c6:	4b53      	ldr	r3, [pc, #332]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x188>)
 80042c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042ca:	e098      	b.n	80043fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042cc:	4b4f      	ldr	r3, [pc, #316]	@ (800440c <HAL_RCC_GetSysClockFreq+0x180>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042d6:	4b4d      	ldr	r3, [pc, #308]	@ (800440c <HAL_RCC_GetSysClockFreq+0x180>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d028      	beq.n	8004334 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e2:	4b4a      	ldr	r3, [pc, #296]	@ (800440c <HAL_RCC_GetSysClockFreq+0x180>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	099b      	lsrs	r3, r3, #6
 80042e8:	2200      	movs	r2, #0
 80042ea:	623b      	str	r3, [r7, #32]
 80042ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042f4:	2100      	movs	r1, #0
 80042f6:	4b47      	ldr	r3, [pc, #284]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x188>)
 80042f8:	fb03 f201 	mul.w	r2, r3, r1
 80042fc:	2300      	movs	r3, #0
 80042fe:	fb00 f303 	mul.w	r3, r0, r3
 8004302:	4413      	add	r3, r2
 8004304:	4a43      	ldr	r2, [pc, #268]	@ (8004414 <HAL_RCC_GetSysClockFreq+0x188>)
 8004306:	fba0 1202 	umull	r1, r2, r0, r2
 800430a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800430c:	460a      	mov	r2, r1
 800430e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004312:	4413      	add	r3, r2
 8004314:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004318:	2200      	movs	r2, #0
 800431a:	61bb      	str	r3, [r7, #24]
 800431c:	61fa      	str	r2, [r7, #28]
 800431e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004322:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004326:	f7fb ff55 	bl	80001d4 <__aeabi_uldivmod>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4613      	mov	r3, r2
 8004330:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004332:	e053      	b.n	80043dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004334:	4b35      	ldr	r3, [pc, #212]	@ (800440c <HAL_RCC_GetSysClockFreq+0x180>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	099b      	lsrs	r3, r3, #6
 800433a:	2200      	movs	r2, #0
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	617a      	str	r2, [r7, #20]
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004346:	f04f 0b00 	mov.w	fp, #0
 800434a:	4652      	mov	r2, sl
 800434c:	465b      	mov	r3, fp
 800434e:	f04f 0000 	mov.w	r0, #0
 8004352:	f04f 0100 	mov.w	r1, #0
 8004356:	0159      	lsls	r1, r3, #5
 8004358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800435c:	0150      	lsls	r0, r2, #5
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	ebb2 080a 	subs.w	r8, r2, sl
 8004366:	eb63 090b 	sbc.w	r9, r3, fp
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004376:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800437a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800437e:	ebb2 0408 	subs.w	r4, r2, r8
 8004382:	eb63 0509 	sbc.w	r5, r3, r9
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	00eb      	lsls	r3, r5, #3
 8004390:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004394:	00e2      	lsls	r2, r4, #3
 8004396:	4614      	mov	r4, r2
 8004398:	461d      	mov	r5, r3
 800439a:	eb14 030a 	adds.w	r3, r4, sl
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	eb45 030b 	adc.w	r3, r5, fp
 80043a4:	607b      	str	r3, [r7, #4]
 80043a6:	f04f 0200 	mov.w	r2, #0
 80043aa:	f04f 0300 	mov.w	r3, #0
 80043ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043b2:	4629      	mov	r1, r5
 80043b4:	028b      	lsls	r3, r1, #10
 80043b6:	4621      	mov	r1, r4
 80043b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043bc:	4621      	mov	r1, r4
 80043be:	028a      	lsls	r2, r1, #10
 80043c0:	4610      	mov	r0, r2
 80043c2:	4619      	mov	r1, r3
 80043c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c6:	2200      	movs	r2, #0
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	60fa      	str	r2, [r7, #12]
 80043cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043d0:	f7fb ff00 	bl	80001d4 <__aeabi_uldivmod>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4613      	mov	r3, r2
 80043da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043dc:	4b0b      	ldr	r3, [pc, #44]	@ (800440c <HAL_RCC_GetSysClockFreq+0x180>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	0c1b      	lsrs	r3, r3, #16
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	3301      	adds	r3, #1
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80043ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043f6:	e002      	b.n	80043fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043f8:	4b05      	ldr	r3, [pc, #20]	@ (8004410 <HAL_RCC_GetSysClockFreq+0x184>)
 80043fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004400:	4618      	mov	r0, r3
 8004402:	3740      	adds	r7, #64	@ 0x40
 8004404:	46bd      	mov	sp, r7
 8004406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800440a:	bf00      	nop
 800440c:	40023800 	.word	0x40023800
 8004410:	00f42400 	.word	0x00f42400
 8004414:	017d7840 	.word	0x017d7840

08004418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800441c:	4b03      	ldr	r3, [pc, #12]	@ (800442c <HAL_RCC_GetHCLKFreq+0x14>)
 800441e:	681b      	ldr	r3, [r3, #0]
}
 8004420:	4618      	mov	r0, r3
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	20000000 	.word	0x20000000

08004430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e041      	b.n	80044c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7fc fcb6 	bl	8000dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3304      	adds	r3, #4
 800446c:	4619      	mov	r1, r3
 800446e:	4610      	mov	r0, r2
 8004470:	f000 fb02 	bl	8004a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b082      	sub	sp, #8
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e041      	b.n	8004564 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d106      	bne.n	80044fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f839 	bl	800456c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2202      	movs	r2, #2
 80044fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3304      	adds	r3, #4
 800450a:	4619      	mov	r1, r3
 800450c:	4610      	mov	r0, r2
 800450e:	f000 fab3 	bl	8004a78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d109      	bne.n	80045a4 <HAL_TIM_PWM_Start+0x24>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b01      	cmp	r3, #1
 800459a:	bf14      	ite	ne
 800459c:	2301      	movne	r3, #1
 800459e:	2300      	moveq	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	e022      	b.n	80045ea <HAL_TIM_PWM_Start+0x6a>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d109      	bne.n	80045be <HAL_TIM_PWM_Start+0x3e>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	bf14      	ite	ne
 80045b6:	2301      	movne	r3, #1
 80045b8:	2300      	moveq	r3, #0
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	e015      	b.n	80045ea <HAL_TIM_PWM_Start+0x6a>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d109      	bne.n	80045d8 <HAL_TIM_PWM_Start+0x58>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	bf14      	ite	ne
 80045d0:	2301      	movne	r3, #1
 80045d2:	2300      	moveq	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	e008      	b.n	80045ea <HAL_TIM_PWM_Start+0x6a>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	bf14      	ite	ne
 80045e4:	2301      	movne	r3, #1
 80045e6:	2300      	moveq	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e068      	b.n	80046c4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d104      	bne.n	8004602 <HAL_TIM_PWM_Start+0x82>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004600:	e013      	b.n	800462a <HAL_TIM_PWM_Start+0xaa>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b04      	cmp	r3, #4
 8004606:	d104      	bne.n	8004612 <HAL_TIM_PWM_Start+0x92>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004610:	e00b      	b.n	800462a <HAL_TIM_PWM_Start+0xaa>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b08      	cmp	r3, #8
 8004616:	d104      	bne.n	8004622 <HAL_TIM_PWM_Start+0xa2>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004620:	e003      	b.n	800462a <HAL_TIM_PWM_Start+0xaa>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2202      	movs	r2, #2
 8004626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2201      	movs	r2, #1
 8004630:	6839      	ldr	r1, [r7, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fd63 	bl	80050fe <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a23      	ldr	r2, [pc, #140]	@ (80046cc <HAL_TIM_PWM_Start+0x14c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d107      	bne.n	8004652 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004650:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1d      	ldr	r2, [pc, #116]	@ (80046cc <HAL_TIM_PWM_Start+0x14c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d018      	beq.n	800468e <HAL_TIM_PWM_Start+0x10e>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004664:	d013      	beq.n	800468e <HAL_TIM_PWM_Start+0x10e>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a19      	ldr	r2, [pc, #100]	@ (80046d0 <HAL_TIM_PWM_Start+0x150>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00e      	beq.n	800468e <HAL_TIM_PWM_Start+0x10e>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a17      	ldr	r2, [pc, #92]	@ (80046d4 <HAL_TIM_PWM_Start+0x154>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d009      	beq.n	800468e <HAL_TIM_PWM_Start+0x10e>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a16      	ldr	r2, [pc, #88]	@ (80046d8 <HAL_TIM_PWM_Start+0x158>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d004      	beq.n	800468e <HAL_TIM_PWM_Start+0x10e>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a14      	ldr	r2, [pc, #80]	@ (80046dc <HAL_TIM_PWM_Start+0x15c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d111      	bne.n	80046b2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2b06      	cmp	r3, #6
 800469e:	d010      	beq.n	80046c2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f042 0201 	orr.w	r2, r2, #1
 80046ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b0:	e007      	b.n	80046c2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0201 	orr.w	r2, r2, #1
 80046c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40010000 	.word	0x40010000
 80046d0:	40000400 	.word	0x40000400
 80046d4:	40000800 	.word	0x40000800
 80046d8:	40000c00 	.word	0x40000c00
 80046dc:	40014000 	.word	0x40014000

080046e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046fa:	2302      	movs	r3, #2
 80046fc:	e0ae      	b.n	800485c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b0c      	cmp	r3, #12
 800470a:	f200 809f 	bhi.w	800484c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800470e:	a201      	add	r2, pc, #4	@ (adr r2, 8004714 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004714:	08004749 	.word	0x08004749
 8004718:	0800484d 	.word	0x0800484d
 800471c:	0800484d 	.word	0x0800484d
 8004720:	0800484d 	.word	0x0800484d
 8004724:	08004789 	.word	0x08004789
 8004728:	0800484d 	.word	0x0800484d
 800472c:	0800484d 	.word	0x0800484d
 8004730:	0800484d 	.word	0x0800484d
 8004734:	080047cb 	.word	0x080047cb
 8004738:	0800484d 	.word	0x0800484d
 800473c:	0800484d 	.word	0x0800484d
 8004740:	0800484d 	.word	0x0800484d
 8004744:	0800480b 	.word	0x0800480b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fa1e 	bl	8004b90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	699a      	ldr	r2, [r3, #24]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0208 	orr.w	r2, r2, #8
 8004762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0204 	bic.w	r2, r2, #4
 8004772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6999      	ldr	r1, [r3, #24]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	691a      	ldr	r2, [r3, #16]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	619a      	str	r2, [r3, #24]
      break;
 8004786:	e064      	b.n	8004852 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68b9      	ldr	r1, [r7, #8]
 800478e:	4618      	mov	r0, r3
 8004790:	f000 fa64 	bl	8004c5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699a      	ldr	r2, [r3, #24]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6999      	ldr	r1, [r3, #24]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	021a      	lsls	r2, r3, #8
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	619a      	str	r2, [r3, #24]
      break;
 80047c8:	e043      	b.n	8004852 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 faaf 	bl	8004d34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	69da      	ldr	r2, [r3, #28]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0208 	orr.w	r2, r2, #8
 80047e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69da      	ldr	r2, [r3, #28]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0204 	bic.w	r2, r2, #4
 80047f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69d9      	ldr	r1, [r3, #28]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	691a      	ldr	r2, [r3, #16]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	61da      	str	r2, [r3, #28]
      break;
 8004808:	e023      	b.n	8004852 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68b9      	ldr	r1, [r7, #8]
 8004810:	4618      	mov	r0, r3
 8004812:	f000 faf9 	bl	8004e08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69da      	ldr	r2, [r3, #28]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004824:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69da      	ldr	r2, [r3, #28]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004834:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	69d9      	ldr	r1, [r3, #28]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	021a      	lsls	r2, r3, #8
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	61da      	str	r2, [r3, #28]
      break;
 800484a:	e002      	b.n	8004852 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	75fb      	strb	r3, [r7, #23]
      break;
 8004850:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800485a:	7dfb      	ldrb	r3, [r7, #23]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3718      	adds	r7, #24
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_TIM_ConfigClockSource+0x1c>
 800487c:	2302      	movs	r3, #2
 800487e:	e0b4      	b.n	80049ea <HAL_TIM_ConfigClockSource+0x186>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800489e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68ba      	ldr	r2, [r7, #8]
 80048ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048b8:	d03e      	beq.n	8004938 <HAL_TIM_ConfigClockSource+0xd4>
 80048ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048be:	f200 8087 	bhi.w	80049d0 <HAL_TIM_ConfigClockSource+0x16c>
 80048c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048c6:	f000 8086 	beq.w	80049d6 <HAL_TIM_ConfigClockSource+0x172>
 80048ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ce:	d87f      	bhi.n	80049d0 <HAL_TIM_ConfigClockSource+0x16c>
 80048d0:	2b70      	cmp	r3, #112	@ 0x70
 80048d2:	d01a      	beq.n	800490a <HAL_TIM_ConfigClockSource+0xa6>
 80048d4:	2b70      	cmp	r3, #112	@ 0x70
 80048d6:	d87b      	bhi.n	80049d0 <HAL_TIM_ConfigClockSource+0x16c>
 80048d8:	2b60      	cmp	r3, #96	@ 0x60
 80048da:	d050      	beq.n	800497e <HAL_TIM_ConfigClockSource+0x11a>
 80048dc:	2b60      	cmp	r3, #96	@ 0x60
 80048de:	d877      	bhi.n	80049d0 <HAL_TIM_ConfigClockSource+0x16c>
 80048e0:	2b50      	cmp	r3, #80	@ 0x50
 80048e2:	d03c      	beq.n	800495e <HAL_TIM_ConfigClockSource+0xfa>
 80048e4:	2b50      	cmp	r3, #80	@ 0x50
 80048e6:	d873      	bhi.n	80049d0 <HAL_TIM_ConfigClockSource+0x16c>
 80048e8:	2b40      	cmp	r3, #64	@ 0x40
 80048ea:	d058      	beq.n	800499e <HAL_TIM_ConfigClockSource+0x13a>
 80048ec:	2b40      	cmp	r3, #64	@ 0x40
 80048ee:	d86f      	bhi.n	80049d0 <HAL_TIM_ConfigClockSource+0x16c>
 80048f0:	2b30      	cmp	r3, #48	@ 0x30
 80048f2:	d064      	beq.n	80049be <HAL_TIM_ConfigClockSource+0x15a>
 80048f4:	2b30      	cmp	r3, #48	@ 0x30
 80048f6:	d86b      	bhi.n	80049d0 <HAL_TIM_ConfigClockSource+0x16c>
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d060      	beq.n	80049be <HAL_TIM_ConfigClockSource+0x15a>
 80048fc:	2b20      	cmp	r3, #32
 80048fe:	d867      	bhi.n	80049d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004900:	2b00      	cmp	r3, #0
 8004902:	d05c      	beq.n	80049be <HAL_TIM_ConfigClockSource+0x15a>
 8004904:	2b10      	cmp	r3, #16
 8004906:	d05a      	beq.n	80049be <HAL_TIM_ConfigClockSource+0x15a>
 8004908:	e062      	b.n	80049d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800491a:	f000 fbd0 	bl	80050be <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800492c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	609a      	str	r2, [r3, #8]
      break;
 8004936:	e04f      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004948:	f000 fbb9 	bl	80050be <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800495a:	609a      	str	r2, [r3, #8]
      break;
 800495c:	e03c      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800496a:	461a      	mov	r2, r3
 800496c:	f000 fb2d 	bl	8004fca <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2150      	movs	r1, #80	@ 0x50
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fb86 	bl	8005088 <TIM_ITRx_SetConfig>
      break;
 800497c:	e02c      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800498a:	461a      	mov	r2, r3
 800498c:	f000 fb4c 	bl	8005028 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2160      	movs	r1, #96	@ 0x60
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fb76 	bl	8005088 <TIM_ITRx_SetConfig>
      break;
 800499c:	e01c      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049aa:	461a      	mov	r2, r3
 80049ac:	f000 fb0d 	bl	8004fca <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2140      	movs	r1, #64	@ 0x40
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fb66 	bl	8005088 <TIM_ITRx_SetConfig>
      break;
 80049bc:	e00c      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4619      	mov	r1, r3
 80049c8:	4610      	mov	r0, r2
 80049ca:	f000 fb5d 	bl	8005088 <TIM_ITRx_SetConfig>
      break;
 80049ce:	e003      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	73fb      	strb	r3, [r7, #15]
      break;
 80049d4:	e000      	b.n	80049d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b082      	sub	sp, #8
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_TIM_SlaveConfigSynchro+0x18>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e031      	b.n	8004a6e <HAL_TIM_SlaveConfigSynchro+0x7c>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2202      	movs	r2, #2
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004a1a:	6839      	ldr	r1, [r7, #0]
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fa43 	bl	8004ea8 <TIM_SlaveTimer_SetConfig>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d009      	beq.n	8004a3c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e018      	b.n	8004a6e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a4a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a5a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a3a      	ldr	r2, [pc, #232]	@ (8004b74 <TIM_Base_SetConfig+0xfc>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d00f      	beq.n	8004ab0 <TIM_Base_SetConfig+0x38>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a96:	d00b      	beq.n	8004ab0 <TIM_Base_SetConfig+0x38>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a37      	ldr	r2, [pc, #220]	@ (8004b78 <TIM_Base_SetConfig+0x100>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d007      	beq.n	8004ab0 <TIM_Base_SetConfig+0x38>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a36      	ldr	r2, [pc, #216]	@ (8004b7c <TIM_Base_SetConfig+0x104>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d003      	beq.n	8004ab0 <TIM_Base_SetConfig+0x38>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a35      	ldr	r2, [pc, #212]	@ (8004b80 <TIM_Base_SetConfig+0x108>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d108      	bne.n	8004ac2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a2b      	ldr	r2, [pc, #172]	@ (8004b74 <TIM_Base_SetConfig+0xfc>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d01b      	beq.n	8004b02 <TIM_Base_SetConfig+0x8a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ad0:	d017      	beq.n	8004b02 <TIM_Base_SetConfig+0x8a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a28      	ldr	r2, [pc, #160]	@ (8004b78 <TIM_Base_SetConfig+0x100>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <TIM_Base_SetConfig+0x8a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a27      	ldr	r2, [pc, #156]	@ (8004b7c <TIM_Base_SetConfig+0x104>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d00f      	beq.n	8004b02 <TIM_Base_SetConfig+0x8a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a26      	ldr	r2, [pc, #152]	@ (8004b80 <TIM_Base_SetConfig+0x108>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d00b      	beq.n	8004b02 <TIM_Base_SetConfig+0x8a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a25      	ldr	r2, [pc, #148]	@ (8004b84 <TIM_Base_SetConfig+0x10c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d007      	beq.n	8004b02 <TIM_Base_SetConfig+0x8a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a24      	ldr	r2, [pc, #144]	@ (8004b88 <TIM_Base_SetConfig+0x110>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d003      	beq.n	8004b02 <TIM_Base_SetConfig+0x8a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a23      	ldr	r2, [pc, #140]	@ (8004b8c <TIM_Base_SetConfig+0x114>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d108      	bne.n	8004b14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8004b74 <TIM_Base_SetConfig+0xfc>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d103      	bne.n	8004b48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d105      	bne.n	8004b66 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f023 0201 	bic.w	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	611a      	str	r2, [r3, #16]
  }
}
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	40010000 	.word	0x40010000
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40000800 	.word	0x40000800
 8004b80:	40000c00 	.word	0x40000c00
 8004b84:	40014000 	.word	0x40014000
 8004b88:	40014400 	.word	0x40014400
 8004b8c:	40014800 	.word	0x40014800

08004b90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	f023 0201 	bic.w	r2, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0303 	bic.w	r3, r3, #3
 8004bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f023 0302 	bic.w	r3, r3, #2
 8004bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a1c      	ldr	r2, [pc, #112]	@ (8004c58 <TIM_OC1_SetConfig+0xc8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d10c      	bne.n	8004c06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f023 0308 	bic.w	r3, r3, #8
 8004bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f023 0304 	bic.w	r3, r3, #4
 8004c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a13      	ldr	r2, [pc, #76]	@ (8004c58 <TIM_OC1_SetConfig+0xc8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d111      	bne.n	8004c32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	621a      	str	r2, [r3, #32]
}
 8004c4c:	bf00      	nop
 8004c4e:	371c      	adds	r7, #28
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	40010000 	.word	0x40010000

08004c5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	f023 0210 	bic.w	r2, r3, #16
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	021b      	lsls	r3, r3, #8
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f023 0320 	bic.w	r3, r3, #32
 8004ca6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a1e      	ldr	r2, [pc, #120]	@ (8004d30 <TIM_OC2_SetConfig+0xd4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d10d      	bne.n	8004cd8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a15      	ldr	r2, [pc, #84]	@ (8004d30 <TIM_OC2_SetConfig+0xd4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d113      	bne.n	8004d08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ce6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004cee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	693a      	ldr	r2, [r7, #16]
 8004d0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	621a      	str	r2, [r3, #32]
}
 8004d22:	bf00      	nop
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40010000 	.word	0x40010000

08004d34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0303 	bic.w	r3, r3, #3
 8004d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	021b      	lsls	r3, r3, #8
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8004e04 <TIM_OC3_SetConfig+0xd0>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d10d      	bne.n	8004dae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	021b      	lsls	r3, r3, #8
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a14      	ldr	r2, [pc, #80]	@ (8004e04 <TIM_OC3_SetConfig+0xd0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d113      	bne.n	8004dde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	011b      	lsls	r3, r3, #4
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	621a      	str	r2, [r3, #32]
}
 8004df8:	bf00      	nop
 8004dfa:	371c      	adds	r7, #28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	40010000 	.word	0x40010000

08004e08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a1b      	ldr	r3, [r3, #32]
 8004e1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	021b      	lsls	r3, r3, #8
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	031b      	lsls	r3, r3, #12
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a10      	ldr	r2, [pc, #64]	@ (8004ea4 <TIM_OC4_SetConfig+0x9c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d109      	bne.n	8004e7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	019b      	lsls	r3, r3, #6
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	621a      	str	r2, [r3, #32]
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40010000 	.word	0x40010000

08004ea8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ec4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	f023 0307 	bic.w	r3, r3, #7
 8004ed6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b70      	cmp	r3, #112	@ 0x70
 8004ef0:	d01a      	beq.n	8004f28 <TIM_SlaveTimer_SetConfig+0x80>
 8004ef2:	2b70      	cmp	r3, #112	@ 0x70
 8004ef4:	d860      	bhi.n	8004fb8 <TIM_SlaveTimer_SetConfig+0x110>
 8004ef6:	2b60      	cmp	r3, #96	@ 0x60
 8004ef8:	d054      	beq.n	8004fa4 <TIM_SlaveTimer_SetConfig+0xfc>
 8004efa:	2b60      	cmp	r3, #96	@ 0x60
 8004efc:	d85c      	bhi.n	8004fb8 <TIM_SlaveTimer_SetConfig+0x110>
 8004efe:	2b50      	cmp	r3, #80	@ 0x50
 8004f00:	d046      	beq.n	8004f90 <TIM_SlaveTimer_SetConfig+0xe8>
 8004f02:	2b50      	cmp	r3, #80	@ 0x50
 8004f04:	d858      	bhi.n	8004fb8 <TIM_SlaveTimer_SetConfig+0x110>
 8004f06:	2b40      	cmp	r3, #64	@ 0x40
 8004f08:	d019      	beq.n	8004f3e <TIM_SlaveTimer_SetConfig+0x96>
 8004f0a:	2b40      	cmp	r3, #64	@ 0x40
 8004f0c:	d854      	bhi.n	8004fb8 <TIM_SlaveTimer_SetConfig+0x110>
 8004f0e:	2b30      	cmp	r3, #48	@ 0x30
 8004f10:	d055      	beq.n	8004fbe <TIM_SlaveTimer_SetConfig+0x116>
 8004f12:	2b30      	cmp	r3, #48	@ 0x30
 8004f14:	d850      	bhi.n	8004fb8 <TIM_SlaveTimer_SetConfig+0x110>
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	d051      	beq.n	8004fbe <TIM_SlaveTimer_SetConfig+0x116>
 8004f1a:	2b20      	cmp	r3, #32
 8004f1c:	d84c      	bhi.n	8004fb8 <TIM_SlaveTimer_SetConfig+0x110>
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d04d      	beq.n	8004fbe <TIM_SlaveTimer_SetConfig+0x116>
 8004f22:	2b10      	cmp	r3, #16
 8004f24:	d04b      	beq.n	8004fbe <TIM_SlaveTimer_SetConfig+0x116>
 8004f26:	e047      	b.n	8004fb8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004f38:	f000 f8c1 	bl	80050be <TIM_ETR_SetConfig>
      break;
 8004f3c:	e040      	b.n	8004fc0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b05      	cmp	r3, #5
 8004f44:	d101      	bne.n	8004f4a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e03b      	b.n	8004fc2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	6a1a      	ldr	r2, [r3, #32]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0201 	bic.w	r2, r2, #1
 8004f60:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f70:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	621a      	str	r2, [r3, #32]
      break;
 8004f8e:	e017      	b.n	8004fc0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	f000 f814 	bl	8004fca <TIM_TI1_ConfigInputStage>
      break;
 8004fa2:	e00d      	b.n	8004fc0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	f000 f839 	bl	8005028 <TIM_TI2_ConfigInputStage>
      break;
 8004fb6:	e003      	b.n	8004fc0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	75fb      	strb	r3, [r7, #23]
      break;
 8004fbc:	e000      	b.n	8004fc0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004fbe:	bf00      	nop
  }

  return status;
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b087      	sub	sp, #28
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	60f8      	str	r0, [r7, #12]
 8004fd2:	60b9      	str	r1, [r7, #8]
 8004fd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	f023 0201 	bic.w	r2, r3, #1
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	011b      	lsls	r3, r3, #4
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f023 030a 	bic.w	r3, r3, #10
 8005006:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	4313      	orrs	r3, r2
 800500e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	621a      	str	r2, [r3, #32]
}
 800501c:	bf00      	nop
 800501e:	371c      	adds	r7, #28
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	f023 0210 	bic.w	r2, r3, #16
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005052:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	031b      	lsls	r3, r3, #12
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005064:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	621a      	str	r2, [r3, #32]
}
 800507c:	bf00      	nop
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800509e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	f043 0307 	orr.w	r3, r3, #7
 80050aa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	609a      	str	r2, [r3, #8]
}
 80050b2:	bf00      	nop
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050be:	b480      	push	{r7}
 80050c0:	b087      	sub	sp, #28
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	607a      	str	r2, [r7, #4]
 80050ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	021a      	lsls	r2, r3, #8
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	431a      	orrs	r2, r3
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	609a      	str	r2, [r3, #8]
}
 80050f2:	bf00      	nop
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050fe:	b480      	push	{r7}
 8005100:	b087      	sub	sp, #28
 8005102:	af00      	add	r7, sp, #0
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f003 031f 	and.w	r3, r3, #31
 8005110:	2201      	movs	r2, #1
 8005112:	fa02 f303 	lsl.w	r3, r2, r3
 8005116:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a1a      	ldr	r2, [r3, #32]
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	43db      	mvns	r3, r3
 8005120:	401a      	ands	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a1a      	ldr	r2, [r3, #32]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	f003 031f 	and.w	r3, r3, #31
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	fa01 f303 	lsl.w	r3, r1, r3
 8005136:	431a      	orrs	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	621a      	str	r2, [r3, #32]
}
 800513c:	bf00      	nop
 800513e:	371c      	adds	r7, #28
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005158:	2b01      	cmp	r3, #1
 800515a:	d101      	bne.n	8005160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800515c:	2302      	movs	r3, #2
 800515e:	e050      	b.n	8005202 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1c      	ldr	r2, [pc, #112]	@ (8005210 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d018      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051ac:	d013      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a18      	ldr	r2, [pc, #96]	@ (8005214 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00e      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a16      	ldr	r2, [pc, #88]	@ (8005218 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d009      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a15      	ldr	r2, [pc, #84]	@ (800521c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d004      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a13      	ldr	r2, [pc, #76]	@ (8005220 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d10c      	bne.n	80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40010000 	.word	0x40010000
 8005214:	40000400 	.word	0x40000400
 8005218:	40000800 	.word	0x40000800
 800521c:	40000c00 	.word	0x40000c00
 8005220:	40014000 	.word	0x40014000

08005224 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005224:	b084      	sub	sp, #16
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	f107 001c 	add.w	r0, r7, #28
 8005232:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005236:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800523a:	2b01      	cmp	r3, #1
 800523c:	d123      	bne.n	8005286 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005242:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005252:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005266:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800526a:	2b01      	cmp	r3, #1
 800526c:	d105      	bne.n	800527a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f001 fae2 	bl	8006844 <USB_CoreReset>
 8005280:	4603      	mov	r3, r0
 8005282:	73fb      	strb	r3, [r7, #15]
 8005284:	e01b      	b.n	80052be <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f001 fad6 	bl	8006844 <USB_CoreReset>
 8005298:	4603      	mov	r3, r0
 800529a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800529c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d106      	bne.n	80052b2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80052b0:	e005      	b.n	80052be <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052be:	7fbb      	ldrb	r3, [r7, #30]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d10b      	bne.n	80052dc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f043 0206 	orr.w	r2, r3, #6
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f043 0220 	orr.w	r2, r3, #32
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3710      	adds	r7, #16
 80052e2:	46bd      	mov	sp, r7
 80052e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052e8:	b004      	add	sp, #16
 80052ea:	4770      	bx	lr

080052ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	4613      	mov	r3, r2
 80052f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80052fa:	79fb      	ldrb	r3, [r7, #7]
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d165      	bne.n	80053cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4a41      	ldr	r2, [pc, #260]	@ (8005408 <USB_SetTurnaroundTime+0x11c>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d906      	bls.n	8005316 <USB_SetTurnaroundTime+0x2a>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4a40      	ldr	r2, [pc, #256]	@ (800540c <USB_SetTurnaroundTime+0x120>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d202      	bcs.n	8005316 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005310:	230f      	movs	r3, #15
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	e062      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4a3c      	ldr	r2, [pc, #240]	@ (800540c <USB_SetTurnaroundTime+0x120>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d306      	bcc.n	800532c <USB_SetTurnaroundTime+0x40>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	4a3b      	ldr	r2, [pc, #236]	@ (8005410 <USB_SetTurnaroundTime+0x124>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d202      	bcs.n	800532c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005326:	230e      	movs	r3, #14
 8005328:	617b      	str	r3, [r7, #20]
 800532a:	e057      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4a38      	ldr	r2, [pc, #224]	@ (8005410 <USB_SetTurnaroundTime+0x124>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d306      	bcc.n	8005342 <USB_SetTurnaroundTime+0x56>
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4a37      	ldr	r2, [pc, #220]	@ (8005414 <USB_SetTurnaroundTime+0x128>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d202      	bcs.n	8005342 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800533c:	230d      	movs	r3, #13
 800533e:	617b      	str	r3, [r7, #20]
 8005340:	e04c      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	4a33      	ldr	r2, [pc, #204]	@ (8005414 <USB_SetTurnaroundTime+0x128>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d306      	bcc.n	8005358 <USB_SetTurnaroundTime+0x6c>
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	4a32      	ldr	r2, [pc, #200]	@ (8005418 <USB_SetTurnaroundTime+0x12c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d802      	bhi.n	8005358 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005352:	230c      	movs	r3, #12
 8005354:	617b      	str	r3, [r7, #20]
 8005356:	e041      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	4a2f      	ldr	r2, [pc, #188]	@ (8005418 <USB_SetTurnaroundTime+0x12c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d906      	bls.n	800536e <USB_SetTurnaroundTime+0x82>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4a2e      	ldr	r2, [pc, #184]	@ (800541c <USB_SetTurnaroundTime+0x130>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d802      	bhi.n	800536e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005368:	230b      	movs	r3, #11
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	e036      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	4a2a      	ldr	r2, [pc, #168]	@ (800541c <USB_SetTurnaroundTime+0x130>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d906      	bls.n	8005384 <USB_SetTurnaroundTime+0x98>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	4a29      	ldr	r2, [pc, #164]	@ (8005420 <USB_SetTurnaroundTime+0x134>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d802      	bhi.n	8005384 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800537e:	230a      	movs	r3, #10
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	e02b      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	4a26      	ldr	r2, [pc, #152]	@ (8005420 <USB_SetTurnaroundTime+0x134>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d906      	bls.n	800539a <USB_SetTurnaroundTime+0xae>
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	4a25      	ldr	r2, [pc, #148]	@ (8005424 <USB_SetTurnaroundTime+0x138>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d202      	bcs.n	800539a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005394:	2309      	movs	r3, #9
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	e020      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	4a21      	ldr	r2, [pc, #132]	@ (8005424 <USB_SetTurnaroundTime+0x138>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d306      	bcc.n	80053b0 <USB_SetTurnaroundTime+0xc4>
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	4a20      	ldr	r2, [pc, #128]	@ (8005428 <USB_SetTurnaroundTime+0x13c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d802      	bhi.n	80053b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80053aa:	2308      	movs	r3, #8
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	e015      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	4a1d      	ldr	r2, [pc, #116]	@ (8005428 <USB_SetTurnaroundTime+0x13c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d906      	bls.n	80053c6 <USB_SetTurnaroundTime+0xda>
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	4a1c      	ldr	r2, [pc, #112]	@ (800542c <USB_SetTurnaroundTime+0x140>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d202      	bcs.n	80053c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80053c0:	2307      	movs	r3, #7
 80053c2:	617b      	str	r3, [r7, #20]
 80053c4:	e00a      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80053c6:	2306      	movs	r3, #6
 80053c8:	617b      	str	r3, [r7, #20]
 80053ca:	e007      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d102      	bne.n	80053d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80053d2:	2309      	movs	r3, #9
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	e001      	b.n	80053dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80053d8:	2309      	movs	r3, #9
 80053da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	68da      	ldr	r2, [r3, #12]
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	029b      	lsls	r3, r3, #10
 80053f0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80053f4:	431a      	orrs	r2, r3
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	371c      	adds	r7, #28
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	00d8acbf 	.word	0x00d8acbf
 800540c:	00e4e1c0 	.word	0x00e4e1c0
 8005410:	00f42400 	.word	0x00f42400
 8005414:	01067380 	.word	0x01067380
 8005418:	011a499f 	.word	0x011a499f
 800541c:	01312cff 	.word	0x01312cff
 8005420:	014ca43f 	.word	0x014ca43f
 8005424:	016e3600 	.word	0x016e3600
 8005428:	01a6ab1f 	.word	0x01a6ab1f
 800542c:	01e84800 	.word	0x01e84800

08005430 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f043 0201 	orr.w	r2, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f023 0201 	bic.w	r2, r3, #1
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d115      	bne.n	80054c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80054a2:	200a      	movs	r0, #10
 80054a4:	f7fb fe68 	bl	8001178 <HAL_Delay>
      ms += 10U;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	330a      	adds	r3, #10
 80054ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f001 f939 	bl	8006726 <USB_GetMode>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d01e      	beq.n	80054f8 <USB_SetCurrentMode+0x84>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2bc7      	cmp	r3, #199	@ 0xc7
 80054be:	d9f0      	bls.n	80054a2 <USB_SetCurrentMode+0x2e>
 80054c0:	e01a      	b.n	80054f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80054c2:	78fb      	ldrb	r3, [r7, #3]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d115      	bne.n	80054f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80054d4:	200a      	movs	r0, #10
 80054d6:	f7fb fe4f 	bl	8001178 <HAL_Delay>
      ms += 10U;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	330a      	adds	r3, #10
 80054de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f001 f920 	bl	8006726 <USB_GetMode>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d005      	beq.n	80054f8 <USB_SetCurrentMode+0x84>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2bc7      	cmp	r3, #199	@ 0xc7
 80054f0:	d9f0      	bls.n	80054d4 <USB_SetCurrentMode+0x60>
 80054f2:	e001      	b.n	80054f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e005      	b.n	8005504 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2bc8      	cmp	r3, #200	@ 0xc8
 80054fc:	d101      	bne.n	8005502 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e000      	b.n	8005504 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800550c:	b084      	sub	sp, #16
 800550e:	b580      	push	{r7, lr}
 8005510:	b086      	sub	sp, #24
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
 8005516:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800551a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005526:	2300      	movs	r3, #0
 8005528:	613b      	str	r3, [r7, #16]
 800552a:	e009      	b.n	8005540 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	3340      	adds	r3, #64	@ 0x40
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	2200      	movs	r2, #0
 8005538:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	3301      	adds	r3, #1
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b0e      	cmp	r3, #14
 8005544:	d9f2      	bls.n	800552c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005546:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800554a:	2b00      	cmp	r3, #0
 800554c:	d11c      	bne.n	8005588 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800555c:	f043 0302 	orr.w	r3, r3, #2
 8005560:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005566:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005572:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800557e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	639a      	str	r2, [r3, #56]	@ 0x38
 8005586:	e00b      	b.n	80055a0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005598:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80055a6:	461a      	mov	r2, r3
 80055a8:	2300      	movs	r3, #0
 80055aa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055ac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d10d      	bne.n	80055d0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80055b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d104      	bne.n	80055c6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80055bc:	2100      	movs	r1, #0
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f968 	bl	8005894 <USB_SetDevSpeed>
 80055c4:	e008      	b.n	80055d8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80055c6:	2101      	movs	r1, #1
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f963 	bl	8005894 <USB_SetDevSpeed>
 80055ce:	e003      	b.n	80055d8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80055d0:	2103      	movs	r1, #3
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f95e 	bl	8005894 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80055d8:	2110      	movs	r1, #16
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f8fa 	bl	80057d4 <USB_FlushTxFifo>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f924 	bl	8005838 <USB_FlushRxFifo>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005600:	461a      	mov	r2, r3
 8005602:	2300      	movs	r3, #0
 8005604:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800560c:	461a      	mov	r2, r3
 800560e:	2300      	movs	r3, #0
 8005610:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005618:	461a      	mov	r2, r3
 800561a:	2300      	movs	r3, #0
 800561c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800561e:	2300      	movs	r3, #0
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	e043      	b.n	80056ac <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005636:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800563a:	d118      	bne.n	800566e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10a      	bne.n	8005658 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800564e:	461a      	mov	r2, r3
 8005650:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	e013      	b.n	8005680 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005664:	461a      	mov	r2, r3
 8005666:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	e008      	b.n	8005680 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4413      	add	r3, r2
 8005676:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800567a:	461a      	mov	r2, r3
 800567c:	2300      	movs	r3, #0
 800567e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800568c:	461a      	mov	r2, r3
 800568e:	2300      	movs	r3, #0
 8005690:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800569e:	461a      	mov	r2, r3
 80056a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80056a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	3301      	adds	r3, #1
 80056aa:	613b      	str	r3, [r7, #16]
 80056ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80056b0:	461a      	mov	r2, r3
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d3b5      	bcc.n	8005624 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056b8:	2300      	movs	r3, #0
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	e043      	b.n	8005746 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056d4:	d118      	bne.n	8005708 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d10a      	bne.n	80056f2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e8:	461a      	mov	r2, r3
 80056ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	e013      	b.n	800571a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056fe:	461a      	mov	r2, r3
 8005700:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	e008      	b.n	800571a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005714:	461a      	mov	r2, r3
 8005716:	2300      	movs	r3, #0
 8005718:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005726:	461a      	mov	r2, r3
 8005728:	2300      	movs	r3, #0
 800572a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005738:	461a      	mov	r2, r3
 800573a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800573e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	3301      	adds	r3, #1
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800574a:	461a      	mov	r2, r3
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	4293      	cmp	r3, r2
 8005750:	d3b5      	bcc.n	80056be <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005764:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005772:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005774:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005778:	2b00      	cmp	r3, #0
 800577a:	d105      	bne.n	8005788 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	f043 0210 	orr.w	r2, r3, #16
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	699a      	ldr	r2, [r3, #24]
 800578c:	4b10      	ldr	r3, [pc, #64]	@ (80057d0 <USB_DevInit+0x2c4>)
 800578e:	4313      	orrs	r3, r2
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005794:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005798:	2b00      	cmp	r3, #0
 800579a:	d005      	beq.n	80057a8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	f043 0208 	orr.w	r2, r3, #8
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80057a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d107      	bne.n	80057c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80057b8:	f043 0304 	orr.w	r3, r3, #4
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80057c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057cc:	b004      	add	sp, #16
 80057ce:	4770      	bx	lr
 80057d0:	803c3800 	.word	0x803c3800

080057d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057de:	2300      	movs	r3, #0
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3301      	adds	r3, #1
 80057e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057ee:	d901      	bls.n	80057f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e01b      	b.n	800582c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	daf2      	bge.n	80057e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	019b      	lsls	r3, r3, #6
 8005804:	f043 0220 	orr.w	r2, r3, #32
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	3301      	adds	r3, #1
 8005810:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005818:	d901      	bls.n	800581e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e006      	b.n	800582c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b20      	cmp	r3, #32
 8005828:	d0f0      	beq.n	800580c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	3301      	adds	r3, #1
 8005848:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005850:	d901      	bls.n	8005856 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e018      	b.n	8005888 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	daf2      	bge.n	8005844 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2210      	movs	r2, #16
 8005866:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3301      	adds	r3, #1
 800586c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005874:	d901      	bls.n	800587a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e006      	b.n	8005888 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0310 	and.w	r3, r3, #16
 8005882:	2b10      	cmp	r3, #16
 8005884:	d0f0      	beq.n	8005868 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	460b      	mov	r3, r1
 800589e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	78fb      	ldrb	r3, [r7, #3]
 80058ae:	68f9      	ldr	r1, [r7, #12]
 80058b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058b4:	4313      	orrs	r3, r2
 80058b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3714      	adds	r7, #20
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b087      	sub	sp, #28
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 0306 	and.w	r3, r3, #6
 80058de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d102      	bne.n	80058ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80058e6:	2300      	movs	r3, #0
 80058e8:	75fb      	strb	r3, [r7, #23]
 80058ea:	e00a      	b.n	8005902 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d002      	beq.n	80058f8 <USB_GetDevSpeed+0x32>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2b06      	cmp	r3, #6
 80058f6:	d102      	bne.n	80058fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80058f8:	2302      	movs	r3, #2
 80058fa:	75fb      	strb	r3, [r7, #23]
 80058fc:	e001      	b.n	8005902 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80058fe:	230f      	movs	r3, #15
 8005900:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005902:	7dfb      	ldrb	r3, [r7, #23]
}
 8005904:	4618      	mov	r0, r3
 8005906:	371c      	adds	r7, #28
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	785b      	ldrb	r3, [r3, #1]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d13a      	bne.n	80059a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005932:	69da      	ldr	r2, [r3, #28]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	f003 030f 	and.w	r3, r3, #15
 800593c:	2101      	movs	r1, #1
 800593e:	fa01 f303 	lsl.w	r3, r1, r3
 8005942:	b29b      	uxth	r3, r3
 8005944:	68f9      	ldr	r1, [r7, #12]
 8005946:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800594a:	4313      	orrs	r3, r2
 800594c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d155      	bne.n	8005a10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	791b      	ldrb	r3, [r3, #4]
 800597e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005980:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	059b      	lsls	r3, r3, #22
 8005986:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005988:	4313      	orrs	r3, r2
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	0151      	lsls	r1, r2, #5
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	440a      	add	r2, r1
 8005992:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800599a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	e036      	b.n	8005a10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059a8:	69da      	ldr	r2, [r3, #28]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	2101      	movs	r1, #1
 80059b4:	fa01 f303 	lsl.w	r3, r1, r3
 80059b8:	041b      	lsls	r3, r3, #16
 80059ba:	68f9      	ldr	r1, [r7, #12]
 80059bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80059c0:	4313      	orrs	r3, r2
 80059c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d11a      	bne.n	8005a10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	015a      	lsls	r2, r3, #5
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	4413      	add	r3, r2
 80059e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	791b      	ldrb	r3, [r3, #4]
 80059f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80059f6:	430b      	orrs	r3, r1
 80059f8:	4313      	orrs	r3, r2
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	0151      	lsls	r1, r2, #5
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	440a      	add	r2, r1
 8005a02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
	...

08005a20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d161      	bne.n	8005b00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a52:	d11f      	bne.n	8005a94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68ba      	ldr	r2, [r7, #8]
 8005a64:	0151      	lsls	r1, r2, #5
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	440a      	add	r2, r1
 8005a6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a6e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	0151      	lsls	r1, r2, #5
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	440a      	add	r2, r1
 8005a8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	f003 030f 	and.w	r3, r3, #15
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	43db      	mvns	r3, r3
 8005aae:	68f9      	ldr	r1, [r7, #12]
 8005ab0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005abe:	69da      	ldr	r2, [r3, #28]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	f003 030f 	and.w	r3, r3, #15
 8005ac8:	2101      	movs	r1, #1
 8005aca:	fa01 f303 	lsl.w	r3, r1, r3
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	43db      	mvns	r3, r3
 8005ad2:	68f9      	ldr	r1, [r7, #12]
 8005ad4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ad8:	4013      	ands	r3, r2
 8005ada:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	0159      	lsls	r1, r3, #5
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	440b      	add	r3, r1
 8005af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005af6:	4619      	mov	r1, r3
 8005af8:	4b35      	ldr	r3, [pc, #212]	@ (8005bd0 <USB_DeactivateEndpoint+0x1b0>)
 8005afa:	4013      	ands	r3, r2
 8005afc:	600b      	str	r3, [r1, #0]
 8005afe:	e060      	b.n	8005bc2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b16:	d11f      	bne.n	8005b58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68ba      	ldr	r2, [r7, #8]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005b36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68ba      	ldr	r2, [r7, #8]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	f003 030f 	and.w	r3, r3, #15
 8005b68:	2101      	movs	r1, #1
 8005b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6e:	041b      	lsls	r3, r3, #16
 8005b70:	43db      	mvns	r3, r3
 8005b72:	68f9      	ldr	r1, [r7, #12]
 8005b74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b78:	4013      	ands	r3, r2
 8005b7a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	f003 030f 	and.w	r3, r3, #15
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b92:	041b      	lsls	r3, r3, #16
 8005b94:	43db      	mvns	r3, r3
 8005b96:	68f9      	ldr	r1, [r7, #12]
 8005b98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	0159      	lsls	r1, r3, #5
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	440b      	add	r3, r1
 8005bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4b05      	ldr	r3, [pc, #20]	@ (8005bd4 <USB_DeactivateEndpoint+0x1b4>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	ec337800 	.word	0xec337800
 8005bd4:	eff37800 	.word	0xeff37800

08005bd8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b08a      	sub	sp, #40	@ 0x28
 8005bdc:	af02      	add	r7, sp, #8
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	4613      	mov	r3, r2
 8005be4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	785b      	ldrb	r3, [r3, #1]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	f040 817a 	bne.w	8005eee <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d132      	bne.n	8005c68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	0151      	lsls	r1, r2, #5
 8005c14:	69fa      	ldr	r2, [r7, #28]
 8005c16:	440a      	add	r2, r1
 8005c18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c1c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005c20:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005c24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	015a      	lsls	r2, r3, #5
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	0151      	lsls	r1, r2, #5
 8005c38:	69fa      	ldr	r2, [r7, #28]
 8005c3a:	440a      	add	r2, r1
 8005c3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	0151      	lsls	r1, r2, #5
 8005c58:	69fa      	ldr	r2, [r7, #28]
 8005c5a:	440a      	add	r2, r1
 8005c5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c60:	0cdb      	lsrs	r3, r3, #19
 8005c62:	04db      	lsls	r3, r3, #19
 8005c64:	6113      	str	r3, [r2, #16]
 8005c66:	e092      	b.n	8005d8e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	0151      	lsls	r1, r2, #5
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	440a      	add	r2, r1
 8005c7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c82:	0cdb      	lsrs	r3, r3, #19
 8005c84:	04db      	lsls	r3, r3, #19
 8005c86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	0151      	lsls	r1, r2, #5
 8005c9a:	69fa      	ldr	r2, [r7, #28]
 8005c9c:	440a      	add	r2, r1
 8005c9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ca2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005ca6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005caa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d11a      	bne.n	8005ce8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	691a      	ldr	r2, [r3, #16]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d903      	bls.n	8005cc6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	0151      	lsls	r1, r2, #5
 8005cd8:	69fa      	ldr	r2, [r7, #28]
 8005cda:	440a      	add	r2, r1
 8005cdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ce0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ce4:	6113      	str	r3, [r2, #16]
 8005ce6:	e01b      	b.n	8005d20 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6919      	ldr	r1, [r3, #16]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	440b      	add	r3, r1
 8005d00:	1e59      	subs	r1, r3, #1
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d0a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d0c:	4ba2      	ldr	r3, [pc, #648]	@ (8005f98 <USB_EPStartXfer+0x3c0>)
 8005d0e:	400b      	ands	r3, r1
 8005d10:	69b9      	ldr	r1, [r7, #24]
 8005d12:	0148      	lsls	r0, r1, #5
 8005d14:	69f9      	ldr	r1, [r7, #28]
 8005d16:	4401      	add	r1, r0
 8005d18:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d2c:	691a      	ldr	r2, [r3, #16]
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d36:	69b9      	ldr	r1, [r7, #24]
 8005d38:	0148      	lsls	r0, r1, #5
 8005d3a:	69f9      	ldr	r1, [r7, #28]
 8005d3c:	4401      	add	r1, r0
 8005d3e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005d42:	4313      	orrs	r3, r2
 8005d44:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	791b      	ldrb	r3, [r3, #4]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d11f      	bne.n	8005d8e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	69ba      	ldr	r2, [r7, #24]
 8005d5e:	0151      	lsls	r1, r2, #5
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	440a      	add	r2, r1
 8005d64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d68:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005d6c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	015a      	lsls	r2, r3, #5
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	4413      	add	r3, r2
 8005d76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	0151      	lsls	r1, r2, #5
 8005d80:	69fa      	ldr	r2, [r7, #28]
 8005d82:	440a      	add	r2, r1
 8005d84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d8c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005d8e:	79fb      	ldrb	r3, [r7, #7]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d14b      	bne.n	8005e2c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d009      	beq.n	8005db0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005da8:	461a      	mov	r2, r3
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	791b      	ldrb	r3, [r3, #4]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d128      	bne.n	8005e0a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d110      	bne.n	8005dea <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	0151      	lsls	r1, r2, #5
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	440a      	add	r2, r1
 8005dde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005de2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	e00f      	b.n	8005e0a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e08:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	0151      	lsls	r1, r2, #5
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	440a      	add	r2, r1
 8005e20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e24:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e28:	6013      	str	r3, [r2, #0]
 8005e2a:	e165      	b.n	80060f8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e46:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e4a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	791b      	ldrb	r3, [r3, #4]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d015      	beq.n	8005e80 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 814d 	beq.w	80060f8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	2101      	movs	r1, #1
 8005e70:	fa01 f303 	lsl.w	r3, r1, r3
 8005e74:	69f9      	ldr	r1, [r7, #28]
 8005e76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	634b      	str	r3, [r1, #52]	@ 0x34
 8005e7e:	e13b      	b.n	80060f8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d110      	bne.n	8005eb2 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	69fa      	ldr	r2, [r7, #28]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eaa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	e00f      	b.n	8005ed2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	0151      	lsls	r1, r2, #5
 8005ec4:	69fa      	ldr	r2, [r7, #28]
 8005ec6:	440a      	add	r2, r1
 8005ec8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ed0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	68d9      	ldr	r1, [r3, #12]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	781a      	ldrb	r2, [r3, #0]
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	b298      	uxth	r0, r3
 8005ee0:	79fb      	ldrb	r3, [r7, #7]
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 f9b8 	bl	800625c <USB_WritePacket>
 8005eec:	e104      	b.n	80060f8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	015a      	lsls	r2, r3, #5
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	0151      	lsls	r1, r2, #5
 8005f00:	69fa      	ldr	r2, [r7, #28]
 8005f02:	440a      	add	r2, r1
 8005f04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f08:	0cdb      	lsrs	r3, r3, #19
 8005f0a:	04db      	lsls	r3, r3, #19
 8005f0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	0151      	lsls	r1, r2, #5
 8005f20:	69fa      	ldr	r2, [r7, #28]
 8005f22:	440a      	add	r2, r1
 8005f24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f28:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005f2c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005f30:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d131      	bne.n	8005f9c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f5c:	691a      	ldr	r2, [r3, #16]
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f66:	69b9      	ldr	r1, [r7, #24]
 8005f68:	0148      	lsls	r0, r1, #5
 8005f6a:	69f9      	ldr	r1, [r7, #28]
 8005f6c:	4401      	add	r1, r0
 8005f6e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005f72:	4313      	orrs	r3, r2
 8005f74:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	0151      	lsls	r1, r2, #5
 8005f88:	69fa      	ldr	r2, [r7, #28]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005f94:	6113      	str	r3, [r2, #16]
 8005f96:	e061      	b.n	800605c <USB_EPStartXfer+0x484>
 8005f98:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d123      	bne.n	8005fec <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fb0:	691a      	ldr	r2, [r3, #16]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fba:	69b9      	ldr	r1, [r7, #24]
 8005fbc:	0148      	lsls	r0, r1, #5
 8005fbe:	69f9      	ldr	r1, [r7, #28]
 8005fc0:	4401      	add	r1, r0
 8005fc2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	0151      	lsls	r1, r2, #5
 8005fdc:	69fa      	ldr	r2, [r7, #28]
 8005fde:	440a      	add	r2, r1
 8005fe0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fe4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005fe8:	6113      	str	r3, [r2, #16]
 8005fea:	e037      	b.n	800605c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	691a      	ldr	r2, [r3, #16]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	1e5a      	subs	r2, r3, #1
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006000:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	8afa      	ldrh	r2, [r7, #22]
 8006008:	fb03 f202 	mul.w	r2, r3, r2
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800601c:	691a      	ldr	r2, [r3, #16]
 800601e:	8afb      	ldrh	r3, [r7, #22]
 8006020:	04d9      	lsls	r1, r3, #19
 8006022:	4b38      	ldr	r3, [pc, #224]	@ (8006104 <USB_EPStartXfer+0x52c>)
 8006024:	400b      	ands	r3, r1
 8006026:	69b9      	ldr	r1, [r7, #24]
 8006028:	0148      	lsls	r0, r1, #5
 800602a:	69f9      	ldr	r1, [r7, #28]
 800602c:	4401      	add	r1, r0
 800602e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006032:	4313      	orrs	r3, r2
 8006034:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006042:	691a      	ldr	r2, [r3, #16]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800604c:	69b9      	ldr	r1, [r7, #24]
 800604e:	0148      	lsls	r0, r1, #5
 8006050:	69f9      	ldr	r1, [r7, #28]
 8006052:	4401      	add	r1, r0
 8006054:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006058:	4313      	orrs	r3, r2
 800605a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800605c:	79fb      	ldrb	r3, [r7, #7]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d10d      	bne.n	800607e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d009      	beq.n	800607e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	68d9      	ldr	r1, [r3, #12]
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	015a      	lsls	r2, r3, #5
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	4413      	add	r3, r2
 8006076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800607a:	460a      	mov	r2, r1
 800607c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	791b      	ldrb	r3, [r3, #4]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d128      	bne.n	80060d8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006092:	2b00      	cmp	r3, #0
 8006094:	d110      	bne.n	80060b8 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	0151      	lsls	r1, r2, #5
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	440a      	add	r2, r1
 80060ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80060b4:	6013      	str	r3, [r2, #0]
 80060b6:	e00f      	b.n	80060d8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	0151      	lsls	r1, r2, #5
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	440a      	add	r2, r1
 80060ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	015a      	lsls	r2, r3, #5
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	4413      	add	r3, r2
 80060e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	0151      	lsls	r1, r2, #5
 80060ea:	69fa      	ldr	r2, [r7, #28]
 80060ec:	440a      	add	r2, r1
 80060ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80060f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060f8:	2300      	movs	r3, #0
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3720      	adds	r7, #32
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	1ff80000 	.word	0x1ff80000

08006108 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	785b      	ldrb	r3, [r3, #1]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d14a      	bne.n	80061bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800613a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800613e:	f040 8086 	bne.w	800624e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	7812      	ldrb	r2, [r2, #0]
 8006156:	0151      	lsls	r1, r2, #5
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	440a      	add	r2, r1
 800615c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006160:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006164:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	015a      	lsls	r2, r3, #5
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	4413      	add	r3, r2
 8006170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	7812      	ldrb	r2, [r2, #0]
 800617a:	0151      	lsls	r1, r2, #5
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	440a      	add	r2, r1
 8006180:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006184:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006188:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	3301      	adds	r3, #1
 800618e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006196:	4293      	cmp	r3, r2
 8006198:	d902      	bls.n	80061a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	75fb      	strb	r3, [r7, #23]
          break;
 800619e:	e056      	b.n	800624e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061b8:	d0e7      	beq.n	800618a <USB_EPStopXfer+0x82>
 80061ba:	e048      	b.n	800624e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061d4:	d13b      	bne.n	800624e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	683a      	ldr	r2, [r7, #0]
 80061e8:	7812      	ldrb	r2, [r2, #0]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80061f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	683a      	ldr	r2, [r7, #0]
 800620c:	7812      	ldrb	r2, [r2, #0]
 800620e:	0151      	lsls	r1, r2, #5
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	440a      	add	r2, r1
 8006214:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006218:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800621c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3301      	adds	r3, #1
 8006222:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f242 7210 	movw	r2, #10000	@ 0x2710
 800622a:	4293      	cmp	r3, r2
 800622c:	d902      	bls.n	8006234 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	75fb      	strb	r3, [r7, #23]
          break;
 8006232:	e00c      	b.n	800624e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006248:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800624c:	d0e7      	beq.n	800621e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800624e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006250:	4618      	mov	r0, r3
 8006252:	371c      	adds	r7, #28
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800625c:	b480      	push	{r7}
 800625e:	b089      	sub	sp, #36	@ 0x24
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	4611      	mov	r1, r2
 8006268:	461a      	mov	r2, r3
 800626a:	460b      	mov	r3, r1
 800626c:	71fb      	strb	r3, [r7, #7]
 800626e:	4613      	mov	r3, r2
 8006270:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800627a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800627e:	2b00      	cmp	r3, #0
 8006280:	d123      	bne.n	80062ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006282:	88bb      	ldrh	r3, [r7, #4]
 8006284:	3303      	adds	r3, #3
 8006286:	089b      	lsrs	r3, r3, #2
 8006288:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800628a:	2300      	movs	r3, #0
 800628c:	61bb      	str	r3, [r7, #24]
 800628e:	e018      	b.n	80062c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006290:	79fb      	ldrb	r3, [r7, #7]
 8006292:	031a      	lsls	r2, r3, #12
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	4413      	add	r3, r2
 8006298:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800629c:	461a      	mov	r2, r3
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	3301      	adds	r3, #1
 80062a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	3301      	adds	r3, #1
 80062ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	3301      	adds	r3, #1
 80062b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	3301      	adds	r3, #1
 80062ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	3301      	adds	r3, #1
 80062c0:	61bb      	str	r3, [r7, #24]
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d3e2      	bcc.n	8006290 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3724      	adds	r7, #36	@ 0x24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062d8:	b480      	push	{r7}
 80062da:	b08b      	sub	sp, #44	@ 0x2c
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	4613      	mov	r3, r2
 80062e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062ee:	88fb      	ldrh	r3, [r7, #6]
 80062f0:	089b      	lsrs	r3, r3, #2
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062f6:	88fb      	ldrh	r3, [r7, #6]
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062fe:	2300      	movs	r3, #0
 8006300:	623b      	str	r3, [r7, #32]
 8006302:	e014      	b.n	800632e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006312:	3301      	adds	r3, #1
 8006314:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006318:	3301      	adds	r3, #1
 800631a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	3301      	adds	r3, #1
 8006320:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006324:	3301      	adds	r3, #1
 8006326:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	3301      	adds	r3, #1
 800632c:	623b      	str	r3, [r7, #32]
 800632e:	6a3a      	ldr	r2, [r7, #32]
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	429a      	cmp	r2, r3
 8006334:	d3e6      	bcc.n	8006304 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006336:	8bfb      	ldrh	r3, [r7, #30]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d01e      	beq.n	800637a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006346:	461a      	mov	r2, r3
 8006348:	f107 0310 	add.w	r3, r7, #16
 800634c:	6812      	ldr	r2, [r2, #0]
 800634e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	b2db      	uxtb	r3, r3
 8006356:	00db      	lsls	r3, r3, #3
 8006358:	fa22 f303 	lsr.w	r3, r2, r3
 800635c:	b2da      	uxtb	r2, r3
 800635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006360:	701a      	strb	r2, [r3, #0]
      i++;
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	3301      	adds	r3, #1
 8006366:	623b      	str	r3, [r7, #32]
      pDest++;
 8006368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636a:	3301      	adds	r3, #1
 800636c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800636e:	8bfb      	ldrh	r3, [r7, #30]
 8006370:	3b01      	subs	r3, #1
 8006372:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006374:	8bfb      	ldrh	r3, [r7, #30]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1ea      	bne.n	8006350 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800637a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800637c:	4618      	mov	r0, r3
 800637e:	372c      	adds	r7, #44	@ 0x2c
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	785b      	ldrb	r3, [r3, #1]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d12c      	bne.n	80063fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	db12      	blt.n	80063dc <USB_EPSetStall+0x54>
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00f      	beq.n	80063dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80063da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	0151      	lsls	r1, r2, #5
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	440a      	add	r2, r1
 80063f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	e02b      	b.n	8006456 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	db12      	blt.n	8006436 <USB_EPSetStall+0xae>
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00f      	beq.n	8006436 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4413      	add	r3, r2
 800641e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	0151      	lsls	r1, r2, #5
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	440a      	add	r2, r1
 800642c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006430:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006434:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	4413      	add	r3, r2
 800643e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	0151      	lsls	r1, r2, #5
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	440a      	add	r2, r1
 800644c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006450:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006454:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	785b      	ldrb	r3, [r3, #1]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d128      	bne.n	80064d2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	0151      	lsls	r1, r2, #5
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	440a      	add	r2, r1
 8006496:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800649a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800649e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	791b      	ldrb	r3, [r3, #4]
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d003      	beq.n	80064b0 <USB_EPClearStall+0x4c>
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	791b      	ldrb	r3, [r3, #4]
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d138      	bne.n	8006522 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68ba      	ldr	r2, [r7, #8]
 80064c0:	0151      	lsls	r1, r2, #5
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	440a      	add	r2, r1
 80064c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064ce:	6013      	str	r3, [r2, #0]
 80064d0:	e027      	b.n	8006522 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	0151      	lsls	r1, r2, #5
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	440a      	add	r2, r1
 80064e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80064f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	791b      	ldrb	r3, [r3, #4]
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d003      	beq.n	8006502 <USB_EPClearStall+0x9e>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	791b      	ldrb	r3, [r3, #4]
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d10f      	bne.n	8006522 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	0151      	lsls	r1, r2, #5
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	440a      	add	r2, r1
 8006518:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800651c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006520:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800654e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006552:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	011b      	lsls	r3, r3, #4
 8006560:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006564:	68f9      	ldr	r1, [r7, #12]
 8006566:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800656a:	4313      	orrs	r3, r2
 800656c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006596:	f023 0303 	bic.w	r3, r3, #3
 800659a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065aa:	f023 0302 	bic.w	r3, r3, #2
 80065ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80065be:	b480      	push	{r7}
 80065c0:	b085      	sub	sp, #20
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80065d8:	f023 0303 	bic.w	r3, r3, #3
 80065dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065ec:	f043 0302 	orr.w	r3, r3, #2
 80065f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	695b      	ldr	r3, [r3, #20]
 800660c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4013      	ands	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006618:	68fb      	ldr	r3, [r7, #12]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006626:	b480      	push	{r7}
 8006628:	b085      	sub	sp, #20
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006642:	69db      	ldr	r3, [r3, #28]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	4013      	ands	r3, r2
 8006648:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	0c1b      	lsrs	r3, r3, #16
}
 800664e:	4618      	mov	r0, r3
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800665a:	b480      	push	{r7}
 800665c:	b085      	sub	sp, #20
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006676:	69db      	ldr	r3, [r3, #28]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	4013      	ands	r3, r2
 800667c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	b29b      	uxth	r3, r3
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800668e:	b480      	push	{r7}
 8006690:	b085      	sub	sp, #20
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	460b      	mov	r3, r1
 8006698:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800669e:	78fb      	ldrb	r3, [r7, #3]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	68ba      	ldr	r2, [r7, #8]
 80066b8:	4013      	ands	r3, r2
 80066ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066bc:	68bb      	ldr	r3, [r7, #8]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3714      	adds	r7, #20
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b087      	sub	sp, #28
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	460b      	mov	r3, r1
 80066d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80066ee:	78fb      	ldrb	r3, [r7, #3]
 80066f0:	f003 030f 	and.w	r3, r3, #15
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	fa22 f303 	lsr.w	r3, r2, r3
 80066fa:	01db      	lsls	r3, r3, #7
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	4313      	orrs	r3, r2
 8006702:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006704:	78fb      	ldrb	r3, [r7, #3]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	4413      	add	r3, r2
 800670c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	4013      	ands	r3, r2
 8006716:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006718:	68bb      	ldr	r3, [r7, #8]
}
 800671a:	4618      	mov	r0, r3
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	f003 0301 	and.w	r3, r3, #1
}
 8006736:	4618      	mov	r0, r3
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006742:	b480      	push	{r7}
 8006744:	b085      	sub	sp, #20
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800675c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006760:	f023 0307 	bic.w	r3, r3, #7
 8006764:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006778:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	460b      	mov	r3, r1
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	333c      	adds	r3, #60	@ 0x3c
 800679e:	3304      	adds	r3, #4
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	4a26      	ldr	r2, [pc, #152]	@ (8006840 <USB_EP0_OutStart+0xb8>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d90a      	bls.n	80067c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067bc:	d101      	bne.n	80067c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	e037      	b.n	8006832 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067c8:	461a      	mov	r2, r3
 80067ca:	2300      	movs	r3, #0
 80067cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80067e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067f0:	f043 0318 	orr.w	r3, r3, #24
 80067f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	697a      	ldr	r2, [r7, #20]
 8006800:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006804:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006808:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800680a:	7afb      	ldrb	r3, [r7, #11]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d10f      	bne.n	8006830 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006816:	461a      	mov	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800682a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800682e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	371c      	adds	r7, #28
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	4f54300a 	.word	0x4f54300a

08006844 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3301      	adds	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800685c:	d901      	bls.n	8006862 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e01b      	b.n	800689a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	daf2      	bge.n	8006850 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f043 0201 	orr.w	r2, r3, #1
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3301      	adds	r3, #1
 800687e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006886:	d901      	bls.n	800688c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e006      	b.n	800689a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b01      	cmp	r3, #1
 8006896:	d0f0      	beq.n	800687a <USB_CoreReset+0x36>

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
	...

080068a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	460b      	mov	r3, r1
 80068b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80068b4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80068b8:	f002 fc94 	bl	80091e4 <USBD_static_malloc>
 80068bc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d109      	bne.n	80068d8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	32b0      	adds	r2, #176	@ 0xb0
 80068ce:	2100      	movs	r1, #0
 80068d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80068d4:	2302      	movs	r3, #2
 80068d6:	e0d4      	b.n	8006a82 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80068d8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80068dc:	2100      	movs	r1, #0
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f002 fcc4 	bl	800926c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	32b0      	adds	r2, #176	@ 0xb0
 80068ee:	68f9      	ldr	r1, [r7, #12]
 80068f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	32b0      	adds	r2, #176	@ 0xb0
 80068fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	7c1b      	ldrb	r3, [r3, #16]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d138      	bne.n	8006982 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006910:	4b5e      	ldr	r3, [pc, #376]	@ (8006a8c <USBD_CDC_Init+0x1e4>)
 8006912:	7819      	ldrb	r1, [r3, #0]
 8006914:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006918:	2202      	movs	r2, #2
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f002 fb3f 	bl	8008f9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006920:	4b5a      	ldr	r3, [pc, #360]	@ (8006a8c <USBD_CDC_Init+0x1e4>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	f003 020f 	and.w	r2, r3, #15
 8006928:	6879      	ldr	r1, [r7, #4]
 800692a:	4613      	mov	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	440b      	add	r3, r1
 8006934:	3324      	adds	r3, #36	@ 0x24
 8006936:	2201      	movs	r2, #1
 8006938:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800693a:	4b55      	ldr	r3, [pc, #340]	@ (8006a90 <USBD_CDC_Init+0x1e8>)
 800693c:	7819      	ldrb	r1, [r3, #0]
 800693e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006942:	2202      	movs	r2, #2
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f002 fb2a 	bl	8008f9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800694a:	4b51      	ldr	r3, [pc, #324]	@ (8006a90 <USBD_CDC_Init+0x1e8>)
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	f003 020f 	and.w	r2, r3, #15
 8006952:	6879      	ldr	r1, [r7, #4]
 8006954:	4613      	mov	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	440b      	add	r3, r1
 800695e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006962:	2201      	movs	r2, #1
 8006964:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006966:	4b4b      	ldr	r3, [pc, #300]	@ (8006a94 <USBD_CDC_Init+0x1ec>)
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	f003 020f 	and.w	r2, r3, #15
 800696e:	6879      	ldr	r1, [r7, #4]
 8006970:	4613      	mov	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	440b      	add	r3, r1
 800697a:	3326      	adds	r3, #38	@ 0x26
 800697c:	2210      	movs	r2, #16
 800697e:	801a      	strh	r2, [r3, #0]
 8006980:	e035      	b.n	80069ee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006982:	4b42      	ldr	r3, [pc, #264]	@ (8006a8c <USBD_CDC_Init+0x1e4>)
 8006984:	7819      	ldrb	r1, [r3, #0]
 8006986:	2340      	movs	r3, #64	@ 0x40
 8006988:	2202      	movs	r2, #2
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f002 fb07 	bl	8008f9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006990:	4b3e      	ldr	r3, [pc, #248]	@ (8006a8c <USBD_CDC_Init+0x1e4>)
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	f003 020f 	and.w	r2, r3, #15
 8006998:	6879      	ldr	r1, [r7, #4]
 800699a:	4613      	mov	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	440b      	add	r3, r1
 80069a4:	3324      	adds	r3, #36	@ 0x24
 80069a6:	2201      	movs	r2, #1
 80069a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80069aa:	4b39      	ldr	r3, [pc, #228]	@ (8006a90 <USBD_CDC_Init+0x1e8>)
 80069ac:	7819      	ldrb	r1, [r3, #0]
 80069ae:	2340      	movs	r3, #64	@ 0x40
 80069b0:	2202      	movs	r2, #2
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f002 faf3 	bl	8008f9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80069b8:	4b35      	ldr	r3, [pc, #212]	@ (8006a90 <USBD_CDC_Init+0x1e8>)
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	f003 020f 	and.w	r2, r3, #15
 80069c0:	6879      	ldr	r1, [r7, #4]
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	440b      	add	r3, r1
 80069cc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80069d0:	2201      	movs	r2, #1
 80069d2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80069d4:	4b2f      	ldr	r3, [pc, #188]	@ (8006a94 <USBD_CDC_Init+0x1ec>)
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	f003 020f 	and.w	r2, r3, #15
 80069dc:	6879      	ldr	r1, [r7, #4]
 80069de:	4613      	mov	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	440b      	add	r3, r1
 80069e8:	3326      	adds	r3, #38	@ 0x26
 80069ea:	2210      	movs	r2, #16
 80069ec:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80069ee:	4b29      	ldr	r3, [pc, #164]	@ (8006a94 <USBD_CDC_Init+0x1ec>)
 80069f0:	7819      	ldrb	r1, [r3, #0]
 80069f2:	2308      	movs	r3, #8
 80069f4:	2203      	movs	r2, #3
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f002 fad1 	bl	8008f9e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80069fc:	4b25      	ldr	r3, [pc, #148]	@ (8006a94 <USBD_CDC_Init+0x1ec>)
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	f003 020f 	and.w	r2, r3, #15
 8006a04:	6879      	ldr	r1, [r7, #4]
 8006a06:	4613      	mov	r3, r2
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	440b      	add	r3, r1
 8006a10:	3324      	adds	r3, #36	@ 0x24
 8006a12:	2201      	movs	r2, #1
 8006a14:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	33b0      	adds	r3, #176	@ 0xb0
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e018      	b.n	8006a82 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	7c1b      	ldrb	r3, [r3, #16]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10a      	bne.n	8006a6e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a58:	4b0d      	ldr	r3, [pc, #52]	@ (8006a90 <USBD_CDC_Init+0x1e8>)
 8006a5a:	7819      	ldrb	r1, [r3, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f002 fb88 	bl	800917c <USBD_LL_PrepareReceive>
 8006a6c:	e008      	b.n	8006a80 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006a6e:	4b08      	ldr	r3, [pc, #32]	@ (8006a90 <USBD_CDC_Init+0x1e8>)
 8006a70:	7819      	ldrb	r1, [r3, #0]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006a78:	2340      	movs	r3, #64	@ 0x40
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f002 fb7e 	bl	800917c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20000093 	.word	0x20000093
 8006a90:	20000094 	.word	0x20000094
 8006a94:	20000095 	.word	0x20000095

08006a98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006aa4:	4b3a      	ldr	r3, [pc, #232]	@ (8006b90 <USBD_CDC_DeInit+0xf8>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f002 fa9d 	bl	8008fea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006ab0:	4b37      	ldr	r3, [pc, #220]	@ (8006b90 <USBD_CDC_DeInit+0xf8>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	f003 020f 	and.w	r2, r3, #15
 8006ab8:	6879      	ldr	r1, [r7, #4]
 8006aba:	4613      	mov	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	440b      	add	r3, r1
 8006ac4:	3324      	adds	r3, #36	@ 0x24
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006aca:	4b32      	ldr	r3, [pc, #200]	@ (8006b94 <USBD_CDC_DeInit+0xfc>)
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f002 fa8a 	bl	8008fea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006ad6:	4b2f      	ldr	r3, [pc, #188]	@ (8006b94 <USBD_CDC_DeInit+0xfc>)
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	f003 020f 	and.w	r2, r3, #15
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	440b      	add	r3, r1
 8006aea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006aee:	2200      	movs	r2, #0
 8006af0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006af2:	4b29      	ldr	r3, [pc, #164]	@ (8006b98 <USBD_CDC_DeInit+0x100>)
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	4619      	mov	r1, r3
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f002 fa76 	bl	8008fea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006afe:	4b26      	ldr	r3, [pc, #152]	@ (8006b98 <USBD_CDC_DeInit+0x100>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	f003 020f 	and.w	r2, r3, #15
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	440b      	add	r3, r1
 8006b12:	3324      	adds	r3, #36	@ 0x24
 8006b14:	2200      	movs	r2, #0
 8006b16:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006b18:	4b1f      	ldr	r3, [pc, #124]	@ (8006b98 <USBD_CDC_DeInit+0x100>)
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	f003 020f 	and.w	r2, r3, #15
 8006b20:	6879      	ldr	r1, [r7, #4]
 8006b22:	4613      	mov	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	440b      	add	r3, r1
 8006b2c:	3326      	adds	r3, #38	@ 0x26
 8006b2e:	2200      	movs	r2, #0
 8006b30:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	32b0      	adds	r2, #176	@ 0xb0
 8006b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d01f      	beq.n	8006b84 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	33b0      	adds	r3, #176	@ 0xb0
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	4413      	add	r3, r2
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	32b0      	adds	r2, #176	@ 0xb0
 8006b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b66:	4618      	mov	r0, r3
 8006b68:	f002 fb4a 	bl	8009200 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	32b0      	adds	r2, #176	@ 0xb0
 8006b76:	2100      	movs	r1, #0
 8006b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	20000093 	.word	0x20000093
 8006b94:	20000094 	.word	0x20000094
 8006b98:	20000095 	.word	0x20000095

08006b9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	32b0      	adds	r2, #176	@ 0xb0
 8006bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e0bf      	b.n	8006d4c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d050      	beq.n	8006c7a <USBD_CDC_Setup+0xde>
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	f040 80af 	bne.w	8006d3c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	88db      	ldrh	r3, [r3, #6]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d03a      	beq.n	8006c5c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	b25b      	sxtb	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	da1b      	bge.n	8006c28 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	33b0      	adds	r3, #176	@ 0xb0
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006c06:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	88d2      	ldrh	r2, [r2, #6]
 8006c0c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	88db      	ldrh	r3, [r3, #6]
 8006c12:	2b07      	cmp	r3, #7
 8006c14:	bf28      	it	cs
 8006c16:	2307      	movcs	r3, #7
 8006c18:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	89fa      	ldrh	r2, [r7, #14]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 fd87 	bl	8008734 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006c26:	e090      	b.n	8006d4a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	785a      	ldrb	r2, [r3, #1]
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	88db      	ldrh	r3, [r3, #6]
 8006c36:	2b3f      	cmp	r3, #63	@ 0x3f
 8006c38:	d803      	bhi.n	8006c42 <USBD_CDC_Setup+0xa6>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	88db      	ldrh	r3, [r3, #6]
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	e000      	b.n	8006c44 <USBD_CDC_Setup+0xa8>
 8006c42:	2240      	movs	r2, #64	@ 0x40
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006c4a:	6939      	ldr	r1, [r7, #16]
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006c52:	461a      	mov	r2, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 fd99 	bl	800878c <USBD_CtlPrepareRx>
      break;
 8006c5a:	e076      	b.n	8006d4a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	33b0      	adds	r3, #176	@ 0xb0
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	7850      	ldrb	r0, [r2, #1]
 8006c72:	2200      	movs	r2, #0
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	4798      	blx	r3
      break;
 8006c78:	e067      	b.n	8006d4a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	785b      	ldrb	r3, [r3, #1]
 8006c7e:	2b0b      	cmp	r3, #11
 8006c80:	d851      	bhi.n	8006d26 <USBD_CDC_Setup+0x18a>
 8006c82:	a201      	add	r2, pc, #4	@ (adr r2, 8006c88 <USBD_CDC_Setup+0xec>)
 8006c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c88:	08006cb9 	.word	0x08006cb9
 8006c8c:	08006d35 	.word	0x08006d35
 8006c90:	08006d27 	.word	0x08006d27
 8006c94:	08006d27 	.word	0x08006d27
 8006c98:	08006d27 	.word	0x08006d27
 8006c9c:	08006d27 	.word	0x08006d27
 8006ca0:	08006d27 	.word	0x08006d27
 8006ca4:	08006d27 	.word	0x08006d27
 8006ca8:	08006d27 	.word	0x08006d27
 8006cac:	08006d27 	.word	0x08006d27
 8006cb0:	08006ce3 	.word	0x08006ce3
 8006cb4:	08006d0d 	.word	0x08006d0d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d107      	bne.n	8006cd4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006cc4:	f107 030a 	add.w	r3, r7, #10
 8006cc8:	2202      	movs	r2, #2
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 fd31 	bl	8008734 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cd2:	e032      	b.n	8006d3a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006cd4:	6839      	ldr	r1, [r7, #0]
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f001 fcbb 	bl	8008652 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	75fb      	strb	r3, [r7, #23]
          break;
 8006ce0:	e02b      	b.n	8006d3a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d107      	bne.n	8006cfe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006cee:	f107 030d 	add.w	r3, r7, #13
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f001 fd1c 	bl	8008734 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cfc:	e01d      	b.n	8006d3a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006cfe:	6839      	ldr	r1, [r7, #0]
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f001 fca6 	bl	8008652 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d06:	2303      	movs	r3, #3
 8006d08:	75fb      	strb	r3, [r7, #23]
          break;
 8006d0a:	e016      	b.n	8006d3a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	d00f      	beq.n	8006d38 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f001 fc99 	bl	8008652 <USBD_CtlError>
            ret = USBD_FAIL;
 8006d20:	2303      	movs	r3, #3
 8006d22:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006d24:	e008      	b.n	8006d38 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006d26:	6839      	ldr	r1, [r7, #0]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f001 fc92 	bl	8008652 <USBD_CtlError>
          ret = USBD_FAIL;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	75fb      	strb	r3, [r7, #23]
          break;
 8006d32:	e002      	b.n	8006d3a <USBD_CDC_Setup+0x19e>
          break;
 8006d34:	bf00      	nop
 8006d36:	e008      	b.n	8006d4a <USBD_CDC_Setup+0x1ae>
          break;
 8006d38:	bf00      	nop
      }
      break;
 8006d3a:	e006      	b.n	8006d4a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f001 fc87 	bl	8008652 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d44:	2303      	movs	r3, #3
 8006d46:	75fb      	strb	r3, [r7, #23]
      break;
 8006d48:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006d66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	32b0      	adds	r2, #176	@ 0xb0
 8006d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e065      	b.n	8006e4a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	32b0      	adds	r2, #176	@ 0xb0
 8006d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d8c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006d8e:	78fb      	ldrb	r3, [r7, #3]
 8006d90:	f003 020f 	and.w	r2, r3, #15
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	4613      	mov	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	3318      	adds	r3, #24
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d02f      	beq.n	8006e08 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006da8:	78fb      	ldrb	r3, [r7, #3]
 8006daa:	f003 020f 	and.w	r2, r3, #15
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	4613      	mov	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4413      	add	r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	440b      	add	r3, r1
 8006dba:	3318      	adds	r3, #24
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	78fb      	ldrb	r3, [r7, #3]
 8006dc0:	f003 010f 	and.w	r1, r3, #15
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	00db      	lsls	r3, r3, #3
 8006dca:	440b      	add	r3, r1
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4403      	add	r3, r0
 8006dd0:	331c      	adds	r3, #28
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	fbb2 f1f3 	udiv	r1, r2, r3
 8006dd8:	fb01 f303 	mul.w	r3, r1, r3
 8006ddc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d112      	bne.n	8006e08 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006de2:	78fb      	ldrb	r3, [r7, #3]
 8006de4:	f003 020f 	and.w	r2, r3, #15
 8006de8:	6879      	ldr	r1, [r7, #4]
 8006dea:	4613      	mov	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	440b      	add	r3, r1
 8006df4:	3318      	adds	r3, #24
 8006df6:	2200      	movs	r2, #0
 8006df8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006dfa:	78f9      	ldrb	r1, [r7, #3]
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	2200      	movs	r2, #0
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f002 f99a 	bl	800913a <USBD_LL_Transmit>
 8006e06:	e01f      	b.n	8006e48 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	33b0      	adds	r3, #176	@ 0xb0
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d010      	beq.n	8006e48 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	33b0      	adds	r3, #176	@ 0xb0
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006e44:	78fa      	ldrb	r2, [r7, #3]
 8006e46:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3710      	adds	r7, #16
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	32b0      	adds	r2, #176	@ 0xb0
 8006e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	32b0      	adds	r2, #176	@ 0xb0
 8006e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e01a      	b.n	8006eba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006e84:	78fb      	ldrb	r3, [r7, #3]
 8006e86:	4619      	mov	r1, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f002 f998 	bl	80091be <USBD_LL_GetRxDataSize>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	33b0      	adds	r3, #176	@ 0xb0
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b084      	sub	sp, #16
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	32b0      	adds	r2, #176	@ 0xb0
 8006ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e024      	b.n	8006f2e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	33b0      	adds	r3, #176	@ 0xb0
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d019      	beq.n	8006f2c <USBD_CDC_EP0_RxReady+0x6a>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006efe:	2bff      	cmp	r3, #255	@ 0xff
 8006f00:	d014      	beq.n	8006f2c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	33b0      	adds	r3, #176	@ 0xb0
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006f1a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006f22:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	22ff      	movs	r2, #255	@ 0xff
 8006f28:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
	...

08006f38 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006f40:	2182      	movs	r1, #130	@ 0x82
 8006f42:	4818      	ldr	r0, [pc, #96]	@ (8006fa4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f44:	f000 fd4f 	bl	80079e6 <USBD_GetEpDesc>
 8006f48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	4815      	ldr	r0, [pc, #84]	@ (8006fa4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f4e:	f000 fd4a 	bl	80079e6 <USBD_GetEpDesc>
 8006f52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006f54:	2181      	movs	r1, #129	@ 0x81
 8006f56:	4813      	ldr	r0, [pc, #76]	@ (8006fa4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006f58:	f000 fd45 	bl	80079e6 <USBD_GetEpDesc>
 8006f5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2210      	movs	r2, #16
 8006f68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d006      	beq.n	8006f7e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f78:	711a      	strb	r2, [r3, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d006      	beq.n	8006f92 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f8c:	711a      	strb	r2, [r3, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2243      	movs	r2, #67	@ 0x43
 8006f96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006f98:	4b02      	ldr	r3, [pc, #8]	@ (8006fa4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	20000050 	.word	0x20000050

08006fa8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006fb0:	2182      	movs	r1, #130	@ 0x82
 8006fb2:	4818      	ldr	r0, [pc, #96]	@ (8007014 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006fb4:	f000 fd17 	bl	80079e6 <USBD_GetEpDesc>
 8006fb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006fba:	2101      	movs	r1, #1
 8006fbc:	4815      	ldr	r0, [pc, #84]	@ (8007014 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006fbe:	f000 fd12 	bl	80079e6 <USBD_GetEpDesc>
 8006fc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006fc4:	2181      	movs	r1, #129	@ 0x81
 8006fc6:	4813      	ldr	r0, [pc, #76]	@ (8007014 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006fc8:	f000 fd0d 	bl	80079e6 <USBD_GetEpDesc>
 8006fcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	2210      	movs	r2, #16
 8006fd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d006      	beq.n	8006fee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	711a      	strb	r2, [r3, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f042 0202 	orr.w	r2, r2, #2
 8006fec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d006      	beq.n	8007002 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	711a      	strb	r2, [r3, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f042 0202 	orr.w	r2, r2, #2
 8007000:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2243      	movs	r2, #67	@ 0x43
 8007006:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007008:	4b02      	ldr	r3, [pc, #8]	@ (8007014 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800700a:	4618      	mov	r0, r3
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20000050 	.word	0x20000050

08007018 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007020:	2182      	movs	r1, #130	@ 0x82
 8007022:	4818      	ldr	r0, [pc, #96]	@ (8007084 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007024:	f000 fcdf 	bl	80079e6 <USBD_GetEpDesc>
 8007028:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800702a:	2101      	movs	r1, #1
 800702c:	4815      	ldr	r0, [pc, #84]	@ (8007084 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800702e:	f000 fcda 	bl	80079e6 <USBD_GetEpDesc>
 8007032:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007034:	2181      	movs	r1, #129	@ 0x81
 8007036:	4813      	ldr	r0, [pc, #76]	@ (8007084 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007038:	f000 fcd5 	bl	80079e6 <USBD_GetEpDesc>
 800703c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d002      	beq.n	800704a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	2210      	movs	r2, #16
 8007048:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d006      	beq.n	800705e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	2200      	movs	r2, #0
 8007054:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007058:	711a      	strb	r2, [r3, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d006      	beq.n	8007072 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800706c:	711a      	strb	r2, [r3, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2243      	movs	r2, #67	@ 0x43
 8007076:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007078:	4b02      	ldr	r3, [pc, #8]	@ (8007084 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800707a:	4618      	mov	r0, r3
 800707c:	3718      	adds	r7, #24
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20000050 	.word	0x20000050

08007088 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	220a      	movs	r2, #10
 8007094:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007096:	4b03      	ldr	r3, [pc, #12]	@ (80070a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007098:	4618      	mov	r0, r3
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	2000000c 	.word	0x2000000c

080070a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d101      	bne.n	80070bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80070b8:	2303      	movs	r3, #3
 80070ba:	e009      	b.n	80070d0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	33b0      	adds	r3, #176	@ 0xb0
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	32b0      	adds	r2, #176	@ 0xb0
 80070f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80070fe:	2303      	movs	r3, #3
 8007100:	e008      	b.n	8007114 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	371c      	adds	r7, #28
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	32b0      	adds	r2, #176	@ 0xb0
 8007134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007138:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007140:	2303      	movs	r3, #3
 8007142:	e004      	b.n	800714e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
	...

0800715c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	32b0      	adds	r2, #176	@ 0xb0
 800716e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007172:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007174:	2301      	movs	r3, #1
 8007176:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800717e:	2303      	movs	r3, #3
 8007180:	e025      	b.n	80071ce <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007188:	2b00      	cmp	r3, #0
 800718a:	d11f      	bne.n	80071cc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	2201      	movs	r2, #1
 8007190:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007194:	4b10      	ldr	r3, [pc, #64]	@ (80071d8 <USBD_CDC_TransmitPacket+0x7c>)
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	f003 020f 	and.w	r2, r3, #15
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	4613      	mov	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4403      	add	r3, r0
 80071ae:	3318      	adds	r3, #24
 80071b0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80071b2:	4b09      	ldr	r3, [pc, #36]	@ (80071d8 <USBD_CDC_TransmitPacket+0x7c>)
 80071b4:	7819      	ldrb	r1, [r3, #0]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f001 ffb9 	bl	800913a <USBD_LL_Transmit>

    ret = USBD_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20000093 	.word	0x20000093

080071dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	32b0      	adds	r2, #176	@ 0xb0
 80071ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	32b0      	adds	r2, #176	@ 0xb0
 80071fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007206:	2303      	movs	r3, #3
 8007208:	e018      	b.n	800723c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	7c1b      	ldrb	r3, [r3, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10a      	bne.n	8007228 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007212:	4b0c      	ldr	r3, [pc, #48]	@ (8007244 <USBD_CDC_ReceivePacket+0x68>)
 8007214:	7819      	ldrb	r1, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800721c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f001 ffab 	bl	800917c <USBD_LL_PrepareReceive>
 8007226:	e008      	b.n	800723a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007228:	4b06      	ldr	r3, [pc, #24]	@ (8007244 <USBD_CDC_ReceivePacket+0x68>)
 800722a:	7819      	ldrb	r1, [r3, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007232:	2340      	movs	r3, #64	@ 0x40
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f001 ffa1 	bl	800917c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	20000094 	.word	0x20000094

08007248 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	4613      	mov	r3, r2
 8007254:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800725c:	2303      	movs	r3, #3
 800725e:	e01f      	b.n	80072a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	79fa      	ldrb	r2, [r7, #7]
 8007292:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f001 fe1b 	bl	8008ed0 <USBD_LL_Init>
 800729a:	4603      	mov	r3, r0
 800729c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800729e:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3718      	adds	r7, #24
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072b2:	2300      	movs	r3, #0
 80072b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d101      	bne.n	80072c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80072bc:	2303      	movs	r3, #3
 80072be:	e025      	b.n	800730c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	32ae      	adds	r2, #174	@ 0xae
 80072d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00f      	beq.n	80072fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	32ae      	adds	r2, #174	@ 0xae
 80072e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ec:	f107 020e 	add.w	r2, r7, #14
 80072f0:	4610      	mov	r0, r2
 80072f2:	4798      	blx	r3
 80072f4:	4602      	mov	r2, r0
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f001 fe23 	bl	8008f68 <USBD_LL_Start>
 8007322:	4603      	mov	r3, r0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007334:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007336:	4618      	mov	r0, r3
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	460b      	mov	r3, r1
 800734c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007358:	2b00      	cmp	r3, #0
 800735a:	d009      	beq.n	8007370 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	78fa      	ldrb	r2, [r7, #3]
 8007366:	4611      	mov	r1, r2
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	4798      	blx	r3
 800736c:	4603      	mov	r3, r0
 800736e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007370:	7bfb      	ldrb	r3, [r7, #15]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	460b      	mov	r3, r1
 8007384:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	78fa      	ldrb	r2, [r7, #3]
 8007394:	4611      	mov	r1, r2
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	4798      	blx	r3
 800739a:	4603      	mov	r3, r0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80073a0:	2303      	movs	r3, #3
 80073a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b084      	sub	sp, #16
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80073be:	6839      	ldr	r1, [r7, #0]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f001 f90c 	bl	80085de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80073d4:	461a      	mov	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80073e2:	f003 031f 	and.w	r3, r3, #31
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d01a      	beq.n	8007420 <USBD_LL_SetupStage+0x72>
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d822      	bhi.n	8007434 <USBD_LL_SetupStage+0x86>
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <USBD_LL_SetupStage+0x4a>
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d00a      	beq.n	800740c <USBD_LL_SetupStage+0x5e>
 80073f6:	e01d      	b.n	8007434 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80073fe:	4619      	mov	r1, r3
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 fb63 	bl	8007acc <USBD_StdDevReq>
 8007406:	4603      	mov	r3, r0
 8007408:	73fb      	strb	r3, [r7, #15]
      break;
 800740a:	e020      	b.n	800744e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007412:	4619      	mov	r1, r3
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fbcb 	bl	8007bb0 <USBD_StdItfReq>
 800741a:	4603      	mov	r3, r0
 800741c:	73fb      	strb	r3, [r7, #15]
      break;
 800741e:	e016      	b.n	800744e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007426:	4619      	mov	r1, r3
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 fc2d 	bl	8007c88 <USBD_StdEPReq>
 800742e:	4603      	mov	r3, r0
 8007430:	73fb      	strb	r3, [r7, #15]
      break;
 8007432:	e00c      	b.n	800744e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800743a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800743e:	b2db      	uxtb	r3, r3
 8007440:	4619      	mov	r1, r3
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f001 fdf0 	bl	8009028 <USBD_LL_StallEP>
 8007448:	4603      	mov	r3, r0
 800744a:	73fb      	strb	r3, [r7, #15]
      break;
 800744c:	bf00      	nop
  }

  return ret;
 800744e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	460b      	mov	r3, r1
 8007462:	607a      	str	r2, [r7, #4]
 8007464:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800746a:	7afb      	ldrb	r3, [r7, #11]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d16e      	bne.n	800754e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007476:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800747e:	2b03      	cmp	r3, #3
 8007480:	f040 8098 	bne.w	80075b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	689a      	ldr	r2, [r3, #8]
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	429a      	cmp	r2, r3
 800748e:	d913      	bls.n	80074b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	689a      	ldr	r2, [r3, #8]
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	1ad2      	subs	r2, r2, r3
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	68da      	ldr	r2, [r3, #12]
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	4293      	cmp	r3, r2
 80074a8:	bf28      	it	cs
 80074aa:	4613      	movcs	r3, r2
 80074ac:	461a      	mov	r2, r3
 80074ae:	6879      	ldr	r1, [r7, #4]
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f001 f988 	bl	80087c6 <USBD_CtlContinueRx>
 80074b6:	e07d      	b.n	80075b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80074be:	f003 031f 	and.w	r3, r3, #31
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d014      	beq.n	80074f0 <USBD_LL_DataOutStage+0x98>
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d81d      	bhi.n	8007506 <USBD_LL_DataOutStage+0xae>
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d002      	beq.n	80074d4 <USBD_LL_DataOutStage+0x7c>
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d003      	beq.n	80074da <USBD_LL_DataOutStage+0x82>
 80074d2:	e018      	b.n	8007506 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	75bb      	strb	r3, [r7, #22]
            break;
 80074d8:	e018      	b.n	800750c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	4619      	mov	r1, r3
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f000 fa64 	bl	80079b2 <USBD_CoreFindIF>
 80074ea:	4603      	mov	r3, r0
 80074ec:	75bb      	strb	r3, [r7, #22]
            break;
 80074ee:	e00d      	b.n	800750c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	4619      	mov	r1, r3
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 fa66 	bl	80079cc <USBD_CoreFindEP>
 8007500:	4603      	mov	r3, r0
 8007502:	75bb      	strb	r3, [r7, #22]
            break;
 8007504:	e002      	b.n	800750c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007506:	2300      	movs	r3, #0
 8007508:	75bb      	strb	r3, [r7, #22]
            break;
 800750a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800750c:	7dbb      	ldrb	r3, [r7, #22]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d119      	bne.n	8007546 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b03      	cmp	r3, #3
 800751c:	d113      	bne.n	8007546 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800751e:	7dba      	ldrb	r2, [r7, #22]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	32ae      	adds	r2, #174	@ 0xae
 8007524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00b      	beq.n	8007546 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800752e:	7dba      	ldrb	r2, [r7, #22]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007536:	7dba      	ldrb	r2, [r7, #22]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	32ae      	adds	r2, #174	@ 0xae
 800753c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f001 f94e 	bl	80087e8 <USBD_CtlSendStatus>
 800754c:	e032      	b.n	80075b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800754e:	7afb      	ldrb	r3, [r7, #11]
 8007550:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007554:	b2db      	uxtb	r3, r3
 8007556:	4619      	mov	r1, r3
 8007558:	68f8      	ldr	r0, [r7, #12]
 800755a:	f000 fa37 	bl	80079cc <USBD_CoreFindEP>
 800755e:	4603      	mov	r3, r0
 8007560:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007562:	7dbb      	ldrb	r3, [r7, #22]
 8007564:	2bff      	cmp	r3, #255	@ 0xff
 8007566:	d025      	beq.n	80075b4 <USBD_LL_DataOutStage+0x15c>
 8007568:	7dbb      	ldrb	r3, [r7, #22]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d122      	bne.n	80075b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b03      	cmp	r3, #3
 8007578:	d117      	bne.n	80075aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800757a:	7dba      	ldrb	r2, [r7, #22]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	32ae      	adds	r2, #174	@ 0xae
 8007580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00f      	beq.n	80075aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800758a:	7dba      	ldrb	r2, [r7, #22]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007592:	7dba      	ldrb	r2, [r7, #22]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	32ae      	adds	r2, #174	@ 0xae
 8007598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	7afa      	ldrb	r2, [r7, #11]
 80075a0:	4611      	mov	r1, r2
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	4798      	blx	r3
 80075a6:	4603      	mov	r3, r0
 80075a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80075aa:	7dfb      	ldrb	r3, [r7, #23]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80075b0:	7dfb      	ldrb	r3, [r7, #23]
 80075b2:	e000      	b.n	80075b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b086      	sub	sp, #24
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	460b      	mov	r3, r1
 80075c8:	607a      	str	r2, [r7, #4]
 80075ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80075cc:	7afb      	ldrb	r3, [r7, #11]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d16f      	bne.n	80076b2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3314      	adds	r3, #20
 80075d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d15a      	bne.n	8007698 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	689a      	ldr	r2, [r3, #8]
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d914      	bls.n	8007618 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	689a      	ldr	r2, [r3, #8]
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	1ad2      	subs	r2, r2, r3
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	461a      	mov	r2, r3
 8007602:	6879      	ldr	r1, [r7, #4]
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f001 f8b0 	bl	800876a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800760a:	2300      	movs	r3, #0
 800760c:	2200      	movs	r2, #0
 800760e:	2100      	movs	r1, #0
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f001 fdb3 	bl	800917c <USBD_LL_PrepareReceive>
 8007616:	e03f      	b.n	8007698 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	68da      	ldr	r2, [r3, #12]
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	429a      	cmp	r2, r3
 8007622:	d11c      	bne.n	800765e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	685a      	ldr	r2, [r3, #4]
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800762c:	429a      	cmp	r2, r3
 800762e:	d316      	bcc.n	800765e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	685a      	ldr	r2, [r3, #4]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800763a:	429a      	cmp	r2, r3
 800763c:	d20f      	bcs.n	800765e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800763e:	2200      	movs	r2, #0
 8007640:	2100      	movs	r1, #0
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f001 f891 	bl	800876a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007650:	2300      	movs	r3, #0
 8007652:	2200      	movs	r2, #0
 8007654:	2100      	movs	r1, #0
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f001 fd90 	bl	800917c <USBD_LL_PrepareReceive>
 800765c:	e01c      	b.n	8007698 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b03      	cmp	r3, #3
 8007668:	d10f      	bne.n	800768a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d009      	beq.n	800768a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800768a:	2180      	movs	r1, #128	@ 0x80
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f001 fccb 	bl	8009028 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007692:	68f8      	ldr	r0, [r7, #12]
 8007694:	f001 f8bb 	bl	800880e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d03a      	beq.n	8007718 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f7ff fe42 	bl	800732c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80076b0:	e032      	b.n	8007718 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80076b2:	7afb      	ldrb	r3, [r7, #11]
 80076b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	4619      	mov	r1, r3
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 f985 	bl	80079cc <USBD_CoreFindEP>
 80076c2:	4603      	mov	r3, r0
 80076c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
 80076c8:	2bff      	cmp	r3, #255	@ 0xff
 80076ca:	d025      	beq.n	8007718 <USBD_LL_DataInStage+0x15a>
 80076cc:	7dfb      	ldrb	r3, [r7, #23]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d122      	bne.n	8007718 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d11c      	bne.n	8007718 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80076de:	7dfa      	ldrb	r2, [r7, #23]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	32ae      	adds	r2, #174	@ 0xae
 80076e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d014      	beq.n	8007718 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80076ee:	7dfa      	ldrb	r2, [r7, #23]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80076f6:	7dfa      	ldrb	r2, [r7, #23]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	32ae      	adds	r2, #174	@ 0xae
 80076fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	7afa      	ldrb	r2, [r7, #11]
 8007704:	4611      	mov	r1, r2
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	4798      	blx	r3
 800770a:	4603      	mov	r3, r0
 800770c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800770e:	7dbb      	ldrb	r3, [r7, #22]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007714:	7dbb      	ldrb	r3, [r7, #22]
 8007716:	e000      	b.n	800771a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3718      	adds	r7, #24
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800775a:	2b00      	cmp	r3, #0
 800775c:	d014      	beq.n	8007788 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00e      	beq.n	8007788 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	6852      	ldr	r2, [r2, #4]
 8007776:	b2d2      	uxtb	r2, r2
 8007778:	4611      	mov	r1, r2
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4798      	blx	r3
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d001      	beq.n	8007788 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007784:	2303      	movs	r3, #3
 8007786:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007788:	2340      	movs	r3, #64	@ 0x40
 800778a:	2200      	movs	r2, #0
 800778c:	2100      	movs	r1, #0
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f001 fc05 	bl	8008f9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2240      	movs	r2, #64	@ 0x40
 80077a0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077a4:	2340      	movs	r3, #64	@ 0x40
 80077a6:	2200      	movs	r2, #0
 80077a8:	2180      	movs	r1, #128	@ 0x80
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f001 fbf7 	bl	8008f9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2240      	movs	r2, #64	@ 0x40
 80077ba:	621a      	str	r2, [r3, #32]

  return ret;
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b083      	sub	sp, #12
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	460b      	mov	r3, r1
 80077d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	78fa      	ldrb	r2, [r7, #3]
 80077d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b083      	sub	sp, #12
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b04      	cmp	r3, #4
 80077f8:	d006      	beq.n	8007808 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007800:	b2da      	uxtb	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2204      	movs	r2, #4
 800780c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800781e:	b480      	push	{r7}
 8007820:	b083      	sub	sp, #12
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b04      	cmp	r3, #4
 8007830:	d106      	bne.n	8007840 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007838:	b2da      	uxtb	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800784e:	b580      	push	{r7, lr}
 8007850:	b082      	sub	sp, #8
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b03      	cmp	r3, #3
 8007860:	d110      	bne.n	8007884 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00b      	beq.n	8007884 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007872:	69db      	ldr	r3, [r3, #28]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d005      	beq.n	8007884 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b082      	sub	sp, #8
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
 8007896:	460b      	mov	r3, r1
 8007898:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	32ae      	adds	r2, #174	@ 0xae
 80078a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d101      	bne.n	80078b0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e01c      	b.n	80078ea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	2b03      	cmp	r3, #3
 80078ba:	d115      	bne.n	80078e8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	32ae      	adds	r2, #174	@ 0xae
 80078c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00b      	beq.n	80078e8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	32ae      	adds	r2, #174	@ 0xae
 80078da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078de:	6a1b      	ldr	r3, [r3, #32]
 80078e0:	78fa      	ldrb	r2, [r7, #3]
 80078e2:	4611      	mov	r1, r2
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b082      	sub	sp, #8
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	460b      	mov	r3, r1
 80078fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	32ae      	adds	r2, #174	@ 0xae
 8007908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d101      	bne.n	8007914 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007910:	2303      	movs	r3, #3
 8007912:	e01c      	b.n	800794e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800791a:	b2db      	uxtb	r3, r3
 800791c:	2b03      	cmp	r3, #3
 800791e:	d115      	bne.n	800794c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	32ae      	adds	r2, #174	@ 0xae
 800792a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800792e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00b      	beq.n	800794c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	32ae      	adds	r2, #174	@ 0xae
 800793e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007944:	78fa      	ldrb	r2, [r7, #3]
 8007946:	4611      	mov	r1, r2
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00e      	beq.n	80079a8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	6852      	ldr	r2, [r2, #4]
 8007996:	b2d2      	uxtb	r2, r2
 8007998:	4611      	mov	r1, r2
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	4798      	blx	r3
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80079a4:	2303      	movs	r3, #3
 80079a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b083      	sub	sp, #12
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	460b      	mov	r3, r1
 80079bc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80079be:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80079d8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80079da:	4618      	mov	r0, r3
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b086      	sub	sp, #24
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	460b      	mov	r3, r1
 80079f0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80079fa:	2300      	movs	r3, #0
 80079fc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	885b      	ldrh	r3, [r3, #2]
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	7812      	ldrb	r2, [r2, #0]
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d91f      	bls.n	8007a4c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007a12:	e013      	b.n	8007a3c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007a14:	f107 030a 	add.w	r3, r7, #10
 8007a18:	4619      	mov	r1, r3
 8007a1a:	6978      	ldr	r0, [r7, #20]
 8007a1c:	f000 f81b 	bl	8007a56 <USBD_GetNextDesc>
 8007a20:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	785b      	ldrb	r3, [r3, #1]
 8007a26:	2b05      	cmp	r3, #5
 8007a28:	d108      	bne.n	8007a3c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	789b      	ldrb	r3, [r3, #2]
 8007a32:	78fa      	ldrb	r2, [r7, #3]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d008      	beq.n	8007a4a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	885b      	ldrh	r3, [r3, #2]
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	897b      	ldrh	r3, [r7, #10]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d8e5      	bhi.n	8007a14 <USBD_GetEpDesc+0x2e>
 8007a48:	e000      	b.n	8007a4c <USBD_GetEpDesc+0x66>
          break;
 8007a4a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007a4c:	693b      	ldr	r3, [r7, #16]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3718      	adds	r7, #24
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b085      	sub	sp, #20
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	881b      	ldrh	r3, [r3, #0]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	7812      	ldrb	r2, [r2, #0]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007a80:	68fb      	ldr	r3, [r7, #12]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b087      	sub	sp, #28
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007aac:	8a3b      	ldrh	r3, [r7, #16]
 8007aae:	021b      	lsls	r3, r3, #8
 8007ab0:	b21a      	sxth	r2, r3
 8007ab2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	b21b      	sxth	r3, r3
 8007aba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007abc:	89fb      	ldrh	r3, [r7, #14]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	371c      	adds	r7, #28
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
	...

08007acc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ae2:	2b40      	cmp	r3, #64	@ 0x40
 8007ae4:	d005      	beq.n	8007af2 <USBD_StdDevReq+0x26>
 8007ae6:	2b40      	cmp	r3, #64	@ 0x40
 8007ae8:	d857      	bhi.n	8007b9a <USBD_StdDevReq+0xce>
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00f      	beq.n	8007b0e <USBD_StdDevReq+0x42>
 8007aee:	2b20      	cmp	r3, #32
 8007af0:	d153      	bne.n	8007b9a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	32ae      	adds	r2, #174	@ 0xae
 8007afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	4798      	blx	r3
 8007b08:	4603      	mov	r3, r0
 8007b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b0c:	e04a      	b.n	8007ba4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	785b      	ldrb	r3, [r3, #1]
 8007b12:	2b09      	cmp	r3, #9
 8007b14:	d83b      	bhi.n	8007b8e <USBD_StdDevReq+0xc2>
 8007b16:	a201      	add	r2, pc, #4	@ (adr r2, 8007b1c <USBD_StdDevReq+0x50>)
 8007b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1c:	08007b71 	.word	0x08007b71
 8007b20:	08007b85 	.word	0x08007b85
 8007b24:	08007b8f 	.word	0x08007b8f
 8007b28:	08007b7b 	.word	0x08007b7b
 8007b2c:	08007b8f 	.word	0x08007b8f
 8007b30:	08007b4f 	.word	0x08007b4f
 8007b34:	08007b45 	.word	0x08007b45
 8007b38:	08007b8f 	.word	0x08007b8f
 8007b3c:	08007b67 	.word	0x08007b67
 8007b40:	08007b59 	.word	0x08007b59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b44:	6839      	ldr	r1, [r7, #0]
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fa3c 	bl	8007fc4 <USBD_GetDescriptor>
          break;
 8007b4c:	e024      	b.n	8007b98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fba1 	bl	8008298 <USBD_SetAddress>
          break;
 8007b56:	e01f      	b.n	8007b98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fbe0 	bl	8008320 <USBD_SetConfig>
 8007b60:	4603      	mov	r3, r0
 8007b62:	73fb      	strb	r3, [r7, #15]
          break;
 8007b64:	e018      	b.n	8007b98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 fc83 	bl	8008474 <USBD_GetConfig>
          break;
 8007b6e:	e013      	b.n	8007b98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fcb4 	bl	80084e0 <USBD_GetStatus>
          break;
 8007b78:	e00e      	b.n	8007b98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fce3 	bl	8008548 <USBD_SetFeature>
          break;
 8007b82:	e009      	b.n	8007b98 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fd07 	bl	800859a <USBD_ClrFeature>
          break;
 8007b8c:	e004      	b.n	8007b98 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fd5e 	bl	8008652 <USBD_CtlError>
          break;
 8007b96:	bf00      	nop
      }
      break;
 8007b98:	e004      	b.n	8007ba4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fd58 	bl	8008652 <USBD_CtlError>
      break;
 8007ba2:	bf00      	nop
  }

  return ret;
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop

08007bb0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007bc6:	2b40      	cmp	r3, #64	@ 0x40
 8007bc8:	d005      	beq.n	8007bd6 <USBD_StdItfReq+0x26>
 8007bca:	2b40      	cmp	r3, #64	@ 0x40
 8007bcc:	d852      	bhi.n	8007c74 <USBD_StdItfReq+0xc4>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d001      	beq.n	8007bd6 <USBD_StdItfReq+0x26>
 8007bd2:	2b20      	cmp	r3, #32
 8007bd4:	d14e      	bne.n	8007c74 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	3b01      	subs	r3, #1
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d840      	bhi.n	8007c66 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	889b      	ldrh	r3, [r3, #4]
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d836      	bhi.n	8007c5c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	889b      	ldrh	r3, [r3, #4]
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f7ff fedb 	bl	80079b2 <USBD_CoreFindIF>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c00:	7bbb      	ldrb	r3, [r7, #14]
 8007c02:	2bff      	cmp	r3, #255	@ 0xff
 8007c04:	d01d      	beq.n	8007c42 <USBD_StdItfReq+0x92>
 8007c06:	7bbb      	ldrb	r3, [r7, #14]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d11a      	bne.n	8007c42 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007c0c:	7bba      	ldrb	r2, [r7, #14]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	32ae      	adds	r2, #174	@ 0xae
 8007c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00f      	beq.n	8007c3c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007c1c:	7bba      	ldrb	r2, [r7, #14]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007c24:	7bba      	ldrb	r2, [r7, #14]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	32ae      	adds	r2, #174	@ 0xae
 8007c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	4798      	blx	r3
 8007c36:	4603      	mov	r3, r0
 8007c38:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c3a:	e004      	b.n	8007c46 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007c40:	e001      	b.n	8007c46 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007c42:	2303      	movs	r3, #3
 8007c44:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	88db      	ldrh	r3, [r3, #6]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d110      	bne.n	8007c70 <USBD_StdItfReq+0xc0>
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10d      	bne.n	8007c70 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fdc7 	bl	80087e8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c5a:	e009      	b.n	8007c70 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 fcf7 	bl	8008652 <USBD_CtlError>
          break;
 8007c64:	e004      	b.n	8007c70 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fcf2 	bl	8008652 <USBD_CtlError>
          break;
 8007c6e:	e000      	b.n	8007c72 <USBD_StdItfReq+0xc2>
          break;
 8007c70:	bf00      	nop
      }
      break;
 8007c72:	e004      	b.n	8007c7e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fceb 	bl	8008652 <USBD_CtlError>
      break;
 8007c7c:	bf00      	nop
  }

  return ret;
 8007c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	889b      	ldrh	r3, [r3, #4]
 8007c9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ca4:	2b40      	cmp	r3, #64	@ 0x40
 8007ca6:	d007      	beq.n	8007cb8 <USBD_StdEPReq+0x30>
 8007ca8:	2b40      	cmp	r3, #64	@ 0x40
 8007caa:	f200 817f 	bhi.w	8007fac <USBD_StdEPReq+0x324>
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d02a      	beq.n	8007d08 <USBD_StdEPReq+0x80>
 8007cb2:	2b20      	cmp	r3, #32
 8007cb4:	f040 817a 	bne.w	8007fac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007cb8:	7bbb      	ldrb	r3, [r7, #14]
 8007cba:	4619      	mov	r1, r3
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f7ff fe85 	bl	80079cc <USBD_CoreFindEP>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007cc6:	7b7b      	ldrb	r3, [r7, #13]
 8007cc8:	2bff      	cmp	r3, #255	@ 0xff
 8007cca:	f000 8174 	beq.w	8007fb6 <USBD_StdEPReq+0x32e>
 8007cce:	7b7b      	ldrb	r3, [r7, #13]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f040 8170 	bne.w	8007fb6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007cd6:	7b7a      	ldrb	r2, [r7, #13]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007cde:	7b7a      	ldrb	r2, [r7, #13]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	32ae      	adds	r2, #174	@ 0xae
 8007ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 8163 	beq.w	8007fb6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007cf0:	7b7a      	ldrb	r2, [r7, #13]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	32ae      	adds	r2, #174	@ 0xae
 8007cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	6839      	ldr	r1, [r7, #0]
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	4798      	blx	r3
 8007d02:	4603      	mov	r3, r0
 8007d04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007d06:	e156      	b.n	8007fb6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	785b      	ldrb	r3, [r3, #1]
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d008      	beq.n	8007d22 <USBD_StdEPReq+0x9a>
 8007d10:	2b03      	cmp	r3, #3
 8007d12:	f300 8145 	bgt.w	8007fa0 <USBD_StdEPReq+0x318>
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f000 809b 	beq.w	8007e52 <USBD_StdEPReq+0x1ca>
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d03c      	beq.n	8007d9a <USBD_StdEPReq+0x112>
 8007d20:	e13e      	b.n	8007fa0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d002      	beq.n	8007d34 <USBD_StdEPReq+0xac>
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d016      	beq.n	8007d60 <USBD_StdEPReq+0xd8>
 8007d32:	e02c      	b.n	8007d8e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d34:	7bbb      	ldrb	r3, [r7, #14]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00d      	beq.n	8007d56 <USBD_StdEPReq+0xce>
 8007d3a:	7bbb      	ldrb	r3, [r7, #14]
 8007d3c:	2b80      	cmp	r3, #128	@ 0x80
 8007d3e:	d00a      	beq.n	8007d56 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d40:	7bbb      	ldrb	r3, [r7, #14]
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f001 f96f 	bl	8009028 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d4a:	2180      	movs	r1, #128	@ 0x80
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f001 f96b 	bl	8009028 <USBD_LL_StallEP>
 8007d52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d54:	e020      	b.n	8007d98 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 fc7a 	bl	8008652 <USBD_CtlError>
              break;
 8007d5e:	e01b      	b.n	8007d98 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	885b      	ldrh	r3, [r3, #2]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d10e      	bne.n	8007d86 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d68:	7bbb      	ldrb	r3, [r7, #14]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00b      	beq.n	8007d86 <USBD_StdEPReq+0xfe>
 8007d6e:	7bbb      	ldrb	r3, [r7, #14]
 8007d70:	2b80      	cmp	r3, #128	@ 0x80
 8007d72:	d008      	beq.n	8007d86 <USBD_StdEPReq+0xfe>
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	88db      	ldrh	r3, [r3, #6]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d104      	bne.n	8007d86 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007d7c:	7bbb      	ldrb	r3, [r7, #14]
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f001 f951 	bl	8009028 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fd2e 	bl	80087e8 <USBD_CtlSendStatus>

              break;
 8007d8c:	e004      	b.n	8007d98 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fc5e 	bl	8008652 <USBD_CtlError>
              break;
 8007d96:	bf00      	nop
          }
          break;
 8007d98:	e107      	b.n	8007faa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d002      	beq.n	8007dac <USBD_StdEPReq+0x124>
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d016      	beq.n	8007dd8 <USBD_StdEPReq+0x150>
 8007daa:	e04b      	b.n	8007e44 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dac:	7bbb      	ldrb	r3, [r7, #14]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00d      	beq.n	8007dce <USBD_StdEPReq+0x146>
 8007db2:	7bbb      	ldrb	r3, [r7, #14]
 8007db4:	2b80      	cmp	r3, #128	@ 0x80
 8007db6:	d00a      	beq.n	8007dce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007db8:	7bbb      	ldrb	r3, [r7, #14]
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f001 f933 	bl	8009028 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007dc2:	2180      	movs	r1, #128	@ 0x80
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f001 f92f 	bl	8009028 <USBD_LL_StallEP>
 8007dca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007dcc:	e040      	b.n	8007e50 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 fc3e 	bl	8008652 <USBD_CtlError>
              break;
 8007dd6:	e03b      	b.n	8007e50 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	885b      	ldrh	r3, [r3, #2]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d136      	bne.n	8007e4e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007de0:	7bbb      	ldrb	r3, [r7, #14]
 8007de2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d004      	beq.n	8007df4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007dea:	7bbb      	ldrb	r3, [r7, #14]
 8007dec:	4619      	mov	r1, r3
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f001 f939 	bl	8009066 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fcf7 	bl	80087e8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007dfa:	7bbb      	ldrb	r3, [r7, #14]
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7ff fde4 	bl	80079cc <USBD_CoreFindEP>
 8007e04:	4603      	mov	r3, r0
 8007e06:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e08:	7b7b      	ldrb	r3, [r7, #13]
 8007e0a:	2bff      	cmp	r3, #255	@ 0xff
 8007e0c:	d01f      	beq.n	8007e4e <USBD_StdEPReq+0x1c6>
 8007e0e:	7b7b      	ldrb	r3, [r7, #13]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d11c      	bne.n	8007e4e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007e14:	7b7a      	ldrb	r2, [r7, #13]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007e1c:	7b7a      	ldrb	r2, [r7, #13]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	32ae      	adds	r2, #174	@ 0xae
 8007e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d010      	beq.n	8007e4e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e2c:	7b7a      	ldrb	r2, [r7, #13]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	32ae      	adds	r2, #174	@ 0xae
 8007e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	6839      	ldr	r1, [r7, #0]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	4798      	blx	r3
 8007e3e:	4603      	mov	r3, r0
 8007e40:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007e42:	e004      	b.n	8007e4e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007e44:	6839      	ldr	r1, [r7, #0]
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fc03 	bl	8008652 <USBD_CtlError>
              break;
 8007e4c:	e000      	b.n	8007e50 <USBD_StdEPReq+0x1c8>
              break;
 8007e4e:	bf00      	nop
          }
          break;
 8007e50:	e0ab      	b.n	8007faa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d002      	beq.n	8007e64 <USBD_StdEPReq+0x1dc>
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	d032      	beq.n	8007ec8 <USBD_StdEPReq+0x240>
 8007e62:	e097      	b.n	8007f94 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e64:	7bbb      	ldrb	r3, [r7, #14]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d007      	beq.n	8007e7a <USBD_StdEPReq+0x1f2>
 8007e6a:	7bbb      	ldrb	r3, [r7, #14]
 8007e6c:	2b80      	cmp	r3, #128	@ 0x80
 8007e6e:	d004      	beq.n	8007e7a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fbed 	bl	8008652 <USBD_CtlError>
                break;
 8007e78:	e091      	b.n	8007f9e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	da0b      	bge.n	8007e9a <USBD_StdEPReq+0x212>
 8007e82:	7bbb      	ldrb	r3, [r7, #14]
 8007e84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007e88:	4613      	mov	r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4413      	add	r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	3310      	adds	r3, #16
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	4413      	add	r3, r2
 8007e96:	3304      	adds	r3, #4
 8007e98:	e00b      	b.n	8007eb2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e9a:	7bbb      	ldrb	r3, [r7, #14]
 8007e9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	009b      	lsls	r3, r3, #2
 8007ea8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	4413      	add	r3, r2
 8007eb0:	3304      	adds	r3, #4
 8007eb2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 fc37 	bl	8008734 <USBD_CtlSendData>
              break;
 8007ec6:	e06a      	b.n	8007f9e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ec8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	da11      	bge.n	8007ef4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
 8007ed2:	f003 020f 	and.w	r2, r3, #15
 8007ed6:	6879      	ldr	r1, [r7, #4]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	440b      	add	r3, r1
 8007ee2:	3324      	adds	r3, #36	@ 0x24
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d117      	bne.n	8007f1a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fbb0 	bl	8008652 <USBD_CtlError>
                  break;
 8007ef2:	e054      	b.n	8007f9e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ef4:	7bbb      	ldrb	r3, [r7, #14]
 8007ef6:	f003 020f 	and.w	r2, r3, #15
 8007efa:	6879      	ldr	r1, [r7, #4]
 8007efc:	4613      	mov	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4413      	add	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	440b      	add	r3, r1
 8007f06:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007f0a:	881b      	ldrh	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d104      	bne.n	8007f1a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 fb9d 	bl	8008652 <USBD_CtlError>
                  break;
 8007f18:	e041      	b.n	8007f9e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	da0b      	bge.n	8007f3a <USBD_StdEPReq+0x2b2>
 8007f22:	7bbb      	ldrb	r3, [r7, #14]
 8007f24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f28:	4613      	mov	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	3310      	adds	r3, #16
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	4413      	add	r3, r2
 8007f36:	3304      	adds	r3, #4
 8007f38:	e00b      	b.n	8007f52 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007f3a:	7bbb      	ldrb	r3, [r7, #14]
 8007f3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f40:	4613      	mov	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4413      	add	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	4413      	add	r3, r2
 8007f50:	3304      	adds	r3, #4
 8007f52:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007f54:	7bbb      	ldrb	r3, [r7, #14]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d002      	beq.n	8007f60 <USBD_StdEPReq+0x2d8>
 8007f5a:	7bbb      	ldrb	r3, [r7, #14]
 8007f5c:	2b80      	cmp	r3, #128	@ 0x80
 8007f5e:	d103      	bne.n	8007f68 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2200      	movs	r2, #0
 8007f64:	601a      	str	r2, [r3, #0]
 8007f66:	e00e      	b.n	8007f86 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007f68:	7bbb      	ldrb	r3, [r7, #14]
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f001 f899 	bl	80090a4 <USBD_LL_IsStallEP>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d003      	beq.n	8007f80 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	e002      	b.n	8007f86 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2200      	movs	r2, #0
 8007f84:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2202      	movs	r2, #2
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fbd1 	bl	8008734 <USBD_CtlSendData>
              break;
 8007f92:	e004      	b.n	8007f9e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007f94:	6839      	ldr	r1, [r7, #0]
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fb5b 	bl	8008652 <USBD_CtlError>
              break;
 8007f9c:	bf00      	nop
          }
          break;
 8007f9e:	e004      	b.n	8007faa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fb55 	bl	8008652 <USBD_CtlError>
          break;
 8007fa8:	bf00      	nop
      }
      break;
 8007faa:	e005      	b.n	8007fb8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 fb4f 	bl	8008652 <USBD_CtlError>
      break;
 8007fb4:	e000      	b.n	8007fb8 <USBD_StdEPReq+0x330>
      break;
 8007fb6:	bf00      	nop
  }

  return ret;
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
	...

08007fc4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	885b      	ldrh	r3, [r3, #2]
 8007fde:	0a1b      	lsrs	r3, r3, #8
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	3b01      	subs	r3, #1
 8007fe4:	2b06      	cmp	r3, #6
 8007fe6:	f200 8128 	bhi.w	800823a <USBD_GetDescriptor+0x276>
 8007fea:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff0 <USBD_GetDescriptor+0x2c>)
 8007fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff0:	0800800d 	.word	0x0800800d
 8007ff4:	08008025 	.word	0x08008025
 8007ff8:	08008065 	.word	0x08008065
 8007ffc:	0800823b 	.word	0x0800823b
 8008000:	0800823b 	.word	0x0800823b
 8008004:	080081db 	.word	0x080081db
 8008008:	08008207 	.word	0x08008207
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	7c12      	ldrb	r2, [r2, #16]
 8008018:	f107 0108 	add.w	r1, r7, #8
 800801c:	4610      	mov	r0, r2
 800801e:	4798      	blx	r3
 8008020:	60f8      	str	r0, [r7, #12]
      break;
 8008022:	e112      	b.n	800824a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	7c1b      	ldrb	r3, [r3, #16]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10d      	bne.n	8008048 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008034:	f107 0208 	add.w	r2, r7, #8
 8008038:	4610      	mov	r0, r2
 800803a:	4798      	blx	r3
 800803c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	3301      	adds	r3, #1
 8008042:	2202      	movs	r2, #2
 8008044:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008046:	e100      	b.n	800824a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800804e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008050:	f107 0208 	add.w	r2, r7, #8
 8008054:	4610      	mov	r0, r2
 8008056:	4798      	blx	r3
 8008058:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	3301      	adds	r3, #1
 800805e:	2202      	movs	r2, #2
 8008060:	701a      	strb	r2, [r3, #0]
      break;
 8008062:	e0f2      	b.n	800824a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	885b      	ldrh	r3, [r3, #2]
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b05      	cmp	r3, #5
 800806c:	f200 80ac 	bhi.w	80081c8 <USBD_GetDescriptor+0x204>
 8008070:	a201      	add	r2, pc, #4	@ (adr r2, 8008078 <USBD_GetDescriptor+0xb4>)
 8008072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008076:	bf00      	nop
 8008078:	08008091 	.word	0x08008091
 800807c:	080080c5 	.word	0x080080c5
 8008080:	080080f9 	.word	0x080080f9
 8008084:	0800812d 	.word	0x0800812d
 8008088:	08008161 	.word	0x08008161
 800808c:	08008195 	.word	0x08008195
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00b      	beq.n	80080b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	7c12      	ldrb	r2, [r2, #16]
 80080a8:	f107 0108 	add.w	r1, r7, #8
 80080ac:	4610      	mov	r0, r2
 80080ae:	4798      	blx	r3
 80080b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080b2:	e091      	b.n	80081d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 facb 	bl	8008652 <USBD_CtlError>
            err++;
 80080bc:	7afb      	ldrb	r3, [r7, #11]
 80080be:	3301      	adds	r3, #1
 80080c0:	72fb      	strb	r3, [r7, #11]
          break;
 80080c2:	e089      	b.n	80081d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00b      	beq.n	80080e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	7c12      	ldrb	r2, [r2, #16]
 80080dc:	f107 0108 	add.w	r1, r7, #8
 80080e0:	4610      	mov	r0, r2
 80080e2:	4798      	blx	r3
 80080e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080e6:	e077      	b.n	80081d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fab1 	bl	8008652 <USBD_CtlError>
            err++;
 80080f0:	7afb      	ldrb	r3, [r7, #11]
 80080f2:	3301      	adds	r3, #1
 80080f4:	72fb      	strb	r3, [r7, #11]
          break;
 80080f6:	e06f      	b.n	80081d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00b      	beq.n	800811c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	7c12      	ldrb	r2, [r2, #16]
 8008110:	f107 0108 	add.w	r1, r7, #8
 8008114:	4610      	mov	r0, r2
 8008116:	4798      	blx	r3
 8008118:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800811a:	e05d      	b.n	80081d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800811c:	6839      	ldr	r1, [r7, #0]
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f000 fa97 	bl	8008652 <USBD_CtlError>
            err++;
 8008124:	7afb      	ldrb	r3, [r7, #11]
 8008126:	3301      	adds	r3, #1
 8008128:	72fb      	strb	r3, [r7, #11]
          break;
 800812a:	e055      	b.n	80081d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00b      	beq.n	8008150 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	7c12      	ldrb	r2, [r2, #16]
 8008144:	f107 0108 	add.w	r1, r7, #8
 8008148:	4610      	mov	r0, r2
 800814a:	4798      	blx	r3
 800814c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800814e:	e043      	b.n	80081d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008150:	6839      	ldr	r1, [r7, #0]
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fa7d 	bl	8008652 <USBD_CtlError>
            err++;
 8008158:	7afb      	ldrb	r3, [r7, #11]
 800815a:	3301      	adds	r3, #1
 800815c:	72fb      	strb	r3, [r7, #11]
          break;
 800815e:	e03b      	b.n	80081d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008166:	695b      	ldr	r3, [r3, #20]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00b      	beq.n	8008184 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008172:	695b      	ldr	r3, [r3, #20]
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	7c12      	ldrb	r2, [r2, #16]
 8008178:	f107 0108 	add.w	r1, r7, #8
 800817c:	4610      	mov	r0, r2
 800817e:	4798      	blx	r3
 8008180:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008182:	e029      	b.n	80081d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008184:	6839      	ldr	r1, [r7, #0]
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fa63 	bl	8008652 <USBD_CtlError>
            err++;
 800818c:	7afb      	ldrb	r3, [r7, #11]
 800818e:	3301      	adds	r3, #1
 8008190:	72fb      	strb	r3, [r7, #11]
          break;
 8008192:	e021      	b.n	80081d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00b      	beq.n	80081b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	7c12      	ldrb	r2, [r2, #16]
 80081ac:	f107 0108 	add.w	r1, r7, #8
 80081b0:	4610      	mov	r0, r2
 80081b2:	4798      	blx	r3
 80081b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081b6:	e00f      	b.n	80081d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80081b8:	6839      	ldr	r1, [r7, #0]
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fa49 	bl	8008652 <USBD_CtlError>
            err++;
 80081c0:	7afb      	ldrb	r3, [r7, #11]
 80081c2:	3301      	adds	r3, #1
 80081c4:	72fb      	strb	r3, [r7, #11]
          break;
 80081c6:	e007      	b.n	80081d8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80081c8:	6839      	ldr	r1, [r7, #0]
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fa41 	bl	8008652 <USBD_CtlError>
          err++;
 80081d0:	7afb      	ldrb	r3, [r7, #11]
 80081d2:	3301      	adds	r3, #1
 80081d4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80081d6:	bf00      	nop
      }
      break;
 80081d8:	e037      	b.n	800824a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	7c1b      	ldrb	r3, [r3, #16]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d109      	bne.n	80081f6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081ea:	f107 0208 	add.w	r2, r7, #8
 80081ee:	4610      	mov	r0, r2
 80081f0:	4798      	blx	r3
 80081f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80081f4:	e029      	b.n	800824a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80081f6:	6839      	ldr	r1, [r7, #0]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f000 fa2a 	bl	8008652 <USBD_CtlError>
        err++;
 80081fe:	7afb      	ldrb	r3, [r7, #11]
 8008200:	3301      	adds	r3, #1
 8008202:	72fb      	strb	r3, [r7, #11]
      break;
 8008204:	e021      	b.n	800824a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	7c1b      	ldrb	r3, [r3, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10d      	bne.n	800822a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008216:	f107 0208 	add.w	r2, r7, #8
 800821a:	4610      	mov	r0, r2
 800821c:	4798      	blx	r3
 800821e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	3301      	adds	r3, #1
 8008224:	2207      	movs	r2, #7
 8008226:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008228:	e00f      	b.n	800824a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800822a:	6839      	ldr	r1, [r7, #0]
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f000 fa10 	bl	8008652 <USBD_CtlError>
        err++;
 8008232:	7afb      	ldrb	r3, [r7, #11]
 8008234:	3301      	adds	r3, #1
 8008236:	72fb      	strb	r3, [r7, #11]
      break;
 8008238:	e007      	b.n	800824a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800823a:	6839      	ldr	r1, [r7, #0]
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fa08 	bl	8008652 <USBD_CtlError>
      err++;
 8008242:	7afb      	ldrb	r3, [r7, #11]
 8008244:	3301      	adds	r3, #1
 8008246:	72fb      	strb	r3, [r7, #11]
      break;
 8008248:	bf00      	nop
  }

  if (err != 0U)
 800824a:	7afb      	ldrb	r3, [r7, #11]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d11e      	bne.n	800828e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	88db      	ldrh	r3, [r3, #6]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d016      	beq.n	8008286 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008258:	893b      	ldrh	r3, [r7, #8]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00e      	beq.n	800827c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	88da      	ldrh	r2, [r3, #6]
 8008262:	893b      	ldrh	r3, [r7, #8]
 8008264:	4293      	cmp	r3, r2
 8008266:	bf28      	it	cs
 8008268:	4613      	movcs	r3, r2
 800826a:	b29b      	uxth	r3, r3
 800826c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800826e:	893b      	ldrh	r3, [r7, #8]
 8008270:	461a      	mov	r2, r3
 8008272:	68f9      	ldr	r1, [r7, #12]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 fa5d 	bl	8008734 <USBD_CtlSendData>
 800827a:	e009      	b.n	8008290 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800827c:	6839      	ldr	r1, [r7, #0]
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f9e7 	bl	8008652 <USBD_CtlError>
 8008284:	e004      	b.n	8008290 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 faae 	bl	80087e8 <USBD_CtlSendStatus>
 800828c:	e000      	b.n	8008290 <USBD_GetDescriptor+0x2cc>
    return;
 800828e:	bf00      	nop
  }
}
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop

08008298 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	889b      	ldrh	r3, [r3, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d131      	bne.n	800830e <USBD_SetAddress+0x76>
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	88db      	ldrh	r3, [r3, #6]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d12d      	bne.n	800830e <USBD_SetAddress+0x76>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	885b      	ldrh	r3, [r3, #2]
 80082b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80082b8:	d829      	bhi.n	800830e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	885b      	ldrh	r3, [r3, #2]
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	d104      	bne.n	80082dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80082d2:	6839      	ldr	r1, [r7, #0]
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f9bc 	bl	8008652 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082da:	e01d      	b.n	8008318 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	7bfa      	ldrb	r2, [r7, #15]
 80082e0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 ff07 	bl	80090fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fa7a 	bl	80087e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d004      	beq.n	8008304 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2202      	movs	r2, #2
 80082fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008302:	e009      	b.n	8008318 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2201      	movs	r2, #1
 8008308:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800830c:	e004      	b.n	8008318 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800830e:	6839      	ldr	r1, [r7, #0]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f99e 	bl	8008652 <USBD_CtlError>
  }
}
 8008316:	bf00      	nop
 8008318:	bf00      	nop
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800832a:	2300      	movs	r3, #0
 800832c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	885b      	ldrh	r3, [r3, #2]
 8008332:	b2da      	uxtb	r2, r3
 8008334:	4b4e      	ldr	r3, [pc, #312]	@ (8008470 <USBD_SetConfig+0x150>)
 8008336:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008338:	4b4d      	ldr	r3, [pc, #308]	@ (8008470 <USBD_SetConfig+0x150>)
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d905      	bls.n	800834c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f985 	bl	8008652 <USBD_CtlError>
    return USBD_FAIL;
 8008348:	2303      	movs	r3, #3
 800834a:	e08c      	b.n	8008466 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b02      	cmp	r3, #2
 8008356:	d002      	beq.n	800835e <USBD_SetConfig+0x3e>
 8008358:	2b03      	cmp	r3, #3
 800835a:	d029      	beq.n	80083b0 <USBD_SetConfig+0x90>
 800835c:	e075      	b.n	800844a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800835e:	4b44      	ldr	r3, [pc, #272]	@ (8008470 <USBD_SetConfig+0x150>)
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d020      	beq.n	80083a8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008366:	4b42      	ldr	r3, [pc, #264]	@ (8008470 <USBD_SetConfig+0x150>)
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	461a      	mov	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008370:	4b3f      	ldr	r3, [pc, #252]	@ (8008470 <USBD_SetConfig+0x150>)
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	4619      	mov	r1, r3
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7fe ffe3 	bl	8007342 <USBD_SetClassConfig>
 800837c:	4603      	mov	r3, r0
 800837e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008380:	7bfb      	ldrb	r3, [r7, #15]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d008      	beq.n	8008398 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008386:	6839      	ldr	r1, [r7, #0]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f962 	bl	8008652 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2202      	movs	r2, #2
 8008392:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008396:	e065      	b.n	8008464 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 fa25 	bl	80087e8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2203      	movs	r2, #3
 80083a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80083a6:	e05d      	b.n	8008464 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fa1d 	bl	80087e8 <USBD_CtlSendStatus>
      break;
 80083ae:	e059      	b.n	8008464 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80083b0:	4b2f      	ldr	r3, [pc, #188]	@ (8008470 <USBD_SetConfig+0x150>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d112      	bne.n	80083de <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2202      	movs	r2, #2
 80083bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80083c0:	4b2b      	ldr	r3, [pc, #172]	@ (8008470 <USBD_SetConfig+0x150>)
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	461a      	mov	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80083ca:	4b29      	ldr	r3, [pc, #164]	@ (8008470 <USBD_SetConfig+0x150>)
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f7fe ffd2 	bl	800737a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fa06 	bl	80087e8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80083dc:	e042      	b.n	8008464 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80083de:	4b24      	ldr	r3, [pc, #144]	@ (8008470 <USBD_SetConfig+0x150>)
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	461a      	mov	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d02a      	beq.n	8008442 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7fe ffc0 	bl	800737a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80083fa:	4b1d      	ldr	r3, [pc, #116]	@ (8008470 <USBD_SetConfig+0x150>)
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008404:	4b1a      	ldr	r3, [pc, #104]	@ (8008470 <USBD_SetConfig+0x150>)
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f7fe ff99 	bl	8007342 <USBD_SetClassConfig>
 8008410:	4603      	mov	r3, r0
 8008412:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008414:	7bfb      	ldrb	r3, [r7, #15]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00f      	beq.n	800843a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 f918 	bl	8008652 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	b2db      	uxtb	r3, r3
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7fe ffa5 	bl	800737a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2202      	movs	r2, #2
 8008434:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008438:	e014      	b.n	8008464 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f9d4 	bl	80087e8 <USBD_CtlSendStatus>
      break;
 8008440:	e010      	b.n	8008464 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f9d0 	bl	80087e8 <USBD_CtlSendStatus>
      break;
 8008448:	e00c      	b.n	8008464 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800844a:	6839      	ldr	r1, [r7, #0]
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f900 	bl	8008652 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008452:	4b07      	ldr	r3, [pc, #28]	@ (8008470 <USBD_SetConfig+0x150>)
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	4619      	mov	r1, r3
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f7fe ff8e 	bl	800737a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800845e:	2303      	movs	r3, #3
 8008460:	73fb      	strb	r3, [r7, #15]
      break;
 8008462:	bf00      	nop
  }

  return ret;
 8008464:	7bfb      	ldrb	r3, [r7, #15]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	20003208 	.word	0x20003208

08008474 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	88db      	ldrh	r3, [r3, #6]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d004      	beq.n	8008490 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 f8e2 	bl	8008652 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800848e:	e023      	b.n	80084d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008496:	b2db      	uxtb	r3, r3
 8008498:	2b02      	cmp	r3, #2
 800849a:	dc02      	bgt.n	80084a2 <USBD_GetConfig+0x2e>
 800849c:	2b00      	cmp	r3, #0
 800849e:	dc03      	bgt.n	80084a8 <USBD_GetConfig+0x34>
 80084a0:	e015      	b.n	80084ce <USBD_GetConfig+0x5a>
 80084a2:	2b03      	cmp	r3, #3
 80084a4:	d00b      	beq.n	80084be <USBD_GetConfig+0x4a>
 80084a6:	e012      	b.n	80084ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	3308      	adds	r3, #8
 80084b2:	2201      	movs	r2, #1
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f93c 	bl	8008734 <USBD_CtlSendData>
        break;
 80084bc:	e00c      	b.n	80084d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	3304      	adds	r3, #4
 80084c2:	2201      	movs	r2, #1
 80084c4:	4619      	mov	r1, r3
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f934 	bl	8008734 <USBD_CtlSendData>
        break;
 80084cc:	e004      	b.n	80084d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f8be 	bl	8008652 <USBD_CtlError>
        break;
 80084d6:	bf00      	nop
}
 80084d8:	bf00      	nop
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	3b01      	subs	r3, #1
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d81e      	bhi.n	8008536 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	88db      	ldrh	r3, [r3, #6]
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d004      	beq.n	800850a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 f8a5 	bl	8008652 <USBD_CtlError>
        break;
 8008508:	e01a      	b.n	8008540 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008516:	2b00      	cmp	r3, #0
 8008518:	d005      	beq.n	8008526 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68db      	ldr	r3, [r3, #12]
 800851e:	f043 0202 	orr.w	r2, r3, #2
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	330c      	adds	r3, #12
 800852a:	2202      	movs	r2, #2
 800852c:	4619      	mov	r1, r3
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f900 	bl	8008734 <USBD_CtlSendData>
      break;
 8008534:	e004      	b.n	8008540 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008536:	6839      	ldr	r1, [r7, #0]
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f88a 	bl	8008652 <USBD_CtlError>
      break;
 800853e:	bf00      	nop
  }
}
 8008540:	bf00      	nop
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	885b      	ldrh	r3, [r3, #2]
 8008556:	2b01      	cmp	r3, #1
 8008558:	d107      	bne.n	800856a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2201      	movs	r2, #1
 800855e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f940 	bl	80087e8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008568:	e013      	b.n	8008592 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	885b      	ldrh	r3, [r3, #2]
 800856e:	2b02      	cmp	r3, #2
 8008570:	d10b      	bne.n	800858a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	889b      	ldrh	r3, [r3, #4]
 8008576:	0a1b      	lsrs	r3, r3, #8
 8008578:	b29b      	uxth	r3, r3
 800857a:	b2da      	uxtb	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f930 	bl	80087e8 <USBD_CtlSendStatus>
}
 8008588:	e003      	b.n	8008592 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800858a:	6839      	ldr	r1, [r7, #0]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 f860 	bl	8008652 <USBD_CtlError>
}
 8008592:	bf00      	nop
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}

0800859a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b082      	sub	sp, #8
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
 80085a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	3b01      	subs	r3, #1
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d80b      	bhi.n	80085ca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	885b      	ldrh	r3, [r3, #2]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d10c      	bne.n	80085d4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f910 	bl	80087e8 <USBD_CtlSendStatus>
      }
      break;
 80085c8:	e004      	b.n	80085d4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80085ca:	6839      	ldr	r1, [r7, #0]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f840 	bl	8008652 <USBD_CtlError>
      break;
 80085d2:	e000      	b.n	80085d6 <USBD_ClrFeature+0x3c>
      break;
 80085d4:	bf00      	nop
  }
}
 80085d6:	bf00      	nop
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	781a      	ldrb	r2, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	3301      	adds	r3, #1
 80085f8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	781a      	ldrb	r2, [r3, #0]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3301      	adds	r3, #1
 8008606:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f7ff fa40 	bl	8007a8e <SWAPBYTE>
 800860e:	4603      	mov	r3, r0
 8008610:	461a      	mov	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	3301      	adds	r3, #1
 800861a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	3301      	adds	r3, #1
 8008620:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f7ff fa33 	bl	8007a8e <SWAPBYTE>
 8008628:	4603      	mov	r3, r0
 800862a:	461a      	mov	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	3301      	adds	r3, #1
 8008634:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3301      	adds	r3, #1
 800863a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800863c:	68f8      	ldr	r0, [r7, #12]
 800863e:	f7ff fa26 	bl	8007a8e <SWAPBYTE>
 8008642:	4603      	mov	r3, r0
 8008644:	461a      	mov	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	80da      	strh	r2, [r3, #6]
}
 800864a:	bf00      	nop
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b082      	sub	sp, #8
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800865c:	2180      	movs	r1, #128	@ 0x80
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fce2 	bl	8009028 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008664:	2100      	movs	r1, #0
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fcde 	bl	8009028 <USBD_LL_StallEP>
}
 800866c:	bf00      	nop
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008680:	2300      	movs	r3, #0
 8008682:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d036      	beq.n	80086f8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800868e:	6938      	ldr	r0, [r7, #16]
 8008690:	f000 f836 	bl	8008700 <USBD_GetLen>
 8008694:	4603      	mov	r3, r0
 8008696:	3301      	adds	r3, #1
 8008698:	b29b      	uxth	r3, r3
 800869a:	005b      	lsls	r3, r3, #1
 800869c:	b29a      	uxth	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
 80086a4:	68ba      	ldr	r2, [r7, #8]
 80086a6:	4413      	add	r3, r2
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	7812      	ldrb	r2, [r2, #0]
 80086ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80086ae:	7dfb      	ldrb	r3, [r7, #23]
 80086b0:	3301      	adds	r3, #1
 80086b2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80086b4:	7dfb      	ldrb	r3, [r7, #23]
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	4413      	add	r3, r2
 80086ba:	2203      	movs	r2, #3
 80086bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80086be:	7dfb      	ldrb	r3, [r7, #23]
 80086c0:	3301      	adds	r3, #1
 80086c2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80086c4:	e013      	b.n	80086ee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80086c6:	7dfb      	ldrb	r3, [r7, #23]
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	4413      	add	r3, r2
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	7812      	ldrb	r2, [r2, #0]
 80086d0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	3301      	adds	r3, #1
 80086d6:	613b      	str	r3, [r7, #16]
    idx++;
 80086d8:	7dfb      	ldrb	r3, [r7, #23]
 80086da:	3301      	adds	r3, #1
 80086dc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80086de:	7dfb      	ldrb	r3, [r7, #23]
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	4413      	add	r3, r2
 80086e4:	2200      	movs	r2, #0
 80086e6:	701a      	strb	r2, [r3, #0]
    idx++;
 80086e8:	7dfb      	ldrb	r3, [r7, #23]
 80086ea:	3301      	adds	r3, #1
 80086ec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1e7      	bne.n	80086c6 <USBD_GetString+0x52>
 80086f6:	e000      	b.n	80086fa <USBD_GetString+0x86>
    return;
 80086f8:	bf00      	nop
  }
}
 80086fa:	3718      	adds	r7, #24
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008710:	e005      	b.n	800871e <USBD_GetLen+0x1e>
  {
    len++;
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	3301      	adds	r3, #1
 8008716:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	3301      	adds	r3, #1
 800871c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1f5      	bne.n	8008712 <USBD_GetLen+0x12>
  }

  return len;
 8008726:	7bfb      	ldrb	r3, [r7, #15]
}
 8008728:	4618      	mov	r0, r3
 800872a:	3714      	adds	r7, #20
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	60b9      	str	r1, [r7, #8]
 800873e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2202      	movs	r2, #2
 8008744:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	68ba      	ldr	r2, [r7, #8]
 8008758:	2100      	movs	r1, #0
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f000 fced 	bl	800913a <USBD_LL_Transmit>

  return USBD_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b084      	sub	sp, #16
 800876e:	af00      	add	r7, sp, #0
 8008770:	60f8      	str	r0, [r7, #12]
 8008772:	60b9      	str	r1, [r7, #8]
 8008774:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	2100      	movs	r1, #0
 800877c:	68f8      	ldr	r0, [r7, #12]
 800877e:	f000 fcdc 	bl	800913a <USBD_LL_Transmit>

  return USBD_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2203      	movs	r2, #3
 800879c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	2100      	movs	r1, #0
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 fce0 	bl	800917c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b084      	sub	sp, #16
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	60f8      	str	r0, [r7, #12]
 80087ce:	60b9      	str	r1, [r7, #8]
 80087d0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	2100      	movs	r1, #0
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f000 fccf 	bl	800917c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2204      	movs	r2, #4
 80087f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80087f8:	2300      	movs	r3, #0
 80087fa:	2200      	movs	r2, #0
 80087fc:	2100      	movs	r1, #0
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 fc9b 	bl	800913a <USBD_LL_Transmit>

  return USBD_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3708      	adds	r7, #8
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b082      	sub	sp, #8
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2205      	movs	r2, #5
 800881a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800881e:	2300      	movs	r3, #0
 8008820:	2200      	movs	r2, #0
 8008822:	2100      	movs	r1, #0
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fca9 	bl	800917c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008838:	2200      	movs	r2, #0
 800883a:	4912      	ldr	r1, [pc, #72]	@ (8008884 <MX_USB_DEVICE_Init+0x50>)
 800883c:	4812      	ldr	r0, [pc, #72]	@ (8008888 <MX_USB_DEVICE_Init+0x54>)
 800883e:	f7fe fd03 	bl	8007248 <USBD_Init>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d001      	beq.n	800884c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008848:	f7f8 fa19 	bl	8000c7e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800884c:	490f      	ldr	r1, [pc, #60]	@ (800888c <MX_USB_DEVICE_Init+0x58>)
 800884e:	480e      	ldr	r0, [pc, #56]	@ (8008888 <MX_USB_DEVICE_Init+0x54>)
 8008850:	f7fe fd2a 	bl	80072a8 <USBD_RegisterClass>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800885a:	f7f8 fa10 	bl	8000c7e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800885e:	490c      	ldr	r1, [pc, #48]	@ (8008890 <MX_USB_DEVICE_Init+0x5c>)
 8008860:	4809      	ldr	r0, [pc, #36]	@ (8008888 <MX_USB_DEVICE_Init+0x54>)
 8008862:	f7fe fc21 	bl	80070a8 <USBD_CDC_RegisterInterface>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800886c:	f7f8 fa07 	bl	8000c7e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008870:	4805      	ldr	r0, [pc, #20]	@ (8008888 <MX_USB_DEVICE_Init+0x54>)
 8008872:	f7fe fd4f 	bl	8007314 <USBD_Start>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800887c:	f7f8 f9ff 	bl	8000c7e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008880:	bf00      	nop
 8008882:	bd80      	pop	{r7, pc}
 8008884:	200000ac 	.word	0x200000ac
 8008888:	2000320c 	.word	0x2000320c
 800888c:	20000018 	.word	0x20000018
 8008890:	20000098 	.word	0x20000098

08008894 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008898:	2200      	movs	r2, #0
 800889a:	4905      	ldr	r1, [pc, #20]	@ (80088b0 <CDC_Init_FS+0x1c>)
 800889c:	4805      	ldr	r0, [pc, #20]	@ (80088b4 <CDC_Init_FS+0x20>)
 800889e:	f7fe fc1d 	bl	80070dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80088a2:	4905      	ldr	r1, [pc, #20]	@ (80088b8 <CDC_Init_FS+0x24>)
 80088a4:	4803      	ldr	r0, [pc, #12]	@ (80088b4 <CDC_Init_FS+0x20>)
 80088a6:	f7fe fc3b 	bl	8007120 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80088aa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	200038e8 	.word	0x200038e8
 80088b4:	2000320c 	.word	0x2000320c
 80088b8:	200034e8 	.word	0x200034e8

080088bc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80088bc:	b480      	push	{r7}
 80088be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80088c0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	4603      	mov	r3, r0
 80088d4:	6039      	str	r1, [r7, #0]
 80088d6:	71fb      	strb	r3, [r7, #7]
 80088d8:	4613      	mov	r3, r2
 80088da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80088dc:	79fb      	ldrb	r3, [r7, #7]
 80088de:	2b23      	cmp	r3, #35	@ 0x23
 80088e0:	d84a      	bhi.n	8008978 <CDC_Control_FS+0xac>
 80088e2:	a201      	add	r2, pc, #4	@ (adr r2, 80088e8 <CDC_Control_FS+0x1c>)
 80088e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e8:	08008979 	.word	0x08008979
 80088ec:	08008979 	.word	0x08008979
 80088f0:	08008979 	.word	0x08008979
 80088f4:	08008979 	.word	0x08008979
 80088f8:	08008979 	.word	0x08008979
 80088fc:	08008979 	.word	0x08008979
 8008900:	08008979 	.word	0x08008979
 8008904:	08008979 	.word	0x08008979
 8008908:	08008979 	.word	0x08008979
 800890c:	08008979 	.word	0x08008979
 8008910:	08008979 	.word	0x08008979
 8008914:	08008979 	.word	0x08008979
 8008918:	08008979 	.word	0x08008979
 800891c:	08008979 	.word	0x08008979
 8008920:	08008979 	.word	0x08008979
 8008924:	08008979 	.word	0x08008979
 8008928:	08008979 	.word	0x08008979
 800892c:	08008979 	.word	0x08008979
 8008930:	08008979 	.word	0x08008979
 8008934:	08008979 	.word	0x08008979
 8008938:	08008979 	.word	0x08008979
 800893c:	08008979 	.word	0x08008979
 8008940:	08008979 	.word	0x08008979
 8008944:	08008979 	.word	0x08008979
 8008948:	08008979 	.word	0x08008979
 800894c:	08008979 	.word	0x08008979
 8008950:	08008979 	.word	0x08008979
 8008954:	08008979 	.word	0x08008979
 8008958:	08008979 	.word	0x08008979
 800895c:	08008979 	.word	0x08008979
 8008960:	08008979 	.word	0x08008979
 8008964:	08008979 	.word	0x08008979
 8008968:	08008979 	.word	0x08008979
 800896c:	08008979 	.word	0x08008979
 8008970:	08008979 	.word	0x08008979
 8008974:	08008979 	.word	0x08008979
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008978:	bf00      	nop
  }

  return (USBD_OK);
 800897a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800897c:	4618      	mov	r0, r3
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008992:	6879      	ldr	r1, [r7, #4]
 8008994:	4812      	ldr	r0, [pc, #72]	@ (80089e0 <CDC_Receive_FS+0x58>)
 8008996:	f7fe fbc3 	bl	8007120 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800899a:	4811      	ldr	r0, [pc, #68]	@ (80089e0 <CDC_Receive_FS+0x58>)
 800899c:	f7fe fc1e 	bl	80071dc <USBD_CDC_ReceivePacket>
  CDCReceiveCallback(Buf, *Len);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4619      	mov	r1, r3
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7f8 f8f2 	bl	8000b90 <CDCReceiveCallback>
  uint8_t len = (uint8_t) *Len;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	73fb      	strb	r3, [r7, #15]
  memset (inputBuffer, '\0', 64);
 80089b2:	2240      	movs	r2, #64	@ 0x40
 80089b4:	2100      	movs	r1, #0
 80089b6:	480b      	ldr	r0, [pc, #44]	@ (80089e4 <CDC_Receive_FS+0x5c>)
 80089b8:	f000 fc58 	bl	800926c <memset>
  memcpy (inputBuffer, Buf, len);
 80089bc:	7bfb      	ldrb	r3, [r7, #15]
 80089be:	461a      	mov	r2, r3
 80089c0:	6879      	ldr	r1, [r7, #4]
 80089c2:	4808      	ldr	r0, [pc, #32]	@ (80089e4 <CDC_Receive_FS+0x5c>)
 80089c4:	f000 fc90 	bl	80092e8 <memcpy>
  memset (Buf, '\0', len);
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	461a      	mov	r2, r3
 80089cc:	2100      	movs	r1, #0
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fc4c 	bl	800926c <memset>
  return (USBD_OK);
 80089d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	2000320c 	.word	0x2000320c
 80089e4:	200031c4 	.word	0x200031c4

080089e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	460b      	mov	r3, r1
 80089f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80089f4:	2300      	movs	r3, #0
 80089f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80089f8:	4b0d      	ldr	r3, [pc, #52]	@ (8008a30 <CDC_Transmit_FS+0x48>)
 80089fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80089fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d001      	beq.n	8008a0e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	e00b      	b.n	8008a26 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008a0e:	887b      	ldrh	r3, [r7, #2]
 8008a10:	461a      	mov	r2, r3
 8008a12:	6879      	ldr	r1, [r7, #4]
 8008a14:	4806      	ldr	r0, [pc, #24]	@ (8008a30 <CDC_Transmit_FS+0x48>)
 8008a16:	f7fe fb61 	bl	80070dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008a1a:	4805      	ldr	r0, [pc, #20]	@ (8008a30 <CDC_Transmit_FS+0x48>)
 8008a1c:	f7fe fb9e 	bl	800715c <USBD_CDC_TransmitPacket>
 8008a20:	4603      	mov	r3, r0
 8008a22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	2000320c 	.word	0x2000320c

08008a34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b087      	sub	sp, #28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008a42:	2300      	movs	r3, #0
 8008a44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008a46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	371c      	adds	r7, #28
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
	...

08008a58 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	4603      	mov	r3, r0
 8008a60:	6039      	str	r1, [r7, #0]
 8008a62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	2212      	movs	r2, #18
 8008a68:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a6a:	4b03      	ldr	r3, [pc, #12]	@ (8008a78 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	200000c8 	.word	0x200000c8

08008a7c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	4603      	mov	r3, r0
 8008a84:	6039      	str	r1, [r7, #0]
 8008a86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	2204      	movs	r2, #4
 8008a8c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a8e:	4b03      	ldr	r3, [pc, #12]	@ (8008a9c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr
 8008a9c:	200000dc 	.word	0x200000dc

08008aa0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	6039      	str	r1, [r7, #0]
 8008aaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008aac:	79fb      	ldrb	r3, [r7, #7]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d105      	bne.n	8008abe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	4907      	ldr	r1, [pc, #28]	@ (8008ad4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ab6:	4808      	ldr	r0, [pc, #32]	@ (8008ad8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ab8:	f7ff fddc 	bl	8008674 <USBD_GetString>
 8008abc:	e004      	b.n	8008ac8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	4904      	ldr	r1, [pc, #16]	@ (8008ad4 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ac2:	4805      	ldr	r0, [pc, #20]	@ (8008ad8 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ac4:	f7ff fdd6 	bl	8008674 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ac8:	4b02      	ldr	r3, [pc, #8]	@ (8008ad4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	20003ce8 	.word	0x20003ce8
 8008ad8:	08009334 	.word	0x08009334

08008adc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	6039      	str	r1, [r7, #0]
 8008ae6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ae8:	683a      	ldr	r2, [r7, #0]
 8008aea:	4904      	ldr	r1, [pc, #16]	@ (8008afc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008aec:	4804      	ldr	r0, [pc, #16]	@ (8008b00 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008aee:	f7ff fdc1 	bl	8008674 <USBD_GetString>
  return USBD_StrDesc;
 8008af2:	4b02      	ldr	r3, [pc, #8]	@ (8008afc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	20003ce8 	.word	0x20003ce8
 8008b00:	0800934c 	.word	0x0800934c

08008b04 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	6039      	str	r1, [r7, #0]
 8008b0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	221a      	movs	r2, #26
 8008b14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b16:	f000 f843 	bl	8008ba0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b1a:	4b02      	ldr	r3, [pc, #8]	@ (8008b24 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}
 8008b24:	200000e0 	.word	0x200000e0

08008b28 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	4603      	mov	r3, r0
 8008b30:	6039      	str	r1, [r7, #0]
 8008b32:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b34:	79fb      	ldrb	r3, [r7, #7]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d105      	bne.n	8008b46 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	4907      	ldr	r1, [pc, #28]	@ (8008b5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b3e:	4808      	ldr	r0, [pc, #32]	@ (8008b60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b40:	f7ff fd98 	bl	8008674 <USBD_GetString>
 8008b44:	e004      	b.n	8008b50 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	4904      	ldr	r1, [pc, #16]	@ (8008b5c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b4a:	4805      	ldr	r0, [pc, #20]	@ (8008b60 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b4c:	f7ff fd92 	bl	8008674 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b50:	4b02      	ldr	r3, [pc, #8]	@ (8008b5c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop
 8008b5c:	20003ce8 	.word	0x20003ce8
 8008b60:	08009360 	.word	0x08009360

08008b64 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	6039      	str	r1, [r7, #0]
 8008b6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b70:	79fb      	ldrb	r3, [r7, #7]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d105      	bne.n	8008b82 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	4907      	ldr	r1, [pc, #28]	@ (8008b98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b7a:	4808      	ldr	r0, [pc, #32]	@ (8008b9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b7c:	f7ff fd7a 	bl	8008674 <USBD_GetString>
 8008b80:	e004      	b.n	8008b8c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b82:	683a      	ldr	r2, [r7, #0]
 8008b84:	4904      	ldr	r1, [pc, #16]	@ (8008b98 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b86:	4805      	ldr	r0, [pc, #20]	@ (8008b9c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b88:	f7ff fd74 	bl	8008674 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b8c:	4b02      	ldr	r3, [pc, #8]	@ (8008b98 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	20003ce8 	.word	0x20003ce8
 8008b9c:	0800936c 	.word	0x0800936c

08008ba0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	4413      	add	r3, r2
 8008bac:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d009      	beq.n	8008bc8 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008bb4:	2208      	movs	r2, #8
 8008bb6:	4906      	ldr	r1, [pc, #24]	@ (8008bd0 <Get_SerialNum+0x30>)
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f000 f80d 	bl	8008bd8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008bbe:	2204      	movs	r2, #4
 8008bc0:	4904      	ldr	r1, [pc, #16]	@ (8008bd4 <Get_SerialNum+0x34>)
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f808 	bl	8008bd8 <IntToUnicode>
  }
}
 8008bc8:	bf00      	nop
 8008bca:	3710      	adds	r7, #16
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	200000e2 	.word	0x200000e2
 8008bd4:	200000f2 	.word	0x200000f2

08008bd8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b087      	sub	sp, #28
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	4613      	mov	r3, r2
 8008be4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008be6:	2300      	movs	r3, #0
 8008be8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008bea:	2300      	movs	r3, #0
 8008bec:	75fb      	strb	r3, [r7, #23]
 8008bee:	e027      	b.n	8008c40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	0f1b      	lsrs	r3, r3, #28
 8008bf4:	2b09      	cmp	r3, #9
 8008bf6:	d80b      	bhi.n	8008c10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	0f1b      	lsrs	r3, r3, #28
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	7dfb      	ldrb	r3, [r7, #23]
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	4619      	mov	r1, r3
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	440b      	add	r3, r1
 8008c08:	3230      	adds	r2, #48	@ 0x30
 8008c0a:	b2d2      	uxtb	r2, r2
 8008c0c:	701a      	strb	r2, [r3, #0]
 8008c0e:	e00a      	b.n	8008c26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	0f1b      	lsrs	r3, r3, #28
 8008c14:	b2da      	uxtb	r2, r3
 8008c16:	7dfb      	ldrb	r3, [r7, #23]
 8008c18:	005b      	lsls	r3, r3, #1
 8008c1a:	4619      	mov	r1, r3
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	440b      	add	r3, r1
 8008c20:	3237      	adds	r2, #55	@ 0x37
 8008c22:	b2d2      	uxtb	r2, r2
 8008c24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	011b      	lsls	r3, r3, #4
 8008c2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c2c:	7dfb      	ldrb	r3, [r7, #23]
 8008c2e:	005b      	lsls	r3, r3, #1
 8008c30:	3301      	adds	r3, #1
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	4413      	add	r3, r2
 8008c36:	2200      	movs	r2, #0
 8008c38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c3a:	7dfb      	ldrb	r3, [r7, #23]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	75fb      	strb	r3, [r7, #23]
 8008c40:	7dfa      	ldrb	r2, [r7, #23]
 8008c42:	79fb      	ldrb	r3, [r7, #7]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d3d3      	bcc.n	8008bf0 <IntToUnicode+0x18>
  }
}
 8008c48:	bf00      	nop
 8008c4a:	bf00      	nop
 8008c4c:	371c      	adds	r7, #28
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
	...

08008c58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b08a      	sub	sp, #40	@ 0x28
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c60:	f107 0314 	add.w	r3, r7, #20
 8008c64:	2200      	movs	r2, #0
 8008c66:	601a      	str	r2, [r3, #0]
 8008c68:	605a      	str	r2, [r3, #4]
 8008c6a:	609a      	str	r2, [r3, #8]
 8008c6c:	60da      	str	r2, [r3, #12]
 8008c6e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c78:	d13a      	bne.n	8008cf0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	613b      	str	r3, [r7, #16]
 8008c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8008cf8 <HAL_PCD_MspInit+0xa0>)
 8008c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c82:	4a1d      	ldr	r2, [pc, #116]	@ (8008cf8 <HAL_PCD_MspInit+0xa0>)
 8008c84:	f043 0301 	orr.w	r3, r3, #1
 8008c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8008c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8008cf8 <HAL_PCD_MspInit+0xa0>)
 8008c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c8e:	f003 0301 	and.w	r3, r3, #1
 8008c92:	613b      	str	r3, [r7, #16]
 8008c94:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008c96:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008ca8:	230a      	movs	r3, #10
 8008caa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cac:	f107 0314 	add.w	r3, r7, #20
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	4812      	ldr	r0, [pc, #72]	@ (8008cfc <HAL_PCD_MspInit+0xa4>)
 8008cb4:	f7f9 fbb8 	bl	8002428 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8008cf8 <HAL_PCD_MspInit+0xa0>)
 8008cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cbc:	4a0e      	ldr	r2, [pc, #56]	@ (8008cf8 <HAL_PCD_MspInit+0xa0>)
 8008cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cc2:	6353      	str	r3, [r2, #52]	@ 0x34
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	60fb      	str	r3, [r7, #12]
 8008cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8008cf8 <HAL_PCD_MspInit+0xa0>)
 8008cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8008cf8 <HAL_PCD_MspInit+0xa0>)
 8008cce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008cd2:	6453      	str	r3, [r2, #68]	@ 0x44
 8008cd4:	4b08      	ldr	r3, [pc, #32]	@ (8008cf8 <HAL_PCD_MspInit+0xa0>)
 8008cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cdc:	60fb      	str	r3, [r7, #12]
 8008cde:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	2043      	movs	r0, #67	@ 0x43
 8008ce6:	f7f8 ff88 	bl	8001bfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008cea:	2043      	movs	r0, #67	@ 0x43
 8008cec:	f7f8 ffa1 	bl	8001c32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008cf0:	bf00      	nop
 8008cf2:	3728      	adds	r7, #40	@ 0x28
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	40023800 	.word	0x40023800
 8008cfc:	40020000 	.word	0x40020000

08008d00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008d14:	4619      	mov	r1, r3
 8008d16:	4610      	mov	r0, r2
 8008d18:	f7fe fb49 	bl	80073ae <USBD_LL_SetupStage>
}
 8008d1c:	bf00      	nop
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008d36:	78fa      	ldrb	r2, [r7, #3]
 8008d38:	6879      	ldr	r1, [r7, #4]
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	00db      	lsls	r3, r3, #3
 8008d3e:	4413      	add	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	440b      	add	r3, r1
 8008d44:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	78fb      	ldrb	r3, [r7, #3]
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	f7fe fb83 	bl	8007458 <USBD_LL_DataOutStage>
}
 8008d52:	bf00      	nop
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b082      	sub	sp, #8
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	460b      	mov	r3, r1
 8008d64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008d6c:	78fa      	ldrb	r2, [r7, #3]
 8008d6e:	6879      	ldr	r1, [r7, #4]
 8008d70:	4613      	mov	r3, r2
 8008d72:	00db      	lsls	r3, r3, #3
 8008d74:	4413      	add	r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	440b      	add	r3, r1
 8008d7a:	3320      	adds	r3, #32
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	78fb      	ldrb	r3, [r7, #3]
 8008d80:	4619      	mov	r1, r3
 8008d82:	f7fe fc1c 	bl	80075be <USBD_LL_DataInStage>
}
 8008d86:	bf00      	nop
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b082      	sub	sp, #8
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fe fd56 	bl	800784e <USBD_LL_SOF>
}
 8008da2:	bf00      	nop
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b084      	sub	sp, #16
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008db2:	2301      	movs	r3, #1
 8008db4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	79db      	ldrb	r3, [r3, #7]
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d001      	beq.n	8008dc2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008dbe:	f7f7 ff5e 	bl	8000c7e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008dc8:	7bfa      	ldrb	r2, [r7, #15]
 8008dca:	4611      	mov	r1, r2
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7fe fcfa 	bl	80077c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fe fca2 	bl	8007722 <USBD_LL_Reset>
}
 8008dde:	bf00      	nop
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
	...

08008de8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008df6:	4618      	mov	r0, r3
 8008df8:	f7fe fcf5 	bl	80077e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	6812      	ldr	r2, [r2, #0]
 8008e0a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008e0e:	f043 0301 	orr.w	r3, r3, #1
 8008e12:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	7adb      	ldrb	r3, [r3, #11]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d005      	beq.n	8008e28 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e1c:	4b04      	ldr	r3, [pc, #16]	@ (8008e30 <HAL_PCD_SuspendCallback+0x48>)
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	4a03      	ldr	r2, [pc, #12]	@ (8008e30 <HAL_PCD_SuspendCallback+0x48>)
 8008e22:	f043 0306 	orr.w	r3, r3, #6
 8008e26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e28:	bf00      	nop
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	e000ed00 	.word	0xe000ed00

08008e34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7fe fceb 	bl	800781e <USBD_LL_Resume>
}
 8008e48:	bf00      	nop
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	460b      	mov	r3, r1
 8008e5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e62:	78fa      	ldrb	r2, [r7, #3]
 8008e64:	4611      	mov	r1, r2
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7fe fd43 	bl	80078f2 <USBD_LL_IsoOUTIncomplete>
}
 8008e6c:	bf00      	nop
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008e86:	78fa      	ldrb	r2, [r7, #3]
 8008e88:	4611      	mov	r1, r2
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7fe fcff 	bl	800788e <USBD_LL_IsoINIncomplete>
}
 8008e90:	bf00      	nop
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fe fd55 	bl	8007956 <USBD_LL_DevConnected>
}
 8008eac:	bf00      	nop
 8008eae:	3708      	adds	r7, #8
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe fd52 	bl	800796c <USBD_LL_DevDisconnected>
}
 8008ec8:	bf00      	nop
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d13c      	bne.n	8008f5a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ee0:	4a20      	ldr	r2, [pc, #128]	@ (8008f64 <USBD_LL_Init+0x94>)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a1e      	ldr	r2, [pc, #120]	@ (8008f64 <USBD_LL_Init+0x94>)
 8008eec:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8008f64 <USBD_LL_Init+0x94>)
 8008ef2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008ef6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8008f64 <USBD_LL_Init+0x94>)
 8008efa:	2204      	movs	r2, #4
 8008efc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008efe:	4b19      	ldr	r3, [pc, #100]	@ (8008f64 <USBD_LL_Init+0x94>)
 8008f00:	2202      	movs	r2, #2
 8008f02:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f04:	4b17      	ldr	r3, [pc, #92]	@ (8008f64 <USBD_LL_Init+0x94>)
 8008f06:	2200      	movs	r2, #0
 8008f08:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f0a:	4b16      	ldr	r3, [pc, #88]	@ (8008f64 <USBD_LL_Init+0x94>)
 8008f0c:	2202      	movs	r2, #2
 8008f0e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f10:	4b14      	ldr	r3, [pc, #80]	@ (8008f64 <USBD_LL_Init+0x94>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008f16:	4b13      	ldr	r3, [pc, #76]	@ (8008f64 <USBD_LL_Init+0x94>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008f1c:	4b11      	ldr	r3, [pc, #68]	@ (8008f64 <USBD_LL_Init+0x94>)
 8008f1e:	2200      	movs	r2, #0
 8008f20:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008f22:	4b10      	ldr	r3, [pc, #64]	@ (8008f64 <USBD_LL_Init+0x94>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008f28:	4b0e      	ldr	r3, [pc, #56]	@ (8008f64 <USBD_LL_Init+0x94>)
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008f2e:	480d      	ldr	r0, [pc, #52]	@ (8008f64 <USBD_LL_Init+0x94>)
 8008f30:	f7f9 fbfe 	bl	8002730 <HAL_PCD_Init>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d001      	beq.n	8008f3e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008f3a:	f7f7 fea0 	bl	8000c7e <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008f3e:	2180      	movs	r1, #128	@ 0x80
 8008f40:	4808      	ldr	r0, [pc, #32]	@ (8008f64 <USBD_LL_Init+0x94>)
 8008f42:	f7fa fe28 	bl	8003b96 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008f46:	2240      	movs	r2, #64	@ 0x40
 8008f48:	2100      	movs	r1, #0
 8008f4a:	4806      	ldr	r0, [pc, #24]	@ (8008f64 <USBD_LL_Init+0x94>)
 8008f4c:	f7fa fddc 	bl	8003b08 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008f50:	2280      	movs	r2, #128	@ 0x80
 8008f52:	2101      	movs	r1, #1
 8008f54:	4803      	ldr	r0, [pc, #12]	@ (8008f64 <USBD_LL_Init+0x94>)
 8008f56:	f7fa fdd7 	bl	8003b08 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	20003ee8 	.word	0x20003ee8

08008f68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f70:	2300      	movs	r3, #0
 8008f72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f74:	2300      	movs	r3, #0
 8008f76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7f9 fce5 	bl	800294e <HAL_PCD_Start>
 8008f84:	4603      	mov	r3, r0
 8008f86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 f942 	bl	8009214 <USBD_Get_USB_Status>
 8008f90:	4603      	mov	r3, r0
 8008f92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	4608      	mov	r0, r1
 8008fa8:	4611      	mov	r1, r2
 8008faa:	461a      	mov	r2, r3
 8008fac:	4603      	mov	r3, r0
 8008fae:	70fb      	strb	r3, [r7, #3]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	70bb      	strb	r3, [r7, #2]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008fc6:	78bb      	ldrb	r3, [r7, #2]
 8008fc8:	883a      	ldrh	r2, [r7, #0]
 8008fca:	78f9      	ldrb	r1, [r7, #3]
 8008fcc:	f7fa f9b9 	bl	8003342 <HAL_PCD_EP_Open>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 f91c 	bl	8009214 <USBD_Get_USB_Status>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b084      	sub	sp, #16
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009004:	78fa      	ldrb	r2, [r7, #3]
 8009006:	4611      	mov	r1, r2
 8009008:	4618      	mov	r0, r3
 800900a:	f7fa fa02 	bl	8003412 <HAL_PCD_EP_Close>
 800900e:	4603      	mov	r3, r0
 8009010:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009012:	7bfb      	ldrb	r3, [r7, #15]
 8009014:	4618      	mov	r0, r3
 8009016:	f000 f8fd 	bl	8009214 <USBD_Get_USB_Status>
 800901a:	4603      	mov	r3, r0
 800901c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800901e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009020:	4618      	mov	r0, r3
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	460b      	mov	r3, r1
 8009032:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009038:	2300      	movs	r3, #0
 800903a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009042:	78fa      	ldrb	r2, [r7, #3]
 8009044:	4611      	mov	r1, r2
 8009046:	4618      	mov	r0, r3
 8009048:	f7fa faba 	bl	80035c0 <HAL_PCD_EP_SetStall>
 800904c:	4603      	mov	r3, r0
 800904e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009050:	7bfb      	ldrb	r3, [r7, #15]
 8009052:	4618      	mov	r0, r3
 8009054:	f000 f8de 	bl	8009214 <USBD_Get_USB_Status>
 8009058:	4603      	mov	r3, r0
 800905a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800905c:	7bbb      	ldrb	r3, [r7, #14]
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b084      	sub	sp, #16
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	460b      	mov	r3, r1
 8009070:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009072:	2300      	movs	r3, #0
 8009074:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009076:	2300      	movs	r3, #0
 8009078:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009080:	78fa      	ldrb	r2, [r7, #3]
 8009082:	4611      	mov	r1, r2
 8009084:	4618      	mov	r0, r3
 8009086:	f7fa fafe 	bl	8003686 <HAL_PCD_EP_ClrStall>
 800908a:	4603      	mov	r3, r0
 800908c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800908e:	7bfb      	ldrb	r3, [r7, #15]
 8009090:	4618      	mov	r0, r3
 8009092:	f000 f8bf 	bl	8009214 <USBD_Get_USB_Status>
 8009096:	4603      	mov	r3, r0
 8009098:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800909a:	7bbb      	ldrb	r3, [r7, #14]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	460b      	mov	r3, r1
 80090ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80090b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80090b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	da0b      	bge.n	80090d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80090c0:	78fb      	ldrb	r3, [r7, #3]
 80090c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090c6:	68f9      	ldr	r1, [r7, #12]
 80090c8:	4613      	mov	r3, r2
 80090ca:	00db      	lsls	r3, r3, #3
 80090cc:	4413      	add	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	440b      	add	r3, r1
 80090d2:	3316      	adds	r3, #22
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	e00b      	b.n	80090f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80090d8:	78fb      	ldrb	r3, [r7, #3]
 80090da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80090de:	68f9      	ldr	r1, [r7, #12]
 80090e0:	4613      	mov	r3, r2
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	4413      	add	r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	440b      	add	r3, r1
 80090ea:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80090ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	460b      	mov	r3, r1
 8009106:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009116:	78fa      	ldrb	r2, [r7, #3]
 8009118:	4611      	mov	r1, r2
 800911a:	4618      	mov	r0, r3
 800911c:	f7fa f8ed 	bl	80032fa <HAL_PCD_SetAddress>
 8009120:	4603      	mov	r3, r0
 8009122:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009124:	7bfb      	ldrb	r3, [r7, #15]
 8009126:	4618      	mov	r0, r3
 8009128:	f000 f874 	bl	8009214 <USBD_Get_USB_Status>
 800912c:	4603      	mov	r3, r0
 800912e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009130:	7bbb      	ldrb	r3, [r7, #14]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b086      	sub	sp, #24
 800913e:	af00      	add	r7, sp, #0
 8009140:	60f8      	str	r0, [r7, #12]
 8009142:	607a      	str	r2, [r7, #4]
 8009144:	603b      	str	r3, [r7, #0]
 8009146:	460b      	mov	r3, r1
 8009148:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800914e:	2300      	movs	r3, #0
 8009150:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009158:	7af9      	ldrb	r1, [r7, #11]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	f7fa f9f5 	bl	800354c <HAL_PCD_EP_Transmit>
 8009162:	4603      	mov	r3, r0
 8009164:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009166:	7dfb      	ldrb	r3, [r7, #23]
 8009168:	4618      	mov	r0, r3
 800916a:	f000 f853 	bl	8009214 <USBD_Get_USB_Status>
 800916e:	4603      	mov	r3, r0
 8009170:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009172:	7dbb      	ldrb	r3, [r7, #22]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3718      	adds	r7, #24
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	607a      	str	r2, [r7, #4]
 8009186:	603b      	str	r3, [r7, #0]
 8009188:	460b      	mov	r3, r1
 800918a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800918c:	2300      	movs	r3, #0
 800918e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009190:	2300      	movs	r3, #0
 8009192:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800919a:	7af9      	ldrb	r1, [r7, #11]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	f7fa f981 	bl	80034a6 <HAL_PCD_EP_Receive>
 80091a4:	4603      	mov	r3, r0
 80091a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091a8:	7dfb      	ldrb	r3, [r7, #23]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 f832 	bl	8009214 <USBD_Get_USB_Status>
 80091b0:	4603      	mov	r3, r0
 80091b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3718      	adds	r7, #24
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b082      	sub	sp, #8
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	460b      	mov	r3, r1
 80091c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80091d0:	78fa      	ldrb	r2, [r7, #3]
 80091d2:	4611      	mov	r1, r2
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fa f9a1 	bl	800351c <HAL_PCD_EP_GetRxCount>
 80091da:	4603      	mov	r3, r0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80091ec:	4b03      	ldr	r3, [pc, #12]	@ (80091fc <USBD_static_malloc+0x18>)
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	200043cc 	.word	0x200043cc

08009200 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]

}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	4603      	mov	r3, r0
 800921c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800921e:	2300      	movs	r3, #0
 8009220:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009222:	79fb      	ldrb	r3, [r7, #7]
 8009224:	2b03      	cmp	r3, #3
 8009226:	d817      	bhi.n	8009258 <USBD_Get_USB_Status+0x44>
 8009228:	a201      	add	r2, pc, #4	@ (adr r2, 8009230 <USBD_Get_USB_Status+0x1c>)
 800922a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922e:	bf00      	nop
 8009230:	08009241 	.word	0x08009241
 8009234:	08009247 	.word	0x08009247
 8009238:	0800924d 	.word	0x0800924d
 800923c:	08009253 	.word	0x08009253
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009240:	2300      	movs	r3, #0
 8009242:	73fb      	strb	r3, [r7, #15]
    break;
 8009244:	e00b      	b.n	800925e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009246:	2303      	movs	r3, #3
 8009248:	73fb      	strb	r3, [r7, #15]
    break;
 800924a:	e008      	b.n	800925e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800924c:	2301      	movs	r3, #1
 800924e:	73fb      	strb	r3, [r7, #15]
    break;
 8009250:	e005      	b.n	800925e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009252:	2303      	movs	r3, #3
 8009254:	73fb      	strb	r3, [r7, #15]
    break;
 8009256:	e002      	b.n	800925e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009258:	2303      	movs	r3, #3
 800925a:	73fb      	strb	r3, [r7, #15]
    break;
 800925c:	bf00      	nop
  }
  return usb_status;
 800925e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3714      	adds	r7, #20
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <memset>:
 800926c:	4402      	add	r2, r0
 800926e:	4603      	mov	r3, r0
 8009270:	4293      	cmp	r3, r2
 8009272:	d100      	bne.n	8009276 <memset+0xa>
 8009274:	4770      	bx	lr
 8009276:	f803 1b01 	strb.w	r1, [r3], #1
 800927a:	e7f9      	b.n	8009270 <memset+0x4>

0800927c <strncmp>:
 800927c:	b510      	push	{r4, lr}
 800927e:	b16a      	cbz	r2, 800929c <strncmp+0x20>
 8009280:	3901      	subs	r1, #1
 8009282:	1884      	adds	r4, r0, r2
 8009284:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009288:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800928c:	429a      	cmp	r2, r3
 800928e:	d103      	bne.n	8009298 <strncmp+0x1c>
 8009290:	42a0      	cmp	r0, r4
 8009292:	d001      	beq.n	8009298 <strncmp+0x1c>
 8009294:	2a00      	cmp	r2, #0
 8009296:	d1f5      	bne.n	8009284 <strncmp+0x8>
 8009298:	1ad0      	subs	r0, r2, r3
 800929a:	bd10      	pop	{r4, pc}
 800929c:	4610      	mov	r0, r2
 800929e:	e7fc      	b.n	800929a <strncmp+0x1e>

080092a0 <__libc_init_array>:
 80092a0:	b570      	push	{r4, r5, r6, lr}
 80092a2:	4d0d      	ldr	r5, [pc, #52]	@ (80092d8 <__libc_init_array+0x38>)
 80092a4:	4c0d      	ldr	r4, [pc, #52]	@ (80092dc <__libc_init_array+0x3c>)
 80092a6:	1b64      	subs	r4, r4, r5
 80092a8:	10a4      	asrs	r4, r4, #2
 80092aa:	2600      	movs	r6, #0
 80092ac:	42a6      	cmp	r6, r4
 80092ae:	d109      	bne.n	80092c4 <__libc_init_array+0x24>
 80092b0:	4d0b      	ldr	r5, [pc, #44]	@ (80092e0 <__libc_init_array+0x40>)
 80092b2:	4c0c      	ldr	r4, [pc, #48]	@ (80092e4 <__libc_init_array+0x44>)
 80092b4:	f000 f826 	bl	8009304 <_init>
 80092b8:	1b64      	subs	r4, r4, r5
 80092ba:	10a4      	asrs	r4, r4, #2
 80092bc:	2600      	movs	r6, #0
 80092be:	42a6      	cmp	r6, r4
 80092c0:	d105      	bne.n	80092ce <__libc_init_array+0x2e>
 80092c2:	bd70      	pop	{r4, r5, r6, pc}
 80092c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80092c8:	4798      	blx	r3
 80092ca:	3601      	adds	r6, #1
 80092cc:	e7ee      	b.n	80092ac <__libc_init_array+0xc>
 80092ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d2:	4798      	blx	r3
 80092d4:	3601      	adds	r6, #1
 80092d6:	e7f2      	b.n	80092be <__libc_init_array+0x1e>
 80092d8:	0800939c 	.word	0x0800939c
 80092dc:	0800939c 	.word	0x0800939c
 80092e0:	0800939c 	.word	0x0800939c
 80092e4:	080093a0 	.word	0x080093a0

080092e8 <memcpy>:
 80092e8:	440a      	add	r2, r1
 80092ea:	4291      	cmp	r1, r2
 80092ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80092f0:	d100      	bne.n	80092f4 <memcpy+0xc>
 80092f2:	4770      	bx	lr
 80092f4:	b510      	push	{r4, lr}
 80092f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092fe:	4291      	cmp	r1, r2
 8009300:	d1f9      	bne.n	80092f6 <memcpy+0xe>
 8009302:	bd10      	pop	{r4, pc}

08009304 <_init>:
 8009304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009306:	bf00      	nop
 8009308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800930a:	bc08      	pop	{r3}
 800930c:	469e      	mov	lr, r3
 800930e:	4770      	bx	lr

08009310 <_fini>:
 8009310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009312:	bf00      	nop
 8009314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009316:	bc08      	pop	{r3}
 8009318:	469e      	mov	lr, r3
 800931a:	4770      	bx	lr
