
tcddriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac88  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  0800ae28  0800ae28  0000be28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b148  0800b148  0000d184  2**0
                  CONTENTS
  4 .ARM          00000008  0800b148  0800b148  0000c148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b150  0800b150  0000d184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b150  0800b150  0000c150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b154  0800b154  0000c154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  0800b158  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000046e8  20000184  0800b2dc  0000d184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000486c  0800b2dc  0000d86c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015043  00000000  00000000  0000d1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003890  00000000  00000000  000221f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  00025a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eea  00000000  00000000  00026de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afbc  00000000  00000000  00027cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018466  00000000  00000000  00042c86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cd19  00000000  00000000  0005b0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7e05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ca0  00000000  00000000  000f7e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000fdae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000184 	.word	0x20000184
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ae10 	.word	0x0800ae10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000188 	.word	0x20000188
 80001dc:	0800ae10 	.word	0x0800ae10

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f001 f882 	bl	800169c <HAL_Init>

  /* USER CODE BEGIN Init */
  InitializeHeaderFooter();
 8000598:	f000 fc10 	bl	8000dbc <InitializeHeaderFooter>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f84e 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 fb1c 	bl	8000bdc <MX_GPIO_Init>
  MX_DMA_Init();
 80005a4:	f000 fafa 	bl	8000b9c <MX_DMA_Init>
  MX_TIM2_Init();
 80005a8:	f000 f906 	bl	80007b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005ac:	f000 f97c 	bl	80008a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005b0:	f000 f9f0 	bl	8000994 <MX_TIM4_Init>
  MX_TIM5_Init();
 80005b4:	f000 fa62 	bl	8000a7c <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 80005b8:	f008 fca4 	bl	8008f04 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80005bc:	f000 f8aa 	bl	8000714 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //ICG
 80005c0:	2100      	movs	r1, #0
 80005c2:	4816      	ldr	r0, [pc, #88]	@ (800061c <main+0x8c>)
 80005c4:	f004 fae0 	bl	8004b88 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay
 80005c8:	4b14      	ldr	r3, [pc, #80]	@ (800061c <main+0x8c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2242      	movs	r2, #66	@ 0x42
 80005ce:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
 80005d0:	2100      	movs	r1, #0
 80005d2:	4813      	ldr	r0, [pc, #76]	@ (8000620 <main+0x90>)
 80005d4:	f004 fad8 	bl	8004b88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //ADC
 80005d8:	210c      	movs	r1, #12
 80005da:	4812      	ldr	r0, [pc, #72]	@ (8000624 <main+0x94>)
 80005dc:	f004 fad4 	bl	8004b88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH
 80005e0:	2108      	movs	r1, #8
 80005e2:	4811      	ldr	r0, [pc, #68]	@ (8000628 <main+0x98>)
 80005e4:	f004 fad0 	bl	8004b88 <HAL_TIM_PWM_Start>

  if (!start_command_received) {
 80005e8:	4b10      	ldr	r3, [pc, #64]	@ (800062c <main+0x9c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d107      	bne.n	8000602 <main+0x72>
  CDC_Transmit_FS("Target Ready\r\n",14);
 80005f2:	210e      	movs	r1, #14
 80005f4:	480e      	ldr	r0, [pc, #56]	@ (8000630 <main+0xa0>)
 80005f6:	f008 fd49 	bl	800908c <CDC_Transmit_FS>
  HAL_Delay(1000);}
 80005fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005fe:	f001 f8bf 	bl	8001780 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) CCDPixelBuffer, CCD_PIXEL_BUFFER_SIZE);

	  if (start_command_received) {
 8000602:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <main+0x9c>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	2b00      	cmp	r3, #0
 800060a:	d0fa      	beq.n	8000602 <main+0x72>
		  //if the user sends a start string it will initiate the dma
	    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)CCDPixelBuffer, CCD_PIXEL_BUFFER_SIZE);
 800060c:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000610:	4908      	ldr	r1, [pc, #32]	@ (8000634 <main+0xa4>)
 8000612:	4809      	ldr	r0, [pc, #36]	@ (8000638 <main+0xa8>)
 8000614:	f001 f91c 	bl	8001850 <HAL_ADC_Start_DMA>
	  if (start_command_received) {
 8000618:	e7f3      	b.n	8000602 <main+0x72>
 800061a:	bf00      	nop
 800061c:	20000248 	.word	0x20000248
 8000620:	20000290 	.word	0x20000290
 8000624:	200002d8 	.word	0x200002d8
 8000628:	20000320 	.word	0x20000320
 800062c:	20003330 	.word	0x20003330
 8000630:	0800ae28 	.word	0x0800ae28
 8000634:	20000450 	.word	0x20000450
 8000638:	200001a0 	.word	0x200001a0

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	@ 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	@ 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f009 fb21 	bl	8009c92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b29      	ldr	r3, [pc, #164]	@ (800070c <SystemClock_Config+0xd0>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000668:	4a28      	ldr	r2, [pc, #160]	@ (800070c <SystemClock_Config+0xd0>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000670:	4b26      	ldr	r3, [pc, #152]	@ (800070c <SystemClock_Config+0xd0>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <SystemClock_Config+0xd4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000688:	4a21      	ldr	r2, [pc, #132]	@ (8000710 <SystemClock_Config+0xd4>)
 800068a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <SystemClock_Config+0xd4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006b0:	2319      	movs	r3, #25
 80006b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ba:	2304      	movs	r3, #4
 80006bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006be:	2307      	movs	r3, #7
 80006c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 fd86 	bl	80041d8 <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006d2:	f000 fd13 	bl	80010fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2302      	movs	r3, #2
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2102      	movs	r1, #2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 ffe8 	bl	80046c8 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006fe:	f000 fcfd 	bl	80010fc <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	@ 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800071a:	463b      	mov	r3, r7
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000726:	4b22      	ldr	r3, [pc, #136]	@ (80007b0 <MX_ADC1_Init+0x9c>)
 8000728:	4a22      	ldr	r2, [pc, #136]	@ (80007b4 <MX_ADC1_Init+0xa0>)
 800072a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800072c:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <MX_ADC1_Init+0x9c>)
 800072e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000732:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000734:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <MX_ADC1_Init+0x9c>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800073a:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <MX_ADC1_Init+0x9c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <MX_ADC1_Init+0x9c>)
 8000742:	2200      	movs	r2, #0
 8000744:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000746:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_ADC1_Init+0x9c>)
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800074e:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <MX_ADC1_Init+0x9c>)
 8000750:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000754:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T4_CC4;
 8000756:	4b16      	ldr	r3, [pc, #88]	@ (80007b0 <MX_ADC1_Init+0x9c>)
 8000758:	f04f 6210 	mov.w	r2, #150994944	@ 0x9000000
 800075c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800075e:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_ADC1_Init+0x9c>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_ADC1_Init+0x9c>)
 8000766:	2201      	movs	r2, #1
 8000768:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_ADC1_Init+0x9c>)
 800076c:	2201      	movs	r2, #1
 800076e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000772:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_ADC1_Init+0x9c>)
 8000774:	2201      	movs	r2, #1
 8000776:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000778:	480d      	ldr	r0, [pc, #52]	@ (80007b0 <MX_ADC1_Init+0x9c>)
 800077a:	f001 f825 	bl	80017c8 <HAL_ADC_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000784:	f000 fcba 	bl	80010fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000788:	2303      	movs	r3, #3
 800078a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800078c:	2301      	movs	r3, #1
 800078e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_ADC1_Init+0x9c>)
 800079a:	f001 f9b7 	bl	8001b0c <HAL_ADC_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80007a4:	f000 fcaa 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200001a0 	.word	0x200001a0
 80007b4:	40012000 	.word	0x40012000

080007b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08e      	sub	sp, #56	@ 0x38
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007cc:	f107 0320 	add.w	r3, r7, #32
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]
 80007e4:	615a      	str	r2, [r3, #20]
 80007e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e8:	4b2d      	ldr	r3, [pc, #180]	@ (80008a0 <MX_TIM2_Init+0xe8>)
 80007ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007f0:	4b2b      	ldr	r3, [pc, #172]	@ (80008a0 <MX_TIM2_Init+0xe8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f6:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <MX_TIM2_Init+0xe8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 525000-1;
 80007fc:	4b28      	ldr	r3, [pc, #160]	@ (80008a0 <MX_TIM2_Init+0xe8>)
 80007fe:	4a29      	ldr	r2, [pc, #164]	@ (80008a4 <MX_TIM2_Init+0xec>)
 8000800:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000802:	4b27      	ldr	r3, [pc, #156]	@ (80008a0 <MX_TIM2_Init+0xe8>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000808:	4b25      	ldr	r3, [pc, #148]	@ (80008a0 <MX_TIM2_Init+0xe8>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800080e:	4824      	ldr	r0, [pc, #144]	@ (80008a0 <MX_TIM2_Init+0xe8>)
 8000810:	f004 f912 	bl	8004a38 <HAL_TIM_Base_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800081a:	f000 fc6f 	bl	80010fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000822:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000824:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000828:	4619      	mov	r1, r3
 800082a:	481d      	ldr	r0, [pc, #116]	@ (80008a0 <MX_TIM2_Init+0xe8>)
 800082c:	f004 fb82 	bl	8004f34 <HAL_TIM_ConfigClockSource>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000836:	f000 fc61 	bl	80010fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800083a:	4819      	ldr	r0, [pc, #100]	@ (80008a0 <MX_TIM2_Init+0xe8>)
 800083c:	f004 f94b 	bl	8004ad6 <HAL_TIM_PWM_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000846:	f000 fc59 	bl	80010fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800084a:	2310      	movs	r3, #16
 800084c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800084e:	2380      	movs	r3, #128	@ 0x80
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000852:	f107 0320 	add.w	r3, r7, #32
 8000856:	4619      	mov	r1, r3
 8000858:	4811      	ldr	r0, [pc, #68]	@ (80008a0 <MX_TIM2_Init+0xe8>)
 800085a:	f004 ffdd 	bl	8005818 <HAL_TIMEx_MasterConfigSynchronization>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000864:	f000 fc4a 	bl	80010fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000868:	2360      	movs	r3, #96	@ 0x60
 800086a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 8820-1;
 800086c:	f242 2373 	movw	r3, #8819	@ 0x2273
 8000870:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	4619      	mov	r1, r3
 8000880:	4807      	ldr	r0, [pc, #28]	@ (80008a0 <MX_TIM2_Init+0xe8>)
 8000882:	f004 fa95 	bl	8004db0 <HAL_TIM_PWM_ConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800088c:	f000 fc36 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000890:	4803      	ldr	r0, [pc, #12]	@ (80008a0 <MX_TIM2_Init+0xe8>)
 8000892:	f000 fd39 	bl	8001308 <HAL_TIM_MspPostInit>

}
 8000896:	bf00      	nop
 8000898:	3738      	adds	r7, #56	@ 0x38
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000248 	.word	0x20000248
 80008a4:	000802c7 	.word	0x000802c7

080008a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08e      	sub	sp, #56	@ 0x38
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008bc:	f107 0320 	add.w	r3, r7, #32
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
 80008d4:	615a      	str	r2, [r3, #20]
 80008d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d8:	4b2c      	ldr	r3, [pc, #176]	@ (800098c <MX_TIM3_Init+0xe4>)
 80008da:	4a2d      	ldr	r2, [pc, #180]	@ (8000990 <MX_TIM3_Init+0xe8>)
 80008dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008de:	4b2b      	ldr	r3, [pc, #172]	@ (800098c <MX_TIM3_Init+0xe4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e4:	4b29      	ldr	r3, [pc, #164]	@ (800098c <MX_TIM3_Init+0xe4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168-1;
 80008ea:	4b28      	ldr	r3, [pc, #160]	@ (800098c <MX_TIM3_Init+0xe4>)
 80008ec:	22a7      	movs	r2, #167	@ 0xa7
 80008ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f0:	4b26      	ldr	r3, [pc, #152]	@ (800098c <MX_TIM3_Init+0xe4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f6:	4b25      	ldr	r3, [pc, #148]	@ (800098c <MX_TIM3_Init+0xe4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008fc:	4823      	ldr	r0, [pc, #140]	@ (800098c <MX_TIM3_Init+0xe4>)
 80008fe:	f004 f89b 	bl	8004a38 <HAL_TIM_Base_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000908:	f000 fbf8 	bl	80010fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000912:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000916:	4619      	mov	r1, r3
 8000918:	481c      	ldr	r0, [pc, #112]	@ (800098c <MX_TIM3_Init+0xe4>)
 800091a:	f004 fb0b 	bl	8004f34 <HAL_TIM_ConfigClockSource>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000924:	f000 fbea 	bl	80010fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000928:	4818      	ldr	r0, [pc, #96]	@ (800098c <MX_TIM3_Init+0xe4>)
 800092a:	f004 f8d4 	bl	8004ad6 <HAL_TIM_PWM_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000934:	f000 fbe2 	bl	80010fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	4619      	mov	r1, r3
 8000946:	4811      	ldr	r0, [pc, #68]	@ (800098c <MX_TIM3_Init+0xe4>)
 8000948:	f004 ff66 	bl	8005818 <HAL_TIMEx_MasterConfigSynchronization>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000952:	f000 fbd3 	bl	80010fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000956:	2360      	movs	r3, #96	@ 0x60
 8000958:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 84-1;
 800095a:	2353      	movs	r3, #83	@ 0x53
 800095c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800095e:	2300      	movs	r3, #0
 8000960:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	4619      	mov	r1, r3
 800096c:	4807      	ldr	r0, [pc, #28]	@ (800098c <MX_TIM3_Init+0xe4>)
 800096e:	f004 fa1f 	bl	8004db0 <HAL_TIM_PWM_ConfigChannel>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000978:	f000 fbc0 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800097c:	4803      	ldr	r0, [pc, #12]	@ (800098c <MX_TIM3_Init+0xe4>)
 800097e:	f000 fcc3 	bl	8001308 <HAL_TIM_MspPostInit>

}
 8000982:	bf00      	nop
 8000984:	3738      	adds	r7, #56	@ 0x38
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000290 	.word	0x20000290
 8000990:	40000400 	.word	0x40000400

08000994 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08e      	sub	sp, #56	@ 0x38
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a8:	f107 0320 	add.w	r3, r7, #32
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
 80009c0:	615a      	str	r2, [r3, #20]
 80009c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000a74 <MX_TIM4_Init+0xe0>)
 80009c6:	4a2c      	ldr	r2, [pc, #176]	@ (8000a78 <MX_TIM4_Init+0xe4>)
 80009c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000a74 <MX_TIM4_Init+0xe0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d0:	4b28      	ldr	r3, [pc, #160]	@ (8000a74 <MX_TIM4_Init+0xe0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 336-1;
 80009d6:	4b27      	ldr	r3, [pc, #156]	@ (8000a74 <MX_TIM4_Init+0xe0>)
 80009d8:	f240 124f 	movw	r2, #335	@ 0x14f
 80009dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009de:	4b25      	ldr	r3, [pc, #148]	@ (8000a74 <MX_TIM4_Init+0xe0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e4:	4b23      	ldr	r3, [pc, #140]	@ (8000a74 <MX_TIM4_Init+0xe0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009ea:	4822      	ldr	r0, [pc, #136]	@ (8000a74 <MX_TIM4_Init+0xe0>)
 80009ec:	f004 f824 	bl	8004a38 <HAL_TIM_Base_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80009f6:	f000 fb81 	bl	80010fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000a00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a04:	4619      	mov	r1, r3
 8000a06:	481b      	ldr	r0, [pc, #108]	@ (8000a74 <MX_TIM4_Init+0xe0>)
 8000a08:	f004 fa94 	bl	8004f34 <HAL_TIM_ConfigClockSource>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000a12:	f000 fb73 	bl	80010fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a16:	4817      	ldr	r0, [pc, #92]	@ (8000a74 <MX_TIM4_Init+0xe0>)
 8000a18:	f004 f85d 	bl	8004ad6 <HAL_TIM_PWM_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000a22:	f000 fb6b 	bl	80010fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a2e:	f107 0320 	add.w	r3, r7, #32
 8000a32:	4619      	mov	r1, r3
 8000a34:	480f      	ldr	r0, [pc, #60]	@ (8000a74 <MX_TIM4_Init+0xe0>)
 8000a36:	f004 feef 	bl	8005818 <HAL_TIMEx_MasterConfigSynchronization>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000a40:	f000 fb5c 	bl	80010fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a44:	2360      	movs	r3, #96	@ 0x60
 8000a46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 168-1;
 8000a48:	23a7      	movs	r3, #167	@ 0xa7
 8000a4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	220c      	movs	r2, #12
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4806      	ldr	r0, [pc, #24]	@ (8000a74 <MX_TIM4_Init+0xe0>)
 8000a5c:	f004 f9a8 	bl	8004db0 <HAL_TIM_PWM_ConfigChannel>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000a66:	f000 fb49 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	3738      	adds	r7, #56	@ 0x38
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200002d8 	.word	0x200002d8
 8000a78:	40000800 	.word	0x40000800

08000a7c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b092      	sub	sp, #72	@ 0x48
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a82:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aaa:	463b      	mov	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
 8000ab8:	615a      	str	r2, [r3, #20]
 8000aba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000abc:	4b34      	ldr	r3, [pc, #208]	@ (8000b90 <MX_TIM5_Init+0x114>)
 8000abe:	4a35      	ldr	r2, [pc, #212]	@ (8000b94 <MX_TIM5_Init+0x118>)
 8000ac0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000ac2:	4b33      	ldr	r3, [pc, #204]	@ (8000b90 <MX_TIM5_Init+0x114>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac8:	4b31      	ldr	r3, [pc, #196]	@ (8000b90 <MX_TIM5_Init+0x114>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 525000-1;
 8000ace:	4b30      	ldr	r3, [pc, #192]	@ (8000b90 <MX_TIM5_Init+0x114>)
 8000ad0:	4a31      	ldr	r2, [pc, #196]	@ (8000b98 <MX_TIM5_Init+0x11c>)
 8000ad2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8000b90 <MX_TIM5_Init+0x114>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ada:	4b2d      	ldr	r3, [pc, #180]	@ (8000b90 <MX_TIM5_Init+0x114>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ae0:	482b      	ldr	r0, [pc, #172]	@ (8000b90 <MX_TIM5_Init+0x114>)
 8000ae2:	f003 ffa9 	bl	8004a38 <HAL_TIM_Base_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8000aec:	f000 fb06 	bl	80010fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000af4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000af6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000afa:	4619      	mov	r1, r3
 8000afc:	4824      	ldr	r0, [pc, #144]	@ (8000b90 <MX_TIM5_Init+0x114>)
 8000afe:	f004 fa19 	bl	8004f34 <HAL_TIM_ConfigClockSource>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000b08:	f000 faf8 	bl	80010fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000b0c:	4820      	ldr	r0, [pc, #128]	@ (8000b90 <MX_TIM5_Init+0x114>)
 8000b0e:	f003 ffe2 	bl	8004ad6 <HAL_TIM_PWM_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000b18:	f000 faf0 	bl	80010fc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000b1c:	2306      	movs	r3, #6
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8000b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4819      	ldr	r0, [pc, #100]	@ (8000b90 <MX_TIM5_Init+0x114>)
 8000b2c:	f004 fac9 	bl	80050c2 <HAL_TIM_SlaveConfigSynchro>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM5_Init+0xbe>
  {
    Error_Handler();
 8000b36:	f000 fae1 	bl	80010fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000b3e:	2380      	movs	r3, #128	@ 0x80
 8000b40:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	4619      	mov	r1, r3
 8000b48:	4811      	ldr	r0, [pc, #68]	@ (8000b90 <MX_TIM5_Init+0x114>)
 8000b4a:	f004 fe65 	bl	8005818 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8000b54:	f000 fad2 	bl	80010fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b58:	2360      	movs	r3, #96	@ 0x60
 8000b5a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 8347-1;
 8000b5c:	f242 039a 	movw	r3, #8346	@ 0x209a
 8000b60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000b62:	2302      	movs	r3, #2
 8000b64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	2208      	movs	r2, #8
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4807      	ldr	r0, [pc, #28]	@ (8000b90 <MX_TIM5_Init+0x114>)
 8000b72:	f004 f91d 	bl	8004db0 <HAL_TIM_PWM_ConfigChannel>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM5_Init+0x104>
  {
    Error_Handler();
 8000b7c:	f000 fabe 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000b80:	4803      	ldr	r0, [pc, #12]	@ (8000b90 <MX_TIM5_Init+0x114>)
 8000b82:	f000 fbc1 	bl	8001308 <HAL_TIM_MspPostInit>

}
 8000b86:	bf00      	nop
 8000b88:	3748      	adds	r7, #72	@ 0x48
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000320 	.word	0x20000320
 8000b94:	40000c00 	.word	0x40000c00
 8000b98:	000802c7 	.word	0x000802c7

08000b9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd8 <MX_DMA_Init+0x3c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd8 <MX_DMA_Init+0x3c>)
 8000bac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b09      	ldr	r3, [pc, #36]	@ (8000bd8 <MX_DMA_Init+0x3c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2038      	movs	r0, #56	@ 0x38
 8000bc4:	f001 fb1d 	bl	8002202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bc8:	2038      	movs	r0, #56	@ 0x38
 8000bca:	f001 fb36 	bl	800223a <HAL_NVIC_EnableIRQ>

}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <MX_GPIO_Init+0x4c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	4a0f      	ldr	r2, [pc, #60]	@ (8000c28 <MX_GPIO_Init+0x4c>)
 8000bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <MX_GPIO_Init+0x4c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bfa:	607b      	str	r3, [r7, #4]
 8000bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <MX_GPIO_Init+0x4c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	4a08      	ldr	r2, [pc, #32]	@ (8000c28 <MX_GPIO_Init+0x4c>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <MX_GPIO_Init+0x4c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800

08000c2c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
HAL_ADC_Stop_DMA(&hadc1); //stop the dma
 8000c34:	4809      	ldr	r0, [pc, #36]	@ (8000c5c <HAL_ADC_ConvCpltCallback+0x30>)
 8000c36:	f000 fefb 	bl	8001a30 <HAL_ADC_Stop_DMA>
encodeData(CCDPixelBuffer,CCD_PIXEL_BUFFER_SIZE);
 8000c3a:	f241 7170 	movw	r1, #6000	@ 0x1770
 8000c3e:	4808      	ldr	r0, [pc, #32]	@ (8000c60 <HAL_ADC_ConvCpltCallback+0x34>)
 8000c40:	f000 f918 	bl	8000e74 <encodeData>
//CDC_Transmit_FS((uint8_t*)header,strlen(header));
CDC_Transmit_FS((uint8_t*) CCDPixelBuffer, CCD_PIXEL_BUFFER_SIZE);
 8000c44:	f241 7170 	movw	r1, #6000	@ 0x1770
 8000c48:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <HAL_ADC_ConvCpltCallback+0x34>)
 8000c4a:	f008 fa1f 	bl	800908c <CDC_Transmit_FS>
//CDC_Transmit_FS((uint8_t*)footer, strlen(footer));
//IdentifySpectrum(CCDPixelBuffer, CCD_PIXEL_BUFFER_SIZE, 3100);// the last value is the threshold
start_command_received = 0; // Set the flag
 8000c4e:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <HAL_ADC_ConvCpltCallback+0x38>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200001a0 	.word	0x200001a0
 8000c60:	20000450 	.word	0x20000450
 8000c64:	20003330 	.word	0x20003330

08000c68 <CDCReceiveCallback>:

//when the stm receives anything, it checks if it is the string start
void CDCReceiveCallback(uint8_t* Buf, uint32_t Len) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08c      	sub	sp, #48	@ 0x30
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
    // Ensure the buffer is null-terminated
    Buf[Len] = '\0';
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]

    // Check for the "start" command
    if (Len >= 5 && strncmp((char*)Buf, "start", 5) == 0) {
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	2b04      	cmp	r3, #4
 8000c80:	d90b      	bls.n	8000c9a <CDCReceiveCallback+0x32>
 8000c82:	2205      	movs	r2, #5
 8000c84:	493c      	ldr	r1, [pc, #240]	@ (8000d78 <CDCReceiveCallback+0x110>)
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f009 f80b 	bl	8009ca2 <strncmp>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d103      	bne.n	8000c9a <CDCReceiveCallback+0x32>
        start_command_received = 1; // Set the flag
 8000c92:	4b3a      	ldr	r3, [pc, #232]	@ (8000d7c <CDCReceiveCallback+0x114>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]
            } else if (strcmp(command, "IT") == 0) {
                CalculateAndSetIntegrationTime(param);
            }
        }
    }
}
 8000c98:	e069      	b.n	8000d6e <CDCReceiveCallback+0x106>
        char *command = strtok((char*)Buf, ":");
 8000c9a:	4939      	ldr	r1, [pc, #228]	@ (8000d80 <CDCReceiveCallback+0x118>)
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f009 f813 	bl	8009cc8 <strtok>
 8000ca2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        char *param_str = strtok(NULL, ":");
 8000ca4:	4936      	ldr	r1, [pc, #216]	@ (8000d80 <CDCReceiveCallback+0x118>)
 8000ca6:	2000      	movs	r0, #0
 8000ca8:	f009 f80e 	bl	8009cc8 <strtok>
 8000cac:	62b8      	str	r0, [r7, #40]	@ 0x28
        if (command && param_str) {
 8000cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d05c      	beq.n	8000d6e <CDCReceiveCallback+0x106>
 8000cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d059      	beq.n	8000d6e <CDCReceiveCallback+0x106>
            uint32_t param = atoi(param_str);
 8000cba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000cbc:	f008 fe28 	bl	8009910 <atoi>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
            if (strcmp(command, "SH") == 0) {
 8000cc4:	492f      	ldr	r1, [pc, #188]	@ (8000d84 <CDCReceiveCallback+0x11c>)
 8000cc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000cc8:	f7ff fa8a 	bl	80001e0 <strcmp>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d111      	bne.n	8000cf6 <CDCReceiveCallback+0x8e>
                char *pulse_str = strtok(NULL, ":");
 8000cd2:	492b      	ldr	r1, [pc, #172]	@ (8000d80 <CDCReceiveCallback+0x118>)
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f008 fff7 	bl	8009cc8 <strtok>
 8000cda:	6138      	str	r0, [r7, #16]
                if (pulse_str) {
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d045      	beq.n	8000d6e <CDCReceiveCallback+0x106>
                    uint32_t pulse = atoi(pulse_str);
 8000ce2:	6938      	ldr	r0, [r7, #16]
 8000ce4:	f008 fe14 	bl	8009910 <atoi>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60fb      	str	r3, [r7, #12]
                    Configure_SH_Signal(param, pulse);
 8000cec:	68f9      	ldr	r1, [r7, #12]
 8000cee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000cf0:	f000 f8de 	bl	8000eb0 <Configure_SH_Signal>
}
 8000cf4:	e03b      	b.n	8000d6e <CDCReceiveCallback+0x106>
            } else if (strcmp(command, "ICG") == 0) {
 8000cf6:	4924      	ldr	r1, [pc, #144]	@ (8000d88 <CDCReceiveCallback+0x120>)
 8000cf8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000cfa:	f7ff fa71 	bl	80001e0 <strcmp>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d111      	bne.n	8000d28 <CDCReceiveCallback+0xc0>
                char *pulse_str = strtok(NULL, ":");
 8000d04:	491e      	ldr	r1, [pc, #120]	@ (8000d80 <CDCReceiveCallback+0x118>)
 8000d06:	2000      	movs	r0, #0
 8000d08:	f008 ffde 	bl	8009cc8 <strtok>
 8000d0c:	61b8      	str	r0, [r7, #24]
                if (pulse_str) {
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d02c      	beq.n	8000d6e <CDCReceiveCallback+0x106>
                    uint32_t pulse = atoi(pulse_str);
 8000d14:	69b8      	ldr	r0, [r7, #24]
 8000d16:	f008 fdfb 	bl	8009910 <atoi>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	617b      	str	r3, [r7, #20]
                    Configure_ICG_Signal(param, pulse);
 8000d1e:	6979      	ldr	r1, [r7, #20]
 8000d20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d22:	f000 f927 	bl	8000f74 <Configure_ICG_Signal>
}
 8000d26:	e022      	b.n	8000d6e <CDCReceiveCallback+0x106>
            } else if (strcmp(command, "MC") == 0) {  // Assuming MC for Master Clock
 8000d28:	4918      	ldr	r1, [pc, #96]	@ (8000d8c <CDCReceiveCallback+0x124>)
 8000d2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000d2c:	f7ff fa58 	bl	80001e0 <strcmp>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d111      	bne.n	8000d5a <CDCReceiveCallback+0xf2>
                char *pulse_str = strtok(NULL, ":");
 8000d36:	4912      	ldr	r1, [pc, #72]	@ (8000d80 <CDCReceiveCallback+0x118>)
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f008 ffc5 	bl	8009cc8 <strtok>
 8000d3e:	6238      	str	r0, [r7, #32]
                if (pulse_str) {
 8000d40:	6a3b      	ldr	r3, [r7, #32]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d013      	beq.n	8000d6e <CDCReceiveCallback+0x106>
                    uint32_t pulse = atoi(pulse_str);
 8000d46:	6a38      	ldr	r0, [r7, #32]
 8000d48:	f008 fde2 	bl	8009910 <atoi>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	61fb      	str	r3, [r7, #28]
                    Configure_MasterClock_Signal(param, pulse);
 8000d50:	69f9      	ldr	r1, [r7, #28]
 8000d52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d54:	f000 f970 	bl	8001038 <Configure_MasterClock_Signal>
}
 8000d58:	e009      	b.n	8000d6e <CDCReceiveCallback+0x106>
            } else if (strcmp(command, "IT") == 0) {
 8000d5a:	490d      	ldr	r1, [pc, #52]	@ (8000d90 <CDCReceiveCallback+0x128>)
 8000d5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000d5e:	f7ff fa3f 	bl	80001e0 <strcmp>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <CDCReceiveCallback+0x106>
                CalculateAndSetIntegrationTime(param);
 8000d68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d6a:	f000 f813 	bl	8000d94 <CalculateAndSetIntegrationTime>
}
 8000d6e:	bf00      	nop
 8000d70:	3730      	adds	r7, #48	@ 0x30
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	0800ae38 	.word	0x0800ae38
 8000d7c:	20003330 	.word	0x20003330
 8000d80:	0800ae40 	.word	0x0800ae40
 8000d84:	0800ae44 	.word	0x0800ae44
 8000d88:	0800ae48 	.word	0x0800ae48
 8000d8c:	0800ae4c 	.word	0x0800ae4c
 8000d90:	0800ae50 	.word	0x0800ae50

08000d94 <CalculateAndSetIntegrationTime>:

void CalculateAndSetIntegrationTime(uint32_t integration_time_us) {
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
    // Calculate the SH period (T_SH) in timer ticks
    uint32_t T_SH_ticks = (84 * integration_time_us) - 1;  // Convert microseconds to timer ticks
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2254      	movs	r2, #84	@ 0x54
 8000da0:	fb02 f303 	mul.w	r3, r2, r3
 8000da4:	3b01      	subs	r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]

    // Minimum SH pulse width is 1 µs, which translates to 84 timer ticks at 84 MHz
    uint32_t SH_pulse_ticks = 84 - 1;
 8000da8:	2353      	movs	r3, #83	@ 0x53
 8000daa:	60bb      	str	r3, [r7, #8]

    // Configure the SH signal with the calculated period and pulse width
    Configure_SH_Signal(T_SH_ticks, SH_pulse_ticks);
 8000dac:	68b9      	ldr	r1, [r7, #8]
 8000dae:	68f8      	ldr	r0, [r7, #12]
 8000db0:	f000 f87e 	bl	8000eb0 <Configure_SH_Signal>
}
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <InitializeHeaderFooter>:


void InitializeHeaderFooter(void) {
 8000dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dbe:	b093      	sub	sp, #76	@ 0x4c
 8000dc0:	af0c      	add	r7, sp, #48	@ 0x30
    // Construct the header
    snprintf(header, HEADER_SIZE,
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e3c <InitializeHeaderFooter+0x80>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e40 <InitializeHeaderFooter+0x84>)
 8000dca:	6812      	ldr	r2, [r2, #0]
 8000dcc:	491d      	ldr	r1, [pc, #116]	@ (8000e44 <InitializeHeaderFooter+0x88>)
 8000dce:	6809      	ldr	r1, [r1, #0]
 8000dd0:	481d      	ldr	r0, [pc, #116]	@ (8000e48 <InitializeHeaderFooter+0x8c>)
 8000dd2:	6800      	ldr	r0, [r0, #0]
 8000dd4:	4c1d      	ldr	r4, [pc, #116]	@ (8000e4c <InitializeHeaderFooter+0x90>)
 8000dd6:	6824      	ldr	r4, [r4, #0]
 8000dd8:	4d1c      	ldr	r5, [pc, #112]	@ (8000e4c <InitializeHeaderFooter+0x90>)
 8000dda:	686d      	ldr	r5, [r5, #4]
 8000ddc:	4e1b      	ldr	r6, [pc, #108]	@ (8000e4c <InitializeHeaderFooter+0x90>)
 8000dde:	68b6      	ldr	r6, [r6, #8]
 8000de0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e4c <InitializeHeaderFooter+0x90>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e50 <InitializeHeaderFooter+0x94>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <InitializeHeaderFooter+0x98>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <InitializeHeaderFooter+0x9c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	4b18      	ldr	r3, [pc, #96]	@ (8000e5c <InitializeHeaderFooter+0xa0>)
 8000dfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	9308      	str	r3, [sp, #32]
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	9307      	str	r3, [sp, #28]
 8000e0c:	9606      	str	r6, [sp, #24]
 8000e0e:	9505      	str	r5, [sp, #20]
 8000e10:	9404      	str	r4, [sp, #16]
 8000e12:	9003      	str	r0, [sp, #12]
 8000e14:	9102      	str	r1, [sp, #8]
 8000e16:	9201      	str	r2, [sp, #4]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	9300      	str	r3, [sp, #0]
 8000e1c:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <InitializeHeaderFooter+0xa4>)
 8000e1e:	4a11      	ldr	r2, [pc, #68]	@ (8000e64 <InitializeHeaderFooter+0xa8>)
 8000e20:	21c8      	movs	r1, #200	@ 0xc8
 8000e22:	4811      	ldr	r0, [pc, #68]	@ (8000e68 <InitializeHeaderFooter+0xac>)
 8000e24:	f008 febe 	bl	8009ba4 <sniprintf>
        VersionNo, MajorVersion, FileFormatNo, CustomizationNo, CameraType,
        DataInfo[0], DataInfo[1], DataInfo[2], DataInfo[3],
        MeasureMode, SheetData, Profile, ScaleUnitChars);

    // Construct the footer (this example just uses a simple footer, customize as needed)
    snprintf(footer, FOOTER_SIZE, "\n");
 8000e28:	4a10      	ldr	r2, [pc, #64]	@ (8000e6c <InitializeHeaderFooter+0xb0>)
 8000e2a:	2102      	movs	r1, #2
 8000e2c:	4810      	ldr	r0, [pc, #64]	@ (8000e70 <InitializeHeaderFooter+0xb4>)
 8000e2e:	f008 feb9 	bl	8009ba4 <sniprintf>
}
 8000e32:	bf00      	nop
 8000e34:	371c      	adds	r7, #28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000004 	.word	0x20000004
 8000e40:	20000368 	.word	0x20000368
 8000e44:	20000008 	.word	0x20000008
 8000e48:	2000000c 	.word	0x2000000c
 8000e4c:	2000036c 	.word	0x2000036c
 8000e50:	20000010 	.word	0x20000010
 8000e54:	20000380 	.word	0x20000380
 8000e58:	20000014 	.word	0x20000014
 8000e5c:	20000018 	.word	0x20000018
 8000e60:	20000000 	.word	0x20000000
 8000e64:	0800ae54 	.word	0x0800ae54
 8000e68:	20000384 	.word	0x20000384
 8000e6c:	0800af00 	.word	0x0800af00
 8000e70:	2000044c 	.word	0x2000044c

08000e74 <encodeData>:

// Function to shift data and add header and footer
void encodeData(uint16_t* data_buffer, uint32_t data_size) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]

	// Copy the header to the start of the buffer
	    memcpy((void*)CCDPixelBuffer, (const void*)header, HEADER_SIZE);
 8000e7e:	4a09      	ldr	r2, [pc, #36]	@ (8000ea4 <encodeData+0x30>)
 8000e80:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <encodeData+0x34>)
 8000e82:	4610      	mov	r0, r2
 8000e84:	4619      	mov	r1, r3
 8000e86:	23c8      	movs	r3, #200	@ 0xc8
 8000e88:	461a      	mov	r2, r3
 8000e8a:	f008 ffec 	bl	8009e66 <memcpy>

	    // Copy the footer to the end of the data
	    memcpy((void*)&CCDPixelBuffer[CCD_PIXEL_BUFFER_SIZE - FOOTER_SIZE], (const void*)footer, FOOTER_SIZE);
 8000e8e:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <encodeData+0x38>)
 8000e90:	881a      	ldrh	r2, [r3, #0]
 8000e92:	4b04      	ldr	r3, [pc, #16]	@ (8000ea4 <encodeData+0x30>)
 8000e94:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8000e98:	f8a3 2edc 	strh.w	r2, [r3, #3804]	@ 0xedc
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000450 	.word	0x20000450
 8000ea8:	20000384 	.word	0x20000384
 8000eac:	2000044c 	.word	0x2000044c

08000eb0 <Configure_SH_Signal>:

void Configure_SH_Signal(uint32_t period, uint32_t pulse) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	@ 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);
 8000eba:	2108      	movs	r1, #8
 8000ebc:	482a      	ldr	r0, [pc, #168]	@ (8000f68 <Configure_SH_Signal+0xb8>)
 8000ebe:	f003 ff13 	bl	8004ce8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4829      	ldr	r0, [pc, #164]	@ (8000f6c <Configure_SH_Signal+0xbc>)
 8000ec6:	f003 ff0f 	bl	8004ce8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4828      	ldr	r0, [pc, #160]	@ (8000f70 <Configure_SH_Signal+0xc0>)
 8000ece:	f003 ff0b 	bl	8004ce8 <HAL_TIM_PWM_Stop>
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	611a      	str	r2, [r3, #16]
 8000ee2:	615a      	str	r2, [r3, #20]
 8000ee4:	619a      	str	r2, [r3, #24]

    htim5.Init.Prescaler = 1-1;
 8000ee6:	4b20      	ldr	r3, [pc, #128]	@ (8000f68 <Configure_SH_Signal+0xb8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	605a      	str	r2, [r3, #4]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eec:	4b1e      	ldr	r3, [pc, #120]	@ (8000f68 <Configure_SH_Signal+0xb8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
    htim5.Init.Period = period-1;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f68 <Configure_SH_Signal+0xb8>)
 8000ef8:	60d3      	str	r3, [r2, #12]
    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efa:	4b1b      	ldr	r3, [pc, #108]	@ (8000f68 <Configure_SH_Signal+0xb8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
    htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f00:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <Configure_SH_Signal+0xb8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 8000f06:	4818      	ldr	r0, [pc, #96]	@ (8000f68 <Configure_SH_Signal+0xb8>)
 8000f08:	f003 fde5 	bl	8004ad6 <HAL_TIM_PWM_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <Configure_SH_Signal+0x66>
        // Initialization Error
        Error_Handler();
 8000f12:	f000 f8f3 	bl	80010fc <Error_Handler>
    }

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f16:	2360      	movs	r3, #96	@ 0x60
 8000f18:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = pulse;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	480e      	ldr	r0, [pc, #56]	@ (8000f68 <Configure_SH_Signal+0xb8>)
 8000f30:	f003 ff3e 	bl	8004db0 <HAL_TIM_PWM_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <Configure_SH_Signal+0x8e>
        // Configuration Error
        Error_Handler();
 8000f3a:	f000 f8df 	bl	80010fc <Error_Handler>
    }

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //ICG
 8000f3e:	2100      	movs	r1, #0
 8000f40:	480a      	ldr	r0, [pc, #40]	@ (8000f6c <Configure_SH_Signal+0xbc>)
 8000f42:	f003 fe21 	bl	8004b88 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay
 8000f46:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <Configure_SH_Signal+0xbc>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2242      	movs	r2, #66	@ 0x42
 8000f4c:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4807      	ldr	r0, [pc, #28]	@ (8000f70 <Configure_SH_Signal+0xc0>)
 8000f52:	f003 fe19 	bl	8004b88 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH
 8000f56:	2108      	movs	r1, #8
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <Configure_SH_Signal+0xb8>)
 8000f5a:	f003 fe15 	bl	8004b88 <HAL_TIM_PWM_Start>
}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	@ 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000320 	.word	0x20000320
 8000f6c:	20000248 	.word	0x20000248
 8000f70:	20000290 	.word	0x20000290

08000f74 <Configure_ICG_Signal>:

void Configure_ICG_Signal(uint32_t period, uint32_t pulse) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);
 8000f7e:	2108      	movs	r1, #8
 8000f80:	482a      	ldr	r0, [pc, #168]	@ (800102c <Configure_ICG_Signal+0xb8>)
 8000f82:	f003 feb1 	bl	8004ce8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000f86:	2100      	movs	r1, #0
 8000f88:	4829      	ldr	r0, [pc, #164]	@ (8001030 <Configure_ICG_Signal+0xbc>)
 8000f8a:	f003 fead 	bl	8004ce8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4828      	ldr	r0, [pc, #160]	@ (8001034 <Configure_ICG_Signal+0xc0>)
 8000f92:	f003 fea9 	bl	8004ce8 <HAL_TIM_PWM_Stop>
    TIM_OC_InitTypeDef sConfigOC = {0};
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
 8000fa4:	611a      	str	r2, [r3, #16]
 8000fa6:	615a      	str	r2, [r3, #20]
 8000fa8:	619a      	str	r2, [r3, #24]

    htim2.Init.Prescaler = 1-1;
 8000faa:	4b21      	ldr	r3, [pc, #132]	@ (8001030 <Configure_ICG_Signal+0xbc>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001030 <Configure_ICG_Signal+0xbc>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = period-1;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	4a1d      	ldr	r2, [pc, #116]	@ (8001030 <Configure_ICG_Signal+0xbc>)
 8000fbc:	60d3      	str	r3, [r2, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001030 <Configure_ICG_Signal+0xbc>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001030 <Configure_ICG_Signal+0xbc>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000fca:	4819      	ldr	r0, [pc, #100]	@ (8001030 <Configure_ICG_Signal+0xbc>)
 8000fcc:	f003 fd83 	bl	8004ad6 <HAL_TIM_PWM_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <Configure_ICG_Signal+0x66>
        // Initialization Error
        Error_Handler();
 8000fd6:	f000 f891 	bl	80010fc <Error_Handler>
    }

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fda:	2360      	movs	r3, #96	@ 0x60
 8000fdc:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = pulse;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	480f      	ldr	r0, [pc, #60]	@ (8001030 <Configure_ICG_Signal+0xbc>)
 8000ff4:	f003 fedc 	bl	8004db0 <HAL_TIM_PWM_ConfigChannel>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <Configure_ICG_Signal+0x8e>
        // Configuration Error
        Error_Handler();
 8000ffe:	f000 f87d 	bl	80010fc <Error_Handler>
    }

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //ICG
 8001002:	2100      	movs	r1, #0
 8001004:	480a      	ldr	r0, [pc, #40]	@ (8001030 <Configure_ICG_Signal+0xbc>)
 8001006:	f003 fdbf 	bl	8004b88 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay
 800100a:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <Configure_ICG_Signal+0xbc>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2242      	movs	r2, #66	@ 0x42
 8001010:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
 8001012:	2100      	movs	r1, #0
 8001014:	4807      	ldr	r0, [pc, #28]	@ (8001034 <Configure_ICG_Signal+0xc0>)
 8001016:	f003 fdb7 	bl	8004b88 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH
 800101a:	2108      	movs	r1, #8
 800101c:	4803      	ldr	r0, [pc, #12]	@ (800102c <Configure_ICG_Signal+0xb8>)
 800101e:	f003 fdb3 	bl	8004b88 <HAL_TIM_PWM_Start>
}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	@ 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000320 	.word	0x20000320
 8001030:	20000248 	.word	0x20000248
 8001034:	20000290 	.word	0x20000290

08001038 <Configure_MasterClock_Signal>:

void Configure_MasterClock_Signal(uint32_t period, uint32_t pulse) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);
 8001042:	2108      	movs	r1, #8
 8001044:	482a      	ldr	r0, [pc, #168]	@ (80010f0 <Configure_MasterClock_Signal+0xb8>)
 8001046:	f003 fe4f 	bl	8004ce8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800104a:	2100      	movs	r1, #0
 800104c:	4829      	ldr	r0, [pc, #164]	@ (80010f4 <Configure_MasterClock_Signal+0xbc>)
 800104e:	f003 fe4b 	bl	8004ce8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001052:	2100      	movs	r1, #0
 8001054:	4828      	ldr	r0, [pc, #160]	@ (80010f8 <Configure_MasterClock_Signal+0xc0>)
 8001056:	f003 fe47 	bl	8004ce8 <HAL_TIM_PWM_Stop>
    TIM_OC_InitTypeDef sConfigOC = {0};
 800105a:	f107 030c 	add.w	r3, r7, #12
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]
 800106a:	615a      	str	r2, [r3, #20]
 800106c:	619a      	str	r2, [r3, #24]

    htim3.Init.Prescaler = 1-1;
 800106e:	4b22      	ldr	r3, [pc, #136]	@ (80010f8 <Configure_MasterClock_Signal+0xc0>)
 8001070:	2200      	movs	r2, #0
 8001072:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001074:	4b20      	ldr	r3, [pc, #128]	@ (80010f8 <Configure_MasterClock_Signal+0xc0>)
 8001076:	2200      	movs	r2, #0
 8001078:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = period-1;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3b01      	subs	r3, #1
 800107e:	4a1e      	ldr	r2, [pc, #120]	@ (80010f8 <Configure_MasterClock_Signal+0xc0>)
 8001080:	60d3      	str	r3, [r2, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001082:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <Configure_MasterClock_Signal+0xc0>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001088:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <Configure_MasterClock_Signal+0xc0>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800108e:	481a      	ldr	r0, [pc, #104]	@ (80010f8 <Configure_MasterClock_Signal+0xc0>)
 8001090:	f003 fd21 	bl	8004ad6 <HAL_TIM_PWM_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <Configure_MasterClock_Signal+0x66>
        // Initialization Error
        Error_Handler();
 800109a:	f000 f82f 	bl	80010fc <Error_Handler>
    }

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800109e:	2360      	movs	r3, #96	@ 0x60
 80010a0:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = pulse;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	2200      	movs	r2, #0
 80010b4:	4619      	mov	r1, r3
 80010b6:	4810      	ldr	r0, [pc, #64]	@ (80010f8 <Configure_MasterClock_Signal+0xc0>)
 80010b8:	f003 fe7a 	bl	8004db0 <HAL_TIM_PWM_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <Configure_MasterClock_Signal+0x8e>
        // Configuration Error
        Error_Handler();
 80010c2:	f000 f81b 	bl	80010fc <Error_Handler>
    }

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //ICG
 80010c6:	2100      	movs	r1, #0
 80010c8:	480a      	ldr	r0, [pc, #40]	@ (80010f4 <Configure_MasterClock_Signal+0xbc>)
 80010ca:	f003 fd5d 	bl	8004b88 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COUNTER(&htim2, 66);// 600ns delay
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <Configure_MasterClock_Signal+0xbc>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2242      	movs	r2, #66	@ 0x42
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); //fM
 80010d6:	2100      	movs	r1, #0
 80010d8:	4807      	ldr	r0, [pc, #28]	@ (80010f8 <Configure_MasterClock_Signal+0xc0>)
 80010da:	f003 fd55 	bl	8004b88 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3); //SH
 80010de:	2108      	movs	r1, #8
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <Configure_MasterClock_Signal+0xb8>)
 80010e2:	f003 fd51 	bl	8004b88 <HAL_TIM_PWM_Start>
}
 80010e6:	bf00      	nop
 80010e8:	3728      	adds	r7, #40	@ 0x28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000320 	.word	0x20000320
 80010f4:	20000248 	.word	0x20000248
 80010f8:	20000290 	.word	0x20000290

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <Error_Handler+0x8>

08001108 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b10      	ldr	r3, [pc, #64]	@ (8001154 <HAL_MspInit+0x4c>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001116:	4a0f      	ldr	r2, [pc, #60]	@ (8001154 <HAL_MspInit+0x4c>)
 8001118:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800111c:	6453      	str	r3, [r2, #68]	@ 0x44
 800111e:	4b0d      	ldr	r3, [pc, #52]	@ (8001154 <HAL_MspInit+0x4c>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <HAL_MspInit+0x4c>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	4a08      	ldr	r2, [pc, #32]	@ (8001154 <HAL_MspInit+0x4c>)
 8001134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001138:	6413      	str	r3, [r2, #64]	@ 0x40
 800113a:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <HAL_MspInit+0x4c>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800

08001158 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	@ 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a2e      	ldr	r2, [pc, #184]	@ (8001230 <HAL_ADC_MspInit+0xd8>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d156      	bne.n	8001228 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	4b2d      	ldr	r3, [pc, #180]	@ (8001234 <HAL_ADC_MspInit+0xdc>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001182:	4a2c      	ldr	r2, [pc, #176]	@ (8001234 <HAL_ADC_MspInit+0xdc>)
 8001184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001188:	6453      	str	r3, [r2, #68]	@ 0x44
 800118a:	4b2a      	ldr	r3, [pc, #168]	@ (8001234 <HAL_ADC_MspInit+0xdc>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	4b26      	ldr	r3, [pc, #152]	@ (8001234 <HAL_ADC_MspInit+0xdc>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	4a25      	ldr	r2, [pc, #148]	@ (8001234 <HAL_ADC_MspInit+0xdc>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a6:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <HAL_ADC_MspInit+0xdc>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011b2:	2308      	movs	r3, #8
 80011b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b6:	2303      	movs	r3, #3
 80011b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	481c      	ldr	r0, [pc, #112]	@ (8001238 <HAL_ADC_MspInit+0xe0>)
 80011c6:	f001 fc33 	bl	8002a30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	@ (800123c <HAL_ADC_MspInit+0xe4>)
 80011cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001240 <HAL_ADC_MspInit+0xe8>)
 80011ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <HAL_ADC_MspInit+0xe4>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011d6:	4b19      	ldr	r3, [pc, #100]	@ (800123c <HAL_ADC_MspInit+0xe4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011dc:	4b17      	ldr	r3, [pc, #92]	@ (800123c <HAL_ADC_MspInit+0xe4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011e2:	4b16      	ldr	r3, [pc, #88]	@ (800123c <HAL_ADC_MspInit+0xe4>)
 80011e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ea:	4b14      	ldr	r3, [pc, #80]	@ (800123c <HAL_ADC_MspInit+0xe4>)
 80011ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011f2:	4b12      	ldr	r3, [pc, #72]	@ (800123c <HAL_ADC_MspInit+0xe4>)
 80011f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80011fa:	4b10      	ldr	r3, [pc, #64]	@ (800123c <HAL_ADC_MspInit+0xe4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001200:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <HAL_ADC_MspInit+0xe4>)
 8001202:	2200      	movs	r2, #0
 8001204:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001206:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <HAL_ADC_MspInit+0xe4>)
 8001208:	2200      	movs	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800120c:	480b      	ldr	r0, [pc, #44]	@ (800123c <HAL_ADC_MspInit+0xe4>)
 800120e:	f001 f82f 	bl	8002270 <HAL_DMA_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001218:	f7ff ff70 	bl	80010fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a07      	ldr	r2, [pc, #28]	@ (800123c <HAL_ADC_MspInit+0xe4>)
 8001220:	639a      	str	r2, [r3, #56]	@ 0x38
 8001222:	4a06      	ldr	r2, [pc, #24]	@ (800123c <HAL_ADC_MspInit+0xe4>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	@ 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40012000 	.word	0x40012000
 8001234:	40023800 	.word	0x40023800
 8001238:	40020000 	.word	0x40020000
 800123c:	200001e8 	.word	0x200001e8
 8001240:	40026410 	.word	0x40026410

08001244 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001254:	d10e      	bne.n	8001274 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	4b27      	ldr	r3, [pc, #156]	@ (80012f8 <HAL_TIM_Base_MspInit+0xb4>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125e:	4a26      	ldr	r2, [pc, #152]	@ (80012f8 <HAL_TIM_Base_MspInit+0xb4>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6413      	str	r3, [r2, #64]	@ 0x40
 8001266:	4b24      	ldr	r3, [pc, #144]	@ (80012f8 <HAL_TIM_Base_MspInit+0xb4>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001272:	e03a      	b.n	80012ea <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a20      	ldr	r2, [pc, #128]	@ (80012fc <HAL_TIM_Base_MspInit+0xb8>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d10e      	bne.n	800129c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <HAL_TIM_Base_MspInit+0xb4>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	4a1c      	ldr	r2, [pc, #112]	@ (80012f8 <HAL_TIM_Base_MspInit+0xb4>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	6413      	str	r3, [r2, #64]	@ 0x40
 800128e:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <HAL_TIM_Base_MspInit+0xb4>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]
}
 800129a:	e026      	b.n	80012ea <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a17      	ldr	r2, [pc, #92]	@ (8001300 <HAL_TIM_Base_MspInit+0xbc>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d10e      	bne.n	80012c4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <HAL_TIM_Base_MspInit+0xb4>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	4a12      	ldr	r2, [pc, #72]	@ (80012f8 <HAL_TIM_Base_MspInit+0xb4>)
 80012b0:	f043 0304 	orr.w	r3, r3, #4
 80012b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b6:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <HAL_TIM_Base_MspInit+0xb4>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]
}
 80012c2:	e012      	b.n	80012ea <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001304 <HAL_TIM_Base_MspInit+0xc0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d10d      	bne.n	80012ea <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <HAL_TIM_Base_MspInit+0xb4>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d6:	4a08      	ldr	r2, [pc, #32]	@ (80012f8 <HAL_TIM_Base_MspInit+0xb4>)
 80012d8:	f043 0308 	orr.w	r3, r3, #8
 80012dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012de:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <HAL_TIM_Base_MspInit+0xb4>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
}
 80012ea:	bf00      	nop
 80012ec:	371c      	adds	r7, #28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40000400 	.word	0x40000400
 8001300:	40000800 	.word	0x40000800
 8001304:	40000c00 	.word	0x40000c00

08001308 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	@ 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001328:	d11e      	bne.n	8001368 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b34      	ldr	r3, [pc, #208]	@ (8001400 <HAL_TIM_MspPostInit+0xf8>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	4a33      	ldr	r2, [pc, #204]	@ (8001400 <HAL_TIM_MspPostInit+0xf8>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	@ 0x30
 800133a:	4b31      	ldr	r3, [pc, #196]	@ (8001400 <HAL_TIM_MspPostInit+0xf8>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001346:	2301      	movs	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001356:	2301      	movs	r3, #1
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	4619      	mov	r1, r3
 8001360:	4828      	ldr	r0, [pc, #160]	@ (8001404 <HAL_TIM_MspPostInit+0xfc>)
 8001362:	f001 fb65 	bl	8002a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001366:	e046      	b.n	80013f6 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a26      	ldr	r2, [pc, #152]	@ (8001408 <HAL_TIM_MspPostInit+0x100>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d11e      	bne.n	80013b0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <HAL_TIM_MspPostInit+0xf8>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	4a21      	ldr	r2, [pc, #132]	@ (8001400 <HAL_TIM_MspPostInit+0xf8>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6313      	str	r3, [r2, #48]	@ 0x30
 8001382:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <HAL_TIM_MspPostInit+0xf8>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800138e:	2340      	movs	r3, #64	@ 0x40
 8001390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800139e:	2302      	movs	r3, #2
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4816      	ldr	r0, [pc, #88]	@ (8001404 <HAL_TIM_MspPostInit+0xfc>)
 80013aa:	f001 fb41 	bl	8002a30 <HAL_GPIO_Init>
}
 80013ae:	e022      	b.n	80013f6 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM5)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a15      	ldr	r2, [pc, #84]	@ (800140c <HAL_TIM_MspPostInit+0x104>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d11d      	bne.n	80013f6 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <HAL_TIM_MspPostInit+0xf8>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001400 <HAL_TIM_MspPostInit+0xf8>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <HAL_TIM_MspPostInit+0xf8>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013d6:	2304      	movs	r3, #4
 80013d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2300      	movs	r3, #0
 80013e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80013e6:	2302      	movs	r3, #2
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	4804      	ldr	r0, [pc, #16]	@ (8001404 <HAL_TIM_MspPostInit+0xfc>)
 80013f2:	f001 fb1d 	bl	8002a30 <HAL_GPIO_Init>
}
 80013f6:	bf00      	nop
 80013f8:	3728      	adds	r7, #40	@ 0x28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800
 8001404:	40020000 	.word	0x40020000
 8001408:	40000400 	.word	0x40000400
 800140c:	40000c00 	.word	0x40000c00

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <NMI_Handler+0x4>

08001418 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <HardFault_Handler+0x4>

08001420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <MemManage_Handler+0x4>

08001428 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <UsageFault_Handler+0x4>

08001438 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001466:	f000 f96b 	bl	8001740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001474:	4802      	ldr	r0, [pc, #8]	@ (8001480 <DMA2_Stream0_IRQHandler+0x10>)
 8001476:	f001 f871 	bl	800255c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200001e8 	.word	0x200001e8

08001484 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001488:	4802      	ldr	r0, [pc, #8]	@ (8001494 <OTG_FS_IRQHandler+0x10>)
 800148a:	f001 fd99 	bl	8002fc0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000401c 	.word	0x2000401c

08001498 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return 1;
 800149c:	2301      	movs	r3, #1
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_kill>:

int _kill(int pid, int sig)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014b2:	f008 fcab 	bl	8009e0c <__errno>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2216      	movs	r2, #22
 80014ba:	601a      	str	r2, [r3, #0]
  return -1;
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <_exit>:

void _exit (int status)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ffe7 	bl	80014a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014da:	bf00      	nop
 80014dc:	e7fd      	b.n	80014da <_exit+0x12>

080014de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	e00a      	b.n	8001506 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014f0:	f3af 8000 	nop.w
 80014f4:	4601      	mov	r1, r0
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	60ba      	str	r2, [r7, #8]
 80014fc:	b2ca      	uxtb	r2, r1
 80014fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	3301      	adds	r3, #1
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	429a      	cmp	r2, r3
 800150c:	dbf0      	blt.n	80014f0 <_read+0x12>
  }

  return len;
 800150e:	687b      	ldr	r3, [r7, #4]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e009      	b.n	800153e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	60ba      	str	r2, [r7, #8]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	3301      	adds	r3, #1
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	429a      	cmp	r2, r3
 8001544:	dbf1      	blt.n	800152a <_write+0x12>
  }
  return len;
 8001546:	687b      	ldr	r3, [r7, #4]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <_close>:

int _close(int file)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001558:	f04f 33ff 	mov.w	r3, #4294967295
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001578:	605a      	str	r2, [r3, #4]
  return 0;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <_isatty>:

int _isatty(int file)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001590:	2301      	movs	r3, #1
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800159e:	b480      	push	{r7}
 80015a0:	b085      	sub	sp, #20
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c0:	4a14      	ldr	r2, [pc, #80]	@ (8001614 <_sbrk+0x5c>)
 80015c2:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <_sbrk+0x60>)
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015cc:	4b13      	ldr	r3, [pc, #76]	@ (800161c <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d4:	4b11      	ldr	r3, [pc, #68]	@ (800161c <_sbrk+0x64>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	@ (8001620 <_sbrk+0x68>)
 80015d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015da:	4b10      	ldr	r3, [pc, #64]	@ (800161c <_sbrk+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d207      	bcs.n	80015f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e8:	f008 fc10 	bl	8009e0c <__errno>
 80015ec:	4603      	mov	r3, r0
 80015ee:	220c      	movs	r2, #12
 80015f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	e009      	b.n	800160c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f8:	4b08      	ldr	r3, [pc, #32]	@ (800161c <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fe:	4b07      	ldr	r3, [pc, #28]	@ (800161c <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	4a05      	ldr	r2, [pc, #20]	@ (800161c <_sbrk+0x64>)
 8001608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20010000 	.word	0x20010000
 8001618:	00000400 	.word	0x00000400
 800161c:	20003334 	.word	0x20003334
 8001620:	20004870 	.word	0x20004870

08001624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001628:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <SystemInit+0x20>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800162e:	4a05      	ldr	r2, [pc, #20]	@ (8001644 <SystemInit+0x20>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001680 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800164c:	f7ff ffea 	bl	8001624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001650:	480c      	ldr	r0, [pc, #48]	@ (8001684 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001652:	490d      	ldr	r1, [pc, #52]	@ (8001688 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001654:	4a0d      	ldr	r2, [pc, #52]	@ (800168c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001668:	4c0a      	ldr	r4, [pc, #40]	@ (8001694 <LoopFillZerobss+0x22>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001676:	f008 fbcf 	bl	8009e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167a:	f7fe ff89 	bl	8000590 <main>
  bx  lr    
 800167e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001680:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800168c:	0800b158 	.word	0x0800b158
  ldr r2, =_sbss
 8001690:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001694:	2000486c 	.word	0x2000486c

08001698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC_IRQHandler>
	...

0800169c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a0:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0d      	ldr	r2, [pc, #52]	@ (80016dc <HAL_Init+0x40>)
 80016a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016ac:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <HAL_Init+0x40>)
 80016b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	@ (80016dc <HAL_Init+0x40>)
 80016be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 fd91 	bl	80021ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ca:	200f      	movs	r0, #15
 80016cc:	f000 f808 	bl	80016e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d0:	f7ff fd1a 	bl	8001108 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023c00 	.word	0x40023c00

080016e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <HAL_InitTick+0x54>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <HAL_InitTick+0x58>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fda9 	bl	8002256 <HAL_SYSTICK_Config>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e00e      	b.n	800172c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d80a      	bhi.n	800172a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	f000 fd71 	bl	8002202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001720:	4a06      	ldr	r2, [pc, #24]	@ (800173c <HAL_InitTick+0x5c>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	e000      	b.n	800172c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	2000002c 	.word	0x2000002c
 8001738:	20000034 	.word	0x20000034
 800173c:	20000030 	.word	0x20000030

08001740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_IncTick+0x20>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_IncTick+0x24>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4413      	add	r3, r2
 8001750:	4a04      	ldr	r2, [pc, #16]	@ (8001764 <HAL_IncTick+0x24>)
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	20000034 	.word	0x20000034
 8001764:	20003338 	.word	0x20003338

08001768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  return uwTick;
 800176c:	4b03      	ldr	r3, [pc, #12]	@ (800177c <HAL_GetTick+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20003338 	.word	0x20003338

08001780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001788:	f7ff ffee 	bl	8001768 <HAL_GetTick>
 800178c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d005      	beq.n	80017a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800179a:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <HAL_Delay+0x44>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4413      	add	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017a6:	bf00      	nop
 80017a8:	f7ff ffde 	bl	8001768 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d8f7      	bhi.n	80017a8 <HAL_Delay+0x28>
  {
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000034 	.word	0x20000034

080017c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e033      	b.n	8001846 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d109      	bne.n	80017fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fcb6 	bl	8001158 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	f003 0310 	and.w	r3, r3, #16
 8001802:	2b00      	cmp	r3, #0
 8001804:	d118      	bne.n	8001838 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800180e:	f023 0302 	bic.w	r3, r3, #2
 8001812:	f043 0202 	orr.w	r2, r3, #2
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 fa98 	bl	8001d50 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	f023 0303 	bic.w	r3, r3, #3
 800182e:	f043 0201 	orr.w	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	641a      	str	r2, [r3, #64]	@ 0x40
 8001836:	e001      	b.n	800183c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <HAL_ADC_Start_DMA+0x1e>
 800186a:	2302      	movs	r3, #2
 800186c:	e0ce      	b.n	8001a0c <HAL_ADC_Start_DMA+0x1bc>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	2b01      	cmp	r3, #1
 8001882:	d018      	beq.n	80018b6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001894:	4b5f      	ldr	r3, [pc, #380]	@ (8001a14 <HAL_ADC_Start_DMA+0x1c4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a5f      	ldr	r2, [pc, #380]	@ (8001a18 <HAL_ADC_Start_DMA+0x1c8>)
 800189a:	fba2 2303 	umull	r2, r3, r2, r3
 800189e:	0c9a      	lsrs	r2, r3, #18
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80018a8:	e002      	b.n	80018b0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f9      	bne.n	80018aa <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018c4:	d107      	bne.n	80018d6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018d4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	f040 8086 	bne.w	80019f2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001904:	2b00      	cmp	r3, #0
 8001906:	d007      	beq.n	8001918 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001910:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001924:	d106      	bne.n	8001934 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192a:	f023 0206 	bic.w	r2, r3, #6
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	645a      	str	r2, [r3, #68]	@ 0x44
 8001932:	e002      	b.n	800193a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001942:	4b36      	ldr	r3, [pc, #216]	@ (8001a1c <HAL_ADC_Start_DMA+0x1cc>)
 8001944:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800194a:	4a35      	ldr	r2, [pc, #212]	@ (8001a20 <HAL_ADC_Start_DMA+0x1d0>)
 800194c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001952:	4a34      	ldr	r2, [pc, #208]	@ (8001a24 <HAL_ADC_Start_DMA+0x1d4>)
 8001954:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800195a:	4a33      	ldr	r2, [pc, #204]	@ (8001a28 <HAL_ADC_Start_DMA+0x1d8>)
 800195c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001966:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001976:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689a      	ldr	r2, [r3, #8]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001986:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	334c      	adds	r3, #76	@ 0x4c
 8001992:	4619      	mov	r1, r3
 8001994:	68ba      	ldr	r2, [r7, #8]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f000 fd18 	bl	80023cc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10f      	bne.n	80019c8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d129      	bne.n	8001a0a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	e020      	b.n	8001a0a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a17      	ldr	r2, [pc, #92]	@ (8001a2c <HAL_ADC_Start_DMA+0x1dc>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d11b      	bne.n	8001a0a <HAL_ADC_Start_DMA+0x1ba>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d114      	bne.n	8001a0a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	e00b      	b.n	8001a0a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	f043 0210 	orr.w	r2, r3, #16
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a02:	f043 0201 	orr.w	r2, r3, #1
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	2000002c 	.word	0x2000002c
 8001a18:	431bde83 	.word	0x431bde83
 8001a1c:	40012300 	.word	0x40012300
 8001a20:	08001f49 	.word	0x08001f49
 8001a24:	08002003 	.word	0x08002003
 8001a28:	0800201f 	.word	0x0800201f
 8001a2c:	40012000 	.word	0x40012000

08001a30 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d101      	bne.n	8001a4a <HAL_ADC_Stop_DMA+0x1a>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e048      	b.n	8001adc <HAL_ADC_Stop_DMA+0xac>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0201 	bic.w	r2, r2, #1
 8001a60:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d130      	bne.n	8001ad2 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a7e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d10f      	bne.n	8001aae <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 fcf2 	bl	800247c <HAL_DMA_Abort>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d005      	beq.n	8001aae <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001abc:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ac6:	f023 0301 	bic.w	r3, r3, #1
 8001aca:	f043 0201 	orr.w	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1c>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e105      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x228>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b09      	cmp	r3, #9
 8001b36:	d925      	bls.n	8001b84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68d9      	ldr	r1, [r3, #12]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	461a      	mov	r2, r3
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3b1e      	subs	r3, #30
 8001b4e:	2207      	movs	r2, #7
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43da      	mvns	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	400a      	ands	r2, r1
 8001b5c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68d9      	ldr	r1, [r3, #12]
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	4603      	mov	r3, r0
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4403      	add	r3, r0
 8001b76:	3b1e      	subs	r3, #30
 8001b78:	409a      	lsls	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	e022      	b.n	8001bca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6919      	ldr	r1, [r3, #16]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	2207      	movs	r2, #7
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6919      	ldr	r1, [r3, #16]
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	4618      	mov	r0, r3
 8001bba:	4603      	mov	r3, r0
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4403      	add	r3, r0
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d824      	bhi.n	8001c1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	3b05      	subs	r3, #5
 8001be4:	221f      	movs	r2, #31
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	4618      	mov	r0, r3
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4413      	add	r3, r2
 8001c0c:	3b05      	subs	r3, #5
 8001c0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c1a:	e04c      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b0c      	cmp	r3, #12
 8001c22:	d824      	bhi.n	8001c6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	3b23      	subs	r3, #35	@ 0x23
 8001c36:	221f      	movs	r2, #31
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43da      	mvns	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	400a      	ands	r2, r1
 8001c44:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	4618      	mov	r0, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	3b23      	subs	r3, #35	@ 0x23
 8001c60:	fa00 f203 	lsl.w	r2, r0, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c6c:	e023      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3b41      	subs	r3, #65	@ 0x41
 8001c80:	221f      	movs	r2, #31
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3b41      	subs	r3, #65	@ 0x41
 8001caa:	fa00 f203 	lsl.w	r2, r0, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cb6:	4b22      	ldr	r3, [pc, #136]	@ (8001d40 <HAL_ADC_ConfigChannel+0x234>)
 8001cb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a21      	ldr	r2, [pc, #132]	@ (8001d44 <HAL_ADC_ConfigChannel+0x238>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d109      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x1cc>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b12      	cmp	r3, #18
 8001cca:	d105      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a19      	ldr	r2, [pc, #100]	@ (8001d44 <HAL_ADC_ConfigChannel+0x238>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d123      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x21e>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b10      	cmp	r3, #16
 8001ce8:	d003      	beq.n	8001cf2 <HAL_ADC_ConfigChannel+0x1e6>
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b11      	cmp	r3, #17
 8001cf0:	d11b      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b10      	cmp	r3, #16
 8001d04:	d111      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d06:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <HAL_ADC_ConfigChannel+0x23c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a10      	ldr	r2, [pc, #64]	@ (8001d4c <HAL_ADC_ConfigChannel+0x240>)
 8001d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d10:	0c9a      	lsrs	r2, r3, #18
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d1c:	e002      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f9      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40012300 	.word	0x40012300
 8001d44:	40012000 	.word	0x40012000
 8001d48:	2000002c 	.word	0x2000002c
 8001d4c:	431bde83 	.word	0x431bde83

08001d50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d58:	4b79      	ldr	r3, [pc, #484]	@ (8001f40 <ADC_Init+0x1f0>)
 8001d5a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	431a      	orrs	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6859      	ldr	r1, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	021a      	lsls	r2, r3, #8
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	685a      	ldr	r2, [r3, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001da8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6859      	ldr	r1, [r3, #4]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6899      	ldr	r1, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de2:	4a58      	ldr	r2, [pc, #352]	@ (8001f44 <ADC_Init+0x1f4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d022      	beq.n	8001e2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001df6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6899      	ldr	r1, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6899      	ldr	r1, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	e00f      	b.n	8001e4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e4c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0202 	bic.w	r2, r2, #2
 8001e5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	6899      	ldr	r1, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	7e1b      	ldrb	r3, [r3, #24]
 8001e68:	005a      	lsls	r2, r3, #1
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01b      	beq.n	8001eb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e8a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001e9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6859      	ldr	r1, [r3, #4]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	035a      	lsls	r2, r3, #13
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	e007      	b.n	8001ec4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ec2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	051a      	lsls	r2, r3, #20
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001ef8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6899      	ldr	r1, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f06:	025a      	lsls	r2, r3, #9
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6899      	ldr	r1, [r3, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	029a      	lsls	r2, r3, #10
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	609a      	str	r2, [r3, #8]
}
 8001f34:	bf00      	nop
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	40012300 	.word	0x40012300
 8001f44:	0f000001 	.word	0x0f000001

08001f48 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f54:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d13c      	bne.n	8001fdc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d12b      	bne.n	8001fd4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d127      	bne.n	8001fd4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d006      	beq.n	8001fa0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d119      	bne.n	8001fd4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0220 	bic.w	r2, r2, #32
 8001fae:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d105      	bne.n	8001fd4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fcc:	f043 0201 	orr.w	r2, r3, #1
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f7fe fe29 	bl	8000c2c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001fda:	e00e      	b.n	8001ffa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe0:	f003 0310 	and.w	r3, r3, #16
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f7ff fd85 	bl	8001af8 <HAL_ADC_ErrorCallback>
}
 8001fee:	e004      	b.n	8001ffa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	4798      	blx	r3
}
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b084      	sub	sp, #16
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800200e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f7ff fd67 	bl	8001ae4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002016:	bf00      	nop
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b084      	sub	sp, #16
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800202a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2240      	movs	r2, #64	@ 0x40
 8002030:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	f043 0204 	orr.w	r2, r3, #4
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f7ff fd5a 	bl	8001af8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002044:	bf00      	nop
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800205c:	4b0c      	ldr	r3, [pc, #48]	@ (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002068:	4013      	ands	r3, r2
 800206a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002074:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800207c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800207e:	4a04      	ldr	r2, [pc, #16]	@ (8002090 <__NVIC_SetPriorityGrouping+0x44>)
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	60d3      	str	r3, [r2, #12]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002098:	4b04      	ldr	r3, [pc, #16]	@ (80020ac <__NVIC_GetPriorityGrouping+0x18>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	f003 0307 	and.w	r3, r3, #7
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	db0b      	blt.n	80020da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	f003 021f 	and.w	r2, r3, #31
 80020c8:	4907      	ldr	r1, [pc, #28]	@ (80020e8 <__NVIC_EnableIRQ+0x38>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	095b      	lsrs	r3, r3, #5
 80020d0:	2001      	movs	r0, #1
 80020d2:	fa00 f202 	lsl.w	r2, r0, r2
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000e100 	.word	0xe000e100

080020ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	6039      	str	r1, [r7, #0]
 80020f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	db0a      	blt.n	8002116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	b2da      	uxtb	r2, r3
 8002104:	490c      	ldr	r1, [pc, #48]	@ (8002138 <__NVIC_SetPriority+0x4c>)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	0112      	lsls	r2, r2, #4
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	440b      	add	r3, r1
 8002110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002114:	e00a      	b.n	800212c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	b2da      	uxtb	r2, r3
 800211a:	4908      	ldr	r1, [pc, #32]	@ (800213c <__NVIC_SetPriority+0x50>)
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	3b04      	subs	r3, #4
 8002124:	0112      	lsls	r2, r2, #4
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	440b      	add	r3, r1
 800212a:	761a      	strb	r2, [r3, #24]
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000e100 	.word	0xe000e100
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002140:	b480      	push	{r7}
 8002142:	b089      	sub	sp, #36	@ 0x24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f1c3 0307 	rsb	r3, r3, #7
 800215a:	2b04      	cmp	r3, #4
 800215c:	bf28      	it	cs
 800215e:	2304      	movcs	r3, #4
 8002160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3304      	adds	r3, #4
 8002166:	2b06      	cmp	r3, #6
 8002168:	d902      	bls.n	8002170 <NVIC_EncodePriority+0x30>
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3b03      	subs	r3, #3
 800216e:	e000      	b.n	8002172 <NVIC_EncodePriority+0x32>
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002174:	f04f 32ff 	mov.w	r2, #4294967295
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43da      	mvns	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	401a      	ands	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002188:	f04f 31ff 	mov.w	r1, #4294967295
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa01 f303 	lsl.w	r3, r1, r3
 8002192:	43d9      	mvns	r1, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002198:	4313      	orrs	r3, r2
         );
}
 800219a:	4618      	mov	r0, r3
 800219c:	3724      	adds	r7, #36	@ 0x24
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
	...

080021a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021b8:	d301      	bcc.n	80021be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ba:	2301      	movs	r3, #1
 80021bc:	e00f      	b.n	80021de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021be:	4a0a      	ldr	r2, [pc, #40]	@ (80021e8 <SysTick_Config+0x40>)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021c6:	210f      	movs	r1, #15
 80021c8:	f04f 30ff 	mov.w	r0, #4294967295
 80021cc:	f7ff ff8e 	bl	80020ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021d0:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <SysTick_Config+0x40>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021d6:	4b04      	ldr	r3, [pc, #16]	@ (80021e8 <SysTick_Config+0x40>)
 80021d8:	2207      	movs	r2, #7
 80021da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	e000e010 	.word	0xe000e010

080021ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff ff29 	bl	800204c <__NVIC_SetPriorityGrouping>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	4603      	mov	r3, r0
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002214:	f7ff ff3e 	bl	8002094 <__NVIC_GetPriorityGrouping>
 8002218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68b9      	ldr	r1, [r7, #8]
 800221e:	6978      	ldr	r0, [r7, #20]
 8002220:	f7ff ff8e 	bl	8002140 <NVIC_EncodePriority>
 8002224:	4602      	mov	r2, r0
 8002226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800222a:	4611      	mov	r1, r2
 800222c:	4618      	mov	r0, r3
 800222e:	f7ff ff5d 	bl	80020ec <__NVIC_SetPriority>
}
 8002232:	bf00      	nop
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff31 	bl	80020b0 <__NVIC_EnableIRQ>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7ff ffa2 	bl	80021a8 <SysTick_Config>
 8002264:	4603      	mov	r3, r0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800227c:	f7ff fa74 	bl	8001768 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e099      	b.n	80023c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2202      	movs	r2, #2
 8002290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 0201 	bic.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ac:	e00f      	b.n	80022ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ae:	f7ff fa5b 	bl	8001768 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b05      	cmp	r3, #5
 80022ba:	d908      	bls.n	80022ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2220      	movs	r2, #32
 80022c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2203      	movs	r2, #3
 80022c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e078      	b.n	80023c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e8      	bne.n	80022ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	4b38      	ldr	r3, [pc, #224]	@ (80023c8 <HAL_DMA_Init+0x158>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002306:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002312:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	4313      	orrs	r3, r2
 800231e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002324:	2b04      	cmp	r3, #4
 8002326:	d107      	bne.n	8002338 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002330:	4313      	orrs	r3, r2
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	4313      	orrs	r3, r2
 8002336:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f023 0307 	bic.w	r3, r3, #7
 800234e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	4313      	orrs	r3, r2
 8002358:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235e:	2b04      	cmp	r3, #4
 8002360:	d117      	bne.n	8002392 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4313      	orrs	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00e      	beq.n	8002392 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fadf 	bl	8002938 <DMA_CheckFifoParam>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d008      	beq.n	8002392 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2240      	movs	r2, #64	@ 0x40
 8002384:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800238e:	2301      	movs	r3, #1
 8002390:	e016      	b.n	80023c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fa96 	bl	80028cc <DMA_CalcBaseAndBitshift>
 80023a0:	4603      	mov	r3, r0
 80023a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a8:	223f      	movs	r2, #63	@ 0x3f
 80023aa:	409a      	lsls	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	f010803f 	.word	0xf010803f

080023cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <HAL_DMA_Start_IT+0x26>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e040      	b.n	8002474 <HAL_DMA_Start_IT+0xa8>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d12f      	bne.n	8002466 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2202      	movs	r2, #2
 800240a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68b9      	ldr	r1, [r7, #8]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fa28 	bl	8002870 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002424:	223f      	movs	r2, #63	@ 0x3f
 8002426:	409a      	lsls	r2, r3
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0216 	orr.w	r2, r2, #22
 800243a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002440:	2b00      	cmp	r3, #0
 8002442:	d007      	beq.n	8002454 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0208 	orr.w	r2, r2, #8
 8002452:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	e005      	b.n	8002472 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800246e:	2302      	movs	r3, #2
 8002470:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002472:	7dfb      	ldrb	r3, [r7, #23]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002488:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800248a:	f7ff f96d 	bl	8001768 <HAL_GetTick>
 800248e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d008      	beq.n	80024ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2280      	movs	r2, #128	@ 0x80
 80024a0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e052      	b.n	8002554 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0216 	bic.w	r2, r2, #22
 80024bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d103      	bne.n	80024de <HAL_DMA_Abort+0x62>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0208 	bic.w	r2, r2, #8
 80024ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0201 	bic.w	r2, r2, #1
 80024fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024fe:	e013      	b.n	8002528 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002500:	f7ff f932 	bl	8001768 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b05      	cmp	r3, #5
 800250c:	d90c      	bls.n	8002528 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2220      	movs	r2, #32
 8002512:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2203      	movs	r2, #3
 8002518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e015      	b.n	8002554 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1e4      	bne.n	8002500 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253a:	223f      	movs	r2, #63	@ 0x3f
 800253c:	409a      	lsls	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002564:	2300      	movs	r3, #0
 8002566:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002568:	4b8e      	ldr	r3, [pc, #568]	@ (80027a4 <HAL_DMA_IRQHandler+0x248>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a8e      	ldr	r2, [pc, #568]	@ (80027a8 <HAL_DMA_IRQHandler+0x24c>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	0a9b      	lsrs	r3, r3, #10
 8002574:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002586:	2208      	movs	r2, #8
 8002588:	409a      	lsls	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4013      	ands	r3, r2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d01a      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d013      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0204 	bic.w	r2, r2, #4
 80025ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b4:	2208      	movs	r2, #8
 80025b6:	409a      	lsls	r2, r3
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c0:	f043 0201 	orr.w	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025cc:	2201      	movs	r2, #1
 80025ce:	409a      	lsls	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d012      	beq.n	80025fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00b      	beq.n	80025fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ea:	2201      	movs	r2, #1
 80025ec:	409a      	lsls	r2, r3
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f6:	f043 0202 	orr.w	r2, r3, #2
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002602:	2204      	movs	r2, #4
 8002604:	409a      	lsls	r2, r3
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4013      	ands	r3, r2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d012      	beq.n	8002634 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00b      	beq.n	8002634 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002620:	2204      	movs	r2, #4
 8002622:	409a      	lsls	r2, r3
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800262c:	f043 0204 	orr.w	r2, r3, #4
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002638:	2210      	movs	r2, #16
 800263a:	409a      	lsls	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	4013      	ands	r3, r2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d043      	beq.n	80026cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d03c      	beq.n	80026cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002656:	2210      	movs	r2, #16
 8002658:	409a      	lsls	r2, r3
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d018      	beq.n	800269e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d108      	bne.n	800268c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	d024      	beq.n	80026cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	4798      	blx	r3
 800268a:	e01f      	b.n	80026cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002690:	2b00      	cmp	r3, #0
 8002692:	d01b      	beq.n	80026cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	4798      	blx	r3
 800269c:	e016      	b.n	80026cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d107      	bne.n	80026bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 0208 	bic.w	r2, r2, #8
 80026ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d0:	2220      	movs	r2, #32
 80026d2:	409a      	lsls	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4013      	ands	r3, r2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 808f 	beq.w	80027fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 8087 	beq.w	80027fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f2:	2220      	movs	r2, #32
 80026f4:	409a      	lsls	r2, r3
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b05      	cmp	r3, #5
 8002704:	d136      	bne.n	8002774 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0216 	bic.w	r2, r2, #22
 8002714:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002724:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272a:	2b00      	cmp	r3, #0
 800272c:	d103      	bne.n	8002736 <HAL_DMA_IRQHandler+0x1da>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f022 0208 	bic.w	r2, r2, #8
 8002744:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274a:	223f      	movs	r2, #63	@ 0x3f
 800274c:	409a      	lsls	r2, r3
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002766:	2b00      	cmp	r3, #0
 8002768:	d07e      	beq.n	8002868 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	4798      	blx	r3
        }
        return;
 8002772:	e079      	b.n	8002868 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d01d      	beq.n	80027be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10d      	bne.n	80027ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002794:	2b00      	cmp	r3, #0
 8002796:	d031      	beq.n	80027fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	4798      	blx	r3
 80027a0:	e02c      	b.n	80027fc <HAL_DMA_IRQHandler+0x2a0>
 80027a2:	bf00      	nop
 80027a4:	2000002c 	.word	0x2000002c
 80027a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d023      	beq.n	80027fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	4798      	blx	r3
 80027bc:	e01e      	b.n	80027fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10f      	bne.n	80027ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0210 	bic.w	r2, r2, #16
 80027da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002800:	2b00      	cmp	r3, #0
 8002802:	d032      	beq.n	800286a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d022      	beq.n	8002856 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2205      	movs	r2, #5
 8002814:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	3301      	adds	r3, #1
 800282c:	60bb      	str	r3, [r7, #8]
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	429a      	cmp	r2, r3
 8002832:	d307      	bcc.n	8002844 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1f2      	bne.n	8002828 <HAL_DMA_IRQHandler+0x2cc>
 8002842:	e000      	b.n	8002846 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002844:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285a:	2b00      	cmp	r3, #0
 800285c:	d005      	beq.n	800286a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	4798      	blx	r3
 8002866:	e000      	b.n	800286a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002868:	bf00      	nop
    }
  }
}
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800288c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b40      	cmp	r3, #64	@ 0x40
 800289c:	d108      	bne.n	80028b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028ae:	e007      	b.n	80028c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	60da      	str	r2, [r3, #12]
}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	3b10      	subs	r3, #16
 80028dc:	4a14      	ldr	r2, [pc, #80]	@ (8002930 <DMA_CalcBaseAndBitshift+0x64>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	091b      	lsrs	r3, r3, #4
 80028e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028e6:	4a13      	ldr	r2, [pc, #76]	@ (8002934 <DMA_CalcBaseAndBitshift+0x68>)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4413      	add	r3, r2
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d909      	bls.n	800290e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002902:	f023 0303 	bic.w	r3, r3, #3
 8002906:	1d1a      	adds	r2, r3, #4
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	659a      	str	r2, [r3, #88]	@ 0x58
 800290c:	e007      	b.n	800291e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002916:	f023 0303 	bic.w	r3, r3, #3
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	aaaaaaab 	.word	0xaaaaaaab
 8002934:	0800af5c 	.word	0x0800af5c

08002938 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002948:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d11f      	bne.n	8002992 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d856      	bhi.n	8002a06 <DMA_CheckFifoParam+0xce>
 8002958:	a201      	add	r2, pc, #4	@ (adr r2, 8002960 <DMA_CheckFifoParam+0x28>)
 800295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295e:	bf00      	nop
 8002960:	08002971 	.word	0x08002971
 8002964:	08002983 	.word	0x08002983
 8002968:	08002971 	.word	0x08002971
 800296c:	08002a07 	.word	0x08002a07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002974:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d046      	beq.n	8002a0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002980:	e043      	b.n	8002a0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002986:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800298a:	d140      	bne.n	8002a0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002990:	e03d      	b.n	8002a0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800299a:	d121      	bne.n	80029e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d837      	bhi.n	8002a12 <DMA_CheckFifoParam+0xda>
 80029a2:	a201      	add	r2, pc, #4	@ (adr r2, 80029a8 <DMA_CheckFifoParam+0x70>)
 80029a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a8:	080029b9 	.word	0x080029b9
 80029ac:	080029bf 	.word	0x080029bf
 80029b0:	080029b9 	.word	0x080029b9
 80029b4:	080029d1 	.word	0x080029d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
      break;
 80029bc:	e030      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d025      	beq.n	8002a16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ce:	e022      	b.n	8002a16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029d8:	d11f      	bne.n	8002a1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029de:	e01c      	b.n	8002a1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d903      	bls.n	80029ee <DMA_CheckFifoParam+0xb6>
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d003      	beq.n	80029f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029ec:	e018      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	73fb      	strb	r3, [r7, #15]
      break;
 80029f2:	e015      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00e      	beq.n	8002a1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
      break;
 8002a04:	e00b      	b.n	8002a1e <DMA_CheckFifoParam+0xe6>
      break;
 8002a06:	bf00      	nop
 8002a08:	e00a      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      break;
 8002a0a:	bf00      	nop
 8002a0c:	e008      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      break;
 8002a0e:	bf00      	nop
 8002a10:	e006      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      break;
 8002a12:	bf00      	nop
 8002a14:	e004      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      break;
 8002a16:	bf00      	nop
 8002a18:	e002      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a1a:	bf00      	nop
 8002a1c:	e000      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      break;
 8002a1e:	bf00      	nop
    }
  } 
  
  return status; 
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop

08002a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b089      	sub	sp, #36	@ 0x24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	e159      	b.n	8002d00 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	f040 8148 	bne.w	8002cfa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d005      	beq.n	8002a82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d130      	bne.n	8002ae4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ab8:	2201      	movs	r2, #1
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	f003 0201 	and.w	r2, r3, #1
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d017      	beq.n	8002b20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	2203      	movs	r2, #3
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d123      	bne.n	8002b74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	08da      	lsrs	r2, r3, #3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3208      	adds	r2, #8
 8002b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	220f      	movs	r2, #15
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	08da      	lsrs	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3208      	adds	r2, #8
 8002b6e:	69b9      	ldr	r1, [r7, #24]
 8002b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	2203      	movs	r2, #3
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0203 	and.w	r2, r3, #3
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80a2 	beq.w	8002cfa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	4b57      	ldr	r3, [pc, #348]	@ (8002d18 <HAL_GPIO_Init+0x2e8>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bbe:	4a56      	ldr	r2, [pc, #344]	@ (8002d18 <HAL_GPIO_Init+0x2e8>)
 8002bc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bc6:	4b54      	ldr	r3, [pc, #336]	@ (8002d18 <HAL_GPIO_Init+0x2e8>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bd2:	4a52      	ldr	r2, [pc, #328]	@ (8002d1c <HAL_GPIO_Init+0x2ec>)
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	089b      	lsrs	r3, r3, #2
 8002bd8:	3302      	adds	r3, #2
 8002bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	220f      	movs	r2, #15
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a49      	ldr	r2, [pc, #292]	@ (8002d20 <HAL_GPIO_Init+0x2f0>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d019      	beq.n	8002c32 <HAL_GPIO_Init+0x202>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a48      	ldr	r2, [pc, #288]	@ (8002d24 <HAL_GPIO_Init+0x2f4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d013      	beq.n	8002c2e <HAL_GPIO_Init+0x1fe>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a47      	ldr	r2, [pc, #284]	@ (8002d28 <HAL_GPIO_Init+0x2f8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00d      	beq.n	8002c2a <HAL_GPIO_Init+0x1fa>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a46      	ldr	r2, [pc, #280]	@ (8002d2c <HAL_GPIO_Init+0x2fc>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d007      	beq.n	8002c26 <HAL_GPIO_Init+0x1f6>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a45      	ldr	r2, [pc, #276]	@ (8002d30 <HAL_GPIO_Init+0x300>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d101      	bne.n	8002c22 <HAL_GPIO_Init+0x1f2>
 8002c1e:	2304      	movs	r3, #4
 8002c20:	e008      	b.n	8002c34 <HAL_GPIO_Init+0x204>
 8002c22:	2307      	movs	r3, #7
 8002c24:	e006      	b.n	8002c34 <HAL_GPIO_Init+0x204>
 8002c26:	2303      	movs	r3, #3
 8002c28:	e004      	b.n	8002c34 <HAL_GPIO_Init+0x204>
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	e002      	b.n	8002c34 <HAL_GPIO_Init+0x204>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <HAL_GPIO_Init+0x204>
 8002c32:	2300      	movs	r3, #0
 8002c34:	69fa      	ldr	r2, [r7, #28]
 8002c36:	f002 0203 	and.w	r2, r2, #3
 8002c3a:	0092      	lsls	r2, r2, #2
 8002c3c:	4093      	lsls	r3, r2
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c44:	4935      	ldr	r1, [pc, #212]	@ (8002d1c <HAL_GPIO_Init+0x2ec>)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	089b      	lsrs	r3, r3, #2
 8002c4a:	3302      	adds	r3, #2
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c52:	4b38      	ldr	r3, [pc, #224]	@ (8002d34 <HAL_GPIO_Init+0x304>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c76:	4a2f      	ldr	r2, [pc, #188]	@ (8002d34 <HAL_GPIO_Init+0x304>)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d34 <HAL_GPIO_Init+0x304>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ca0:	4a24      	ldr	r2, [pc, #144]	@ (8002d34 <HAL_GPIO_Init+0x304>)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ca6:	4b23      	ldr	r3, [pc, #140]	@ (8002d34 <HAL_GPIO_Init+0x304>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cca:	4a1a      	ldr	r2, [pc, #104]	@ (8002d34 <HAL_GPIO_Init+0x304>)
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cd0:	4b18      	ldr	r3, [pc, #96]	@ (8002d34 <HAL_GPIO_Init+0x304>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8002d34 <HAL_GPIO_Init+0x304>)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	61fb      	str	r3, [r7, #28]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	2b0f      	cmp	r3, #15
 8002d04:	f67f aea2 	bls.w	8002a4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d08:	bf00      	nop
 8002d0a:	bf00      	nop
 8002d0c:	3724      	adds	r7, #36	@ 0x24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40013800 	.word	0x40013800
 8002d20:	40020000 	.word	0x40020000
 8002d24:	40020400 	.word	0x40020400
 8002d28:	40020800 	.word	0x40020800
 8002d2c:	40020c00 	.word	0x40020c00
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40013c00 	.word	0x40013c00

08002d38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e101      	b.n	8002f4e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d106      	bne.n	8002d6a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f006 fac9 	bl	80092fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2203      	movs	r2, #3
 8002d6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d78:	d102      	bne.n	8002d80 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f002 fecc 	bl	8005b22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	7c1a      	ldrb	r2, [r3, #16]
 8002d92:	f88d 2000 	strb.w	r2, [sp]
 8002d96:	3304      	adds	r3, #4
 8002d98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d9a:	f002 fdab 	bl	80058f4 <USB_CoreInit>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0ce      	b.n	8002f4e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2100      	movs	r1, #0
 8002db6:	4618      	mov	r0, r3
 8002db8:	f002 fec4 	bl	8005b44 <USB_SetCurrentMode>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d005      	beq.n	8002dce <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e0bf      	b.n	8002f4e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	73fb      	strb	r3, [r7, #15]
 8002dd2:	e04a      	b.n	8002e6a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002dd4:	7bfa      	ldrb	r2, [r7, #15]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	3315      	adds	r3, #21
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002de8:	7bfa      	ldrb	r2, [r7, #15]
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	3314      	adds	r3, #20
 8002df8:	7bfa      	ldrb	r2, [r7, #15]
 8002dfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002dfc:	7bfa      	ldrb	r2, [r7, #15]
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	b298      	uxth	r0, r3
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	332e      	adds	r3, #46	@ 0x2e
 8002e10:	4602      	mov	r2, r0
 8002e12:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e14:	7bfa      	ldrb	r2, [r7, #15]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	3318      	adds	r3, #24
 8002e24:	2200      	movs	r2, #0
 8002e26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e28:	7bfa      	ldrb	r2, [r7, #15]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	331c      	adds	r3, #28
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e3c:	7bfa      	ldrb	r2, [r7, #15]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	3320      	adds	r3, #32
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e50:	7bfa      	ldrb	r2, [r7, #15]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	3324      	adds	r3, #36	@ 0x24
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	3301      	adds	r3, #1
 8002e68:	73fb      	strb	r3, [r7, #15]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	791b      	ldrb	r3, [r3, #4]
 8002e6e:	7bfa      	ldrb	r2, [r7, #15]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d3af      	bcc.n	8002dd4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e74:	2300      	movs	r3, #0
 8002e76:	73fb      	strb	r3, [r7, #15]
 8002e78:	e044      	b.n	8002f04 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e7a:	7bfa      	ldrb	r2, [r7, #15]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e90:	7bfa      	ldrb	r2, [r7, #15]
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002ea2:	7bfa      	ldrb	r2, [r7, #15]
 8002ea4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ea6:	7bfa      	ldrb	r2, [r7, #15]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ee8:	7bfa      	ldrb	r2, [r7, #15]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	3301      	adds	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	791b      	ldrb	r3, [r3, #4]
 8002f08:	7bfa      	ldrb	r2, [r7, #15]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d3b5      	bcc.n	8002e7a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	7c1a      	ldrb	r2, [r3, #16]
 8002f16:	f88d 2000 	strb.w	r2, [sp]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f1e:	f002 fe5d 	bl	8005bdc <USB_DevInit>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e00c      	b.n	8002f4e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f003 fea1 	bl	8006c8e <USB_DevDisconnect>

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_PCD_Start+0x1c>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e022      	b.n	8002fb8 <HAL_PCD_Start+0x62>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d009      	beq.n	8002f9a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d105      	bne.n	8002f9a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f92:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f002 fdae 	bl	8005b00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f003 fe4f 	bl	8006c4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002fc0:	b590      	push	{r4, r7, lr}
 8002fc2:	b08d      	sub	sp, #52	@ 0x34
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f003 ff0d 	bl	8006df6 <USB_GetMode>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f040 848c 	bne.w	80038fc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f003 fe71 	bl	8006cd0 <USB_ReadInterrupts>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 8482 	beq.w	80038fa <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	0a1b      	lsrs	r3, r3, #8
 8003000:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f003 fe5e 	bl	8006cd0 <USB_ReadInterrupts>
 8003014:	4603      	mov	r3, r0
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b02      	cmp	r3, #2
 800301c:	d107      	bne.n	800302e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	695a      	ldr	r2, [r3, #20]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f002 0202 	and.w	r2, r2, #2
 800302c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f003 fe4c 	bl	8006cd0 <USB_ReadInterrupts>
 8003038:	4603      	mov	r3, r0
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	2b10      	cmp	r3, #16
 8003040:	d161      	bne.n	8003106 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699a      	ldr	r2, [r3, #24]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0210 	bic.w	r2, r2, #16
 8003050:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	f003 020f 	and.w	r2, r3, #15
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	3304      	adds	r3, #4
 8003070:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	0c5b      	lsrs	r3, r3, #17
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	2b02      	cmp	r3, #2
 800307c:	d124      	bne.n	80030c8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003084:	4013      	ands	r3, r2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d035      	beq.n	80030f6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003094:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003098:	b29b      	uxth	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	6a38      	ldr	r0, [r7, #32]
 800309e:	f003 fc83 	bl	80069a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030ae:	441a      	add	r2, r3
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	091b      	lsrs	r3, r3, #4
 80030bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030c0:	441a      	add	r2, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	615a      	str	r2, [r3, #20]
 80030c6:	e016      	b.n	80030f6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	0c5b      	lsrs	r3, r3, #17
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	2b06      	cmp	r3, #6
 80030d2:	d110      	bne.n	80030f6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80030da:	2208      	movs	r2, #8
 80030dc:	4619      	mov	r1, r3
 80030de:	6a38      	ldr	r0, [r7, #32]
 80030e0:	f003 fc62 	bl	80069a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	695a      	ldr	r2, [r3, #20]
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	091b      	lsrs	r3, r3, #4
 80030ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030f0:	441a      	add	r2, r3
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	699a      	ldr	r2, [r3, #24]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0210 	orr.w	r2, r2, #16
 8003104:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f003 fde0 	bl	8006cd0 <USB_ReadInterrupts>
 8003110:	4603      	mov	r3, r0
 8003112:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003116:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800311a:	f040 80a7 	bne.w	800326c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f003 fde5 	bl	8006cf6 <USB_ReadDevAllOutEpInterrupt>
 800312c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800312e:	e099      	b.n	8003264 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 808e 	beq.w	8003258 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	4611      	mov	r1, r2
 8003146:	4618      	mov	r0, r3
 8003148:	f003 fe09 	bl	8006d5e <USB_ReadDevOutEPInterrupt>
 800314c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00c      	beq.n	8003172 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003164:	461a      	mov	r2, r3
 8003166:	2301      	movs	r3, #1
 8003168:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800316a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fea1 	bl	8003eb4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00c      	beq.n	8003196 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	4413      	add	r3, r2
 8003184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003188:	461a      	mov	r2, r3
 800318a:	2308      	movs	r3, #8
 800318c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800318e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 ff77 	bl	8004084 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f003 0310 	and.w	r3, r3, #16
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80031a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ac:	461a      	mov	r2, r3
 80031ae:	2310      	movs	r3, #16
 80031b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d030      	beq.n	800321e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031c4:	2b80      	cmp	r3, #128	@ 0x80
 80031c6:	d109      	bne.n	80031dc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80031d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031da:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80031dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031de:	4613      	mov	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	4413      	add	r3, r2
 80031ee:	3304      	adds	r3, #4
 80031f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	78db      	ldrb	r3, [r3, #3]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d108      	bne.n	800320c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2200      	movs	r2, #0
 80031fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003202:	b2db      	uxtb	r3, r3
 8003204:	4619      	mov	r1, r3
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f006 f974 	bl	80094f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800320c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	4413      	add	r3, r2
 8003214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003218:	461a      	mov	r2, r3
 800321a:	2302      	movs	r3, #2
 800321c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b00      	cmp	r3, #0
 8003226:	d008      	beq.n	800323a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	4413      	add	r3, r2
 8003230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003234:	461a      	mov	r2, r3
 8003236:	2320      	movs	r3, #32
 8003238:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d009      	beq.n	8003258 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003250:	461a      	mov	r2, r3
 8003252:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003256:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325a:	3301      	adds	r3, #1
 800325c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800325e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003260:	085b      	lsrs	r3, r3, #1
 8003262:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003266:	2b00      	cmp	r3, #0
 8003268:	f47f af62 	bne.w	8003130 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f003 fd2d 	bl	8006cd0 <USB_ReadInterrupts>
 8003276:	4603      	mov	r3, r0
 8003278:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800327c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003280:	f040 80db 	bne.w	800343a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f003 fd4e 	bl	8006d2a <USB_ReadDevAllInEpInterrupt>
 800328e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003294:	e0cd      	b.n	8003432 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80c2 	beq.w	8003426 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	4611      	mov	r1, r2
 80032ac:	4618      	mov	r0, r3
 80032ae:	f003 fd74 	bl	8006d9a <USB_ReadDevInEPInterrupt>
 80032b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d057      	beq.n	800336e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	2201      	movs	r2, #1
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	43db      	mvns	r3, r3
 80032d8:	69f9      	ldr	r1, [r7, #28]
 80032da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80032de:	4013      	ands	r3, r2
 80032e0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80032e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032ee:	461a      	mov	r2, r3
 80032f0:	2301      	movs	r3, #1
 80032f2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	799b      	ldrb	r3, [r3, #6]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d132      	bne.n	8003362 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003300:	4613      	mov	r3, r2
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	3320      	adds	r3, #32
 800330c:	6819      	ldr	r1, [r3, #0]
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	4413      	add	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4403      	add	r3, r0
 800331c:	331c      	adds	r3, #28
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4419      	add	r1, r3
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003326:	4613      	mov	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4403      	add	r3, r0
 8003330:	3320      	adds	r3, #32
 8003332:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003336:	2b00      	cmp	r3, #0
 8003338:	d113      	bne.n	8003362 <HAL_PCD_IRQHandler+0x3a2>
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800333e:	4613      	mov	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	3324      	adds	r3, #36	@ 0x24
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d108      	bne.n	8003362 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6818      	ldr	r0, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800335a:	461a      	mov	r2, r3
 800335c:	2101      	movs	r1, #1
 800335e:	f003 fd7b 	bl	8006e58 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003364:	b2db      	uxtb	r3, r3
 8003366:	4619      	mov	r1, r3
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f006 f848 	bl	80093fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	4413      	add	r3, r2
 8003380:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003384:	461a      	mov	r2, r3
 8003386:	2308      	movs	r3, #8
 8003388:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b00      	cmp	r3, #0
 8003392:	d008      	beq.n	80033a6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	4413      	add	r3, r2
 800339c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033a0:	461a      	mov	r2, r3
 80033a2:	2310      	movs	r3, #16
 80033a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033bc:	461a      	mov	r2, r3
 80033be:	2340      	movs	r3, #64	@ 0x40
 80033c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d023      	beq.n	8003414 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80033cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033ce:	6a38      	ldr	r0, [r7, #32]
 80033d0:	f002 fd68 	bl	8005ea4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80033d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033d6:	4613      	mov	r3, r2
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4413      	add	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	3310      	adds	r3, #16
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	4413      	add	r3, r2
 80033e4:	3304      	adds	r3, #4
 80033e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	78db      	ldrb	r3, [r3, #3]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d108      	bne.n	8003402 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2200      	movs	r2, #0
 80033f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80033f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	4619      	mov	r1, r3
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f006 f88b 	bl	8009518 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	4413      	add	r3, r2
 800340a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800340e:	461a      	mov	r2, r3
 8003410:	2302      	movs	r3, #2
 8003412:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800341e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f000 fcbb 	bl	8003d9c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003428:	3301      	adds	r3, #1
 800342a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800342c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342e:	085b      	lsrs	r3, r3, #1
 8003430:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003434:	2b00      	cmp	r3, #0
 8003436:	f47f af2e 	bne.w	8003296 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f003 fc46 	bl	8006cd0 <USB_ReadInterrupts>
 8003444:	4603      	mov	r3, r0
 8003446:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800344a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800344e:	d122      	bne.n	8003496 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800345e:	f023 0301 	bic.w	r3, r3, #1
 8003462:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800346a:	2b01      	cmp	r3, #1
 800346c:	d108      	bne.n	8003480 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003476:	2100      	movs	r1, #0
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fea1 	bl	80041c0 <HAL_PCDEx_LPM_Callback>
 800347e:	e002      	b.n	8003486 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f006 f829 	bl	80094d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	695a      	ldr	r2, [r3, #20]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003494:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f003 fc18 	bl	8006cd0 <USB_ReadInterrupts>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034aa:	d112      	bne.n	80034d2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d102      	bne.n	80034c2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f005 ffe5 	bl	800948c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80034d0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f003 fbfa 	bl	8006cd0 <USB_ReadInterrupts>
 80034dc:	4603      	mov	r3, r0
 80034de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034e6:	f040 80b7 	bne.w	8003658 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034f8:	f023 0301 	bic.w	r3, r3, #1
 80034fc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2110      	movs	r1, #16
 8003504:	4618      	mov	r0, r3
 8003506:	f002 fccd 	bl	8005ea4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800350a:	2300      	movs	r3, #0
 800350c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800350e:	e046      	b.n	800359e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	4413      	add	r3, r2
 8003518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800351c:	461a      	mov	r2, r3
 800351e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003522:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	4413      	add	r3, r2
 800352c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003534:	0151      	lsls	r1, r2, #5
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	440a      	add	r2, r1
 800353a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800353e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003542:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003546:	015a      	lsls	r2, r3, #5
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	4413      	add	r3, r2
 800354c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003550:	461a      	mov	r2, r3
 8003552:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003556:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	4413      	add	r3, r2
 8003560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003568:	0151      	lsls	r1, r2, #5
 800356a:	69fa      	ldr	r2, [r7, #28]
 800356c:	440a      	add	r2, r1
 800356e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003572:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003576:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	4413      	add	r3, r2
 8003580:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003588:	0151      	lsls	r1, r2, #5
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	440a      	add	r2, r1
 800358e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003592:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003596:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359a:	3301      	adds	r3, #1
 800359c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	791b      	ldrb	r3, [r3, #4]
 80035a2:	461a      	mov	r2, r3
 80035a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d3b2      	bcc.n	8003510 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	69fa      	ldr	r2, [r7, #28]
 80035b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035b8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80035bc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	7bdb      	ldrb	r3, [r3, #15]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d016      	beq.n	80035f4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035d0:	69fa      	ldr	r2, [r7, #28]
 80035d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035d6:	f043 030b 	orr.w	r3, r3, #11
 80035da:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e6:	69fa      	ldr	r2, [r7, #28]
 80035e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035ec:	f043 030b 	orr.w	r3, r3, #11
 80035f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80035f2:	e015      	b.n	8003620 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003602:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003606:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800360a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800361a:	f043 030b 	orr.w	r3, r3, #11
 800361e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800362e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003632:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6818      	ldr	r0, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003642:	461a      	mov	r2, r3
 8003644:	f003 fc08 	bl	8006e58 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003656:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f003 fb37 	bl	8006cd0 <USB_ReadInterrupts>
 8003662:	4603      	mov	r3, r0
 8003664:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003668:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800366c:	d123      	bne.n	80036b6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f003 fbcd 	bl	8006e12 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4618      	mov	r0, r3
 800367e:	f002 fc8a 	bl	8005f96 <USB_GetDevSpeed>
 8003682:	4603      	mov	r3, r0
 8003684:	461a      	mov	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681c      	ldr	r4, [r3, #0]
 800368e:	f001 f9c7 	bl	8004a20 <HAL_RCC_GetHCLKFreq>
 8003692:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003698:	461a      	mov	r2, r3
 800369a:	4620      	mov	r0, r4
 800369c:	f002 f98e 	bl	80059bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f005 fed4 	bl	800944e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80036b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f003 fb08 	bl	8006cd0 <USB_ReadInterrupts>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d10a      	bne.n	80036e0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f005 feb1 	bl	8009432 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695a      	ldr	r2, [r3, #20]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f002 0208 	and.w	r2, r2, #8
 80036de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f003 faf3 	bl	8006cd0 <USB_ReadInterrupts>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f0:	2b80      	cmp	r3, #128	@ 0x80
 80036f2:	d123      	bne.n	800373c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003700:	2301      	movs	r3, #1
 8003702:	627b      	str	r3, [r7, #36]	@ 0x24
 8003704:	e014      	b.n	8003730 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800370a:	4613      	mov	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	4413      	add	r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d105      	bne.n	800372a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	b2db      	uxtb	r3, r3
 8003722:	4619      	mov	r1, r3
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fb08 	bl	8003d3a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372c:	3301      	adds	r3, #1
 800372e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	791b      	ldrb	r3, [r3, #4]
 8003734:	461a      	mov	r2, r3
 8003736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003738:	4293      	cmp	r3, r2
 800373a:	d3e4      	bcc.n	8003706 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f003 fac5 	bl	8006cd0 <USB_ReadInterrupts>
 8003746:	4603      	mov	r3, r0
 8003748:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800374c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003750:	d13c      	bne.n	80037cc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003752:	2301      	movs	r3, #1
 8003754:	627b      	str	r3, [r7, #36]	@ 0x24
 8003756:	e02b      	b.n	80037b0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	4413      	add	r3, r2
 8003760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4413      	add	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	3318      	adds	r3, #24
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d115      	bne.n	80037aa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800377e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003780:	2b00      	cmp	r3, #0
 8003782:	da12      	bge.n	80037aa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003788:	4613      	mov	r3, r2
 800378a:	00db      	lsls	r3, r3, #3
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	3317      	adds	r3, #23
 8003794:	2201      	movs	r2, #1
 8003796:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	4619      	mov	r1, r3
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 fac8 	bl	8003d3a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ac:	3301      	adds	r3, #1
 80037ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	791b      	ldrb	r3, [r3, #4]
 80037b4:	461a      	mov	r2, r3
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d3cd      	bcc.n	8003758 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695a      	ldr	r2, [r3, #20]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80037ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f003 fa7d 	bl	8006cd0 <USB_ReadInterrupts>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037e0:	d156      	bne.n	8003890 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037e2:	2301      	movs	r3, #1
 80037e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e6:	e045      	b.n	8003874 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80037e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d12e      	bne.n	800386e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003810:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003812:	2b00      	cmp	r3, #0
 8003814:	da2b      	bge.n	800386e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003822:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003826:	429a      	cmp	r2, r3
 8003828:	d121      	bne.n	800386e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800382e:	4613      	mov	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800383c:	2201      	movs	r2, #1
 800383e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003866:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800386a:	6053      	str	r3, [r2, #4]
            break;
 800386c:	e008      	b.n	8003880 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800386e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003870:	3301      	adds	r3, #1
 8003872:	627b      	str	r3, [r7, #36]	@ 0x24
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	791b      	ldrb	r3, [r3, #4]
 8003878:	461a      	mov	r2, r3
 800387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387c:	4293      	cmp	r3, r2
 800387e:	d3b3      	bcc.n	80037e8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695a      	ldr	r2, [r3, #20]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800388e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f003 fa1b 	bl	8006cd0 <USB_ReadInterrupts>
 800389a:	4603      	mov	r3, r0
 800389c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80038a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a4:	d10a      	bne.n	80038bc <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f005 fe48 	bl	800953c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695a      	ldr	r2, [r3, #20]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80038ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f003 fa05 	bl	8006cd0 <USB_ReadInterrupts>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d115      	bne.n	80038fc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f005 fe38 	bl	8009558 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6859      	ldr	r1, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	605a      	str	r2, [r3, #4]
 80038f8:	e000      	b.n	80038fc <HAL_PCD_IRQHandler+0x93c>
      return;
 80038fa:	bf00      	nop
    }
  }
}
 80038fc:	3734      	adds	r7, #52	@ 0x34
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd90      	pop	{r4, r7, pc}

08003902 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	460b      	mov	r3, r1
 800390c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_PCD_SetAddress+0x1a>
 8003918:	2302      	movs	r3, #2
 800391a:	e012      	b.n	8003942 <HAL_PCD_SetAddress+0x40>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	78fa      	ldrb	r2, [r7, #3]
 8003928:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	4611      	mov	r1, r2
 8003932:	4618      	mov	r0, r3
 8003934:	f003 f964 	bl	8006c00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	4608      	mov	r0, r1
 8003954:	4611      	mov	r1, r2
 8003956:	461a      	mov	r2, r3
 8003958:	4603      	mov	r3, r0
 800395a:	70fb      	strb	r3, [r7, #3]
 800395c:	460b      	mov	r3, r1
 800395e:	803b      	strh	r3, [r7, #0]
 8003960:	4613      	mov	r3, r2
 8003962:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003968:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800396c:	2b00      	cmp	r3, #0
 800396e:	da0f      	bge.n	8003990 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	f003 020f 	and.w	r2, r3, #15
 8003976:	4613      	mov	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	3310      	adds	r3, #16
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	4413      	add	r3, r2
 8003984:	3304      	adds	r3, #4
 8003986:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2201      	movs	r2, #1
 800398c:	705a      	strb	r2, [r3, #1]
 800398e:	e00f      	b.n	80039b0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	f003 020f 	and.w	r2, r3, #15
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	3304      	adds	r3, #4
 80039a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80039bc:	883a      	ldrh	r2, [r7, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	78ba      	ldrb	r2, [r7, #2]
 80039c6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	785b      	ldrb	r3, [r3, #1]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d004      	beq.n	80039da <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039da:	78bb      	ldrb	r3, [r7, #2]
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d102      	bne.n	80039e6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_PCD_EP_Open+0xaa>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e00e      	b.n	8003a12 <HAL_PCD_EP_Open+0xc8>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68f9      	ldr	r1, [r7, #12]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f002 faec 	bl	8005fe0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003a10:	7afb      	ldrb	r3, [r7, #11]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	460b      	mov	r3, r1
 8003a24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	da0f      	bge.n	8003a4e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	f003 020f 	and.w	r2, r3, #15
 8003a34:	4613      	mov	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	4413      	add	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	3310      	adds	r3, #16
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	3304      	adds	r3, #4
 8003a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	705a      	strb	r2, [r3, #1]
 8003a4c:	e00f      	b.n	8003a6e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	f003 020f 	and.w	r2, r3, #15
 8003a54:	4613      	mov	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	4413      	add	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	4413      	add	r3, r2
 8003a64:	3304      	adds	r3, #4
 8003a66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	b2da      	uxtb	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_PCD_EP_Close+0x6e>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e00e      	b.n	8003aa6 <HAL_PCD_EP_Close+0x8c>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68f9      	ldr	r1, [r7, #12]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f002 fb2a 	bl	80060f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b086      	sub	sp, #24
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
 8003aba:	460b      	mov	r3, r1
 8003abc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003abe:	7afb      	ldrb	r3, [r7, #11]
 8003ac0:	f003 020f 	and.w	r2, r3, #15
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2200      	movs	r2, #0
 8003aee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003af0:	7afb      	ldrb	r3, [r7, #11]
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	799b      	ldrb	r3, [r3, #6]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d102      	bne.n	8003b0a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6818      	ldr	r0, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	799b      	ldrb	r3, [r3, #6]
 8003b12:	461a      	mov	r2, r3
 8003b14:	6979      	ldr	r1, [r7, #20]
 8003b16:	f002 fbc7 	bl	80062a8 <USB_EPStartXfer>

  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3718      	adds	r7, #24
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	f003 020f 	and.w	r2, r3, #15
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003b46:	681b      	ldr	r3, [r3, #0]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	607a      	str	r2, [r7, #4]
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	460b      	mov	r3, r1
 8003b62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b64:	7afb      	ldrb	r3, [r7, #11]
 8003b66:	f003 020f 	and.w	r2, r3, #15
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	3310      	adds	r3, #16
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4413      	add	r3, r2
 8003b78:	3304      	adds	r3, #4
 8003b7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2201      	movs	r2, #1
 8003b92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b94:	7afb      	ldrb	r3, [r7, #11]
 8003b96:	f003 030f 	and.w	r3, r3, #15
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	799b      	ldrb	r3, [r3, #6]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d102      	bne.n	8003bae <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	799b      	ldrb	r3, [r3, #6]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	6979      	ldr	r1, [r7, #20]
 8003bba:	f002 fb75 	bl	80062a8 <USB_EPStartXfer>

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bd4:	78fb      	ldrb	r3, [r7, #3]
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	7912      	ldrb	r2, [r2, #4]
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e04f      	b.n	8003c86 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	da0f      	bge.n	8003c0e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bee:	78fb      	ldrb	r3, [r7, #3]
 8003bf0:	f003 020f 	and.w	r2, r3, #15
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	3310      	adds	r3, #16
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	4413      	add	r3, r2
 8003c02:	3304      	adds	r3, #4
 8003c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	705a      	strb	r2, [r3, #1]
 8003c0c:	e00d      	b.n	8003c2a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c0e:	78fa      	ldrb	r2, [r7, #3]
 8003c10:	4613      	mov	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c1c:	687a      	ldr	r2, [r7, #4]
 8003c1e:	4413      	add	r3, r2
 8003c20:	3304      	adds	r3, #4
 8003c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_PCD_EP_SetStall+0x82>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e01d      	b.n	8003c86 <HAL_PCD_EP_SetStall+0xbe>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68f9      	ldr	r1, [r7, #12]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f002 fefd 	bl	8006a58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c5e:	78fb      	ldrb	r3, [r7, #3]
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d109      	bne.n	8003c7c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6818      	ldr	r0, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	7999      	ldrb	r1, [r3, #6]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003c76:	461a      	mov	r2, r3
 8003c78:	f003 f8ee 	bl	8006e58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b084      	sub	sp, #16
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	460b      	mov	r3, r1
 8003c98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c9a:	78fb      	ldrb	r3, [r7, #3]
 8003c9c:	f003 030f 	and.w	r3, r3, #15
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	7912      	ldrb	r2, [r2, #4]
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d901      	bls.n	8003cac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e042      	b.n	8003d32 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	da0f      	bge.n	8003cd4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	f003 020f 	and.w	r2, r3, #15
 8003cba:	4613      	mov	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	3310      	adds	r3, #16
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3304      	adds	r3, #4
 8003cca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	705a      	strb	r2, [r3, #1]
 8003cd2:	e00f      	b.n	8003cf4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	f003 020f 	and.w	r2, r3, #15
 8003cda:	4613      	mov	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	4413      	add	r3, r2
 8003cea:	3304      	adds	r3, #4
 8003cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_PCD_EP_ClrStall+0x86>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e00e      	b.n	8003d32 <HAL_PCD_EP_ClrStall+0xa4>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68f9      	ldr	r1, [r7, #12]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f002 ff06 	bl	8006b34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	460b      	mov	r3, r1
 8003d44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003d46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	da0c      	bge.n	8003d68 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d4e:	78fb      	ldrb	r3, [r7, #3]
 8003d50:	f003 020f 	and.w	r2, r3, #15
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	3310      	adds	r3, #16
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	4413      	add	r3, r2
 8003d62:	3304      	adds	r3, #4
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	e00c      	b.n	8003d82 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	f003 020f 	and.w	r2, r3, #15
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3304      	adds	r3, #4
 8003d80:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68f9      	ldr	r1, [r7, #12]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f002 fd25 	bl	80067d8 <USB_EPStopXfer>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003d92:	7afb      	ldrb	r3, [r7, #11]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08a      	sub	sp, #40	@ 0x28
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	4613      	mov	r3, r2
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	4413      	add	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	3310      	adds	r3, #16
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	695a      	ldr	r2, [r3, #20]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d901      	bls.n	8003dd4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e06b      	b.n	8003eac <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	69fa      	ldr	r2, [r7, #28]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d902      	bls.n	8003df0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	3303      	adds	r3, #3
 8003df4:	089b      	lsrs	r3, r3, #2
 8003df6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003df8:	e02a      	b.n	8003e50 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d902      	bls.n	8003e16 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	3303      	adds	r3, #3
 8003e1a:	089b      	lsrs	r3, r3, #2
 8003e1c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	68d9      	ldr	r1, [r3, #12]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	4603      	mov	r3, r0
 8003e32:	6978      	ldr	r0, [r7, #20]
 8003e34:	f002 fd7a 	bl	800692c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	441a      	add	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	441a      	add	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d809      	bhi.n	8003e7a <PCD_WriteEmptyTxFifo+0xde>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	695a      	ldr	r2, [r3, #20]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d203      	bcs.n	8003e7a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1bf      	bne.n	8003dfa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d811      	bhi.n	8003eaa <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	6939      	ldr	r1, [r7, #16]
 8003ea2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3720      	adds	r7, #32
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	333c      	adds	r3, #60	@ 0x3c
 8003ecc:	3304      	adds	r3, #4
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	799b      	ldrb	r3, [r3, #6]
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d17b      	bne.n	8003fe2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d015      	beq.n	8003f20 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	4a61      	ldr	r2, [pc, #388]	@ (800407c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	f240 80b9 	bls.w	8004070 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 80b3 	beq.w	8004070 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f16:	461a      	mov	r2, r3
 8003f18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f1c:	6093      	str	r3, [r2, #8]
 8003f1e:	e0a7      	b.n	8004070 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f36:	461a      	mov	r2, r3
 8003f38:	2320      	movs	r3, #32
 8003f3a:	6093      	str	r3, [r2, #8]
 8003f3c:	e098      	b.n	8004070 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f040 8093 	bne.w	8004070 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	4a4b      	ldr	r2, [pc, #300]	@ (800407c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d90f      	bls.n	8003f72 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f68:	461a      	mov	r2, r3
 8003f6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f6e:	6093      	str	r3, [r2, #8]
 8003f70:	e07e      	b.n	8004070 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	4613      	mov	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	4413      	add	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	4413      	add	r3, r2
 8003f84:	3304      	adds	r3, #4
 8003f86:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a1a      	ldr	r2, [r3, #32]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	0159      	lsls	r1, r3, #5
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	440b      	add	r3, r1
 8003f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f9e:	1ad2      	subs	r2, r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d114      	bne.n	8003fd4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d109      	bne.n	8003fc6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6818      	ldr	r0, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	f002 ff4a 	bl	8006e58 <USB_EP0_OutStart>
 8003fc4:	e006      	b.n	8003fd4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	441a      	add	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	4619      	mov	r1, r3
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f005 f9f4 	bl	80093c8 <HAL_PCD_DataOutStageCallback>
 8003fe0:	e046      	b.n	8004070 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	4a26      	ldr	r2, [pc, #152]	@ (8004080 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d124      	bne.n	8004034 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004000:	461a      	mov	r2, r3
 8004002:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004006:	6093      	str	r3, [r2, #8]
 8004008:	e032      	b.n	8004070 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f003 0320 	and.w	r3, r3, #32
 8004010:	2b00      	cmp	r3, #0
 8004012:	d008      	beq.n	8004026 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	4413      	add	r3, r2
 800401c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004020:	461a      	mov	r2, r3
 8004022:	2320      	movs	r3, #32
 8004024:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	4619      	mov	r1, r3
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f005 f9cb 	bl	80093c8 <HAL_PCD_DataOutStageCallback>
 8004032:	e01d      	b.n	8004070 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d114      	bne.n	8004064 <PCD_EP_OutXfrComplete_int+0x1b0>
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d108      	bne.n	8004064 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6818      	ldr	r0, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800405c:	461a      	mov	r2, r3
 800405e:	2100      	movs	r1, #0
 8004060:	f002 fefa 	bl	8006e58 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	4619      	mov	r1, r3
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f005 f9ac 	bl	80093c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3720      	adds	r7, #32
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	4f54300a 	.word	0x4f54300a
 8004080:	4f54310a 	.word	0x4f54310a

08004084 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	333c      	adds	r3, #60	@ 0x3c
 800409c:	3304      	adds	r3, #4
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4a15      	ldr	r2, [pc, #84]	@ (800410c <PCD_EP_OutSetupPacket_int+0x88>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d90e      	bls.n	80040d8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d009      	beq.n	80040d8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040d0:	461a      	mov	r2, r3
 80040d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f005 f963 	bl	80093a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4a0a      	ldr	r2, [pc, #40]	@ (800410c <PCD_EP_OutSetupPacket_int+0x88>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d90c      	bls.n	8004100 <PCD_EP_OutSetupPacket_int+0x7c>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	799b      	ldrb	r3, [r3, #6]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d108      	bne.n	8004100 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040f8:	461a      	mov	r2, r3
 80040fa:	2101      	movs	r1, #1
 80040fc:	f002 feac 	bl	8006e58 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	4f54300a 	.word	0x4f54300a

08004110 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	460b      	mov	r3, r1
 800411a:	70fb      	strb	r3, [r7, #3]
 800411c:	4613      	mov	r3, r2
 800411e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004126:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d107      	bne.n	800413e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800412e:	883b      	ldrh	r3, [r7, #0]
 8004130:	0419      	lsls	r1, r3, #16
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	430a      	orrs	r2, r1
 800413a:	629a      	str	r2, [r3, #40]	@ 0x28
 800413c:	e028      	b.n	8004190 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004144:	0c1b      	lsrs	r3, r3, #16
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	4413      	add	r3, r2
 800414a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800414c:	2300      	movs	r3, #0
 800414e:	73fb      	strb	r3, [r7, #15]
 8004150:	e00d      	b.n	800416e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	7bfb      	ldrb	r3, [r7, #15]
 8004158:	3340      	adds	r3, #64	@ 0x40
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	0c1b      	lsrs	r3, r3, #16
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	4413      	add	r3, r2
 8004166:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004168:	7bfb      	ldrb	r3, [r7, #15]
 800416a:	3301      	adds	r3, #1
 800416c:	73fb      	strb	r3, [r7, #15]
 800416e:	7bfa      	ldrb	r2, [r7, #15]
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	3b01      	subs	r3, #1
 8004174:	429a      	cmp	r2, r3
 8004176:	d3ec      	bcc.n	8004152 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004178:	883b      	ldrh	r3, [r7, #0]
 800417a:	0418      	lsls	r0, r3, #16
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6819      	ldr	r1, [r3, #0]
 8004180:	78fb      	ldrb	r3, [r7, #3]
 8004182:	3b01      	subs	r3, #1
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	4302      	orrs	r2, r0
 8004188:	3340      	adds	r3, #64	@ 0x40
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	440b      	add	r3, r1
 800418e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
 80041a6:	460b      	mov	r3, r1
 80041a8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	887a      	ldrh	r2, [r7, #2]
 80041b0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e267      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d075      	beq.n	80042e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041f6:	4b88      	ldr	r3, [pc, #544]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d00c      	beq.n	800421c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004202:	4b85      	ldr	r3, [pc, #532]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800420a:	2b08      	cmp	r3, #8
 800420c:	d112      	bne.n	8004234 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800420e:	4b82      	ldr	r3, [pc, #520]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004216:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800421a:	d10b      	bne.n	8004234 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800421c:	4b7e      	ldr	r3, [pc, #504]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d05b      	beq.n	80042e0 <HAL_RCC_OscConfig+0x108>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d157      	bne.n	80042e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e242      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800423c:	d106      	bne.n	800424c <HAL_RCC_OscConfig+0x74>
 800423e:	4b76      	ldr	r3, [pc, #472]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a75      	ldr	r2, [pc, #468]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004244:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	e01d      	b.n	8004288 <HAL_RCC_OscConfig+0xb0>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004254:	d10c      	bne.n	8004270 <HAL_RCC_OscConfig+0x98>
 8004256:	4b70      	ldr	r3, [pc, #448]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a6f      	ldr	r2, [pc, #444]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 800425c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	4b6d      	ldr	r3, [pc, #436]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a6c      	ldr	r2, [pc, #432]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	e00b      	b.n	8004288 <HAL_RCC_OscConfig+0xb0>
 8004270:	4b69      	ldr	r3, [pc, #420]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a68      	ldr	r2, [pc, #416]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	4b66      	ldr	r3, [pc, #408]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a65      	ldr	r2, [pc, #404]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d013      	beq.n	80042b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004290:	f7fd fa6a 	bl	8001768 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004298:	f7fd fa66 	bl	8001768 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b64      	cmp	r3, #100	@ 0x64
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e207      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0xc0>
 80042b6:	e014      	b.n	80042e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b8:	f7fd fa56 	bl	8001768 <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042c0:	f7fd fa52 	bl	8001768 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b64      	cmp	r3, #100	@ 0x64
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e1f3      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d2:	4b51      	ldr	r3, [pc, #324]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0xe8>
 80042de:	e000      	b.n	80042e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d063      	beq.n	80043b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00b      	beq.n	8004312 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042fa:	4b47      	ldr	r3, [pc, #284]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004302:	2b08      	cmp	r3, #8
 8004304:	d11c      	bne.n	8004340 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004306:	4b44      	ldr	r3, [pc, #272]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d116      	bne.n	8004340 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004312:	4b41      	ldr	r3, [pc, #260]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <HAL_RCC_OscConfig+0x152>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d001      	beq.n	800432a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e1c7      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432a:	4b3b      	ldr	r3, [pc, #236]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4937      	ldr	r1, [pc, #220]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 800433a:	4313      	orrs	r3, r2
 800433c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800433e:	e03a      	b.n	80043b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d020      	beq.n	800438a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004348:	4b34      	ldr	r3, [pc, #208]	@ (800441c <HAL_RCC_OscConfig+0x244>)
 800434a:	2201      	movs	r2, #1
 800434c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434e:	f7fd fa0b 	bl	8001768 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004354:	e008      	b.n	8004368 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004356:	f7fd fa07 	bl	8001768 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e1a8      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004368:	4b2b      	ldr	r3, [pc, #172]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d0f0      	beq.n	8004356 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004374:	4b28      	ldr	r3, [pc, #160]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4925      	ldr	r1, [pc, #148]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 8004384:	4313      	orrs	r3, r2
 8004386:	600b      	str	r3, [r1, #0]
 8004388:	e015      	b.n	80043b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800438a:	4b24      	ldr	r3, [pc, #144]	@ (800441c <HAL_RCC_OscConfig+0x244>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7fd f9ea 	bl	8001768 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004398:	f7fd f9e6 	bl	8001768 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e187      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d036      	beq.n	8004430 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d016      	beq.n	80043f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ca:	4b15      	ldr	r3, [pc, #84]	@ (8004420 <HAL_RCC_OscConfig+0x248>)
 80043cc:	2201      	movs	r2, #1
 80043ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d0:	f7fd f9ca 	bl	8001768 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043d8:	f7fd f9c6 	bl	8001768 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e167      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004418 <HAL_RCC_OscConfig+0x240>)
 80043ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0f0      	beq.n	80043d8 <HAL_RCC_OscConfig+0x200>
 80043f6:	e01b      	b.n	8004430 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043f8:	4b09      	ldr	r3, [pc, #36]	@ (8004420 <HAL_RCC_OscConfig+0x248>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fe:	f7fd f9b3 	bl	8001768 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004404:	e00e      	b.n	8004424 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004406:	f7fd f9af 	bl	8001768 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d907      	bls.n	8004424 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e150      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
 8004418:	40023800 	.word	0x40023800
 800441c:	42470000 	.word	0x42470000
 8004420:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004424:	4b88      	ldr	r3, [pc, #544]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004426:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1ea      	bne.n	8004406 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8097 	beq.w	800456c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800443e:	2300      	movs	r3, #0
 8004440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004442:	4b81      	ldr	r3, [pc, #516]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10f      	bne.n	800446e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800444e:	2300      	movs	r3, #0
 8004450:	60bb      	str	r3, [r7, #8]
 8004452:	4b7d      	ldr	r3, [pc, #500]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	4a7c      	ldr	r2, [pc, #496]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800445c:	6413      	str	r3, [r2, #64]	@ 0x40
 800445e:	4b7a      	ldr	r3, [pc, #488]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800446a:	2301      	movs	r3, #1
 800446c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800446e:	4b77      	ldr	r3, [pc, #476]	@ (800464c <HAL_RCC_OscConfig+0x474>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004476:	2b00      	cmp	r3, #0
 8004478:	d118      	bne.n	80044ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800447a:	4b74      	ldr	r3, [pc, #464]	@ (800464c <HAL_RCC_OscConfig+0x474>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a73      	ldr	r2, [pc, #460]	@ (800464c <HAL_RCC_OscConfig+0x474>)
 8004480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004486:	f7fd f96f 	bl	8001768 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448e:	f7fd f96b 	bl	8001768 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e10c      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a0:	4b6a      	ldr	r3, [pc, #424]	@ (800464c <HAL_RCC_OscConfig+0x474>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f0      	beq.n	800448e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d106      	bne.n	80044c2 <HAL_RCC_OscConfig+0x2ea>
 80044b4:	4b64      	ldr	r3, [pc, #400]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b8:	4a63      	ldr	r2, [pc, #396]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	6713      	str	r3, [r2, #112]	@ 0x70
 80044c0:	e01c      	b.n	80044fc <HAL_RCC_OscConfig+0x324>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2b05      	cmp	r3, #5
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x30c>
 80044ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ce:	4a5e      	ldr	r2, [pc, #376]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044d0:	f043 0304 	orr.w	r3, r3, #4
 80044d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80044d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044da:	4a5b      	ldr	r2, [pc, #364]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80044e2:	e00b      	b.n	80044fc <HAL_RCC_OscConfig+0x324>
 80044e4:	4b58      	ldr	r3, [pc, #352]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044e8:	4a57      	ldr	r2, [pc, #348]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80044f0:	4b55      	ldr	r3, [pc, #340]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044f4:	4a54      	ldr	r2, [pc, #336]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80044f6:	f023 0304 	bic.w	r3, r3, #4
 80044fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d015      	beq.n	8004530 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004504:	f7fd f930 	bl	8001768 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450a:	e00a      	b.n	8004522 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800450c:	f7fd f92c 	bl	8001768 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e0cb      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004522:	4b49      	ldr	r3, [pc, #292]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0ee      	beq.n	800450c <HAL_RCC_OscConfig+0x334>
 800452e:	e014      	b.n	800455a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004530:	f7fd f91a 	bl	8001768 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004536:	e00a      	b.n	800454e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004538:	f7fd f916 	bl	8001768 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004546:	4293      	cmp	r3, r2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e0b5      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800454e:	4b3e      	ldr	r3, [pc, #248]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1ee      	bne.n	8004538 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800455a:	7dfb      	ldrb	r3, [r7, #23]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d105      	bne.n	800456c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004560:	4b39      	ldr	r3, [pc, #228]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004564:	4a38      	ldr	r2, [pc, #224]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004566:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800456a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80a1 	beq.w	80046b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004576:	4b34      	ldr	r3, [pc, #208]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 030c 	and.w	r3, r3, #12
 800457e:	2b08      	cmp	r3, #8
 8004580:	d05c      	beq.n	800463c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d141      	bne.n	800460e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800458a:	4b31      	ldr	r3, [pc, #196]	@ (8004650 <HAL_RCC_OscConfig+0x478>)
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004590:	f7fd f8ea 	bl	8001768 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004598:	f7fd f8e6 	bl	8001768 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e087      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045aa:	4b27      	ldr	r3, [pc, #156]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f0      	bne.n	8004598 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69da      	ldr	r2, [r3, #28]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c4:	019b      	lsls	r3, r3, #6
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045cc:	085b      	lsrs	r3, r3, #1
 80045ce:	3b01      	subs	r3, #1
 80045d0:	041b      	lsls	r3, r3, #16
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d8:	061b      	lsls	r3, r3, #24
 80045da:	491b      	ldr	r1, [pc, #108]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004650 <HAL_RCC_OscConfig+0x478>)
 80045e2:	2201      	movs	r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e6:	f7fd f8bf 	bl	8001768 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ee:	f7fd f8bb 	bl	8001768 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e05c      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004600:	4b11      	ldr	r3, [pc, #68]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0f0      	beq.n	80045ee <HAL_RCC_OscConfig+0x416>
 800460c:	e054      	b.n	80046b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460e:	4b10      	ldr	r3, [pc, #64]	@ (8004650 <HAL_RCC_OscConfig+0x478>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004614:	f7fd f8a8 	bl	8001768 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800461c:	f7fd f8a4 	bl	8001768 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e045      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462e:	4b06      	ldr	r3, [pc, #24]	@ (8004648 <HAL_RCC_OscConfig+0x470>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x444>
 800463a:	e03d      	b.n	80046b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d107      	bne.n	8004654 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e038      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
 8004648:	40023800 	.word	0x40023800
 800464c:	40007000 	.word	0x40007000
 8004650:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004654:	4b1b      	ldr	r3, [pc, #108]	@ (80046c4 <HAL_RCC_OscConfig+0x4ec>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d028      	beq.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800466c:	429a      	cmp	r2, r3
 800466e:	d121      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800467a:	429a      	cmp	r2, r3
 800467c:	d11a      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004684:	4013      	ands	r3, r2
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800468a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800468c:	4293      	cmp	r3, r2
 800468e:	d111      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469a:	085b      	lsrs	r3, r3, #1
 800469c:	3b01      	subs	r3, #1
 800469e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d107      	bne.n	80046b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40023800 	.word	0x40023800

080046c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e0cc      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046dc:	4b68      	ldr	r3, [pc, #416]	@ (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d90c      	bls.n	8004704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b65      	ldr	r3, [pc, #404]	@ (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b63      	ldr	r3, [pc, #396]	@ (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e0b8      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d020      	beq.n	8004752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800471c:	4b59      	ldr	r3, [pc, #356]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4a58      	ldr	r2, [pc, #352]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0308 	and.w	r3, r3, #8
 8004730:	2b00      	cmp	r3, #0
 8004732:	d005      	beq.n	8004740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004734:	4b53      	ldr	r3, [pc, #332]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	4a52      	ldr	r2, [pc, #328]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800473e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004740:	4b50      	ldr	r3, [pc, #320]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	494d      	ldr	r1, [pc, #308]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	4313      	orrs	r3, r2
 8004750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d044      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b01      	cmp	r3, #1
 8004764:	d107      	bne.n	8004776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004766:	4b47      	ldr	r3, [pc, #284]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d119      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e07f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d003      	beq.n	8004786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004782:	2b03      	cmp	r3, #3
 8004784:	d107      	bne.n	8004796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004786:	4b3f      	ldr	r3, [pc, #252]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e06f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004796:	4b3b      	ldr	r3, [pc, #236]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e067      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047a6:	4b37      	ldr	r3, [pc, #220]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f023 0203 	bic.w	r2, r3, #3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	4934      	ldr	r1, [pc, #208]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047b8:	f7fc ffd6 	bl	8001768 <HAL_GetTick>
 80047bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047be:	e00a      	b.n	80047d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c0:	f7fc ffd2 	bl	8001768 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e04f      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 020c 	and.w	r2, r3, #12
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d1eb      	bne.n	80047c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047e8:	4b25      	ldr	r3, [pc, #148]	@ (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d20c      	bcs.n	8004810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f6:	4b22      	ldr	r3, [pc, #136]	@ (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	b2d2      	uxtb	r2, r2
 80047fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047fe:	4b20      	ldr	r3, [pc, #128]	@ (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d001      	beq.n	8004810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e032      	b.n	8004876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d008      	beq.n	800482e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800481c:	4b19      	ldr	r3, [pc, #100]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	4916      	ldr	r1, [pc, #88]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800482a:	4313      	orrs	r3, r2
 800482c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0308 	and.w	r3, r3, #8
 8004836:	2b00      	cmp	r3, #0
 8004838:	d009      	beq.n	800484e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800483a:	4b12      	ldr	r3, [pc, #72]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	490e      	ldr	r1, [pc, #56]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	4313      	orrs	r3, r2
 800484c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800484e:	f000 f821 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 8004852:	4602      	mov	r2, r0
 8004854:	4b0b      	ldr	r3, [pc, #44]	@ (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	091b      	lsrs	r3, r3, #4
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	490a      	ldr	r1, [pc, #40]	@ (8004888 <HAL_RCC_ClockConfig+0x1c0>)
 8004860:	5ccb      	ldrb	r3, [r1, r3]
 8004862:	fa22 f303 	lsr.w	r3, r2, r3
 8004866:	4a09      	ldr	r2, [pc, #36]	@ (800488c <HAL_RCC_ClockConfig+0x1c4>)
 8004868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800486a:	4b09      	ldr	r3, [pc, #36]	@ (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f7fc ff36 	bl	80016e0 <HAL_InitTick>

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40023c00 	.word	0x40023c00
 8004884:	40023800 	.word	0x40023800
 8004888:	0800af4c 	.word	0x0800af4c
 800488c:	2000002c 	.word	0x2000002c
 8004890:	20000030 	.word	0x20000030

08004894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004898:	b090      	sub	sp, #64	@ 0x40
 800489a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	637b      	str	r3, [r7, #52]	@ 0x34
 80048a0:	2300      	movs	r3, #0
 80048a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048a4:	2300      	movs	r3, #0
 80048a6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048ac:	4b59      	ldr	r3, [pc, #356]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 030c 	and.w	r3, r3, #12
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d00d      	beq.n	80048d4 <HAL_RCC_GetSysClockFreq+0x40>
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	f200 80a1 	bhi.w	8004a00 <HAL_RCC_GetSysClockFreq+0x16c>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <HAL_RCC_GetSysClockFreq+0x34>
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d003      	beq.n	80048ce <HAL_RCC_GetSysClockFreq+0x3a>
 80048c6:	e09b      	b.n	8004a00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048c8:	4b53      	ldr	r3, [pc, #332]	@ (8004a18 <HAL_RCC_GetSysClockFreq+0x184>)
 80048ca:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80048cc:	e09b      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048ce:	4b53      	ldr	r3, [pc, #332]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x188>)
 80048d0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048d2:	e098      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048d4:	4b4f      	ldr	r3, [pc, #316]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048dc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048de:	4b4d      	ldr	r3, [pc, #308]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d028      	beq.n	800493c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ea:	4b4a      	ldr	r3, [pc, #296]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	099b      	lsrs	r3, r3, #6
 80048f0:	2200      	movs	r2, #0
 80048f2:	623b      	str	r3, [r7, #32]
 80048f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80048fc:	2100      	movs	r1, #0
 80048fe:	4b47      	ldr	r3, [pc, #284]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x188>)
 8004900:	fb03 f201 	mul.w	r2, r3, r1
 8004904:	2300      	movs	r3, #0
 8004906:	fb00 f303 	mul.w	r3, r0, r3
 800490a:	4413      	add	r3, r2
 800490c:	4a43      	ldr	r2, [pc, #268]	@ (8004a1c <HAL_RCC_GetSysClockFreq+0x188>)
 800490e:	fba0 1202 	umull	r1, r2, r0, r2
 8004912:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004914:	460a      	mov	r2, r1
 8004916:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004918:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800491a:	4413      	add	r3, r2
 800491c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800491e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004920:	2200      	movs	r2, #0
 8004922:	61bb      	str	r3, [r7, #24]
 8004924:	61fa      	str	r2, [r7, #28]
 8004926:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800492a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800492e:	f7fb fcb7 	bl	80002a0 <__aeabi_uldivmod>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4613      	mov	r3, r2
 8004938:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800493a:	e053      	b.n	80049e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800493c:	4b35      	ldr	r3, [pc, #212]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x180>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	099b      	lsrs	r3, r3, #6
 8004942:	2200      	movs	r2, #0
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	617a      	str	r2, [r7, #20]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800494e:	f04f 0b00 	mov.w	fp, #0
 8004952:	4652      	mov	r2, sl
 8004954:	465b      	mov	r3, fp
 8004956:	f04f 0000 	mov.w	r0, #0
 800495a:	f04f 0100 	mov.w	r1, #0
 800495e:	0159      	lsls	r1, r3, #5
 8004960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004964:	0150      	lsls	r0, r2, #5
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	ebb2 080a 	subs.w	r8, r2, sl
 800496e:	eb63 090b 	sbc.w	r9, r3, fp
 8004972:	f04f 0200 	mov.w	r2, #0
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800497e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004982:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004986:	ebb2 0408 	subs.w	r4, r2, r8
 800498a:	eb63 0509 	sbc.w	r5, r3, r9
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	00eb      	lsls	r3, r5, #3
 8004998:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800499c:	00e2      	lsls	r2, r4, #3
 800499e:	4614      	mov	r4, r2
 80049a0:	461d      	mov	r5, r3
 80049a2:	eb14 030a 	adds.w	r3, r4, sl
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	eb45 030b 	adc.w	r3, r5, fp
 80049ac:	607b      	str	r3, [r7, #4]
 80049ae:	f04f 0200 	mov.w	r2, #0
 80049b2:	f04f 0300 	mov.w	r3, #0
 80049b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049ba:	4629      	mov	r1, r5
 80049bc:	028b      	lsls	r3, r1, #10
 80049be:	4621      	mov	r1, r4
 80049c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049c4:	4621      	mov	r1, r4
 80049c6:	028a      	lsls	r2, r1, #10
 80049c8:	4610      	mov	r0, r2
 80049ca:	4619      	mov	r1, r3
 80049cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ce:	2200      	movs	r2, #0
 80049d0:	60bb      	str	r3, [r7, #8]
 80049d2:	60fa      	str	r2, [r7, #12]
 80049d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049d8:	f7fb fc62 	bl	80002a0 <__aeabi_uldivmod>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4613      	mov	r3, r2
 80049e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x180>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	0c1b      	lsrs	r3, r3, #16
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	3301      	adds	r3, #1
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80049f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80049f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80049fe:	e002      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a00:	4b05      	ldr	r3, [pc, #20]	@ (8004a18 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3740      	adds	r7, #64	@ 0x40
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a12:	bf00      	nop
 8004a14:	40023800 	.word	0x40023800
 8004a18:	00f42400 	.word	0x00f42400
 8004a1c:	017d7840 	.word	0x017d7840

08004a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a24:	4b03      	ldr	r3, [pc, #12]	@ (8004a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a26:	681b      	ldr	r3, [r3, #0]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	2000002c 	.word	0x2000002c

08004a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e041      	b.n	8004ace <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d106      	bne.n	8004a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fc fbf0 	bl	8001244 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3304      	adds	r3, #4
 8004a74:	4619      	mov	r1, r3
 8004a76:	4610      	mov	r0, r2
 8004a78:	f000 fb66 	bl	8005148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	b082      	sub	sp, #8
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e041      	b.n	8004b6c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d106      	bne.n	8004b02 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 f839 	bl	8004b74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2202      	movs	r2, #2
 8004b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3304      	adds	r3, #4
 8004b12:	4619      	mov	r1, r3
 8004b14:	4610      	mov	r0, r2
 8004b16:	f000 fb17 	bl	8005148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d109      	bne.n	8004bac <HAL_TIM_PWM_Start+0x24>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	bf14      	ite	ne
 8004ba4:	2301      	movne	r3, #1
 8004ba6:	2300      	moveq	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	e022      	b.n	8004bf2 <HAL_TIM_PWM_Start+0x6a>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d109      	bne.n	8004bc6 <HAL_TIM_PWM_Start+0x3e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	bf14      	ite	ne
 8004bbe:	2301      	movne	r3, #1
 8004bc0:	2300      	moveq	r3, #0
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	e015      	b.n	8004bf2 <HAL_TIM_PWM_Start+0x6a>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d109      	bne.n	8004be0 <HAL_TIM_PWM_Start+0x58>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	bf14      	ite	ne
 8004bd8:	2301      	movne	r3, #1
 8004bda:	2300      	moveq	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	e008      	b.n	8004bf2 <HAL_TIM_PWM_Start+0x6a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	bf14      	ite	ne
 8004bec:	2301      	movne	r3, #1
 8004bee:	2300      	moveq	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e068      	b.n	8004ccc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d104      	bne.n	8004c0a <HAL_TIM_PWM_Start+0x82>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c08:	e013      	b.n	8004c32 <HAL_TIM_PWM_Start+0xaa>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d104      	bne.n	8004c1a <HAL_TIM_PWM_Start+0x92>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c18:	e00b      	b.n	8004c32 <HAL_TIM_PWM_Start+0xaa>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d104      	bne.n	8004c2a <HAL_TIM_PWM_Start+0xa2>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c28:	e003      	b.n	8004c32 <HAL_TIM_PWM_Start+0xaa>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2201      	movs	r2, #1
 8004c38:	6839      	ldr	r1, [r7, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fdc7 	bl	80057ce <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a23      	ldr	r2, [pc, #140]	@ (8004cd4 <HAL_TIM_PWM_Start+0x14c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d107      	bne.n	8004c5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd4 <HAL_TIM_PWM_Start+0x14c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d018      	beq.n	8004c96 <HAL_TIM_PWM_Start+0x10e>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c6c:	d013      	beq.n	8004c96 <HAL_TIM_PWM_Start+0x10e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a19      	ldr	r2, [pc, #100]	@ (8004cd8 <HAL_TIM_PWM_Start+0x150>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00e      	beq.n	8004c96 <HAL_TIM_PWM_Start+0x10e>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a17      	ldr	r2, [pc, #92]	@ (8004cdc <HAL_TIM_PWM_Start+0x154>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d009      	beq.n	8004c96 <HAL_TIM_PWM_Start+0x10e>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a16      	ldr	r2, [pc, #88]	@ (8004ce0 <HAL_TIM_PWM_Start+0x158>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d004      	beq.n	8004c96 <HAL_TIM_PWM_Start+0x10e>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a14      	ldr	r2, [pc, #80]	@ (8004ce4 <HAL_TIM_PWM_Start+0x15c>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d111      	bne.n	8004cba <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b06      	cmp	r3, #6
 8004ca6:	d010      	beq.n	8004cca <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0201 	orr.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb8:	e007      	b.n	8004cca <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0201 	orr.w	r2, r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40010000 	.word	0x40010000
 8004cd8:	40000400 	.word	0x40000400
 8004cdc:	40000800 	.word	0x40000800
 8004ce0:	40000c00 	.word	0x40000c00
 8004ce4:	40014000 	.word	0x40014000

08004ce8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	6839      	ldr	r1, [r7, #0]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fd67 	bl	80057ce <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a29      	ldr	r2, [pc, #164]	@ (8004dac <HAL_TIM_PWM_Stop+0xc4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d117      	bne.n	8004d3a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6a1a      	ldr	r2, [r3, #32]
 8004d10:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d14:	4013      	ands	r3, r2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10f      	bne.n	8004d3a <HAL_TIM_PWM_Stop+0x52>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6a1a      	ldr	r2, [r3, #32]
 8004d20:	f240 4344 	movw	r3, #1092	@ 0x444
 8004d24:	4013      	ands	r3, r2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d107      	bne.n	8004d3a <HAL_TIM_PWM_Stop+0x52>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6a1a      	ldr	r2, [r3, #32]
 8004d40:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d44:	4013      	ands	r3, r2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10f      	bne.n	8004d6a <HAL_TIM_PWM_Stop+0x82>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6a1a      	ldr	r2, [r3, #32]
 8004d50:	f240 4344 	movw	r3, #1092	@ 0x444
 8004d54:	4013      	ands	r3, r2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d107      	bne.n	8004d6a <HAL_TIM_PWM_Stop+0x82>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0201 	bic.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d104      	bne.n	8004d7a <HAL_TIM_PWM_Stop+0x92>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d78:	e013      	b.n	8004da2 <HAL_TIM_PWM_Stop+0xba>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d104      	bne.n	8004d8a <HAL_TIM_PWM_Stop+0xa2>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d88:	e00b      	b.n	8004da2 <HAL_TIM_PWM_Stop+0xba>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d104      	bne.n	8004d9a <HAL_TIM_PWM_Stop+0xb2>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d98:	e003      	b.n	8004da2 <HAL_TIM_PWM_Stop+0xba>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40010000 	.word	0x40010000

08004db0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e0ae      	b.n	8004f2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b0c      	cmp	r3, #12
 8004dda:	f200 809f 	bhi.w	8004f1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004dde:	a201      	add	r2, pc, #4	@ (adr r2, 8004de4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de4:	08004e19 	.word	0x08004e19
 8004de8:	08004f1d 	.word	0x08004f1d
 8004dec:	08004f1d 	.word	0x08004f1d
 8004df0:	08004f1d 	.word	0x08004f1d
 8004df4:	08004e59 	.word	0x08004e59
 8004df8:	08004f1d 	.word	0x08004f1d
 8004dfc:	08004f1d 	.word	0x08004f1d
 8004e00:	08004f1d 	.word	0x08004f1d
 8004e04:	08004e9b 	.word	0x08004e9b
 8004e08:	08004f1d 	.word	0x08004f1d
 8004e0c:	08004f1d 	.word	0x08004f1d
 8004e10:	08004f1d 	.word	0x08004f1d
 8004e14:	08004edb 	.word	0x08004edb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68b9      	ldr	r1, [r7, #8]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fa1e 	bl	8005260 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0208 	orr.w	r2, r2, #8
 8004e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0204 	bic.w	r2, r2, #4
 8004e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6999      	ldr	r1, [r3, #24]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	619a      	str	r2, [r3, #24]
      break;
 8004e56:	e064      	b.n	8004f22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68b9      	ldr	r1, [r7, #8]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fa64 	bl	800532c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6999      	ldr	r1, [r3, #24]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	021a      	lsls	r2, r3, #8
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	619a      	str	r2, [r3, #24]
      break;
 8004e98:	e043      	b.n	8004f22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68b9      	ldr	r1, [r7, #8]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 faaf 	bl	8005404 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f042 0208 	orr.w	r2, r2, #8
 8004eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69da      	ldr	r2, [r3, #28]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0204 	bic.w	r2, r2, #4
 8004ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69d9      	ldr	r1, [r3, #28]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	61da      	str	r2, [r3, #28]
      break;
 8004ed8:	e023      	b.n	8004f22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 faf9 	bl	80054d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69da      	ldr	r2, [r3, #28]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69da      	ldr	r2, [r3, #28]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69d9      	ldr	r1, [r3, #28]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	021a      	lsls	r2, r3, #8
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	61da      	str	r2, [r3, #28]
      break;
 8004f1a:	e002      	b.n	8004f22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004f20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_TIM_ConfigClockSource+0x1c>
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e0b4      	b.n	80050ba <HAL_TIM_ConfigClockSource+0x186>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f88:	d03e      	beq.n	8005008 <HAL_TIM_ConfigClockSource+0xd4>
 8004f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f8e:	f200 8087 	bhi.w	80050a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f96:	f000 8086 	beq.w	80050a6 <HAL_TIM_ConfigClockSource+0x172>
 8004f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f9e:	d87f      	bhi.n	80050a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa0:	2b70      	cmp	r3, #112	@ 0x70
 8004fa2:	d01a      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0xa6>
 8004fa4:	2b70      	cmp	r3, #112	@ 0x70
 8004fa6:	d87b      	bhi.n	80050a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fa8:	2b60      	cmp	r3, #96	@ 0x60
 8004faa:	d050      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x11a>
 8004fac:	2b60      	cmp	r3, #96	@ 0x60
 8004fae:	d877      	bhi.n	80050a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb0:	2b50      	cmp	r3, #80	@ 0x50
 8004fb2:	d03c      	beq.n	800502e <HAL_TIM_ConfigClockSource+0xfa>
 8004fb4:	2b50      	cmp	r3, #80	@ 0x50
 8004fb6:	d873      	bhi.n	80050a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fb8:	2b40      	cmp	r3, #64	@ 0x40
 8004fba:	d058      	beq.n	800506e <HAL_TIM_ConfigClockSource+0x13a>
 8004fbc:	2b40      	cmp	r3, #64	@ 0x40
 8004fbe:	d86f      	bhi.n	80050a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc0:	2b30      	cmp	r3, #48	@ 0x30
 8004fc2:	d064      	beq.n	800508e <HAL_TIM_ConfigClockSource+0x15a>
 8004fc4:	2b30      	cmp	r3, #48	@ 0x30
 8004fc6:	d86b      	bhi.n	80050a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	d060      	beq.n	800508e <HAL_TIM_ConfigClockSource+0x15a>
 8004fcc:	2b20      	cmp	r3, #32
 8004fce:	d867      	bhi.n	80050a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d05c      	beq.n	800508e <HAL_TIM_ConfigClockSource+0x15a>
 8004fd4:	2b10      	cmp	r3, #16
 8004fd6:	d05a      	beq.n	800508e <HAL_TIM_ConfigClockSource+0x15a>
 8004fd8:	e062      	b.n	80050a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fea:	f000 fbd0 	bl	800578e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ffc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	609a      	str	r2, [r3, #8]
      break;
 8005006:	e04f      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005018:	f000 fbb9 	bl	800578e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800502a:	609a      	str	r2, [r3, #8]
      break;
 800502c:	e03c      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800503a:	461a      	mov	r2, r3
 800503c:	f000 fb2d 	bl	800569a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2150      	movs	r1, #80	@ 0x50
 8005046:	4618      	mov	r0, r3
 8005048:	f000 fb86 	bl	8005758 <TIM_ITRx_SetConfig>
      break;
 800504c:	e02c      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800505a:	461a      	mov	r2, r3
 800505c:	f000 fb4c 	bl	80056f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2160      	movs	r1, #96	@ 0x60
 8005066:	4618      	mov	r0, r3
 8005068:	f000 fb76 	bl	8005758 <TIM_ITRx_SetConfig>
      break;
 800506c:	e01c      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800507a:	461a      	mov	r2, r3
 800507c:	f000 fb0d 	bl	800569a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2140      	movs	r1, #64	@ 0x40
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fb66 	bl	8005758 <TIM_ITRx_SetConfig>
      break;
 800508c:	e00c      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4619      	mov	r1, r3
 8005098:	4610      	mov	r0, r2
 800509a:	f000 fb5d 	bl	8005758 <TIM_ITRx_SetConfig>
      break;
 800509e:	e003      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	73fb      	strb	r3, [r7, #15]
      break;
 80050a4:	e000      	b.n	80050a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3710      	adds	r7, #16
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b082      	sub	sp, #8
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
 80050ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d101      	bne.n	80050da <HAL_TIM_SlaveConfigSynchro+0x18>
 80050d6:	2302      	movs	r3, #2
 80050d8:	e031      	b.n	800513e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2202      	movs	r2, #2
 80050e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80050ea:	6839      	ldr	r1, [r7, #0]
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 fa43 	bl	8005578 <TIM_SlaveTimer_SetConfig>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d009      	beq.n	800510c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e018      	b.n	800513e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800511a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800512a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a3a      	ldr	r2, [pc, #232]	@ (8005244 <TIM_Base_SetConfig+0xfc>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d00f      	beq.n	8005180 <TIM_Base_SetConfig+0x38>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005166:	d00b      	beq.n	8005180 <TIM_Base_SetConfig+0x38>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a37      	ldr	r2, [pc, #220]	@ (8005248 <TIM_Base_SetConfig+0x100>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d007      	beq.n	8005180 <TIM_Base_SetConfig+0x38>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a36      	ldr	r2, [pc, #216]	@ (800524c <TIM_Base_SetConfig+0x104>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d003      	beq.n	8005180 <TIM_Base_SetConfig+0x38>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a35      	ldr	r2, [pc, #212]	@ (8005250 <TIM_Base_SetConfig+0x108>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d108      	bne.n	8005192 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a2b      	ldr	r2, [pc, #172]	@ (8005244 <TIM_Base_SetConfig+0xfc>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d01b      	beq.n	80051d2 <TIM_Base_SetConfig+0x8a>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051a0:	d017      	beq.n	80051d2 <TIM_Base_SetConfig+0x8a>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a28      	ldr	r2, [pc, #160]	@ (8005248 <TIM_Base_SetConfig+0x100>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d013      	beq.n	80051d2 <TIM_Base_SetConfig+0x8a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a27      	ldr	r2, [pc, #156]	@ (800524c <TIM_Base_SetConfig+0x104>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00f      	beq.n	80051d2 <TIM_Base_SetConfig+0x8a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a26      	ldr	r2, [pc, #152]	@ (8005250 <TIM_Base_SetConfig+0x108>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d00b      	beq.n	80051d2 <TIM_Base_SetConfig+0x8a>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a25      	ldr	r2, [pc, #148]	@ (8005254 <TIM_Base_SetConfig+0x10c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d007      	beq.n	80051d2 <TIM_Base_SetConfig+0x8a>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a24      	ldr	r2, [pc, #144]	@ (8005258 <TIM_Base_SetConfig+0x110>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d003      	beq.n	80051d2 <TIM_Base_SetConfig+0x8a>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	4a23      	ldr	r2, [pc, #140]	@ (800525c <TIM_Base_SetConfig+0x114>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d108      	bne.n	80051e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a0e      	ldr	r2, [pc, #56]	@ (8005244 <TIM_Base_SetConfig+0xfc>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d103      	bne.n	8005218 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b01      	cmp	r3, #1
 8005228:	d105      	bne.n	8005236 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f023 0201 	bic.w	r2, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	611a      	str	r2, [r3, #16]
  }
}
 8005236:	bf00      	nop
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40010000 	.word	0x40010000
 8005248:	40000400 	.word	0x40000400
 800524c:	40000800 	.word	0x40000800
 8005250:	40000c00 	.word	0x40000c00
 8005254:	40014000 	.word	0x40014000
 8005258:	40014400 	.word	0x40014400
 800525c:	40014800 	.word	0x40014800

08005260 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	f023 0201 	bic.w	r2, r3, #1
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800528e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0303 	bic.w	r3, r3, #3
 8005296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f023 0302 	bic.w	r3, r3, #2
 80052a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005328 <TIM_OC1_SetConfig+0xc8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d10c      	bne.n	80052d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f023 0308 	bic.w	r3, r3, #8
 80052c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f023 0304 	bic.w	r3, r3, #4
 80052d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a13      	ldr	r2, [pc, #76]	@ (8005328 <TIM_OC1_SetConfig+0xc8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d111      	bne.n	8005302 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	621a      	str	r2, [r3, #32]
}
 800531c:	bf00      	nop
 800531e:	371c      	adds	r7, #28
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	40010000 	.word	0x40010000

0800532c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	f023 0210 	bic.w	r2, r3, #16
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800535a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	021b      	lsls	r3, r3, #8
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4313      	orrs	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	f023 0320 	bic.w	r3, r3, #32
 8005376:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	011b      	lsls	r3, r3, #4
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a1e      	ldr	r2, [pc, #120]	@ (8005400 <TIM_OC2_SetConfig+0xd4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d10d      	bne.n	80053a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a15      	ldr	r2, [pc, #84]	@ (8005400 <TIM_OC2_SetConfig+0xd4>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d113      	bne.n	80053d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	621a      	str	r2, [r3, #32]
}
 80053f2:	bf00      	nop
 80053f4:	371c      	adds	r7, #28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40010000 	.word	0x40010000

08005404 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0303 	bic.w	r3, r3, #3
 800543a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800544c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	4313      	orrs	r3, r2
 8005458:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a1d      	ldr	r2, [pc, #116]	@ (80054d4 <TIM_OC3_SetConfig+0xd0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d10d      	bne.n	800547e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005468:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	021b      	lsls	r3, r3, #8
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800547c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a14      	ldr	r2, [pc, #80]	@ (80054d4 <TIM_OC3_SetConfig+0xd0>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d113      	bne.n	80054ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800548c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	4313      	orrs	r3, r2
 80054a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	621a      	str	r2, [r3, #32]
}
 80054c8:	bf00      	nop
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	40010000 	.word	0x40010000

080054d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800550e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	021b      	lsls	r3, r3, #8
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	031b      	lsls	r3, r3, #12
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a10      	ldr	r2, [pc, #64]	@ (8005574 <TIM_OC4_SetConfig+0x9c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d109      	bne.n	800554c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800553e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	019b      	lsls	r3, r3, #6
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	621a      	str	r2, [r3, #32]
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr
 8005572:	bf00      	nop
 8005574:	40010000 	.word	0x40010000

08005578 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005594:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	4313      	orrs	r3, r2
 800559e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	f023 0307 	bic.w	r3, r3, #7
 80055a6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b70      	cmp	r3, #112	@ 0x70
 80055c0:	d01a      	beq.n	80055f8 <TIM_SlaveTimer_SetConfig+0x80>
 80055c2:	2b70      	cmp	r3, #112	@ 0x70
 80055c4:	d860      	bhi.n	8005688 <TIM_SlaveTimer_SetConfig+0x110>
 80055c6:	2b60      	cmp	r3, #96	@ 0x60
 80055c8:	d054      	beq.n	8005674 <TIM_SlaveTimer_SetConfig+0xfc>
 80055ca:	2b60      	cmp	r3, #96	@ 0x60
 80055cc:	d85c      	bhi.n	8005688 <TIM_SlaveTimer_SetConfig+0x110>
 80055ce:	2b50      	cmp	r3, #80	@ 0x50
 80055d0:	d046      	beq.n	8005660 <TIM_SlaveTimer_SetConfig+0xe8>
 80055d2:	2b50      	cmp	r3, #80	@ 0x50
 80055d4:	d858      	bhi.n	8005688 <TIM_SlaveTimer_SetConfig+0x110>
 80055d6:	2b40      	cmp	r3, #64	@ 0x40
 80055d8:	d019      	beq.n	800560e <TIM_SlaveTimer_SetConfig+0x96>
 80055da:	2b40      	cmp	r3, #64	@ 0x40
 80055dc:	d854      	bhi.n	8005688 <TIM_SlaveTimer_SetConfig+0x110>
 80055de:	2b30      	cmp	r3, #48	@ 0x30
 80055e0:	d055      	beq.n	800568e <TIM_SlaveTimer_SetConfig+0x116>
 80055e2:	2b30      	cmp	r3, #48	@ 0x30
 80055e4:	d850      	bhi.n	8005688 <TIM_SlaveTimer_SetConfig+0x110>
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	d051      	beq.n	800568e <TIM_SlaveTimer_SetConfig+0x116>
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d84c      	bhi.n	8005688 <TIM_SlaveTimer_SetConfig+0x110>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d04d      	beq.n	800568e <TIM_SlaveTimer_SetConfig+0x116>
 80055f2:	2b10      	cmp	r3, #16
 80055f4:	d04b      	beq.n	800568e <TIM_SlaveTimer_SetConfig+0x116>
 80055f6:	e047      	b.n	8005688 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005608:	f000 f8c1 	bl	800578e <TIM_ETR_SetConfig>
      break;
 800560c:	e040      	b.n	8005690 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b05      	cmp	r3, #5
 8005614:	d101      	bne.n	800561a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e03b      	b.n	8005692 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6a1a      	ldr	r2, [r3, #32]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0201 	bic.w	r2, r2, #1
 8005630:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005640:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	4313      	orrs	r3, r2
 800564c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	621a      	str	r2, [r3, #32]
      break;
 800565e:	e017      	b.n	8005690 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800566c:	461a      	mov	r2, r3
 800566e:	f000 f814 	bl	800569a <TIM_TI1_ConfigInputStage>
      break;
 8005672:	e00d      	b.n	8005690 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005680:	461a      	mov	r2, r3
 8005682:	f000 f839 	bl	80056f8 <TIM_TI2_ConfigInputStage>
      break;
 8005686:	e003      	b.n	8005690 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	75fb      	strb	r3, [r7, #23]
      break;
 800568c:	e000      	b.n	8005690 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800568e:	bf00      	nop
  }

  return status;
 8005690:	7dfb      	ldrb	r3, [r7, #23]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800569a:	b480      	push	{r7}
 800569c:	b087      	sub	sp, #28
 800569e:	af00      	add	r7, sp, #0
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	f023 0201 	bic.w	r2, r3, #1
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	011b      	lsls	r3, r3, #4
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f023 030a 	bic.w	r3, r3, #10
 80056d6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80056d8:	697a      	ldr	r2, [r7, #20]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	621a      	str	r2, [r3, #32]
}
 80056ec:	bf00      	nop
 80056ee:	371c      	adds	r7, #28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	f023 0210 	bic.w	r2, r3, #16
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	031b      	lsls	r3, r3, #12
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005734:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	4313      	orrs	r3, r2
 800573e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	621a      	str	r2, [r3, #32]
}
 800574c:	bf00      	nop
 800574e:	371c      	adds	r7, #28
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800576e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	f043 0307 	orr.w	r3, r3, #7
 800577a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	609a      	str	r2, [r3, #8]
}
 8005782:	bf00      	nop
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800578e:	b480      	push	{r7}
 8005790:	b087      	sub	sp, #28
 8005792:	af00      	add	r7, sp, #0
 8005794:	60f8      	str	r0, [r7, #12]
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	607a      	str	r2, [r7, #4]
 800579a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	021a      	lsls	r2, r3, #8
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	431a      	orrs	r2, r3
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	609a      	str	r2, [r3, #8]
}
 80057c2:	bf00      	nop
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b087      	sub	sp, #28
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f003 031f 	and.w	r3, r3, #31
 80057e0:	2201      	movs	r2, #1
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a1a      	ldr	r2, [r3, #32]
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	43db      	mvns	r3, r3
 80057f0:	401a      	ands	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6a1a      	ldr	r2, [r3, #32]
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f003 031f 	and.w	r3, r3, #31
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	fa01 f303 	lsl.w	r3, r1, r3
 8005806:	431a      	orrs	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	621a      	str	r2, [r3, #32]
}
 800580c:	bf00      	nop
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800582c:	2302      	movs	r3, #2
 800582e:	e050      	b.n	80058d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005856:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a1c      	ldr	r2, [pc, #112]	@ (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d018      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800587c:	d013      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a18      	ldr	r2, [pc, #96]	@ (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d00e      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a16      	ldr	r2, [pc, #88]	@ (80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d009      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a15      	ldr	r2, [pc, #84]	@ (80058ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d004      	beq.n	80058a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a13      	ldr	r2, [pc, #76]	@ (80058f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d10c      	bne.n	80058c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3714      	adds	r7, #20
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	40010000 	.word	0x40010000
 80058e4:	40000400 	.word	0x40000400
 80058e8:	40000800 	.word	0x40000800
 80058ec:	40000c00 	.word	0x40000c00
 80058f0:	40014000 	.word	0x40014000

080058f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058f4:	b084      	sub	sp, #16
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	f107 001c 	add.w	r0, r7, #28
 8005902:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005906:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800590a:	2b01      	cmp	r3, #1
 800590c:	d123      	bne.n	8005956 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005912:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005922:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005936:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800593a:	2b01      	cmp	r3, #1
 800593c:	d105      	bne.n	800594a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f001 fae2 	bl	8006f14 <USB_CoreReset>
 8005950:	4603      	mov	r3, r0
 8005952:	73fb      	strb	r3, [r7, #15]
 8005954:	e01b      	b.n	800598e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f001 fad6 	bl	8006f14 <USB_CoreReset>
 8005968:	4603      	mov	r3, r0
 800596a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800596c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005970:	2b00      	cmp	r3, #0
 8005972:	d106      	bne.n	8005982 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005978:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005980:	e005      	b.n	800598e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005986:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800598e:	7fbb      	ldrb	r3, [r7, #30]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d10b      	bne.n	80059ac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f043 0206 	orr.w	r2, r3, #6
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f043 0220 	orr.w	r2, r3, #32
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059b8:	b004      	add	sp, #16
 80059ba:	4770      	bx	lr

080059bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80059bc:	b480      	push	{r7}
 80059be:	b087      	sub	sp, #28
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	4613      	mov	r3, r2
 80059c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80059ca:	79fb      	ldrb	r3, [r7, #7]
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d165      	bne.n	8005a9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4a41      	ldr	r2, [pc, #260]	@ (8005ad8 <USB_SetTurnaroundTime+0x11c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d906      	bls.n	80059e6 <USB_SetTurnaroundTime+0x2a>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4a40      	ldr	r2, [pc, #256]	@ (8005adc <USB_SetTurnaroundTime+0x120>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d202      	bcs.n	80059e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80059e0:	230f      	movs	r3, #15
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	e062      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	4a3c      	ldr	r2, [pc, #240]	@ (8005adc <USB_SetTurnaroundTime+0x120>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d306      	bcc.n	80059fc <USB_SetTurnaroundTime+0x40>
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	4a3b      	ldr	r2, [pc, #236]	@ (8005ae0 <USB_SetTurnaroundTime+0x124>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d202      	bcs.n	80059fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80059f6:	230e      	movs	r3, #14
 80059f8:	617b      	str	r3, [r7, #20]
 80059fa:	e057      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4a38      	ldr	r2, [pc, #224]	@ (8005ae0 <USB_SetTurnaroundTime+0x124>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d306      	bcc.n	8005a12 <USB_SetTurnaroundTime+0x56>
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	4a37      	ldr	r2, [pc, #220]	@ (8005ae4 <USB_SetTurnaroundTime+0x128>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d202      	bcs.n	8005a12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005a0c:	230d      	movs	r3, #13
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	e04c      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	4a33      	ldr	r2, [pc, #204]	@ (8005ae4 <USB_SetTurnaroundTime+0x128>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d306      	bcc.n	8005a28 <USB_SetTurnaroundTime+0x6c>
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	4a32      	ldr	r2, [pc, #200]	@ (8005ae8 <USB_SetTurnaroundTime+0x12c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d802      	bhi.n	8005a28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005a22:	230c      	movs	r3, #12
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	e041      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	4a2f      	ldr	r2, [pc, #188]	@ (8005ae8 <USB_SetTurnaroundTime+0x12c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d906      	bls.n	8005a3e <USB_SetTurnaroundTime+0x82>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	4a2e      	ldr	r2, [pc, #184]	@ (8005aec <USB_SetTurnaroundTime+0x130>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d802      	bhi.n	8005a3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005a38:	230b      	movs	r3, #11
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	e036      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	4a2a      	ldr	r2, [pc, #168]	@ (8005aec <USB_SetTurnaroundTime+0x130>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d906      	bls.n	8005a54 <USB_SetTurnaroundTime+0x98>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	4a29      	ldr	r2, [pc, #164]	@ (8005af0 <USB_SetTurnaroundTime+0x134>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d802      	bhi.n	8005a54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005a4e:	230a      	movs	r3, #10
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	e02b      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4a26      	ldr	r2, [pc, #152]	@ (8005af0 <USB_SetTurnaroundTime+0x134>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d906      	bls.n	8005a6a <USB_SetTurnaroundTime+0xae>
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	4a25      	ldr	r2, [pc, #148]	@ (8005af4 <USB_SetTurnaroundTime+0x138>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d202      	bcs.n	8005a6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005a64:	2309      	movs	r3, #9
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	e020      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	4a21      	ldr	r2, [pc, #132]	@ (8005af4 <USB_SetTurnaroundTime+0x138>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d306      	bcc.n	8005a80 <USB_SetTurnaroundTime+0xc4>
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	4a20      	ldr	r2, [pc, #128]	@ (8005af8 <USB_SetTurnaroundTime+0x13c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d802      	bhi.n	8005a80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005a7a:	2308      	movs	r3, #8
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	e015      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	4a1d      	ldr	r2, [pc, #116]	@ (8005af8 <USB_SetTurnaroundTime+0x13c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d906      	bls.n	8005a96 <USB_SetTurnaroundTime+0xda>
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8005afc <USB_SetTurnaroundTime+0x140>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d202      	bcs.n	8005a96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005a90:	2307      	movs	r3, #7
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	e00a      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005a96:	2306      	movs	r3, #6
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	e007      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005a9c:	79fb      	ldrb	r3, [r7, #7]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d102      	bne.n	8005aa8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005aa2:	2309      	movs	r3, #9
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	e001      	b.n	8005aac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005aa8:	2309      	movs	r3, #9
 8005aaa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	68da      	ldr	r2, [r3, #12]
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	029b      	lsls	r3, r3, #10
 8005ac0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	371c      	adds	r7, #28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	00d8acbf 	.word	0x00d8acbf
 8005adc:	00e4e1c0 	.word	0x00e4e1c0
 8005ae0:	00f42400 	.word	0x00f42400
 8005ae4:	01067380 	.word	0x01067380
 8005ae8:	011a499f 	.word	0x011a499f
 8005aec:	01312cff 	.word	0x01312cff
 8005af0:	014ca43f 	.word	0x014ca43f
 8005af4:	016e3600 	.word	0x016e3600
 8005af8:	01a6ab1f 	.word	0x01a6ab1f
 8005afc:	01e84800 	.word	0x01e84800

08005b00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f043 0201 	orr.w	r2, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f023 0201 	bic.w	r2, r3, #1
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d115      	bne.n	8005b92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005b72:	200a      	movs	r0, #10
 8005b74:	f7fb fe04 	bl	8001780 <HAL_Delay>
      ms += 10U;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	330a      	adds	r3, #10
 8005b7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f001 f939 	bl	8006df6 <USB_GetMode>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d01e      	beq.n	8005bc8 <USB_SetCurrentMode+0x84>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2bc7      	cmp	r3, #199	@ 0xc7
 8005b8e:	d9f0      	bls.n	8005b72 <USB_SetCurrentMode+0x2e>
 8005b90:	e01a      	b.n	8005bc8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b92:	78fb      	ldrb	r3, [r7, #3]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d115      	bne.n	8005bc4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ba4:	200a      	movs	r0, #10
 8005ba6:	f7fb fdeb 	bl	8001780 <HAL_Delay>
      ms += 10U;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	330a      	adds	r3, #10
 8005bae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f001 f920 	bl	8006df6 <USB_GetMode>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d005      	beq.n	8005bc8 <USB_SetCurrentMode+0x84>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2bc7      	cmp	r3, #199	@ 0xc7
 8005bc0:	d9f0      	bls.n	8005ba4 <USB_SetCurrentMode+0x60>
 8005bc2:	e001      	b.n	8005bc8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e005      	b.n	8005bd4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2bc8      	cmp	r3, #200	@ 0xc8
 8005bcc:	d101      	bne.n	8005bd2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005bdc:	b084      	sub	sp, #16
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b086      	sub	sp, #24
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005bea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	e009      	b.n	8005c10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	3340      	adds	r3, #64	@ 0x40
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	2200      	movs	r2, #0
 8005c08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	2b0e      	cmp	r3, #14
 8005c14:	d9f2      	bls.n	8005bfc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c16:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d11c      	bne.n	8005c58 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c2c:	f043 0302 	orr.w	r3, r3, #2
 8005c30:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c36:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c42:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	639a      	str	r2, [r3, #56]	@ 0x38
 8005c56:	e00b      	b.n	8005c70 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c68:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c76:	461a      	mov	r2, r3
 8005c78:	2300      	movs	r3, #0
 8005c7a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005c7c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d10d      	bne.n	8005ca0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005c84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d104      	bne.n	8005c96 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f968 	bl	8005f64 <USB_SetDevSpeed>
 8005c94:	e008      	b.n	8005ca8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c96:	2101      	movs	r1, #1
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f000 f963 	bl	8005f64 <USB_SetDevSpeed>
 8005c9e:	e003      	b.n	8005ca8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ca0:	2103      	movs	r1, #3
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f95e 	bl	8005f64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ca8:	2110      	movs	r1, #16
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 f8fa 	bl	8005ea4 <USB_FlushTxFifo>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f924 	bl	8005f08 <USB_FlushRxFifo>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cdc:	461a      	mov	r2, r3
 8005cde:	2300      	movs	r3, #0
 8005ce0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ce8:	461a      	mov	r2, r3
 8005cea:	2300      	movs	r3, #0
 8005cec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cee:	2300      	movs	r3, #0
 8005cf0:	613b      	str	r3, [r7, #16]
 8005cf2:	e043      	b.n	8005d7c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d0a:	d118      	bne.n	8005d3e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10a      	bne.n	8005d28 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	e013      	b.n	8005d50 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d34:	461a      	mov	r2, r3
 8005d36:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	e008      	b.n	8005d50 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	2300      	movs	r3, #0
 8005d60:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005d74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	613b      	str	r3, [r7, #16]
 8005d7c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005d80:	461a      	mov	r2, r3
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d3b5      	bcc.n	8005cf4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d88:	2300      	movs	r3, #0
 8005d8a:	613b      	str	r3, [r7, #16]
 8005d8c:	e043      	b.n	8005e16 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005da0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005da4:	d118      	bne.n	8005dd8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10a      	bne.n	8005dc2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005db8:	461a      	mov	r2, r3
 8005dba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	e013      	b.n	8005dea <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	015a      	lsls	r2, r3, #5
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005dd4:	6013      	str	r3, [r2, #0]
 8005dd6:	e008      	b.n	8005dea <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de4:	461a      	mov	r2, r3
 8005de6:	2300      	movs	r3, #0
 8005de8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df6:	461a      	mov	r2, r3
 8005df8:	2300      	movs	r3, #0
 8005dfa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	3301      	adds	r3, #1
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d3b5      	bcc.n	8005d8e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e34:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005e42:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d105      	bne.n	8005e58 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	f043 0210 	orr.w	r2, r3, #16
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	699a      	ldr	r2, [r3, #24]
 8005e5c:	4b10      	ldr	r3, [pc, #64]	@ (8005ea0 <USB_DevInit+0x2c4>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e64:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d005      	beq.n	8005e78 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	f043 0208 	orr.w	r2, r3, #8
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005e78:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d107      	bne.n	8005e90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e88:	f043 0304 	orr.w	r3, r3, #4
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e9c:	b004      	add	sp, #16
 8005e9e:	4770      	bx	lr
 8005ea0:	803c3800 	.word	0x803c3800

08005ea4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ebe:	d901      	bls.n	8005ec4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e01b      	b.n	8005efc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	daf2      	bge.n	8005eb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	019b      	lsls	r3, r3, #6
 8005ed4:	f043 0220 	orr.w	r2, r3, #32
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ee8:	d901      	bls.n	8005eee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e006      	b.n	8005efc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b20      	cmp	r3, #32
 8005ef8:	d0f0      	beq.n	8005edc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	3301      	adds	r3, #1
 8005f18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f20:	d901      	bls.n	8005f26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e018      	b.n	8005f58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	daf2      	bge.n	8005f14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2210      	movs	r2, #16
 8005f36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f44:	d901      	bls.n	8005f4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e006      	b.n	8005f58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0310 	and.w	r3, r3, #16
 8005f52:	2b10      	cmp	r3, #16
 8005f54:	d0f0      	beq.n	8005f38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	78fb      	ldrb	r3, [r7, #3]
 8005f7e:	68f9      	ldr	r1, [r7, #12]
 8005f80:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f84:	4313      	orrs	r3, r2
 8005f86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b087      	sub	sp, #28
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f003 0306 	and.w	r3, r3, #6
 8005fae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d102      	bne.n	8005fbc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	75fb      	strb	r3, [r7, #23]
 8005fba:	e00a      	b.n	8005fd2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d002      	beq.n	8005fc8 <USB_GetDevSpeed+0x32>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b06      	cmp	r3, #6
 8005fc6:	d102      	bne.n	8005fce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	75fb      	strb	r3, [r7, #23]
 8005fcc:	e001      	b.n	8005fd2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005fce:	230f      	movs	r3, #15
 8005fd0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	371c      	adds	r7, #28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	785b      	ldrb	r3, [r3, #1]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d13a      	bne.n	8006072 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006002:	69da      	ldr	r2, [r3, #28]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	f003 030f 	and.w	r3, r3, #15
 800600c:	2101      	movs	r1, #1
 800600e:	fa01 f303 	lsl.w	r3, r1, r3
 8006012:	b29b      	uxth	r3, r3
 8006014:	68f9      	ldr	r1, [r7, #12]
 8006016:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800601a:	4313      	orrs	r3, r2
 800601c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d155      	bne.n	80060e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	791b      	ldrb	r3, [r3, #4]
 800604e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006050:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	059b      	lsls	r3, r3, #22
 8006056:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006058:	4313      	orrs	r3, r2
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	0151      	lsls	r1, r2, #5
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	440a      	add	r2, r1
 8006062:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800606a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	e036      	b.n	80060e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006078:	69da      	ldr	r2, [r3, #28]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	f003 030f 	and.w	r3, r3, #15
 8006082:	2101      	movs	r1, #1
 8006084:	fa01 f303 	lsl.w	r3, r1, r3
 8006088:	041b      	lsls	r3, r3, #16
 800608a:	68f9      	ldr	r1, [r7, #12]
 800608c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006090:	4313      	orrs	r3, r2
 8006092:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d11a      	bne.n	80060e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	791b      	ldrb	r3, [r3, #4]
 80060c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060c6:	430b      	orrs	r3, r1
 80060c8:	4313      	orrs	r3, r2
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	0151      	lsls	r1, r2, #5
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	440a      	add	r2, r1
 80060d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
	...

080060f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	785b      	ldrb	r3, [r3, #1]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d161      	bne.n	80061d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800611e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006122:	d11f      	bne.n	8006164 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	440a      	add	r2, r1
 800613a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800613e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006142:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	015a      	lsls	r2, r3, #5
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4413      	add	r3, r2
 800614c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	0151      	lsls	r1, r2, #5
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	440a      	add	r2, r1
 800615a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800615e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006162:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800616a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	f003 030f 	and.w	r3, r3, #15
 8006174:	2101      	movs	r1, #1
 8006176:	fa01 f303 	lsl.w	r3, r1, r3
 800617a:	b29b      	uxth	r3, r3
 800617c:	43db      	mvns	r3, r3
 800617e:	68f9      	ldr	r1, [r7, #12]
 8006180:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006184:	4013      	ands	r3, r2
 8006186:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	f003 030f 	and.w	r3, r3, #15
 8006198:	2101      	movs	r1, #1
 800619a:	fa01 f303 	lsl.w	r3, r1, r3
 800619e:	b29b      	uxth	r3, r3
 80061a0:	43db      	mvns	r3, r3
 80061a2:	68f9      	ldr	r1, [r7, #12]
 80061a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061a8:	4013      	ands	r3, r2
 80061aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	0159      	lsls	r1, r3, #5
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	440b      	add	r3, r1
 80061c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061c6:	4619      	mov	r1, r3
 80061c8:	4b35      	ldr	r3, [pc, #212]	@ (80062a0 <USB_DeactivateEndpoint+0x1b0>)
 80061ca:	4013      	ands	r3, r2
 80061cc:	600b      	str	r3, [r1, #0]
 80061ce:	e060      	b.n	8006292 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061e6:	d11f      	bne.n	8006228 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68ba      	ldr	r2, [r7, #8]
 80061f8:	0151      	lsls	r1, r2, #5
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	440a      	add	r2, r1
 80061fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006202:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006206:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4413      	add	r3, r2
 8006210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	0151      	lsls	r1, r2, #5
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	440a      	add	r2, r1
 800621e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006222:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006226:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800622e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	f003 030f 	and.w	r3, r3, #15
 8006238:	2101      	movs	r1, #1
 800623a:	fa01 f303 	lsl.w	r3, r1, r3
 800623e:	041b      	lsls	r3, r3, #16
 8006240:	43db      	mvns	r3, r3
 8006242:	68f9      	ldr	r1, [r7, #12]
 8006244:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006248:	4013      	ands	r3, r2
 800624a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006252:	69da      	ldr	r2, [r3, #28]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	f003 030f 	and.w	r3, r3, #15
 800625c:	2101      	movs	r1, #1
 800625e:	fa01 f303 	lsl.w	r3, r1, r3
 8006262:	041b      	lsls	r3, r3, #16
 8006264:	43db      	mvns	r3, r3
 8006266:	68f9      	ldr	r1, [r7, #12]
 8006268:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800626c:	4013      	ands	r3, r2
 800626e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	0159      	lsls	r1, r3, #5
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	440b      	add	r3, r1
 8006286:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800628a:	4619      	mov	r1, r3
 800628c:	4b05      	ldr	r3, [pc, #20]	@ (80062a4 <USB_DeactivateEndpoint+0x1b4>)
 800628e:	4013      	ands	r3, r2
 8006290:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	ec337800 	.word	0xec337800
 80062a4:	eff37800 	.word	0xeff37800

080062a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08a      	sub	sp, #40	@ 0x28
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	4613      	mov	r3, r2
 80062b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	785b      	ldrb	r3, [r3, #1]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	f040 817a 	bne.w	80065be <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d132      	bne.n	8006338 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	0151      	lsls	r1, r2, #5
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	440a      	add	r2, r1
 80062e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062ec:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80062f0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80062f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	0151      	lsls	r1, r2, #5
 8006308:	69fa      	ldr	r2, [r7, #28]
 800630a:	440a      	add	r2, r1
 800630c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006310:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006314:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	0151      	lsls	r1, r2, #5
 8006328:	69fa      	ldr	r2, [r7, #28]
 800632a:	440a      	add	r2, r1
 800632c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006330:	0cdb      	lsrs	r3, r3, #19
 8006332:	04db      	lsls	r3, r3, #19
 8006334:	6113      	str	r3, [r2, #16]
 8006336:	e092      	b.n	800645e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	0151      	lsls	r1, r2, #5
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	440a      	add	r2, r1
 800634e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006352:	0cdb      	lsrs	r3, r3, #19
 8006354:	04db      	lsls	r3, r3, #19
 8006356:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	69ba      	ldr	r2, [r7, #24]
 8006368:	0151      	lsls	r1, r2, #5
 800636a:	69fa      	ldr	r2, [r7, #28]
 800636c:	440a      	add	r2, r1
 800636e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006372:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006376:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800637a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d11a      	bne.n	80063b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	691a      	ldr	r2, [r3, #16]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	429a      	cmp	r2, r3
 800638c:	d903      	bls.n	8006396 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	689a      	ldr	r2, [r3, #8]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	0151      	lsls	r1, r2, #5
 80063a8:	69fa      	ldr	r2, [r7, #28]
 80063aa:	440a      	add	r2, r1
 80063ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063b4:	6113      	str	r3, [r2, #16]
 80063b6:	e01b      	b.n	80063f0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	6919      	ldr	r1, [r3, #16]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	440b      	add	r3, r1
 80063d0:	1e59      	subs	r1, r3, #1
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80063da:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80063dc:	4ba2      	ldr	r3, [pc, #648]	@ (8006668 <USB_EPStartXfer+0x3c0>)
 80063de:	400b      	ands	r3, r1
 80063e0:	69b9      	ldr	r1, [r7, #24]
 80063e2:	0148      	lsls	r0, r1, #5
 80063e4:	69f9      	ldr	r1, [r7, #28]
 80063e6:	4401      	add	r1, r0
 80063e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80063ec:	4313      	orrs	r3, r2
 80063ee:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063fc:	691a      	ldr	r2, [r3, #16]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006406:	69b9      	ldr	r1, [r7, #24]
 8006408:	0148      	lsls	r0, r1, #5
 800640a:	69f9      	ldr	r1, [r7, #28]
 800640c:	4401      	add	r1, r0
 800640e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006412:	4313      	orrs	r3, r2
 8006414:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	791b      	ldrb	r3, [r3, #4]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d11f      	bne.n	800645e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	0151      	lsls	r1, r2, #5
 8006430:	69fa      	ldr	r2, [r7, #28]
 8006432:	440a      	add	r2, r1
 8006434:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006438:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800643c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	0151      	lsls	r1, r2, #5
 8006450:	69fa      	ldr	r2, [r7, #28]
 8006452:	440a      	add	r2, r1
 8006454:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006458:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800645c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800645e:	79fb      	ldrb	r3, [r7, #7]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d14b      	bne.n	80064fc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	69db      	ldr	r3, [r3, #28]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d009      	beq.n	8006480 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006478:	461a      	mov	r2, r3
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	791b      	ldrb	r3, [r3, #4]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d128      	bne.n	80064da <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006494:	2b00      	cmp	r3, #0
 8006496:	d110      	bne.n	80064ba <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	0151      	lsls	r1, r2, #5
 80064aa:	69fa      	ldr	r2, [r7, #28]
 80064ac:	440a      	add	r2, r1
 80064ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	e00f      	b.n	80064da <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	0151      	lsls	r1, r2, #5
 80064cc:	69fa      	ldr	r2, [r7, #28]
 80064ce:	440a      	add	r2, r1
 80064d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	0151      	lsls	r1, r2, #5
 80064ec:	69fa      	ldr	r2, [r7, #28]
 80064ee:	440a      	add	r2, r1
 80064f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064f4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	e165      	b.n	80067c8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	0151      	lsls	r1, r2, #5
 800650e:	69fa      	ldr	r2, [r7, #28]
 8006510:	440a      	add	r2, r1
 8006512:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006516:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800651a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	791b      	ldrb	r3, [r3, #4]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d015      	beq.n	8006550 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 814d 	beq.w	80067c8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006534:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	f003 030f 	and.w	r3, r3, #15
 800653e:	2101      	movs	r1, #1
 8006540:	fa01 f303 	lsl.w	r3, r1, r3
 8006544:	69f9      	ldr	r1, [r7, #28]
 8006546:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800654a:	4313      	orrs	r3, r2
 800654c:	634b      	str	r3, [r1, #52]	@ 0x34
 800654e:	e13b      	b.n	80067c8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800655c:	2b00      	cmp	r3, #0
 800655e:	d110      	bne.n	8006582 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	0151      	lsls	r1, r2, #5
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	440a      	add	r2, r1
 8006576:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800657a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	e00f      	b.n	80065a2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	0151      	lsls	r1, r2, #5
 8006594:	69fa      	ldr	r2, [r7, #28]
 8006596:	440a      	add	r2, r1
 8006598:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800659c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	68d9      	ldr	r1, [r3, #12]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	781a      	ldrb	r2, [r3, #0]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	b298      	uxth	r0, r3
 80065b0:	79fb      	ldrb	r3, [r7, #7]
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	4603      	mov	r3, r0
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 f9b8 	bl	800692c <USB_WritePacket>
 80065bc:	e104      	b.n	80067c8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	0151      	lsls	r1, r2, #5
 80065d0:	69fa      	ldr	r2, [r7, #28]
 80065d2:	440a      	add	r2, r1
 80065d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065d8:	0cdb      	lsrs	r3, r3, #19
 80065da:	04db      	lsls	r3, r3, #19
 80065dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	0151      	lsls	r1, r2, #5
 80065f0:	69fa      	ldr	r2, [r7, #28]
 80065f2:	440a      	add	r2, r1
 80065f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065f8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80065fc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006600:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d131      	bne.n	800666c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d003      	beq.n	8006618 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	689a      	ldr	r2, [r3, #8]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	4413      	add	r3, r2
 8006628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800662c:	691a      	ldr	r2, [r3, #16]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006636:	69b9      	ldr	r1, [r7, #24]
 8006638:	0148      	lsls	r0, r1, #5
 800663a:	69f9      	ldr	r1, [r7, #28]
 800663c:	4401      	add	r1, r0
 800663e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006642:	4313      	orrs	r3, r2
 8006644:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	0151      	lsls	r1, r2, #5
 8006658:	69fa      	ldr	r2, [r7, #28]
 800665a:	440a      	add	r2, r1
 800665c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006660:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006664:	6113      	str	r3, [r2, #16]
 8006666:	e061      	b.n	800672c <USB_EPStartXfer+0x484>
 8006668:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d123      	bne.n	80066bc <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	4413      	add	r3, r2
 800667c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006680:	691a      	ldr	r2, [r3, #16]
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800668a:	69b9      	ldr	r1, [r7, #24]
 800668c:	0148      	lsls	r0, r1, #5
 800668e:	69f9      	ldr	r1, [r7, #28]
 8006690:	4401      	add	r1, r0
 8006692:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006696:	4313      	orrs	r3, r2
 8006698:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	0151      	lsls	r1, r2, #5
 80066ac:	69fa      	ldr	r2, [r7, #28]
 80066ae:	440a      	add	r2, r1
 80066b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80066b8:	6113      	str	r3, [r2, #16]
 80066ba:	e037      	b.n	800672c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	691a      	ldr	r2, [r3, #16]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	4413      	add	r3, r2
 80066c6:	1e5a      	subs	r2, r3, #1
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	8afa      	ldrh	r2, [r7, #22]
 80066d8:	fb03 f202 	mul.w	r2, r3, r2
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ec:	691a      	ldr	r2, [r3, #16]
 80066ee:	8afb      	ldrh	r3, [r7, #22]
 80066f0:	04d9      	lsls	r1, r3, #19
 80066f2:	4b38      	ldr	r3, [pc, #224]	@ (80067d4 <USB_EPStartXfer+0x52c>)
 80066f4:	400b      	ands	r3, r1
 80066f6:	69b9      	ldr	r1, [r7, #24]
 80066f8:	0148      	lsls	r0, r1, #5
 80066fa:	69f9      	ldr	r1, [r7, #28]
 80066fc:	4401      	add	r1, r0
 80066fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006702:	4313      	orrs	r3, r2
 8006704:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006712:	691a      	ldr	r2, [r3, #16]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800671c:	69b9      	ldr	r1, [r7, #24]
 800671e:	0148      	lsls	r0, r1, #5
 8006720:	69f9      	ldr	r1, [r7, #28]
 8006722:	4401      	add	r1, r0
 8006724:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006728:	4313      	orrs	r3, r2
 800672a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800672c:	79fb      	ldrb	r3, [r7, #7]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d10d      	bne.n	800674e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d009      	beq.n	800674e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	68d9      	ldr	r1, [r3, #12]
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800674a:	460a      	mov	r2, r1
 800674c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	791b      	ldrb	r3, [r3, #4]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d128      	bne.n	80067a8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006762:	2b00      	cmp	r3, #0
 8006764:	d110      	bne.n	8006788 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	0151      	lsls	r1, r2, #5
 8006778:	69fa      	ldr	r2, [r7, #28]
 800677a:	440a      	add	r2, r1
 800677c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006780:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006784:	6013      	str	r3, [r2, #0]
 8006786:	e00f      	b.n	80067a8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	69ba      	ldr	r2, [r7, #24]
 8006798:	0151      	lsls	r1, r2, #5
 800679a:	69fa      	ldr	r2, [r7, #28]
 800679c:	440a      	add	r2, r1
 800679e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69ba      	ldr	r2, [r7, #24]
 80067b8:	0151      	lsls	r1, r2, #5
 80067ba:	69fa      	ldr	r2, [r7, #28]
 80067bc:	440a      	add	r2, r1
 80067be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80067c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3720      	adds	r7, #32
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	1ff80000 	.word	0x1ff80000

080067d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067e2:	2300      	movs	r3, #0
 80067e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	785b      	ldrb	r3, [r3, #1]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d14a      	bne.n	800688c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800680a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800680e:	f040 8086 	bne.w	800691e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	7812      	ldrb	r2, [r2, #0]
 8006826:	0151      	lsls	r1, r2, #5
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	440a      	add	r2, r1
 800682c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006830:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006834:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	7812      	ldrb	r2, [r2, #0]
 800684a:	0151      	lsls	r1, r2, #5
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	440a      	add	r2, r1
 8006850:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006854:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006858:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	3301      	adds	r3, #1
 800685e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006866:	4293      	cmp	r3, r2
 8006868:	d902      	bls.n	8006870 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	75fb      	strb	r3, [r7, #23]
          break;
 800686e:	e056      	b.n	800691e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006884:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006888:	d0e7      	beq.n	800685a <USB_EPStopXfer+0x82>
 800688a:	e048      	b.n	800691e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	4413      	add	r3, r2
 8006896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068a4:	d13b      	bne.n	800691e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	7812      	ldrb	r2, [r2, #0]
 80068ba:	0151      	lsls	r1, r2, #5
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	440a      	add	r2, r1
 80068c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80068c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	7812      	ldrb	r2, [r2, #0]
 80068de:	0151      	lsls	r1, r2, #5
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	440a      	add	r2, r1
 80068e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3301      	adds	r3, #1
 80068f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d902      	bls.n	8006904 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	75fb      	strb	r3, [r7, #23]
          break;
 8006902:	e00c      	b.n	800691e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	4413      	add	r3, r2
 800690e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006918:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800691c:	d0e7      	beq.n	80068ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800691e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006920:	4618      	mov	r0, r3
 8006922:	371c      	adds	r7, #28
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800692c:	b480      	push	{r7}
 800692e:	b089      	sub	sp, #36	@ 0x24
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	4611      	mov	r1, r2
 8006938:	461a      	mov	r2, r3
 800693a:	460b      	mov	r3, r1
 800693c:	71fb      	strb	r3, [r7, #7]
 800693e:	4613      	mov	r3, r2
 8006940:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800694a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800694e:	2b00      	cmp	r3, #0
 8006950:	d123      	bne.n	800699a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006952:	88bb      	ldrh	r3, [r7, #4]
 8006954:	3303      	adds	r3, #3
 8006956:	089b      	lsrs	r3, r3, #2
 8006958:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800695a:	2300      	movs	r3, #0
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	e018      	b.n	8006992 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006960:	79fb      	ldrb	r3, [r7, #7]
 8006962:	031a      	lsls	r2, r3, #12
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	4413      	add	r3, r2
 8006968:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800696c:	461a      	mov	r2, r3
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	3301      	adds	r3, #1
 8006978:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	3301      	adds	r3, #1
 800697e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	3301      	adds	r3, #1
 8006984:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	3301      	adds	r3, #1
 800698a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	3301      	adds	r3, #1
 8006990:	61bb      	str	r3, [r7, #24]
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	429a      	cmp	r2, r3
 8006998:	d3e2      	bcc.n	8006960 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3724      	adds	r7, #36	@ 0x24
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b08b      	sub	sp, #44	@ 0x2c
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	4613      	mov	r3, r2
 80069b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80069be:	88fb      	ldrh	r3, [r7, #6]
 80069c0:	089b      	lsrs	r3, r3, #2
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80069c6:	88fb      	ldrh	r3, [r7, #6]
 80069c8:	f003 0303 	and.w	r3, r3, #3
 80069cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80069ce:	2300      	movs	r3, #0
 80069d0:	623b      	str	r3, [r7, #32]
 80069d2:	e014      	b.n	80069fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069de:	601a      	str	r2, [r3, #0]
    pDest++;
 80069e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e2:	3301      	adds	r3, #1
 80069e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80069e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e8:	3301      	adds	r3, #1
 80069ea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80069ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ee:	3301      	adds	r3, #1
 80069f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80069f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f4:	3301      	adds	r3, #1
 80069f6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	3301      	adds	r3, #1
 80069fc:	623b      	str	r3, [r7, #32]
 80069fe:	6a3a      	ldr	r2, [r7, #32]
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d3e6      	bcc.n	80069d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a06:	8bfb      	ldrh	r3, [r7, #30]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d01e      	beq.n	8006a4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006a16:	461a      	mov	r2, r3
 8006a18:	f107 0310 	add.w	r3, r7, #16
 8006a1c:	6812      	ldr	r2, [r2, #0]
 8006a1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	00db      	lsls	r3, r3, #3
 8006a28:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a30:	701a      	strb	r2, [r3, #0]
      i++;
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	3301      	adds	r3, #1
 8006a36:	623b      	str	r3, [r7, #32]
      pDest++;
 8006a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006a3e:	8bfb      	ldrh	r3, [r7, #30]
 8006a40:	3b01      	subs	r3, #1
 8006a42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006a44:	8bfb      	ldrh	r3, [r7, #30]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1ea      	bne.n	8006a20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	372c      	adds	r7, #44	@ 0x2c
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	785b      	ldrb	r3, [r3, #1]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d12c      	bne.n	8006ace <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	db12      	blt.n	8006aac <USB_EPSetStall+0x54>
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00f      	beq.n	8006aac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	0151      	lsls	r1, r2, #5
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	440a      	add	r2, r1
 8006aa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aa6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006aaa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	0151      	lsls	r1, r2, #5
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	440a      	add	r2, r1
 8006ac2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ac6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	e02b      	b.n	8006b26 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	db12      	blt.n	8006b06 <USB_EPSetStall+0xae>
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00f      	beq.n	8006b06 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	015a      	lsls	r2, r3, #5
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4413      	add	r3, r2
 8006aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	0151      	lsls	r1, r2, #5
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	440a      	add	r2, r1
 8006afc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b00:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006b04:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	0151      	lsls	r1, r2, #5
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	440a      	add	r2, r1
 8006b1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006b24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	785b      	ldrb	r3, [r3, #1]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d128      	bne.n	8006ba2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	015a      	lsls	r2, r3, #5
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	0151      	lsls	r1, r2, #5
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	440a      	add	r2, r1
 8006b66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006b6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	791b      	ldrb	r3, [r3, #4]
 8006b74:	2b03      	cmp	r3, #3
 8006b76:	d003      	beq.n	8006b80 <USB_EPClearStall+0x4c>
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	791b      	ldrb	r3, [r3, #4]
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d138      	bne.n	8006bf2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	0151      	lsls	r1, r2, #5
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	440a      	add	r2, r1
 8006b96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	e027      	b.n	8006bf2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	0151      	lsls	r1, r2, #5
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	440a      	add	r2, r1
 8006bb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bbc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006bc0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	791b      	ldrb	r3, [r3, #4]
 8006bc6:	2b03      	cmp	r3, #3
 8006bc8:	d003      	beq.n	8006bd2 <USB_EPClearStall+0x9e>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	791b      	ldrb	r3, [r3, #4]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d10f      	bne.n	8006bf2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	0151      	lsls	r1, r2, #5
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	440a      	add	r2, r1
 8006be8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bf0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3714      	adds	r7, #20
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	460b      	mov	r3, r1
 8006c0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c1e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006c22:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	011b      	lsls	r3, r3, #4
 8006c30:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006c34:	68f9      	ldr	r1, [r7, #12]
 8006c36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006c66:	f023 0303 	bic.w	r3, r3, #3
 8006c6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c7a:	f023 0302 	bic.w	r3, r3, #2
 8006c7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b085      	sub	sp, #20
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006ca8:	f023 0303 	bic.w	r3, r3, #3
 8006cac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cbc:	f043 0302 	orr.w	r3, r3, #2
 8006cc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	695b      	ldr	r3, [r3, #20]
 8006cdc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
}
 8006cea:	4618      	mov	r0, r3
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b085      	sub	sp, #20
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d12:	69db      	ldr	r3, [r3, #28]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	4013      	ands	r3, r2
 8006d18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	0c1b      	lsrs	r3, r3, #16
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b085      	sub	sp, #20
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d3c:	699b      	ldr	r3, [r3, #24]
 8006d3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	b29b      	uxth	r3, r3
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b085      	sub	sp, #20
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	460b      	mov	r3, r1
 8006d68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006d6e:	78fb      	ldrb	r3, [r7, #3]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	4013      	ands	r3, r2
 8006d8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b087      	sub	sp, #28
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	460b      	mov	r3, r1
 8006da4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006db0:	691b      	ldr	r3, [r3, #16]
 8006db2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dbc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006dbe:	78fb      	ldrb	r3, [r7, #3]
 8006dc0:	f003 030f 	and.w	r3, r3, #15
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dca:	01db      	lsls	r3, r3, #7
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006dd4:	78fb      	ldrb	r3, [r7, #3]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	693a      	ldr	r2, [r7, #16]
 8006de4:	4013      	ands	r3, r2
 8006de6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006de8:	68bb      	ldr	r3, [r7, #8]
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	371c      	adds	r7, #28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b083      	sub	sp, #12
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	f003 0301 	and.w	r3, r3, #1
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	370c      	adds	r7, #12
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b085      	sub	sp, #20
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	68fa      	ldr	r2, [r7, #12]
 8006e28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e2c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006e30:	f023 0307 	bic.w	r3, r3, #7
 8006e34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b087      	sub	sp, #28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	460b      	mov	r3, r1
 8006e62:	607a      	str	r2, [r7, #4]
 8006e64:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	333c      	adds	r3, #60	@ 0x3c
 8006e6e:	3304      	adds	r3, #4
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	4a26      	ldr	r2, [pc, #152]	@ (8006f10 <USB_EP0_OutStart+0xb8>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d90a      	bls.n	8006e92 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e8c:	d101      	bne.n	8006e92 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	e037      	b.n	8006f02 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e98:	461a      	mov	r2, r3
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006eac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006eb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	697a      	ldr	r2, [r7, #20]
 8006ebc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ec0:	f043 0318 	orr.w	r3, r3, #24
 8006ec4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ed4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006ed8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006eda:	7afb      	ldrb	r3, [r7, #11]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d10f      	bne.n	8006f00 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006efa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006efe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	371c      	adds	r7, #28
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	4f54300a 	.word	0x4f54300a

08006f14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3301      	adds	r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f2c:	d901      	bls.n	8006f32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e01b      	b.n	8006f6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	daf2      	bge.n	8006f20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	f043 0201 	orr.w	r2, r3, #1
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f56:	d901      	bls.n	8006f5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e006      	b.n	8006f6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d0f0      	beq.n	8006f4a <USB_CoreReset+0x36>

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
	...

08006f78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	460b      	mov	r3, r1
 8006f82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006f84:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006f88:	f002 fc7e 	bl	8009888 <USBD_static_malloc>
 8006f8c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d109      	bne.n	8006fa8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	32b0      	adds	r2, #176	@ 0xb0
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	e0d4      	b.n	8007152 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006fa8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006fac:	2100      	movs	r1, #0
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f002 fe6f 	bl	8009c92 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	32b0      	adds	r2, #176	@ 0xb0
 8006fbe:	68f9      	ldr	r1, [r7, #12]
 8006fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	32b0      	adds	r2, #176	@ 0xb0
 8006fce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	7c1b      	ldrb	r3, [r3, #16]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d138      	bne.n	8007052 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006fe0:	4b5e      	ldr	r3, [pc, #376]	@ (800715c <USBD_CDC_Init+0x1e4>)
 8006fe2:	7819      	ldrb	r1, [r3, #0]
 8006fe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006fe8:	2202      	movs	r2, #2
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f002 fb29 	bl	8009642 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006ff0:	4b5a      	ldr	r3, [pc, #360]	@ (800715c <USBD_CDC_Init+0x1e4>)
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	f003 020f 	and.w	r2, r3, #15
 8006ff8:	6879      	ldr	r1, [r7, #4]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	440b      	add	r3, r1
 8007004:	3324      	adds	r3, #36	@ 0x24
 8007006:	2201      	movs	r2, #1
 8007008:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800700a:	4b55      	ldr	r3, [pc, #340]	@ (8007160 <USBD_CDC_Init+0x1e8>)
 800700c:	7819      	ldrb	r1, [r3, #0]
 800700e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007012:	2202      	movs	r2, #2
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f002 fb14 	bl	8009642 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800701a:	4b51      	ldr	r3, [pc, #324]	@ (8007160 <USBD_CDC_Init+0x1e8>)
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	f003 020f 	and.w	r2, r3, #15
 8007022:	6879      	ldr	r1, [r7, #4]
 8007024:	4613      	mov	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	440b      	add	r3, r1
 800702e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007032:	2201      	movs	r2, #1
 8007034:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007036:	4b4b      	ldr	r3, [pc, #300]	@ (8007164 <USBD_CDC_Init+0x1ec>)
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	f003 020f 	and.w	r2, r3, #15
 800703e:	6879      	ldr	r1, [r7, #4]
 8007040:	4613      	mov	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	440b      	add	r3, r1
 800704a:	3326      	adds	r3, #38	@ 0x26
 800704c:	2210      	movs	r2, #16
 800704e:	801a      	strh	r2, [r3, #0]
 8007050:	e035      	b.n	80070be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007052:	4b42      	ldr	r3, [pc, #264]	@ (800715c <USBD_CDC_Init+0x1e4>)
 8007054:	7819      	ldrb	r1, [r3, #0]
 8007056:	2340      	movs	r3, #64	@ 0x40
 8007058:	2202      	movs	r2, #2
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f002 faf1 	bl	8009642 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007060:	4b3e      	ldr	r3, [pc, #248]	@ (800715c <USBD_CDC_Init+0x1e4>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	f003 020f 	and.w	r2, r3, #15
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	4613      	mov	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	440b      	add	r3, r1
 8007074:	3324      	adds	r3, #36	@ 0x24
 8007076:	2201      	movs	r2, #1
 8007078:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800707a:	4b39      	ldr	r3, [pc, #228]	@ (8007160 <USBD_CDC_Init+0x1e8>)
 800707c:	7819      	ldrb	r1, [r3, #0]
 800707e:	2340      	movs	r3, #64	@ 0x40
 8007080:	2202      	movs	r2, #2
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f002 fadd 	bl	8009642 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007088:	4b35      	ldr	r3, [pc, #212]	@ (8007160 <USBD_CDC_Init+0x1e8>)
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	f003 020f 	and.w	r2, r3, #15
 8007090:	6879      	ldr	r1, [r7, #4]
 8007092:	4613      	mov	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	440b      	add	r3, r1
 800709c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80070a0:	2201      	movs	r2, #1
 80070a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80070a4:	4b2f      	ldr	r3, [pc, #188]	@ (8007164 <USBD_CDC_Init+0x1ec>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	f003 020f 	and.w	r2, r3, #15
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	4613      	mov	r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4413      	add	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	440b      	add	r3, r1
 80070b8:	3326      	adds	r3, #38	@ 0x26
 80070ba:	2210      	movs	r2, #16
 80070bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80070be:	4b29      	ldr	r3, [pc, #164]	@ (8007164 <USBD_CDC_Init+0x1ec>)
 80070c0:	7819      	ldrb	r1, [r3, #0]
 80070c2:	2308      	movs	r3, #8
 80070c4:	2203      	movs	r2, #3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f002 fabb 	bl	8009642 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80070cc:	4b25      	ldr	r3, [pc, #148]	@ (8007164 <USBD_CDC_Init+0x1ec>)
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	f003 020f 	and.w	r2, r3, #15
 80070d4:	6879      	ldr	r1, [r7, #4]
 80070d6:	4613      	mov	r3, r2
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	440b      	add	r3, r1
 80070e0:	3324      	adds	r3, #36	@ 0x24
 80070e2:	2201      	movs	r2, #1
 80070e4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	33b0      	adds	r3, #176	@ 0xb0
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800711c:	2302      	movs	r3, #2
 800711e:	e018      	b.n	8007152 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	7c1b      	ldrb	r3, [r3, #16]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10a      	bne.n	800713e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007128:	4b0d      	ldr	r3, [pc, #52]	@ (8007160 <USBD_CDC_Init+0x1e8>)
 800712a:	7819      	ldrb	r1, [r3, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007132:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f002 fb72 	bl	8009820 <USBD_LL_PrepareReceive>
 800713c:	e008      	b.n	8007150 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800713e:	4b08      	ldr	r3, [pc, #32]	@ (8007160 <USBD_CDC_Init+0x1e8>)
 8007140:	7819      	ldrb	r1, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007148:	2340      	movs	r3, #64	@ 0x40
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f002 fb68 	bl	8009820 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	200000bf 	.word	0x200000bf
 8007160:	200000c0 	.word	0x200000c0
 8007164:	200000c1 	.word	0x200000c1

08007168 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	460b      	mov	r3, r1
 8007172:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007174:	4b3a      	ldr	r3, [pc, #232]	@ (8007260 <USBD_CDC_DeInit+0xf8>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	4619      	mov	r1, r3
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f002 fa87 	bl	800968e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007180:	4b37      	ldr	r3, [pc, #220]	@ (8007260 <USBD_CDC_DeInit+0xf8>)
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	f003 020f 	and.w	r2, r3, #15
 8007188:	6879      	ldr	r1, [r7, #4]
 800718a:	4613      	mov	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	440b      	add	r3, r1
 8007194:	3324      	adds	r3, #36	@ 0x24
 8007196:	2200      	movs	r2, #0
 8007198:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800719a:	4b32      	ldr	r3, [pc, #200]	@ (8007264 <USBD_CDC_DeInit+0xfc>)
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	4619      	mov	r1, r3
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f002 fa74 	bl	800968e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80071a6:	4b2f      	ldr	r3, [pc, #188]	@ (8007264 <USBD_CDC_DeInit+0xfc>)
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	f003 020f 	and.w	r2, r3, #15
 80071ae:	6879      	ldr	r1, [r7, #4]
 80071b0:	4613      	mov	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	440b      	add	r3, r1
 80071ba:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80071be:	2200      	movs	r2, #0
 80071c0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80071c2:	4b29      	ldr	r3, [pc, #164]	@ (8007268 <USBD_CDC_DeInit+0x100>)
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f002 fa60 	bl	800968e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80071ce:	4b26      	ldr	r3, [pc, #152]	@ (8007268 <USBD_CDC_DeInit+0x100>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	f003 020f 	and.w	r2, r3, #15
 80071d6:	6879      	ldr	r1, [r7, #4]
 80071d8:	4613      	mov	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	440b      	add	r3, r1
 80071e2:	3324      	adds	r3, #36	@ 0x24
 80071e4:	2200      	movs	r2, #0
 80071e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80071e8:	4b1f      	ldr	r3, [pc, #124]	@ (8007268 <USBD_CDC_DeInit+0x100>)
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	f003 020f 	and.w	r2, r3, #15
 80071f0:	6879      	ldr	r1, [r7, #4]
 80071f2:	4613      	mov	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	440b      	add	r3, r1
 80071fc:	3326      	adds	r3, #38	@ 0x26
 80071fe:	2200      	movs	r2, #0
 8007200:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	32b0      	adds	r2, #176	@ 0xb0
 800720c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d01f      	beq.n	8007254 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	33b0      	adds	r3, #176	@ 0xb0
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	4413      	add	r3, r2
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	32b0      	adds	r2, #176	@ 0xb0
 8007232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007236:	4618      	mov	r0, r3
 8007238:	f002 fb34 	bl	80098a4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	32b0      	adds	r2, #176	@ 0xb0
 8007246:	2100      	movs	r1, #0
 8007248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	200000bf 	.word	0x200000bf
 8007264:	200000c0 	.word	0x200000c0
 8007268:	200000c1 	.word	0x200000c1

0800726c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b086      	sub	sp, #24
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	32b0      	adds	r2, #176	@ 0xb0
 8007280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007284:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007298:	2303      	movs	r3, #3
 800729a:	e0bf      	b.n	800741c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d050      	beq.n	800734a <USBD_CDC_Setup+0xde>
 80072a8:	2b20      	cmp	r3, #32
 80072aa:	f040 80af 	bne.w	800740c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	88db      	ldrh	r3, [r3, #6]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d03a      	beq.n	800732c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	b25b      	sxtb	r3, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	da1b      	bge.n	80072f8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	33b0      	adds	r3, #176	@ 0xb0
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80072d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	88d2      	ldrh	r2, [r2, #6]
 80072dc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	88db      	ldrh	r3, [r3, #6]
 80072e2:	2b07      	cmp	r3, #7
 80072e4:	bf28      	it	cs
 80072e6:	2307      	movcs	r3, #7
 80072e8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	89fa      	ldrh	r2, [r7, #14]
 80072ee:	4619      	mov	r1, r3
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f001 fd87 	bl	8008e04 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80072f6:	e090      	b.n	800741a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	785a      	ldrb	r2, [r3, #1]
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	88db      	ldrh	r3, [r3, #6]
 8007306:	2b3f      	cmp	r3, #63	@ 0x3f
 8007308:	d803      	bhi.n	8007312 <USBD_CDC_Setup+0xa6>
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	88db      	ldrh	r3, [r3, #6]
 800730e:	b2da      	uxtb	r2, r3
 8007310:	e000      	b.n	8007314 <USBD_CDC_Setup+0xa8>
 8007312:	2240      	movs	r2, #64	@ 0x40
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800731a:	6939      	ldr	r1, [r7, #16]
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007322:	461a      	mov	r2, r3
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f001 fd99 	bl	8008e5c <USBD_CtlPrepareRx>
      break;
 800732a:	e076      	b.n	800741a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	33b0      	adds	r3, #176	@ 0xb0
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	4413      	add	r3, r2
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	7850      	ldrb	r0, [r2, #1]
 8007342:	2200      	movs	r2, #0
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	4798      	blx	r3
      break;
 8007348:	e067      	b.n	800741a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	785b      	ldrb	r3, [r3, #1]
 800734e:	2b0b      	cmp	r3, #11
 8007350:	d851      	bhi.n	80073f6 <USBD_CDC_Setup+0x18a>
 8007352:	a201      	add	r2, pc, #4	@ (adr r2, 8007358 <USBD_CDC_Setup+0xec>)
 8007354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007358:	08007389 	.word	0x08007389
 800735c:	08007405 	.word	0x08007405
 8007360:	080073f7 	.word	0x080073f7
 8007364:	080073f7 	.word	0x080073f7
 8007368:	080073f7 	.word	0x080073f7
 800736c:	080073f7 	.word	0x080073f7
 8007370:	080073f7 	.word	0x080073f7
 8007374:	080073f7 	.word	0x080073f7
 8007378:	080073f7 	.word	0x080073f7
 800737c:	080073f7 	.word	0x080073f7
 8007380:	080073b3 	.word	0x080073b3
 8007384:	080073dd 	.word	0x080073dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b03      	cmp	r3, #3
 8007392:	d107      	bne.n	80073a4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007394:	f107 030a 	add.w	r3, r7, #10
 8007398:	2202      	movs	r2, #2
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f001 fd31 	bl	8008e04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073a2:	e032      	b.n	800740a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f001 fcbb 	bl	8008d22 <USBD_CtlError>
            ret = USBD_FAIL;
 80073ac:	2303      	movs	r3, #3
 80073ae:	75fb      	strb	r3, [r7, #23]
          break;
 80073b0:	e02b      	b.n	800740a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d107      	bne.n	80073ce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80073be:	f107 030d 	add.w	r3, r7, #13
 80073c2:	2201      	movs	r2, #1
 80073c4:	4619      	mov	r1, r3
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f001 fd1c 	bl	8008e04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80073cc:	e01d      	b.n	800740a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f001 fca6 	bl	8008d22 <USBD_CtlError>
            ret = USBD_FAIL;
 80073d6:	2303      	movs	r3, #3
 80073d8:	75fb      	strb	r3, [r7, #23]
          break;
 80073da:	e016      	b.n	800740a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	2b03      	cmp	r3, #3
 80073e6:	d00f      	beq.n	8007408 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f001 fc99 	bl	8008d22 <USBD_CtlError>
            ret = USBD_FAIL;
 80073f0:	2303      	movs	r3, #3
 80073f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80073f4:	e008      	b.n	8007408 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f001 fc92 	bl	8008d22 <USBD_CtlError>
          ret = USBD_FAIL;
 80073fe:	2303      	movs	r3, #3
 8007400:	75fb      	strb	r3, [r7, #23]
          break;
 8007402:	e002      	b.n	800740a <USBD_CDC_Setup+0x19e>
          break;
 8007404:	bf00      	nop
 8007406:	e008      	b.n	800741a <USBD_CDC_Setup+0x1ae>
          break;
 8007408:	bf00      	nop
      }
      break;
 800740a:	e006      	b.n	800741a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800740c:	6839      	ldr	r1, [r7, #0]
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f001 fc87 	bl	8008d22 <USBD_CtlError>
      ret = USBD_FAIL;
 8007414:	2303      	movs	r3, #3
 8007416:	75fb      	strb	r3, [r7, #23]
      break;
 8007418:	bf00      	nop
  }

  return (uint8_t)ret;
 800741a:	7dfb      	ldrb	r3, [r7, #23]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	460b      	mov	r3, r1
 800742e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007436:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	32b0      	adds	r2, #176	@ 0xb0
 8007442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d101      	bne.n	800744e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800744a:	2303      	movs	r3, #3
 800744c:	e065      	b.n	800751a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	32b0      	adds	r2, #176	@ 0xb0
 8007458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800745c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800745e:	78fb      	ldrb	r3, [r7, #3]
 8007460:	f003 020f 	and.w	r2, r3, #15
 8007464:	6879      	ldr	r1, [r7, #4]
 8007466:	4613      	mov	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	440b      	add	r3, r1
 8007470:	3318      	adds	r3, #24
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d02f      	beq.n	80074d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	f003 020f 	and.w	r2, r3, #15
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	4613      	mov	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	440b      	add	r3, r1
 800748a:	3318      	adds	r3, #24
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	78fb      	ldrb	r3, [r7, #3]
 8007490:	f003 010f 	and.w	r1, r3, #15
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	460b      	mov	r3, r1
 8007498:	00db      	lsls	r3, r3, #3
 800749a:	440b      	add	r3, r1
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4403      	add	r3, r0
 80074a0:	331c      	adds	r3, #28
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80074a8:	fb01 f303 	mul.w	r3, r1, r3
 80074ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d112      	bne.n	80074d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80074b2:	78fb      	ldrb	r3, [r7, #3]
 80074b4:	f003 020f 	and.w	r2, r3, #15
 80074b8:	6879      	ldr	r1, [r7, #4]
 80074ba:	4613      	mov	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	440b      	add	r3, r1
 80074c4:	3318      	adds	r3, #24
 80074c6:	2200      	movs	r2, #0
 80074c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80074ca:	78f9      	ldrb	r1, [r7, #3]
 80074cc:	2300      	movs	r3, #0
 80074ce:	2200      	movs	r2, #0
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f002 f984 	bl	80097de <USBD_LL_Transmit>
 80074d6:	e01f      	b.n	8007518 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	2200      	movs	r2, #0
 80074dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	33b0      	adds	r3, #176	@ 0xb0
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d010      	beq.n	8007518 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	33b0      	adds	r3, #176	@ 0xb0
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007514:	78fa      	ldrb	r2, [r7, #3]
 8007516:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	460b      	mov	r3, r1
 800752c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	32b0      	adds	r2, #176	@ 0xb0
 8007538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800753c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	32b0      	adds	r2, #176	@ 0xb0
 8007548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d101      	bne.n	8007554 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007550:	2303      	movs	r3, #3
 8007552:	e01a      	b.n	800758a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007554:	78fb      	ldrb	r3, [r7, #3]
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f002 f982 	bl	8009862 <USBD_LL_GetRxDataSize>
 800755e:	4602      	mov	r2, r0
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	33b0      	adds	r3, #176	@ 0xb0
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	4413      	add	r3, r2
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007584:	4611      	mov	r1, r2
 8007586:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	32b0      	adds	r2, #176	@ 0xb0
 80075a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e024      	b.n	80075fe <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	33b0      	adds	r3, #176	@ 0xb0
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	4413      	add	r3, r2
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d019      	beq.n	80075fc <USBD_CDC_EP0_RxReady+0x6a>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80075ce:	2bff      	cmp	r3, #255	@ 0xff
 80075d0:	d014      	beq.n	80075fc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	33b0      	adds	r3, #176	@ 0xb0
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80075ea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80075f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	22ff      	movs	r2, #255	@ 0xff
 80075f8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
	...

08007608 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007610:	2182      	movs	r1, #130	@ 0x82
 8007612:	4818      	ldr	r0, [pc, #96]	@ (8007674 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007614:	f000 fd4f 	bl	80080b6 <USBD_GetEpDesc>
 8007618:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800761a:	2101      	movs	r1, #1
 800761c:	4815      	ldr	r0, [pc, #84]	@ (8007674 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800761e:	f000 fd4a 	bl	80080b6 <USBD_GetEpDesc>
 8007622:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007624:	2181      	movs	r1, #129	@ 0x81
 8007626:	4813      	ldr	r0, [pc, #76]	@ (8007674 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007628:	f000 fd45 	bl	80080b6 <USBD_GetEpDesc>
 800762c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d002      	beq.n	800763a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	2210      	movs	r2, #16
 8007638:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d006      	beq.n	800764e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	2200      	movs	r2, #0
 8007644:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007648:	711a      	strb	r2, [r3, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d006      	beq.n	8007662 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800765c:	711a      	strb	r2, [r3, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2243      	movs	r2, #67	@ 0x43
 8007666:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007668:	4b02      	ldr	r3, [pc, #8]	@ (8007674 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800766a:	4618      	mov	r0, r3
 800766c:	3718      	adds	r7, #24
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	2000007c 	.word	0x2000007c

08007678 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007680:	2182      	movs	r1, #130	@ 0x82
 8007682:	4818      	ldr	r0, [pc, #96]	@ (80076e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007684:	f000 fd17 	bl	80080b6 <USBD_GetEpDesc>
 8007688:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800768a:	2101      	movs	r1, #1
 800768c:	4815      	ldr	r0, [pc, #84]	@ (80076e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800768e:	f000 fd12 	bl	80080b6 <USBD_GetEpDesc>
 8007692:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007694:	2181      	movs	r1, #129	@ 0x81
 8007696:	4813      	ldr	r0, [pc, #76]	@ (80076e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007698:	f000 fd0d 	bl	80080b6 <USBD_GetEpDesc>
 800769c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	2210      	movs	r2, #16
 80076a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d006      	beq.n	80076be <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	2200      	movs	r2, #0
 80076b4:	711a      	strb	r2, [r3, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f042 0202 	orr.w	r2, r2, #2
 80076bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d006      	beq.n	80076d2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2200      	movs	r2, #0
 80076c8:	711a      	strb	r2, [r3, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f042 0202 	orr.w	r2, r2, #2
 80076d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2243      	movs	r2, #67	@ 0x43
 80076d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80076d8:	4b02      	ldr	r3, [pc, #8]	@ (80076e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3718      	adds	r7, #24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	2000007c 	.word	0x2000007c

080076e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80076f0:	2182      	movs	r1, #130	@ 0x82
 80076f2:	4818      	ldr	r0, [pc, #96]	@ (8007754 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80076f4:	f000 fcdf 	bl	80080b6 <USBD_GetEpDesc>
 80076f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80076fa:	2101      	movs	r1, #1
 80076fc:	4815      	ldr	r0, [pc, #84]	@ (8007754 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80076fe:	f000 fcda 	bl	80080b6 <USBD_GetEpDesc>
 8007702:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007704:	2181      	movs	r1, #129	@ 0x81
 8007706:	4813      	ldr	r0, [pc, #76]	@ (8007754 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007708:	f000 fcd5 	bl	80080b6 <USBD_GetEpDesc>
 800770c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d002      	beq.n	800771a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	2210      	movs	r2, #16
 8007718:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d006      	beq.n	800772e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	2200      	movs	r2, #0
 8007724:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007728:	711a      	strb	r2, [r3, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d006      	beq.n	8007742 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800773c:	711a      	strb	r2, [r3, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2243      	movs	r2, #67	@ 0x43
 8007746:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007748:	4b02      	ldr	r3, [pc, #8]	@ (8007754 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800774a:	4618      	mov	r0, r3
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	2000007c 	.word	0x2000007c

08007758 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	220a      	movs	r2, #10
 8007764:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007766:	4b03      	ldr	r3, [pc, #12]	@ (8007774 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007768:	4618      	mov	r0, r3
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr
 8007774:	20000038 	.word	0x20000038

08007778 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007788:	2303      	movs	r3, #3
 800778a:	e009      	b.n	80077a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	33b0      	adds	r3, #176	@ 0xb0
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b087      	sub	sp, #28
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	32b0      	adds	r2, #176	@ 0xb0
 80077c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d101      	bne.n	80077d2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e008      	b.n	80077e4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	371c      	adds	r7, #28
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	32b0      	adds	r2, #176	@ 0xb0
 8007804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007808:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007810:	2303      	movs	r3, #3
 8007812:	e004      	b.n	800781e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
	...

0800782c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	32b0      	adds	r2, #176	@ 0xb0
 800783e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007842:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007844:	2301      	movs	r3, #1
 8007846:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800784e:	2303      	movs	r3, #3
 8007850:	e025      	b.n	800789e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007858:	2b00      	cmp	r3, #0
 800785a:	d11f      	bne.n	800789c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2201      	movs	r2, #1
 8007860:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007864:	4b10      	ldr	r3, [pc, #64]	@ (80078a8 <USBD_CDC_TransmitPacket+0x7c>)
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	f003 020f 	and.w	r2, r3, #15
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	4613      	mov	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	4403      	add	r3, r0
 800787e:	3318      	adds	r3, #24
 8007880:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007882:	4b09      	ldr	r3, [pc, #36]	@ (80078a8 <USBD_CDC_TransmitPacket+0x7c>)
 8007884:	7819      	ldrb	r1, [r3, #0]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f001 ffa3 	bl	80097de <USBD_LL_Transmit>

    ret = USBD_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800789c:	7bfb      	ldrb	r3, [r7, #15]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	200000bf 	.word	0x200000bf

080078ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	32b0      	adds	r2, #176	@ 0xb0
 80078be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	32b0      	adds	r2, #176	@ 0xb0
 80078ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d101      	bne.n	80078da <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e018      	b.n	800790c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	7c1b      	ldrb	r3, [r3, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10a      	bne.n	80078f8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007914 <USBD_CDC_ReceivePacket+0x68>)
 80078e4:	7819      	ldrb	r1, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80078ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f001 ff95 	bl	8009820 <USBD_LL_PrepareReceive>
 80078f6:	e008      	b.n	800790a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80078f8:	4b06      	ldr	r3, [pc, #24]	@ (8007914 <USBD_CDC_ReceivePacket+0x68>)
 80078fa:	7819      	ldrb	r1, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007902:	2340      	movs	r3, #64	@ 0x40
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f001 ff8b 	bl	8009820 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800790a:	2300      	movs	r3, #0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	200000c0 	.word	0x200000c0

08007918 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	4613      	mov	r3, r2
 8007924:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d101      	bne.n	8007930 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800792c:	2303      	movs	r3, #3
 800792e:	e01f      	b.n	8007970 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	79fa      	ldrb	r2, [r7, #7]
 8007962:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007964:	68f8      	ldr	r0, [r7, #12]
 8007966:	f001 fe05 	bl	8009574 <USBD_LL_Init>
 800796a:	4603      	mov	r3, r0
 800796c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800796e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3718      	adds	r7, #24
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007982:	2300      	movs	r3, #0
 8007984:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d101      	bne.n	8007990 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800798c:	2303      	movs	r3, #3
 800798e:	e025      	b.n	80079dc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	32ae      	adds	r2, #174	@ 0xae
 80079a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00f      	beq.n	80079cc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	32ae      	adds	r2, #174	@ 0xae
 80079b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079bc:	f107 020e 	add.w	r2, r7, #14
 80079c0:	4610      	mov	r0, r2
 80079c2:	4798      	blx	r3
 80079c4:	4602      	mov	r2, r0
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80079d2:	1c5a      	adds	r2, r3, #1
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f001 fe0d 	bl	800960c <USBD_LL_Start>
 80079f2:	4603      	mov	r3, r0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a04:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b084      	sub	sp, #16
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d009      	beq.n	8007a40 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	78fa      	ldrb	r2, [r7, #3]
 8007a36:	4611      	mov	r1, r2
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	4798      	blx	r3
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b084      	sub	sp, #16
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	460b      	mov	r3, r1
 8007a54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	78fa      	ldrb	r2, [r7, #3]
 8007a64:	4611      	mov	r1, r2
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	4798      	blx	r3
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d001      	beq.n	8007a74 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007a70:	2303      	movs	r3, #3
 8007a72:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b084      	sub	sp, #16
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f001 f90c 	bl	8008cae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007ab2:	f003 031f 	and.w	r3, r3, #31
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d01a      	beq.n	8007af0 <USBD_LL_SetupStage+0x72>
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d822      	bhi.n	8007b04 <USBD_LL_SetupStage+0x86>
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d002      	beq.n	8007ac8 <USBD_LL_SetupStage+0x4a>
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d00a      	beq.n	8007adc <USBD_LL_SetupStage+0x5e>
 8007ac6:	e01d      	b.n	8007b04 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fb63 	bl	800819c <USBD_StdDevReq>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8007ada:	e020      	b.n	8007b1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 fbcb 	bl	8008280 <USBD_StdItfReq>
 8007aea:	4603      	mov	r3, r0
 8007aec:	73fb      	strb	r3, [r7, #15]
      break;
 8007aee:	e016      	b.n	8007b1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f000 fc2d 	bl	8008358 <USBD_StdEPReq>
 8007afe:	4603      	mov	r3, r0
 8007b00:	73fb      	strb	r3, [r7, #15]
      break;
 8007b02:	e00c      	b.n	8007b1e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007b0a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f001 fdda 	bl	80096cc <USBD_LL_StallEP>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b1c:	bf00      	nop
  }

  return ret;
 8007b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	460b      	mov	r3, r1
 8007b32:	607a      	str	r2, [r7, #4]
 8007b34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007b3a:	7afb      	ldrb	r3, [r7, #11]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d16e      	bne.n	8007c1e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007b46:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007b4e:	2b03      	cmp	r3, #3
 8007b50:	f040 8098 	bne.w	8007c84 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	689a      	ldr	r2, [r3, #8]
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d913      	bls.n	8007b88 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	689a      	ldr	r2, [r3, #8]
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	1ad2      	subs	r2, r2, r3
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	4293      	cmp	r3, r2
 8007b78:	bf28      	it	cs
 8007b7a:	4613      	movcs	r3, r2
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	6879      	ldr	r1, [r7, #4]
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f001 f988 	bl	8008e96 <USBD_CtlContinueRx>
 8007b86:	e07d      	b.n	8007c84 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007b8e:	f003 031f 	and.w	r3, r3, #31
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	d014      	beq.n	8007bc0 <USBD_LL_DataOutStage+0x98>
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d81d      	bhi.n	8007bd6 <USBD_LL_DataOutStage+0xae>
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d002      	beq.n	8007ba4 <USBD_LL_DataOutStage+0x7c>
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d003      	beq.n	8007baa <USBD_LL_DataOutStage+0x82>
 8007ba2:	e018      	b.n	8007bd6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	75bb      	strb	r3, [r7, #22]
            break;
 8007ba8:	e018      	b.n	8007bdc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f000 fa64 	bl	8008082 <USBD_CoreFindIF>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	75bb      	strb	r3, [r7, #22]
            break;
 8007bbe:	e00d      	b.n	8007bdc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	4619      	mov	r1, r3
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 fa66 	bl	800809c <USBD_CoreFindEP>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	75bb      	strb	r3, [r7, #22]
            break;
 8007bd4:	e002      	b.n	8007bdc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	75bb      	strb	r3, [r7, #22]
            break;
 8007bda:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007bdc:	7dbb      	ldrb	r3, [r7, #22]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d119      	bne.n	8007c16 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d113      	bne.n	8007c16 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007bee:	7dba      	ldrb	r2, [r7, #22]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	32ae      	adds	r2, #174	@ 0xae
 8007bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00b      	beq.n	8007c16 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007bfe:	7dba      	ldrb	r2, [r7, #22]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007c06:	7dba      	ldrb	r2, [r7, #22]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	32ae      	adds	r2, #174	@ 0xae
 8007c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c10:	691b      	ldr	r3, [r3, #16]
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007c16:	68f8      	ldr	r0, [r7, #12]
 8007c18:	f001 f94e 	bl	8008eb8 <USBD_CtlSendStatus>
 8007c1c:	e032      	b.n	8007c84 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007c1e:	7afb      	ldrb	r3, [r7, #11]
 8007c20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	4619      	mov	r1, r3
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 fa37 	bl	800809c <USBD_CoreFindEP>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c32:	7dbb      	ldrb	r3, [r7, #22]
 8007c34:	2bff      	cmp	r3, #255	@ 0xff
 8007c36:	d025      	beq.n	8007c84 <USBD_LL_DataOutStage+0x15c>
 8007c38:	7dbb      	ldrb	r3, [r7, #22]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d122      	bne.n	8007c84 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d117      	bne.n	8007c7a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007c4a:	7dba      	ldrb	r2, [r7, #22]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	32ae      	adds	r2, #174	@ 0xae
 8007c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00f      	beq.n	8007c7a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007c5a:	7dba      	ldrb	r2, [r7, #22]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007c62:	7dba      	ldrb	r2, [r7, #22]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	32ae      	adds	r2, #174	@ 0xae
 8007c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	7afa      	ldrb	r2, [r7, #11]
 8007c70:	4611      	mov	r1, r2
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	4798      	blx	r3
 8007c76:	4603      	mov	r3, r0
 8007c78:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007c7a:	7dfb      	ldrb	r3, [r7, #23]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007c80:	7dfb      	ldrb	r3, [r7, #23]
 8007c82:	e000      	b.n	8007c86 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b086      	sub	sp, #24
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	60f8      	str	r0, [r7, #12]
 8007c96:	460b      	mov	r3, r1
 8007c98:	607a      	str	r2, [r7, #4]
 8007c9a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007c9c:	7afb      	ldrb	r3, [r7, #11]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d16f      	bne.n	8007d82 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	3314      	adds	r3, #20
 8007ca6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d15a      	bne.n	8007d68 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	689a      	ldr	r2, [r3, #8]
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d914      	bls.n	8007ce8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	689a      	ldr	r2, [r3, #8]
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	1ad2      	subs	r2, r2, r3
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	6879      	ldr	r1, [r7, #4]
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f001 f8b0 	bl	8008e3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cda:	2300      	movs	r3, #0
 8007cdc:	2200      	movs	r2, #0
 8007cde:	2100      	movs	r1, #0
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f001 fd9d 	bl	8009820 <USBD_LL_PrepareReceive>
 8007ce6:	e03f      	b.n	8007d68 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	68da      	ldr	r2, [r3, #12]
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	429a      	cmp	r2, r3
 8007cf2:	d11c      	bne.n	8007d2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d316      	bcc.n	8007d2e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d20f      	bcs.n	8007d2e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007d0e:	2200      	movs	r2, #0
 8007d10:	2100      	movs	r1, #0
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f001 f891 	bl	8008e3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d20:	2300      	movs	r3, #0
 8007d22:	2200      	movs	r2, #0
 8007d24:	2100      	movs	r1, #0
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f001 fd7a 	bl	8009820 <USBD_LL_PrepareReceive>
 8007d2c:	e01c      	b.n	8007d68 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d10f      	bne.n	8007d5a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d009      	beq.n	8007d5a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d5a:	2180      	movs	r1, #128	@ 0x80
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f001 fcb5 	bl	80096cc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f001 f8bb 	bl	8008ede <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d03a      	beq.n	8007de8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f7ff fe42 	bl	80079fc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007d80:	e032      	b.n	8007de8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007d82:	7afb      	ldrb	r3, [r7, #11]
 8007d84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 f985 	bl	800809c <USBD_CoreFindEP>
 8007d92:	4603      	mov	r3, r0
 8007d94:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d96:	7dfb      	ldrb	r3, [r7, #23]
 8007d98:	2bff      	cmp	r3, #255	@ 0xff
 8007d9a:	d025      	beq.n	8007de8 <USBD_LL_DataInStage+0x15a>
 8007d9c:	7dfb      	ldrb	r3, [r7, #23]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d122      	bne.n	8007de8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d11c      	bne.n	8007de8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007dae:	7dfa      	ldrb	r2, [r7, #23]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	32ae      	adds	r2, #174	@ 0xae
 8007db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d014      	beq.n	8007de8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007dbe:	7dfa      	ldrb	r2, [r7, #23]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007dc6:	7dfa      	ldrb	r2, [r7, #23]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	32ae      	adds	r2, #174	@ 0xae
 8007dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	7afa      	ldrb	r2, [r7, #11]
 8007dd4:	4611      	mov	r1, r2
 8007dd6:	68f8      	ldr	r0, [r7, #12]
 8007dd8:	4798      	blx	r3
 8007dda:	4603      	mov	r3, r0
 8007ddc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007dde:	7dbb      	ldrb	r3, [r7, #22]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007de4:	7dbb      	ldrb	r3, [r7, #22]
 8007de6:	e000      	b.n	8007dea <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d014      	beq.n	8007e58 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00e      	beq.n	8007e58 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6852      	ldr	r2, [r2, #4]
 8007e46:	b2d2      	uxtb	r2, r2
 8007e48:	4611      	mov	r1, r2
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	4798      	blx	r3
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d001      	beq.n	8007e58 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007e54:	2303      	movs	r3, #3
 8007e56:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e58:	2340      	movs	r3, #64	@ 0x40
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f001 fbef 	bl	8009642 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2240      	movs	r2, #64	@ 0x40
 8007e70:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e74:	2340      	movs	r3, #64	@ 0x40
 8007e76:	2200      	movs	r2, #0
 8007e78:	2180      	movs	r1, #128	@ 0x80
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f001 fbe1 	bl	8009642 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2240      	movs	r2, #64	@ 0x40
 8007e8a:	621a      	str	r2, [r3, #32]

  return ret;
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e96:	b480      	push	{r7}
 8007e98:	b083      	sub	sp, #12
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	78fa      	ldrb	r2, [r7, #3]
 8007ea6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b083      	sub	sp, #12
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	d006      	beq.n	8007ed8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2204      	movs	r2, #4
 8007edc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b083      	sub	sp, #12
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b04      	cmp	r3, #4
 8007f00:	d106      	bne.n	8007f10 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f1e:	b580      	push	{r7, lr}
 8007f20:	b082      	sub	sp, #8
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	d110      	bne.n	8007f54 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00b      	beq.n	8007f54 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f42:	69db      	ldr	r3, [r3, #28]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d005      	beq.n	8007f54 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f4e:	69db      	ldr	r3, [r3, #28]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b082      	sub	sp, #8
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	460b      	mov	r3, r1
 8007f68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	32ae      	adds	r2, #174	@ 0xae
 8007f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	e01c      	b.n	8007fba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d115      	bne.n	8007fb8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	32ae      	adds	r2, #174	@ 0xae
 8007f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9a:	6a1b      	ldr	r3, [r3, #32]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00b      	beq.n	8007fb8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	32ae      	adds	r2, #174	@ 0xae
 8007faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fae:	6a1b      	ldr	r3, [r3, #32]
 8007fb0:	78fa      	ldrb	r2, [r7, #3]
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b082      	sub	sp, #8
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	460b      	mov	r3, r1
 8007fcc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	32ae      	adds	r2, #174	@ 0xae
 8007fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d101      	bne.n	8007fe4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e01c      	b.n	800801e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b03      	cmp	r3, #3
 8007fee:	d115      	bne.n	800801c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	32ae      	adds	r2, #174	@ 0xae
 8007ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00b      	beq.n	800801c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	32ae      	adds	r2, #174	@ 0xae
 800800e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008014:	78fa      	ldrb	r2, [r7, #3]
 8008016:	4611      	mov	r1, r2
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3708      	adds	r7, #8
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008026:	b480      	push	{r7}
 8008028:	b083      	sub	sp, #12
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr

0800803c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008044:	2300      	movs	r3, #0
 8008046:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00e      	beq.n	8008078 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	6852      	ldr	r2, [r2, #4]
 8008066:	b2d2      	uxtb	r2, r2
 8008068:	4611      	mov	r1, r2
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	4798      	blx	r3
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d001      	beq.n	8008078 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008074:	2303      	movs	r3, #3
 8008076:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008078:	7bfb      	ldrb	r3, [r7, #15]
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008082:	b480      	push	{r7}
 8008084:	b083      	sub	sp, #12
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
 800808a:	460b      	mov	r3, r1
 800808c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800808e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008090:	4618      	mov	r0, r3
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	460b      	mov	r3, r1
 80080a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80080a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr

080080b6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b086      	sub	sp, #24
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	460b      	mov	r3, r1
 80080c0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80080ca:	2300      	movs	r3, #0
 80080cc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	885b      	ldrh	r3, [r3, #2]
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	7812      	ldrb	r2, [r2, #0]
 80080d8:	4293      	cmp	r3, r2
 80080da:	d91f      	bls.n	800811c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80080e2:	e013      	b.n	800810c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80080e4:	f107 030a 	add.w	r3, r7, #10
 80080e8:	4619      	mov	r1, r3
 80080ea:	6978      	ldr	r0, [r7, #20]
 80080ec:	f000 f81b 	bl	8008126 <USBD_GetNextDesc>
 80080f0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	785b      	ldrb	r3, [r3, #1]
 80080f6:	2b05      	cmp	r3, #5
 80080f8:	d108      	bne.n	800810c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	789b      	ldrb	r3, [r3, #2]
 8008102:	78fa      	ldrb	r2, [r7, #3]
 8008104:	429a      	cmp	r2, r3
 8008106:	d008      	beq.n	800811a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008108:	2300      	movs	r3, #0
 800810a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	885b      	ldrh	r3, [r3, #2]
 8008110:	b29a      	uxth	r2, r3
 8008112:	897b      	ldrh	r3, [r7, #10]
 8008114:	429a      	cmp	r2, r3
 8008116:	d8e5      	bhi.n	80080e4 <USBD_GetEpDesc+0x2e>
 8008118:	e000      	b.n	800811c <USBD_GetEpDesc+0x66>
          break;
 800811a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800811c:	693b      	ldr	r3, [r7, #16]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008126:	b480      	push	{r7}
 8008128:	b085      	sub	sp, #20
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	881b      	ldrh	r3, [r3, #0]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	7812      	ldrb	r2, [r2, #0]
 800813c:	4413      	add	r3, r2
 800813e:	b29a      	uxth	r2, r3
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	461a      	mov	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4413      	add	r3, r2
 800814e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008150:	68fb      	ldr	r3, [r7, #12]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800815e:	b480      	push	{r7}
 8008160:	b087      	sub	sp, #28
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	3301      	adds	r3, #1
 8008174:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800817c:	8a3b      	ldrh	r3, [r7, #16]
 800817e:	021b      	lsls	r3, r3, #8
 8008180:	b21a      	sxth	r2, r3
 8008182:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008186:	4313      	orrs	r3, r2
 8008188:	b21b      	sxth	r3, r3
 800818a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800818c:	89fb      	ldrh	r3, [r7, #14]
}
 800818e:	4618      	mov	r0, r3
 8008190:	371c      	adds	r7, #28
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
	...

0800819c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081b2:	2b40      	cmp	r3, #64	@ 0x40
 80081b4:	d005      	beq.n	80081c2 <USBD_StdDevReq+0x26>
 80081b6:	2b40      	cmp	r3, #64	@ 0x40
 80081b8:	d857      	bhi.n	800826a <USBD_StdDevReq+0xce>
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00f      	beq.n	80081de <USBD_StdDevReq+0x42>
 80081be:	2b20      	cmp	r3, #32
 80081c0:	d153      	bne.n	800826a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	32ae      	adds	r2, #174	@ 0xae
 80081cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	6839      	ldr	r1, [r7, #0]
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	4798      	blx	r3
 80081d8:	4603      	mov	r3, r0
 80081da:	73fb      	strb	r3, [r7, #15]
      break;
 80081dc:	e04a      	b.n	8008274 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	785b      	ldrb	r3, [r3, #1]
 80081e2:	2b09      	cmp	r3, #9
 80081e4:	d83b      	bhi.n	800825e <USBD_StdDevReq+0xc2>
 80081e6:	a201      	add	r2, pc, #4	@ (adr r2, 80081ec <USBD_StdDevReq+0x50>)
 80081e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ec:	08008241 	.word	0x08008241
 80081f0:	08008255 	.word	0x08008255
 80081f4:	0800825f 	.word	0x0800825f
 80081f8:	0800824b 	.word	0x0800824b
 80081fc:	0800825f 	.word	0x0800825f
 8008200:	0800821f 	.word	0x0800821f
 8008204:	08008215 	.word	0x08008215
 8008208:	0800825f 	.word	0x0800825f
 800820c:	08008237 	.word	0x08008237
 8008210:	08008229 	.word	0x08008229
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 fa3c 	bl	8008694 <USBD_GetDescriptor>
          break;
 800821c:	e024      	b.n	8008268 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fba1 	bl	8008968 <USBD_SetAddress>
          break;
 8008226:	e01f      	b.n	8008268 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008228:	6839      	ldr	r1, [r7, #0]
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fbe0 	bl	80089f0 <USBD_SetConfig>
 8008230:	4603      	mov	r3, r0
 8008232:	73fb      	strb	r3, [r7, #15]
          break;
 8008234:	e018      	b.n	8008268 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008236:	6839      	ldr	r1, [r7, #0]
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fc83 	bl	8008b44 <USBD_GetConfig>
          break;
 800823e:	e013      	b.n	8008268 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fcb4 	bl	8008bb0 <USBD_GetStatus>
          break;
 8008248:	e00e      	b.n	8008268 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fce3 	bl	8008c18 <USBD_SetFeature>
          break;
 8008252:	e009      	b.n	8008268 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fd07 	bl	8008c6a <USBD_ClrFeature>
          break;
 800825c:	e004      	b.n	8008268 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800825e:	6839      	ldr	r1, [r7, #0]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fd5e 	bl	8008d22 <USBD_CtlError>
          break;
 8008266:	bf00      	nop
      }
      break;
 8008268:	e004      	b.n	8008274 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fd58 	bl	8008d22 <USBD_CtlError>
      break;
 8008272:	bf00      	nop
  }

  return ret;
 8008274:	7bfb      	ldrb	r3, [r7, #15]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop

08008280 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008296:	2b40      	cmp	r3, #64	@ 0x40
 8008298:	d005      	beq.n	80082a6 <USBD_StdItfReq+0x26>
 800829a:	2b40      	cmp	r3, #64	@ 0x40
 800829c:	d852      	bhi.n	8008344 <USBD_StdItfReq+0xc4>
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d001      	beq.n	80082a6 <USBD_StdItfReq+0x26>
 80082a2:	2b20      	cmp	r3, #32
 80082a4:	d14e      	bne.n	8008344 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	3b01      	subs	r3, #1
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d840      	bhi.n	8008336 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	889b      	ldrh	r3, [r3, #4]
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d836      	bhi.n	800832c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	889b      	ldrh	r3, [r3, #4]
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	4619      	mov	r1, r3
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f7ff fedb 	bl	8008082 <USBD_CoreFindIF>
 80082cc:	4603      	mov	r3, r0
 80082ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082d0:	7bbb      	ldrb	r3, [r7, #14]
 80082d2:	2bff      	cmp	r3, #255	@ 0xff
 80082d4:	d01d      	beq.n	8008312 <USBD_StdItfReq+0x92>
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d11a      	bne.n	8008312 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80082dc:	7bba      	ldrb	r2, [r7, #14]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	32ae      	adds	r2, #174	@ 0xae
 80082e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00f      	beq.n	800830c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80082ec:	7bba      	ldrb	r2, [r7, #14]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80082f4:	7bba      	ldrb	r2, [r7, #14]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	32ae      	adds	r2, #174	@ 0xae
 80082fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	4798      	blx	r3
 8008306:	4603      	mov	r3, r0
 8008308:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800830a:	e004      	b.n	8008316 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800830c:	2303      	movs	r3, #3
 800830e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008310:	e001      	b.n	8008316 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008312:	2303      	movs	r3, #3
 8008314:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	88db      	ldrh	r3, [r3, #6]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d110      	bne.n	8008340 <USBD_StdItfReq+0xc0>
 800831e:	7bfb      	ldrb	r3, [r7, #15]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10d      	bne.n	8008340 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 fdc7 	bl	8008eb8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800832a:	e009      	b.n	8008340 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fcf7 	bl	8008d22 <USBD_CtlError>
          break;
 8008334:	e004      	b.n	8008340 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fcf2 	bl	8008d22 <USBD_CtlError>
          break;
 800833e:	e000      	b.n	8008342 <USBD_StdItfReq+0xc2>
          break;
 8008340:	bf00      	nop
      }
      break;
 8008342:	e004      	b.n	800834e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fceb 	bl	8008d22 <USBD_CtlError>
      break;
 800834c:	bf00      	nop
  }

  return ret;
 800834e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008362:	2300      	movs	r3, #0
 8008364:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	889b      	ldrh	r3, [r3, #4]
 800836a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008374:	2b40      	cmp	r3, #64	@ 0x40
 8008376:	d007      	beq.n	8008388 <USBD_StdEPReq+0x30>
 8008378:	2b40      	cmp	r3, #64	@ 0x40
 800837a:	f200 817f 	bhi.w	800867c <USBD_StdEPReq+0x324>
 800837e:	2b00      	cmp	r3, #0
 8008380:	d02a      	beq.n	80083d8 <USBD_StdEPReq+0x80>
 8008382:	2b20      	cmp	r3, #32
 8008384:	f040 817a 	bne.w	800867c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008388:	7bbb      	ldrb	r3, [r7, #14]
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f7ff fe85 	bl	800809c <USBD_CoreFindEP>
 8008392:	4603      	mov	r3, r0
 8008394:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008396:	7b7b      	ldrb	r3, [r7, #13]
 8008398:	2bff      	cmp	r3, #255	@ 0xff
 800839a:	f000 8174 	beq.w	8008686 <USBD_StdEPReq+0x32e>
 800839e:	7b7b      	ldrb	r3, [r7, #13]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f040 8170 	bne.w	8008686 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80083a6:	7b7a      	ldrb	r2, [r7, #13]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80083ae:	7b7a      	ldrb	r2, [r7, #13]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	32ae      	adds	r2, #174	@ 0xae
 80083b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f000 8163 	beq.w	8008686 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80083c0:	7b7a      	ldrb	r2, [r7, #13]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	32ae      	adds	r2, #174	@ 0xae
 80083c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	6839      	ldr	r1, [r7, #0]
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	4798      	blx	r3
 80083d2:	4603      	mov	r3, r0
 80083d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80083d6:	e156      	b.n	8008686 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	785b      	ldrb	r3, [r3, #1]
 80083dc:	2b03      	cmp	r3, #3
 80083de:	d008      	beq.n	80083f2 <USBD_StdEPReq+0x9a>
 80083e0:	2b03      	cmp	r3, #3
 80083e2:	f300 8145 	bgt.w	8008670 <USBD_StdEPReq+0x318>
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	f000 809b 	beq.w	8008522 <USBD_StdEPReq+0x1ca>
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d03c      	beq.n	800846a <USBD_StdEPReq+0x112>
 80083f0:	e13e      	b.n	8008670 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	d002      	beq.n	8008404 <USBD_StdEPReq+0xac>
 80083fe:	2b03      	cmp	r3, #3
 8008400:	d016      	beq.n	8008430 <USBD_StdEPReq+0xd8>
 8008402:	e02c      	b.n	800845e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008404:	7bbb      	ldrb	r3, [r7, #14]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00d      	beq.n	8008426 <USBD_StdEPReq+0xce>
 800840a:	7bbb      	ldrb	r3, [r7, #14]
 800840c:	2b80      	cmp	r3, #128	@ 0x80
 800840e:	d00a      	beq.n	8008426 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008410:	7bbb      	ldrb	r3, [r7, #14]
 8008412:	4619      	mov	r1, r3
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f001 f959 	bl	80096cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800841a:	2180      	movs	r1, #128	@ 0x80
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f001 f955 	bl	80096cc <USBD_LL_StallEP>
 8008422:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008424:	e020      	b.n	8008468 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008426:	6839      	ldr	r1, [r7, #0]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fc7a 	bl	8008d22 <USBD_CtlError>
              break;
 800842e:	e01b      	b.n	8008468 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	885b      	ldrh	r3, [r3, #2]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d10e      	bne.n	8008456 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008438:	7bbb      	ldrb	r3, [r7, #14]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00b      	beq.n	8008456 <USBD_StdEPReq+0xfe>
 800843e:	7bbb      	ldrb	r3, [r7, #14]
 8008440:	2b80      	cmp	r3, #128	@ 0x80
 8008442:	d008      	beq.n	8008456 <USBD_StdEPReq+0xfe>
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	88db      	ldrh	r3, [r3, #6]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d104      	bne.n	8008456 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800844c:	7bbb      	ldrb	r3, [r7, #14]
 800844e:	4619      	mov	r1, r3
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f001 f93b 	bl	80096cc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fd2e 	bl	8008eb8 <USBD_CtlSendStatus>

              break;
 800845c:	e004      	b.n	8008468 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fc5e 	bl	8008d22 <USBD_CtlError>
              break;
 8008466:	bf00      	nop
          }
          break;
 8008468:	e107      	b.n	800867a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008470:	b2db      	uxtb	r3, r3
 8008472:	2b02      	cmp	r3, #2
 8008474:	d002      	beq.n	800847c <USBD_StdEPReq+0x124>
 8008476:	2b03      	cmp	r3, #3
 8008478:	d016      	beq.n	80084a8 <USBD_StdEPReq+0x150>
 800847a:	e04b      	b.n	8008514 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800847c:	7bbb      	ldrb	r3, [r7, #14]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00d      	beq.n	800849e <USBD_StdEPReq+0x146>
 8008482:	7bbb      	ldrb	r3, [r7, #14]
 8008484:	2b80      	cmp	r3, #128	@ 0x80
 8008486:	d00a      	beq.n	800849e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	4619      	mov	r1, r3
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f001 f91d 	bl	80096cc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008492:	2180      	movs	r1, #128	@ 0x80
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f001 f919 	bl	80096cc <USBD_LL_StallEP>
 800849a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800849c:	e040      	b.n	8008520 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800849e:	6839      	ldr	r1, [r7, #0]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fc3e 	bl	8008d22 <USBD_CtlError>
              break;
 80084a6:	e03b      	b.n	8008520 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	885b      	ldrh	r3, [r3, #2]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d136      	bne.n	800851e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80084b0:	7bbb      	ldrb	r3, [r7, #14]
 80084b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d004      	beq.n	80084c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80084ba:	7bbb      	ldrb	r3, [r7, #14]
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f001 f923 	bl	800970a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fcf7 	bl	8008eb8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
 80084cc:	4619      	mov	r1, r3
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7ff fde4 	bl	800809c <USBD_CoreFindEP>
 80084d4:	4603      	mov	r3, r0
 80084d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084d8:	7b7b      	ldrb	r3, [r7, #13]
 80084da:	2bff      	cmp	r3, #255	@ 0xff
 80084dc:	d01f      	beq.n	800851e <USBD_StdEPReq+0x1c6>
 80084de:	7b7b      	ldrb	r3, [r7, #13]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d11c      	bne.n	800851e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80084e4:	7b7a      	ldrb	r2, [r7, #13]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80084ec:	7b7a      	ldrb	r2, [r7, #13]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	32ae      	adds	r2, #174	@ 0xae
 80084f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d010      	beq.n	800851e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80084fc:	7b7a      	ldrb	r2, [r7, #13]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	32ae      	adds	r2, #174	@ 0xae
 8008502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	6839      	ldr	r1, [r7, #0]
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	4798      	blx	r3
 800850e:	4603      	mov	r3, r0
 8008510:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008512:	e004      	b.n	800851e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008514:	6839      	ldr	r1, [r7, #0]
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fc03 	bl	8008d22 <USBD_CtlError>
              break;
 800851c:	e000      	b.n	8008520 <USBD_StdEPReq+0x1c8>
              break;
 800851e:	bf00      	nop
          }
          break;
 8008520:	e0ab      	b.n	800867a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b02      	cmp	r3, #2
 800852c:	d002      	beq.n	8008534 <USBD_StdEPReq+0x1dc>
 800852e:	2b03      	cmp	r3, #3
 8008530:	d032      	beq.n	8008598 <USBD_StdEPReq+0x240>
 8008532:	e097      	b.n	8008664 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008534:	7bbb      	ldrb	r3, [r7, #14]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d007      	beq.n	800854a <USBD_StdEPReq+0x1f2>
 800853a:	7bbb      	ldrb	r3, [r7, #14]
 800853c:	2b80      	cmp	r3, #128	@ 0x80
 800853e:	d004      	beq.n	800854a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008540:	6839      	ldr	r1, [r7, #0]
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fbed 	bl	8008d22 <USBD_CtlError>
                break;
 8008548:	e091      	b.n	800866e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800854a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800854e:	2b00      	cmp	r3, #0
 8008550:	da0b      	bge.n	800856a <USBD_StdEPReq+0x212>
 8008552:	7bbb      	ldrb	r3, [r7, #14]
 8008554:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008558:	4613      	mov	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	4413      	add	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	3310      	adds	r3, #16
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	4413      	add	r3, r2
 8008566:	3304      	adds	r3, #4
 8008568:	e00b      	b.n	8008582 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800856a:	7bbb      	ldrb	r3, [r7, #14]
 800856c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008570:	4613      	mov	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	4413      	add	r3, r2
 8008580:	3304      	adds	r3, #4
 8008582:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	2200      	movs	r2, #0
 8008588:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	2202      	movs	r2, #2
 800858e:	4619      	mov	r1, r3
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fc37 	bl	8008e04 <USBD_CtlSendData>
              break;
 8008596:	e06a      	b.n	800866e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008598:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800859c:	2b00      	cmp	r3, #0
 800859e:	da11      	bge.n	80085c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085a0:	7bbb      	ldrb	r3, [r7, #14]
 80085a2:	f003 020f 	and.w	r2, r3, #15
 80085a6:	6879      	ldr	r1, [r7, #4]
 80085a8:	4613      	mov	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	440b      	add	r3, r1
 80085b2:	3324      	adds	r3, #36	@ 0x24
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d117      	bne.n	80085ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80085ba:	6839      	ldr	r1, [r7, #0]
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 fbb0 	bl	8008d22 <USBD_CtlError>
                  break;
 80085c2:	e054      	b.n	800866e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80085c4:	7bbb      	ldrb	r3, [r7, #14]
 80085c6:	f003 020f 	and.w	r2, r3, #15
 80085ca:	6879      	ldr	r1, [r7, #4]
 80085cc:	4613      	mov	r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	4413      	add	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	440b      	add	r3, r1
 80085d6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d104      	bne.n	80085ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80085e0:	6839      	ldr	r1, [r7, #0]
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f000 fb9d 	bl	8008d22 <USBD_CtlError>
                  break;
 80085e8:	e041      	b.n	800866e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	da0b      	bge.n	800860a <USBD_StdEPReq+0x2b2>
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
 80085f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085f8:	4613      	mov	r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	4413      	add	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	3310      	adds	r3, #16
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	4413      	add	r3, r2
 8008606:	3304      	adds	r3, #4
 8008608:	e00b      	b.n	8008622 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008610:	4613      	mov	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	4413      	add	r3, r2
 8008620:	3304      	adds	r3, #4
 8008622:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008624:	7bbb      	ldrb	r3, [r7, #14]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d002      	beq.n	8008630 <USBD_StdEPReq+0x2d8>
 800862a:	7bbb      	ldrb	r3, [r7, #14]
 800862c:	2b80      	cmp	r3, #128	@ 0x80
 800862e:	d103      	bne.n	8008638 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	2200      	movs	r2, #0
 8008634:	601a      	str	r2, [r3, #0]
 8008636:	e00e      	b.n	8008656 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008638:	7bbb      	ldrb	r3, [r7, #14]
 800863a:	4619      	mov	r1, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f001 f883 	bl	8009748 <USBD_LL_IsStallEP>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d003      	beq.n	8008650 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	2201      	movs	r2, #1
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	e002      	b.n	8008656 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	2200      	movs	r2, #0
 8008654:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	2202      	movs	r2, #2
 800865a:	4619      	mov	r1, r3
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 fbd1 	bl	8008e04 <USBD_CtlSendData>
              break;
 8008662:	e004      	b.n	800866e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fb5b 	bl	8008d22 <USBD_CtlError>
              break;
 800866c:	bf00      	nop
          }
          break;
 800866e:	e004      	b.n	800867a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fb55 	bl	8008d22 <USBD_CtlError>
          break;
 8008678:	bf00      	nop
      }
      break;
 800867a:	e005      	b.n	8008688 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800867c:	6839      	ldr	r1, [r7, #0]
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fb4f 	bl	8008d22 <USBD_CtlError>
      break;
 8008684:	e000      	b.n	8008688 <USBD_StdEPReq+0x330>
      break;
 8008686:	bf00      	nop
  }

  return ret;
 8008688:	7bfb      	ldrb	r3, [r7, #15]
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
	...

08008694 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800869e:	2300      	movs	r3, #0
 80086a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80086a2:	2300      	movs	r3, #0
 80086a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80086a6:	2300      	movs	r3, #0
 80086a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	885b      	ldrh	r3, [r3, #2]
 80086ae:	0a1b      	lsrs	r3, r3, #8
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	3b01      	subs	r3, #1
 80086b4:	2b06      	cmp	r3, #6
 80086b6:	f200 8128 	bhi.w	800890a <USBD_GetDescriptor+0x276>
 80086ba:	a201      	add	r2, pc, #4	@ (adr r2, 80086c0 <USBD_GetDescriptor+0x2c>)
 80086bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c0:	080086dd 	.word	0x080086dd
 80086c4:	080086f5 	.word	0x080086f5
 80086c8:	08008735 	.word	0x08008735
 80086cc:	0800890b 	.word	0x0800890b
 80086d0:	0800890b 	.word	0x0800890b
 80086d4:	080088ab 	.word	0x080088ab
 80086d8:	080088d7 	.word	0x080088d7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	7c12      	ldrb	r2, [r2, #16]
 80086e8:	f107 0108 	add.w	r1, r7, #8
 80086ec:	4610      	mov	r0, r2
 80086ee:	4798      	blx	r3
 80086f0:	60f8      	str	r0, [r7, #12]
      break;
 80086f2:	e112      	b.n	800891a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	7c1b      	ldrb	r3, [r3, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d10d      	bne.n	8008718 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008704:	f107 0208 	add.w	r2, r7, #8
 8008708:	4610      	mov	r0, r2
 800870a:	4798      	blx	r3
 800870c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	3301      	adds	r3, #1
 8008712:	2202      	movs	r2, #2
 8008714:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008716:	e100      	b.n	800891a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800871e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008720:	f107 0208 	add.w	r2, r7, #8
 8008724:	4610      	mov	r0, r2
 8008726:	4798      	blx	r3
 8008728:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3301      	adds	r3, #1
 800872e:	2202      	movs	r2, #2
 8008730:	701a      	strb	r2, [r3, #0]
      break;
 8008732:	e0f2      	b.n	800891a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	885b      	ldrh	r3, [r3, #2]
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b05      	cmp	r3, #5
 800873c:	f200 80ac 	bhi.w	8008898 <USBD_GetDescriptor+0x204>
 8008740:	a201      	add	r2, pc, #4	@ (adr r2, 8008748 <USBD_GetDescriptor+0xb4>)
 8008742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008746:	bf00      	nop
 8008748:	08008761 	.word	0x08008761
 800874c:	08008795 	.word	0x08008795
 8008750:	080087c9 	.word	0x080087c9
 8008754:	080087fd 	.word	0x080087fd
 8008758:	08008831 	.word	0x08008831
 800875c:	08008865 	.word	0x08008865
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00b      	beq.n	8008784 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	7c12      	ldrb	r2, [r2, #16]
 8008778:	f107 0108 	add.w	r1, r7, #8
 800877c:	4610      	mov	r0, r2
 800877e:	4798      	blx	r3
 8008780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008782:	e091      	b.n	80088a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008784:	6839      	ldr	r1, [r7, #0]
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 facb 	bl	8008d22 <USBD_CtlError>
            err++;
 800878c:	7afb      	ldrb	r3, [r7, #11]
 800878e:	3301      	adds	r3, #1
 8008790:	72fb      	strb	r3, [r7, #11]
          break;
 8008792:	e089      	b.n	80088a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00b      	beq.n	80087b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	7c12      	ldrb	r2, [r2, #16]
 80087ac:	f107 0108 	add.w	r1, r7, #8
 80087b0:	4610      	mov	r0, r2
 80087b2:	4798      	blx	r3
 80087b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087b6:	e077      	b.n	80088a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087b8:	6839      	ldr	r1, [r7, #0]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fab1 	bl	8008d22 <USBD_CtlError>
            err++;
 80087c0:	7afb      	ldrb	r3, [r7, #11]
 80087c2:	3301      	adds	r3, #1
 80087c4:	72fb      	strb	r3, [r7, #11]
          break;
 80087c6:	e06f      	b.n	80088a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00b      	beq.n	80087ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	7c12      	ldrb	r2, [r2, #16]
 80087e0:	f107 0108 	add.w	r1, r7, #8
 80087e4:	4610      	mov	r0, r2
 80087e6:	4798      	blx	r3
 80087e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087ea:	e05d      	b.n	80088a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087ec:	6839      	ldr	r1, [r7, #0]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fa97 	bl	8008d22 <USBD_CtlError>
            err++;
 80087f4:	7afb      	ldrb	r3, [r7, #11]
 80087f6:	3301      	adds	r3, #1
 80087f8:	72fb      	strb	r3, [r7, #11]
          break;
 80087fa:	e055      	b.n	80088a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008802:	691b      	ldr	r3, [r3, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00b      	beq.n	8008820 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	7c12      	ldrb	r2, [r2, #16]
 8008814:	f107 0108 	add.w	r1, r7, #8
 8008818:	4610      	mov	r0, r2
 800881a:	4798      	blx	r3
 800881c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800881e:	e043      	b.n	80088a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008820:	6839      	ldr	r1, [r7, #0]
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fa7d 	bl	8008d22 <USBD_CtlError>
            err++;
 8008828:	7afb      	ldrb	r3, [r7, #11]
 800882a:	3301      	adds	r3, #1
 800882c:	72fb      	strb	r3, [r7, #11]
          break;
 800882e:	e03b      	b.n	80088a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008836:	695b      	ldr	r3, [r3, #20]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00b      	beq.n	8008854 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	7c12      	ldrb	r2, [r2, #16]
 8008848:	f107 0108 	add.w	r1, r7, #8
 800884c:	4610      	mov	r0, r2
 800884e:	4798      	blx	r3
 8008850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008852:	e029      	b.n	80088a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008854:	6839      	ldr	r1, [r7, #0]
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fa63 	bl	8008d22 <USBD_CtlError>
            err++;
 800885c:	7afb      	ldrb	r3, [r7, #11]
 800885e:	3301      	adds	r3, #1
 8008860:	72fb      	strb	r3, [r7, #11]
          break;
 8008862:	e021      	b.n	80088a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800886a:	699b      	ldr	r3, [r3, #24]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00b      	beq.n	8008888 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	7c12      	ldrb	r2, [r2, #16]
 800887c:	f107 0108 	add.w	r1, r7, #8
 8008880:	4610      	mov	r0, r2
 8008882:	4798      	blx	r3
 8008884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008886:	e00f      	b.n	80088a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008888:	6839      	ldr	r1, [r7, #0]
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fa49 	bl	8008d22 <USBD_CtlError>
            err++;
 8008890:	7afb      	ldrb	r3, [r7, #11]
 8008892:	3301      	adds	r3, #1
 8008894:	72fb      	strb	r3, [r7, #11]
          break;
 8008896:	e007      	b.n	80088a8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008898:	6839      	ldr	r1, [r7, #0]
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fa41 	bl	8008d22 <USBD_CtlError>
          err++;
 80088a0:	7afb      	ldrb	r3, [r7, #11]
 80088a2:	3301      	adds	r3, #1
 80088a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80088a6:	bf00      	nop
      }
      break;
 80088a8:	e037      	b.n	800891a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	7c1b      	ldrb	r3, [r3, #16]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d109      	bne.n	80088c6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088ba:	f107 0208 	add.w	r2, r7, #8
 80088be:	4610      	mov	r0, r2
 80088c0:	4798      	blx	r3
 80088c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088c4:	e029      	b.n	800891a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fa2a 	bl	8008d22 <USBD_CtlError>
        err++;
 80088ce:	7afb      	ldrb	r3, [r7, #11]
 80088d0:	3301      	adds	r3, #1
 80088d2:	72fb      	strb	r3, [r7, #11]
      break;
 80088d4:	e021      	b.n	800891a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	7c1b      	ldrb	r3, [r3, #16]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d10d      	bne.n	80088fa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088e6:	f107 0208 	add.w	r2, r7, #8
 80088ea:	4610      	mov	r0, r2
 80088ec:	4798      	blx	r3
 80088ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	3301      	adds	r3, #1
 80088f4:	2207      	movs	r2, #7
 80088f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088f8:	e00f      	b.n	800891a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80088fa:	6839      	ldr	r1, [r7, #0]
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fa10 	bl	8008d22 <USBD_CtlError>
        err++;
 8008902:	7afb      	ldrb	r3, [r7, #11]
 8008904:	3301      	adds	r3, #1
 8008906:	72fb      	strb	r3, [r7, #11]
      break;
 8008908:	e007      	b.n	800891a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 fa08 	bl	8008d22 <USBD_CtlError>
      err++;
 8008912:	7afb      	ldrb	r3, [r7, #11]
 8008914:	3301      	adds	r3, #1
 8008916:	72fb      	strb	r3, [r7, #11]
      break;
 8008918:	bf00      	nop
  }

  if (err != 0U)
 800891a:	7afb      	ldrb	r3, [r7, #11]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d11e      	bne.n	800895e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	88db      	ldrh	r3, [r3, #6]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d016      	beq.n	8008956 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008928:	893b      	ldrh	r3, [r7, #8]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00e      	beq.n	800894c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	88da      	ldrh	r2, [r3, #6]
 8008932:	893b      	ldrh	r3, [r7, #8]
 8008934:	4293      	cmp	r3, r2
 8008936:	bf28      	it	cs
 8008938:	4613      	movcs	r3, r2
 800893a:	b29b      	uxth	r3, r3
 800893c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800893e:	893b      	ldrh	r3, [r7, #8]
 8008940:	461a      	mov	r2, r3
 8008942:	68f9      	ldr	r1, [r7, #12]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fa5d 	bl	8008e04 <USBD_CtlSendData>
 800894a:	e009      	b.n	8008960 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f9e7 	bl	8008d22 <USBD_CtlError>
 8008954:	e004      	b.n	8008960 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 faae 	bl	8008eb8 <USBD_CtlSendStatus>
 800895c:	e000      	b.n	8008960 <USBD_GetDescriptor+0x2cc>
    return;
 800895e:	bf00      	nop
  }
}
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop

08008968 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	889b      	ldrh	r3, [r3, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d131      	bne.n	80089de <USBD_SetAddress+0x76>
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	88db      	ldrh	r3, [r3, #6]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d12d      	bne.n	80089de <USBD_SetAddress+0x76>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	885b      	ldrh	r3, [r3, #2]
 8008986:	2b7f      	cmp	r3, #127	@ 0x7f
 8008988:	d829      	bhi.n	80089de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	885b      	ldrh	r3, [r3, #2]
 800898e:	b2db      	uxtb	r3, r3
 8008990:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008994:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800899c:	b2db      	uxtb	r3, r3
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d104      	bne.n	80089ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f9bc 	bl	8008d22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089aa:	e01d      	b.n	80089e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	7bfa      	ldrb	r2, [r7, #15]
 80089b0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	4619      	mov	r1, r3
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fef1 	bl	80097a0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 fa7a 	bl	8008eb8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d004      	beq.n	80089d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2202      	movs	r2, #2
 80089ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089d2:	e009      	b.n	80089e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089dc:	e004      	b.n	80089e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f99e 	bl	8008d22 <USBD_CtlError>
  }
}
 80089e6:	bf00      	nop
 80089e8:	bf00      	nop
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	885b      	ldrh	r3, [r3, #2]
 8008a02:	b2da      	uxtb	r2, r3
 8008a04:	4b4e      	ldr	r3, [pc, #312]	@ (8008b40 <USBD_SetConfig+0x150>)
 8008a06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a08:	4b4d      	ldr	r3, [pc, #308]	@ (8008b40 <USBD_SetConfig+0x150>)
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d905      	bls.n	8008a1c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 f985 	bl	8008d22 <USBD_CtlError>
    return USBD_FAIL;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	e08c      	b.n	8008b36 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d002      	beq.n	8008a2e <USBD_SetConfig+0x3e>
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d029      	beq.n	8008a80 <USBD_SetConfig+0x90>
 8008a2c:	e075      	b.n	8008b1a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008a2e:	4b44      	ldr	r3, [pc, #272]	@ (8008b40 <USBD_SetConfig+0x150>)
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d020      	beq.n	8008a78 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008a36:	4b42      	ldr	r3, [pc, #264]	@ (8008b40 <USBD_SetConfig+0x150>)
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a40:	4b3f      	ldr	r3, [pc, #252]	@ (8008b40 <USBD_SetConfig+0x150>)
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	4619      	mov	r1, r3
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f7fe ffe3 	bl	8007a12 <USBD_SetClassConfig>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008a50:	7bfb      	ldrb	r3, [r7, #15]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d008      	beq.n	8008a68 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f962 	bl	8008d22 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2202      	movs	r2, #2
 8008a62:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a66:	e065      	b.n	8008b34 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fa25 	bl	8008eb8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2203      	movs	r2, #3
 8008a72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008a76:	e05d      	b.n	8008b34 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fa1d 	bl	8008eb8 <USBD_CtlSendStatus>
      break;
 8008a7e:	e059      	b.n	8008b34 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008a80:	4b2f      	ldr	r3, [pc, #188]	@ (8008b40 <USBD_SetConfig+0x150>)
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d112      	bne.n	8008aae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2202      	movs	r2, #2
 8008a8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008a90:	4b2b      	ldr	r3, [pc, #172]	@ (8008b40 <USBD_SetConfig+0x150>)
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	461a      	mov	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a9a:	4b29      	ldr	r3, [pc, #164]	@ (8008b40 <USBD_SetConfig+0x150>)
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7fe ffd2 	bl	8007a4a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fa06 	bl	8008eb8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008aac:	e042      	b.n	8008b34 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008aae:	4b24      	ldr	r3, [pc, #144]	@ (8008b40 <USBD_SetConfig+0x150>)
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d02a      	beq.n	8008b12 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f7fe ffc0 	bl	8007a4a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008aca:	4b1d      	ldr	r3, [pc, #116]	@ (8008b40 <USBD_SetConfig+0x150>)
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8008b40 <USBD_SetConfig+0x150>)
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f7fe ff99 	bl	8007a12 <USBD_SetClassConfig>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008ae4:	7bfb      	ldrb	r3, [r7, #15]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d00f      	beq.n	8008b0a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 f918 	bl	8008d22 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f7fe ffa5 	bl	8007a4a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2202      	movs	r2, #2
 8008b04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008b08:	e014      	b.n	8008b34 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f9d4 	bl	8008eb8 <USBD_CtlSendStatus>
      break;
 8008b10:	e010      	b.n	8008b34 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f9d0 	bl	8008eb8 <USBD_CtlSendStatus>
      break;
 8008b18:	e00c      	b.n	8008b34 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f900 	bl	8008d22 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b22:	4b07      	ldr	r3, [pc, #28]	@ (8008b40 <USBD_SetConfig+0x150>)
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	4619      	mov	r1, r3
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f7fe ff8e 	bl	8007a4a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	73fb      	strb	r3, [r7, #15]
      break;
 8008b32:	bf00      	nop
  }

  return ret;
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop
 8008b40:	2000333c 	.word	0x2000333c

08008b44 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	88db      	ldrh	r3, [r3, #6]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d004      	beq.n	8008b60 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f8e2 	bl	8008d22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008b5e:	e023      	b.n	8008ba8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	dc02      	bgt.n	8008b72 <USBD_GetConfig+0x2e>
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	dc03      	bgt.n	8008b78 <USBD_GetConfig+0x34>
 8008b70:	e015      	b.n	8008b9e <USBD_GetConfig+0x5a>
 8008b72:	2b03      	cmp	r3, #3
 8008b74:	d00b      	beq.n	8008b8e <USBD_GetConfig+0x4a>
 8008b76:	e012      	b.n	8008b9e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	3308      	adds	r3, #8
 8008b82:	2201      	movs	r2, #1
 8008b84:	4619      	mov	r1, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 f93c 	bl	8008e04 <USBD_CtlSendData>
        break;
 8008b8c:	e00c      	b.n	8008ba8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	3304      	adds	r3, #4
 8008b92:	2201      	movs	r2, #1
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f934 	bl	8008e04 <USBD_CtlSendData>
        break;
 8008b9c:	e004      	b.n	8008ba8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f8be 	bl	8008d22 <USBD_CtlError>
        break;
 8008ba6:	bf00      	nop
}
 8008ba8:	bf00      	nop
 8008baa:	3708      	adds	r7, #8
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d81e      	bhi.n	8008c06 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	88db      	ldrh	r3, [r3, #6]
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d004      	beq.n	8008bda <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 f8a5 	bl	8008d22 <USBD_CtlError>
        break;
 8008bd8:	e01a      	b.n	8008c10 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d005      	beq.n	8008bf6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	f043 0202 	orr.w	r2, r3, #2
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	330c      	adds	r3, #12
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f900 	bl	8008e04 <USBD_CtlSendData>
      break;
 8008c04:	e004      	b.n	8008c10 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008c06:	6839      	ldr	r1, [r7, #0]
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 f88a 	bl	8008d22 <USBD_CtlError>
      break;
 8008c0e:	bf00      	nop
  }
}
 8008c10:	bf00      	nop
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	885b      	ldrh	r3, [r3, #2]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d107      	bne.n	8008c3a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 f940 	bl	8008eb8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008c38:	e013      	b.n	8008c62 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	885b      	ldrh	r3, [r3, #2]
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d10b      	bne.n	8008c5a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	889b      	ldrh	r3, [r3, #4]
 8008c46:	0a1b      	lsrs	r3, r3, #8
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	b2da      	uxtb	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f930 	bl	8008eb8 <USBD_CtlSendStatus>
}
 8008c58:	e003      	b.n	8008c62 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f860 	bl	8008d22 <USBD_CtlError>
}
 8008c62:	bf00      	nop
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b082      	sub	sp, #8
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d80b      	bhi.n	8008c9a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	885b      	ldrh	r3, [r3, #2]
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d10c      	bne.n	8008ca4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 f910 	bl	8008eb8 <USBD_CtlSendStatus>
      }
      break;
 8008c98:	e004      	b.n	8008ca4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008c9a:	6839      	ldr	r1, [r7, #0]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f840 	bl	8008d22 <USBD_CtlError>
      break;
 8008ca2:	e000      	b.n	8008ca6 <USBD_ClrFeature+0x3c>
      break;
 8008ca4:	bf00      	nop
  }
}
 8008ca6:	bf00      	nop
 8008ca8:	3708      	adds	r7, #8
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b084      	sub	sp, #16
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
 8008cb6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	781a      	ldrb	r2, [r3, #0]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	781a      	ldrb	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f7ff fa40 	bl	800815e <SWAPBYTE>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	3301      	adds	r3, #1
 8008cf0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f7ff fa33 	bl	800815e <SWAPBYTE>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	3301      	adds	r3, #1
 8008d04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f7ff fa26 	bl	800815e <SWAPBYTE>
 8008d12:	4603      	mov	r3, r0
 8008d14:	461a      	mov	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	80da      	strh	r2, [r3, #6]
}
 8008d1a:	bf00      	nop
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b082      	sub	sp, #8
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d2c:	2180      	movs	r1, #128	@ 0x80
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fccc 	bl	80096cc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008d34:	2100      	movs	r1, #0
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fcc8 	bl	80096cc <USBD_LL_StallEP>
}
 8008d3c:	bf00      	nop
 8008d3e:	3708      	adds	r7, #8
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b086      	sub	sp, #24
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	60f8      	str	r0, [r7, #12]
 8008d4c:	60b9      	str	r1, [r7, #8]
 8008d4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d50:	2300      	movs	r3, #0
 8008d52:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d036      	beq.n	8008dc8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008d5e:	6938      	ldr	r0, [r7, #16]
 8008d60:	f000 f836 	bl	8008dd0 <USBD_GetLen>
 8008d64:	4603      	mov	r3, r0
 8008d66:	3301      	adds	r3, #1
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	005b      	lsls	r3, r3, #1
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008d72:	7dfb      	ldrb	r3, [r7, #23]
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	4413      	add	r3, r2
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	7812      	ldrb	r2, [r2, #0]
 8008d7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d7e:	7dfb      	ldrb	r3, [r7, #23]
 8008d80:	3301      	adds	r3, #1
 8008d82:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d84:	7dfb      	ldrb	r3, [r7, #23]
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	4413      	add	r3, r2
 8008d8a:	2203      	movs	r2, #3
 8008d8c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	3301      	adds	r3, #1
 8008d92:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008d94:	e013      	b.n	8008dbe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008d96:	7dfb      	ldrb	r3, [r7, #23]
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	693a      	ldr	r2, [r7, #16]
 8008d9e:	7812      	ldrb	r2, [r2, #0]
 8008da0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	3301      	adds	r3, #1
 8008da6:	613b      	str	r3, [r7, #16]
    idx++;
 8008da8:	7dfb      	ldrb	r3, [r7, #23]
 8008daa:	3301      	adds	r3, #1
 8008dac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008dae:	7dfb      	ldrb	r3, [r7, #23]
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	4413      	add	r3, r2
 8008db4:	2200      	movs	r2, #0
 8008db6:	701a      	strb	r2, [r3, #0]
    idx++;
 8008db8:	7dfb      	ldrb	r3, [r7, #23]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1e7      	bne.n	8008d96 <USBD_GetString+0x52>
 8008dc6:	e000      	b.n	8008dca <USBD_GetString+0x86>
    return;
 8008dc8:	bf00      	nop
  }
}
 8008dca:	3718      	adds	r7, #24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008de0:	e005      	b.n	8008dee <USBD_GetLen+0x1e>
  {
    len++;
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
 8008de4:	3301      	adds	r3, #1
 8008de6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	3301      	adds	r3, #1
 8008dec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1f5      	bne.n	8008de2 <USBD_GetLen+0x12>
  }

  return len;
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2202      	movs	r2, #2
 8008e14:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	68ba      	ldr	r2, [r7, #8]
 8008e28:	2100      	movs	r1, #0
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f000 fcd7 	bl	80097de <USBD_LL_Transmit>

  return USBD_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}

08008e3a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008e3a:	b580      	push	{r7, lr}
 8008e3c:	b084      	sub	sp, #16
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	60f8      	str	r0, [r7, #12]
 8008e42:	60b9      	str	r1, [r7, #8]
 8008e44:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	68ba      	ldr	r2, [r7, #8]
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	68f8      	ldr	r0, [r7, #12]
 8008e4e:	f000 fcc6 	bl	80097de <USBD_LL_Transmit>

  return USBD_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3710      	adds	r7, #16
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2203      	movs	r2, #3
 8008e6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	2100      	movs	r1, #0
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f000 fcca 	bl	8009820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b084      	sub	sp, #16
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	60f8      	str	r0, [r7, #12]
 8008e9e:	60b9      	str	r1, [r7, #8]
 8008ea0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 fcb9 	bl	8009820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2204      	movs	r2, #4
 8008ec4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008ec8:	2300      	movs	r3, #0
 8008eca:	2200      	movs	r2, #0
 8008ecc:	2100      	movs	r1, #0
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fc85 	bl	80097de <USBD_LL_Transmit>

  return USBD_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}

08008ede <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008ede:	b580      	push	{r7, lr}
 8008ee0:	b082      	sub	sp, #8
 8008ee2:	af00      	add	r7, sp, #0
 8008ee4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2205      	movs	r2, #5
 8008eea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008eee:	2300      	movs	r3, #0
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fc93 	bl	8009820 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3708      	adds	r7, #8
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	4912      	ldr	r1, [pc, #72]	@ (8008f54 <MX_USB_DEVICE_Init+0x50>)
 8008f0c:	4812      	ldr	r0, [pc, #72]	@ (8008f58 <MX_USB_DEVICE_Init+0x54>)
 8008f0e:	f7fe fd03 	bl	8007918 <USBD_Init>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d001      	beq.n	8008f1c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008f18:	f7f8 f8f0 	bl	80010fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008f1c:	490f      	ldr	r1, [pc, #60]	@ (8008f5c <MX_USB_DEVICE_Init+0x58>)
 8008f1e:	480e      	ldr	r0, [pc, #56]	@ (8008f58 <MX_USB_DEVICE_Init+0x54>)
 8008f20:	f7fe fd2a 	bl	8007978 <USBD_RegisterClass>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008f2a:	f7f8 f8e7 	bl	80010fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008f2e:	490c      	ldr	r1, [pc, #48]	@ (8008f60 <MX_USB_DEVICE_Init+0x5c>)
 8008f30:	4809      	ldr	r0, [pc, #36]	@ (8008f58 <MX_USB_DEVICE_Init+0x54>)
 8008f32:	f7fe fc21 	bl	8007778 <USBD_CDC_RegisterInterface>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008f3c:	f7f8 f8de 	bl	80010fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008f40:	4805      	ldr	r0, [pc, #20]	@ (8008f58 <MX_USB_DEVICE_Init+0x54>)
 8008f42:	f7fe fd4f 	bl	80079e4 <USBD_Start>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d001      	beq.n	8008f50 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008f4c:	f7f8 f8d6 	bl	80010fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008f50:	bf00      	nop
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	200000d8 	.word	0x200000d8
 8008f58:	20003340 	.word	0x20003340
 8008f5c:	20000044 	.word	0x20000044
 8008f60:	200000c4 	.word	0x200000c4

08008f64 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008f68:	2200      	movs	r2, #0
 8008f6a:	4905      	ldr	r1, [pc, #20]	@ (8008f80 <CDC_Init_FS+0x1c>)
 8008f6c:	4805      	ldr	r0, [pc, #20]	@ (8008f84 <CDC_Init_FS+0x20>)
 8008f6e:	f7fe fc1d 	bl	80077ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008f72:	4905      	ldr	r1, [pc, #20]	@ (8008f88 <CDC_Init_FS+0x24>)
 8008f74:	4803      	ldr	r0, [pc, #12]	@ (8008f84 <CDC_Init_FS+0x20>)
 8008f76:	f7fe fc3b 	bl	80077f0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008f7a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	20003a1c 	.word	0x20003a1c
 8008f84:	20003340 	.word	0x20003340
 8008f88:	2000361c 	.word	0x2000361c

08008f8c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008f90:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	6039      	str	r1, [r7, #0]
 8008fa6:	71fb      	strb	r3, [r7, #7]
 8008fa8:	4613      	mov	r3, r2
 8008faa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008fac:	79fb      	ldrb	r3, [r7, #7]
 8008fae:	2b23      	cmp	r3, #35	@ 0x23
 8008fb0:	d84a      	bhi.n	8009048 <CDC_Control_FS+0xac>
 8008fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fb8 <CDC_Control_FS+0x1c>)
 8008fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb8:	08009049 	.word	0x08009049
 8008fbc:	08009049 	.word	0x08009049
 8008fc0:	08009049 	.word	0x08009049
 8008fc4:	08009049 	.word	0x08009049
 8008fc8:	08009049 	.word	0x08009049
 8008fcc:	08009049 	.word	0x08009049
 8008fd0:	08009049 	.word	0x08009049
 8008fd4:	08009049 	.word	0x08009049
 8008fd8:	08009049 	.word	0x08009049
 8008fdc:	08009049 	.word	0x08009049
 8008fe0:	08009049 	.word	0x08009049
 8008fe4:	08009049 	.word	0x08009049
 8008fe8:	08009049 	.word	0x08009049
 8008fec:	08009049 	.word	0x08009049
 8008ff0:	08009049 	.word	0x08009049
 8008ff4:	08009049 	.word	0x08009049
 8008ff8:	08009049 	.word	0x08009049
 8008ffc:	08009049 	.word	0x08009049
 8009000:	08009049 	.word	0x08009049
 8009004:	08009049 	.word	0x08009049
 8009008:	08009049 	.word	0x08009049
 800900c:	08009049 	.word	0x08009049
 8009010:	08009049 	.word	0x08009049
 8009014:	08009049 	.word	0x08009049
 8009018:	08009049 	.word	0x08009049
 800901c:	08009049 	.word	0x08009049
 8009020:	08009049 	.word	0x08009049
 8009024:	08009049 	.word	0x08009049
 8009028:	08009049 	.word	0x08009049
 800902c:	08009049 	.word	0x08009049
 8009030:	08009049 	.word	0x08009049
 8009034:	08009049 	.word	0x08009049
 8009038:	08009049 	.word	0x08009049
 800903c:	08009049 	.word	0x08009049
 8009040:	08009049 	.word	0x08009049
 8009044:	08009049 	.word	0x08009049
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009048:	bf00      	nop
  }

  return (USBD_OK);
 800904a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800904c:	4618      	mov	r0, r3
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009062:	6879      	ldr	r1, [r7, #4]
 8009064:	4808      	ldr	r0, [pc, #32]	@ (8009088 <CDC_Receive_FS+0x30>)
 8009066:	f7fe fbc3 	bl	80077f0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800906a:	4807      	ldr	r0, [pc, #28]	@ (8009088 <CDC_Receive_FS+0x30>)
 800906c:	f7fe fc1e 	bl	80078ac <USBD_CDC_ReceivePacket>
  CDCReceiveCallback(Buf, *Len);
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f7f7 fdf6 	bl	8000c68 <CDCReceiveCallback>
  return (USBD_OK);
 800907c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	20003340 	.word	0x20003340

0800908c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	460b      	mov	r3, r1
 8009096:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800909c:	4b0d      	ldr	r3, [pc, #52]	@ (80090d4 <CDC_Transmit_FS+0x48>)
 800909e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80090a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e00b      	b.n	80090ca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80090b2:	887b      	ldrh	r3, [r7, #2]
 80090b4:	461a      	mov	r2, r3
 80090b6:	6879      	ldr	r1, [r7, #4]
 80090b8:	4806      	ldr	r0, [pc, #24]	@ (80090d4 <CDC_Transmit_FS+0x48>)
 80090ba:	f7fe fb77 	bl	80077ac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80090be:	4805      	ldr	r0, [pc, #20]	@ (80090d4 <CDC_Transmit_FS+0x48>)
 80090c0:	f7fe fbb4 	bl	800782c <USBD_CDC_TransmitPacket>
 80090c4:	4603      	mov	r3, r0
 80090c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3710      	adds	r7, #16
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	20003340 	.word	0x20003340

080090d8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80090d8:	b480      	push	{r7}
 80090da:	b087      	sub	sp, #28
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	4613      	mov	r3, r2
 80090e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80090ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	371c      	adds	r7, #28
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr
	...

080090fc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	4603      	mov	r3, r0
 8009104:	6039      	str	r1, [r7, #0]
 8009106:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	2212      	movs	r2, #18
 800910c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800910e:	4b03      	ldr	r3, [pc, #12]	@ (800911c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009110:	4618      	mov	r0, r3
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	200000f4 	.word	0x200000f4

08009120 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	4603      	mov	r3, r0
 8009128:	6039      	str	r1, [r7, #0]
 800912a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	2204      	movs	r2, #4
 8009130:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009132:	4b03      	ldr	r3, [pc, #12]	@ (8009140 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009134:	4618      	mov	r0, r3
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr
 8009140:	20000108 	.word	0x20000108

08009144 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	4603      	mov	r3, r0
 800914c:	6039      	str	r1, [r7, #0]
 800914e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009150:	79fb      	ldrb	r3, [r7, #7]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d105      	bne.n	8009162 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	4907      	ldr	r1, [pc, #28]	@ (8009178 <USBD_FS_ProductStrDescriptor+0x34>)
 800915a:	4808      	ldr	r0, [pc, #32]	@ (800917c <USBD_FS_ProductStrDescriptor+0x38>)
 800915c:	f7ff fdf2 	bl	8008d44 <USBD_GetString>
 8009160:	e004      	b.n	800916c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	4904      	ldr	r1, [pc, #16]	@ (8009178 <USBD_FS_ProductStrDescriptor+0x34>)
 8009166:	4805      	ldr	r0, [pc, #20]	@ (800917c <USBD_FS_ProductStrDescriptor+0x38>)
 8009168:	f7ff fdec 	bl	8008d44 <USBD_GetString>
  }
  return USBD_StrDesc;
 800916c:	4b02      	ldr	r3, [pc, #8]	@ (8009178 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800916e:	4618      	mov	r0, r3
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	20003e1c 	.word	0x20003e1c
 800917c:	0800af04 	.word	0x0800af04

08009180 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	4603      	mov	r3, r0
 8009188:	6039      	str	r1, [r7, #0]
 800918a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800918c:	683a      	ldr	r2, [r7, #0]
 800918e:	4904      	ldr	r1, [pc, #16]	@ (80091a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009190:	4804      	ldr	r0, [pc, #16]	@ (80091a4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009192:	f7ff fdd7 	bl	8008d44 <USBD_GetString>
  return USBD_StrDesc;
 8009196:	4b02      	ldr	r3, [pc, #8]	@ (80091a0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009198:	4618      	mov	r0, r3
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	20003e1c 	.word	0x20003e1c
 80091a4:	0800af1c 	.word	0x0800af1c

080091a8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	4603      	mov	r3, r0
 80091b0:	6039      	str	r1, [r7, #0]
 80091b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	221a      	movs	r2, #26
 80091b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80091ba:	f000 f843 	bl	8009244 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80091be:	4b02      	ldr	r3, [pc, #8]	@ (80091c8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	2000010c 	.word	0x2000010c

080091cc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	4603      	mov	r3, r0
 80091d4:	6039      	str	r1, [r7, #0]
 80091d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80091d8:	79fb      	ldrb	r3, [r7, #7]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d105      	bne.n	80091ea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	4907      	ldr	r1, [pc, #28]	@ (8009200 <USBD_FS_ConfigStrDescriptor+0x34>)
 80091e2:	4808      	ldr	r0, [pc, #32]	@ (8009204 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091e4:	f7ff fdae 	bl	8008d44 <USBD_GetString>
 80091e8:	e004      	b.n	80091f4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	4904      	ldr	r1, [pc, #16]	@ (8009200 <USBD_FS_ConfigStrDescriptor+0x34>)
 80091ee:	4805      	ldr	r0, [pc, #20]	@ (8009204 <USBD_FS_ConfigStrDescriptor+0x38>)
 80091f0:	f7ff fda8 	bl	8008d44 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091f4:	4b02      	ldr	r3, [pc, #8]	@ (8009200 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3708      	adds	r7, #8
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	20003e1c 	.word	0x20003e1c
 8009204:	0800af30 	.word	0x0800af30

08009208 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	4603      	mov	r3, r0
 8009210:	6039      	str	r1, [r7, #0]
 8009212:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009214:	79fb      	ldrb	r3, [r7, #7]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d105      	bne.n	8009226 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	4907      	ldr	r1, [pc, #28]	@ (800923c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800921e:	4808      	ldr	r0, [pc, #32]	@ (8009240 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009220:	f7ff fd90 	bl	8008d44 <USBD_GetString>
 8009224:	e004      	b.n	8009230 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009226:	683a      	ldr	r2, [r7, #0]
 8009228:	4904      	ldr	r1, [pc, #16]	@ (800923c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800922a:	4805      	ldr	r0, [pc, #20]	@ (8009240 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800922c:	f7ff fd8a 	bl	8008d44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009230:	4b02      	ldr	r3, [pc, #8]	@ (800923c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009232:	4618      	mov	r0, r3
 8009234:	3708      	adds	r7, #8
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	20003e1c 	.word	0x20003e1c
 8009240:	0800af3c 	.word	0x0800af3c

08009244 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	4413      	add	r3, r2
 8009250:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d009      	beq.n	800926c <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009258:	2208      	movs	r2, #8
 800925a:	4906      	ldr	r1, [pc, #24]	@ (8009274 <Get_SerialNum+0x30>)
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f000 f80d 	bl	800927c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009262:	2204      	movs	r2, #4
 8009264:	4904      	ldr	r1, [pc, #16]	@ (8009278 <Get_SerialNum+0x34>)
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f808 	bl	800927c <IntToUnicode>
  }
}
 800926c:	bf00      	nop
 800926e:	3710      	adds	r7, #16
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	2000010e 	.word	0x2000010e
 8009278:	2000011e 	.word	0x2000011e

0800927c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800927c:	b480      	push	{r7}
 800927e:	b087      	sub	sp, #28
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	4613      	mov	r3, r2
 8009288:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800928a:	2300      	movs	r3, #0
 800928c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800928e:	2300      	movs	r3, #0
 8009290:	75fb      	strb	r3, [r7, #23]
 8009292:	e027      	b.n	80092e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	0f1b      	lsrs	r3, r3, #28
 8009298:	2b09      	cmp	r3, #9
 800929a:	d80b      	bhi.n	80092b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	0f1b      	lsrs	r3, r3, #28
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	7dfb      	ldrb	r3, [r7, #23]
 80092a4:	005b      	lsls	r3, r3, #1
 80092a6:	4619      	mov	r1, r3
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	440b      	add	r3, r1
 80092ac:	3230      	adds	r2, #48	@ 0x30
 80092ae:	b2d2      	uxtb	r2, r2
 80092b0:	701a      	strb	r2, [r3, #0]
 80092b2:	e00a      	b.n	80092ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	0f1b      	lsrs	r3, r3, #28
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	7dfb      	ldrb	r3, [r7, #23]
 80092bc:	005b      	lsls	r3, r3, #1
 80092be:	4619      	mov	r1, r3
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	440b      	add	r3, r1
 80092c4:	3237      	adds	r2, #55	@ 0x37
 80092c6:	b2d2      	uxtb	r2, r2
 80092c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	011b      	lsls	r3, r3, #4
 80092ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
 80092d2:	005b      	lsls	r3, r3, #1
 80092d4:	3301      	adds	r3, #1
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	4413      	add	r3, r2
 80092da:	2200      	movs	r2, #0
 80092dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80092de:	7dfb      	ldrb	r3, [r7, #23]
 80092e0:	3301      	adds	r3, #1
 80092e2:	75fb      	strb	r3, [r7, #23]
 80092e4:	7dfa      	ldrb	r2, [r7, #23]
 80092e6:	79fb      	ldrb	r3, [r7, #7]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d3d3      	bcc.n	8009294 <IntToUnicode+0x18>
  }
}
 80092ec:	bf00      	nop
 80092ee:	bf00      	nop
 80092f0:	371c      	adds	r7, #28
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
	...

080092fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b08a      	sub	sp, #40	@ 0x28
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009304:	f107 0314 	add.w	r3, r7, #20
 8009308:	2200      	movs	r2, #0
 800930a:	601a      	str	r2, [r3, #0]
 800930c:	605a      	str	r2, [r3, #4]
 800930e:	609a      	str	r2, [r3, #8]
 8009310:	60da      	str	r2, [r3, #12]
 8009312:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800931c:	d13a      	bne.n	8009394 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800931e:	2300      	movs	r3, #0
 8009320:	613b      	str	r3, [r7, #16]
 8009322:	4b1e      	ldr	r3, [pc, #120]	@ (800939c <HAL_PCD_MspInit+0xa0>)
 8009324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009326:	4a1d      	ldr	r2, [pc, #116]	@ (800939c <HAL_PCD_MspInit+0xa0>)
 8009328:	f043 0301 	orr.w	r3, r3, #1
 800932c:	6313      	str	r3, [r2, #48]	@ 0x30
 800932e:	4b1b      	ldr	r3, [pc, #108]	@ (800939c <HAL_PCD_MspInit+0xa0>)
 8009330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009332:	f003 0301 	and.w	r3, r3, #1
 8009336:	613b      	str	r3, [r7, #16]
 8009338:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800933a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800933e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009340:	2302      	movs	r3, #2
 8009342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009344:	2300      	movs	r3, #0
 8009346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009348:	2303      	movs	r3, #3
 800934a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800934c:	230a      	movs	r3, #10
 800934e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009350:	f107 0314 	add.w	r3, r7, #20
 8009354:	4619      	mov	r1, r3
 8009356:	4812      	ldr	r0, [pc, #72]	@ (80093a0 <HAL_PCD_MspInit+0xa4>)
 8009358:	f7f9 fb6a 	bl	8002a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800935c:	4b0f      	ldr	r3, [pc, #60]	@ (800939c <HAL_PCD_MspInit+0xa0>)
 800935e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009360:	4a0e      	ldr	r2, [pc, #56]	@ (800939c <HAL_PCD_MspInit+0xa0>)
 8009362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009366:	6353      	str	r3, [r2, #52]	@ 0x34
 8009368:	2300      	movs	r3, #0
 800936a:	60fb      	str	r3, [r7, #12]
 800936c:	4b0b      	ldr	r3, [pc, #44]	@ (800939c <HAL_PCD_MspInit+0xa0>)
 800936e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009370:	4a0a      	ldr	r2, [pc, #40]	@ (800939c <HAL_PCD_MspInit+0xa0>)
 8009372:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009376:	6453      	str	r3, [r2, #68]	@ 0x44
 8009378:	4b08      	ldr	r3, [pc, #32]	@ (800939c <HAL_PCD_MspInit+0xa0>)
 800937a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800937c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009380:	60fb      	str	r3, [r7, #12]
 8009382:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009384:	2200      	movs	r2, #0
 8009386:	2100      	movs	r1, #0
 8009388:	2043      	movs	r0, #67	@ 0x43
 800938a:	f7f8 ff3a 	bl	8002202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800938e:	2043      	movs	r0, #67	@ 0x43
 8009390:	f7f8 ff53 	bl	800223a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009394:	bf00      	nop
 8009396:	3728      	adds	r7, #40	@ 0x28
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	40023800 	.word	0x40023800
 80093a0:	40020000 	.word	0x40020000

080093a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80093b8:	4619      	mov	r1, r3
 80093ba:	4610      	mov	r0, r2
 80093bc:	f7fe fb5f 	bl	8007a7e <USBD_LL_SetupStage>
}
 80093c0:	bf00      	nop
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	460b      	mov	r3, r1
 80093d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80093da:	78fa      	ldrb	r2, [r7, #3]
 80093dc:	6879      	ldr	r1, [r7, #4]
 80093de:	4613      	mov	r3, r2
 80093e0:	00db      	lsls	r3, r3, #3
 80093e2:	4413      	add	r3, r2
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	440b      	add	r3, r1
 80093e8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	78fb      	ldrb	r3, [r7, #3]
 80093f0:	4619      	mov	r1, r3
 80093f2:	f7fe fb99 	bl	8007b28 <USBD_LL_DataOutStage>
}
 80093f6:	bf00      	nop
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b082      	sub	sp, #8
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
 8009406:	460b      	mov	r3, r1
 8009408:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009410:	78fa      	ldrb	r2, [r7, #3]
 8009412:	6879      	ldr	r1, [r7, #4]
 8009414:	4613      	mov	r3, r2
 8009416:	00db      	lsls	r3, r3, #3
 8009418:	4413      	add	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	440b      	add	r3, r1
 800941e:	3320      	adds	r3, #32
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	78fb      	ldrb	r3, [r7, #3]
 8009424:	4619      	mov	r1, r3
 8009426:	f7fe fc32 	bl	8007c8e <USBD_LL_DataInStage>
}
 800942a:	bf00      	nop
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b082      	sub	sp, #8
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009440:	4618      	mov	r0, r3
 8009442:	f7fe fd6c 	bl	8007f1e <USBD_LL_SOF>
}
 8009446:	bf00      	nop
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b084      	sub	sp, #16
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009456:	2301      	movs	r3, #1
 8009458:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	79db      	ldrb	r3, [r3, #7]
 800945e:	2b02      	cmp	r3, #2
 8009460:	d001      	beq.n	8009466 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009462:	f7f7 fe4b 	bl	80010fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800946c:	7bfa      	ldrb	r2, [r7, #15]
 800946e:	4611      	mov	r1, r2
 8009470:	4618      	mov	r0, r3
 8009472:	f7fe fd10 	bl	8007e96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800947c:	4618      	mov	r0, r3
 800947e:	f7fe fcb8 	bl	8007df2 <USBD_LL_Reset>
}
 8009482:	bf00      	nop
 8009484:	3710      	adds	r7, #16
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
	...

0800948c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800949a:	4618      	mov	r0, r3
 800949c:	f7fe fd0b 	bl	8007eb6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	6812      	ldr	r2, [r2, #0]
 80094ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80094b2:	f043 0301 	orr.w	r3, r3, #1
 80094b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	7adb      	ldrb	r3, [r3, #11]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d005      	beq.n	80094cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094c0:	4b04      	ldr	r3, [pc, #16]	@ (80094d4 <HAL_PCD_SuspendCallback+0x48>)
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	4a03      	ldr	r2, [pc, #12]	@ (80094d4 <HAL_PCD_SuspendCallback+0x48>)
 80094c6:	f043 0306 	orr.w	r3, r3, #6
 80094ca:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80094cc:	bf00      	nop
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	e000ed00 	.word	0xe000ed00

080094d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b082      	sub	sp, #8
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fe fd01 	bl	8007eee <USBD_LL_Resume>
}
 80094ec:	bf00      	nop
 80094ee:	3708      	adds	r7, #8
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
 80094fc:	460b      	mov	r3, r1
 80094fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009506:	78fa      	ldrb	r2, [r7, #3]
 8009508:	4611      	mov	r1, r2
 800950a:	4618      	mov	r0, r3
 800950c:	f7fe fd59 	bl	8007fc2 <USBD_LL_IsoOUTIncomplete>
}
 8009510:	bf00      	nop
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	460b      	mov	r3, r1
 8009522:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800952a:	78fa      	ldrb	r2, [r7, #3]
 800952c:	4611      	mov	r1, r2
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe fd15 	bl	8007f5e <USBD_LL_IsoINIncomplete>
}
 8009534:	bf00      	nop
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800954a:	4618      	mov	r0, r3
 800954c:	f7fe fd6b 	bl	8008026 <USBD_LL_DevConnected>
}
 8009550:	bf00      	nop
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009566:	4618      	mov	r0, r3
 8009568:	f7fe fd68 	bl	800803c <USBD_LL_DevDisconnected>
}
 800956c:	bf00      	nop
 800956e:	3708      	adds	r7, #8
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d13c      	bne.n	80095fe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009584:	4a20      	ldr	r2, [pc, #128]	@ (8009608 <USBD_LL_Init+0x94>)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4a1e      	ldr	r2, [pc, #120]	@ (8009608 <USBD_LL_Init+0x94>)
 8009590:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009594:	4b1c      	ldr	r3, [pc, #112]	@ (8009608 <USBD_LL_Init+0x94>)
 8009596:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800959a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800959c:	4b1a      	ldr	r3, [pc, #104]	@ (8009608 <USBD_LL_Init+0x94>)
 800959e:	2204      	movs	r2, #4
 80095a0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80095a2:	4b19      	ldr	r3, [pc, #100]	@ (8009608 <USBD_LL_Init+0x94>)
 80095a4:	2202      	movs	r2, #2
 80095a6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80095a8:	4b17      	ldr	r3, [pc, #92]	@ (8009608 <USBD_LL_Init+0x94>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80095ae:	4b16      	ldr	r3, [pc, #88]	@ (8009608 <USBD_LL_Init+0x94>)
 80095b0:	2202      	movs	r2, #2
 80095b2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80095b4:	4b14      	ldr	r3, [pc, #80]	@ (8009608 <USBD_LL_Init+0x94>)
 80095b6:	2200      	movs	r2, #0
 80095b8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80095ba:	4b13      	ldr	r3, [pc, #76]	@ (8009608 <USBD_LL_Init+0x94>)
 80095bc:	2200      	movs	r2, #0
 80095be:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80095c0:	4b11      	ldr	r3, [pc, #68]	@ (8009608 <USBD_LL_Init+0x94>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80095c6:	4b10      	ldr	r3, [pc, #64]	@ (8009608 <USBD_LL_Init+0x94>)
 80095c8:	2200      	movs	r2, #0
 80095ca:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80095cc:	4b0e      	ldr	r3, [pc, #56]	@ (8009608 <USBD_LL_Init+0x94>)
 80095ce:	2200      	movs	r2, #0
 80095d0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80095d2:	480d      	ldr	r0, [pc, #52]	@ (8009608 <USBD_LL_Init+0x94>)
 80095d4:	f7f9 fbb0 	bl	8002d38 <HAL_PCD_Init>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80095de:	f7f7 fd8d 	bl	80010fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80095e2:	2180      	movs	r1, #128	@ 0x80
 80095e4:	4808      	ldr	r0, [pc, #32]	@ (8009608 <USBD_LL_Init+0x94>)
 80095e6:	f7fa fdda 	bl	800419e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80095ea:	2240      	movs	r2, #64	@ 0x40
 80095ec:	2100      	movs	r1, #0
 80095ee:	4806      	ldr	r0, [pc, #24]	@ (8009608 <USBD_LL_Init+0x94>)
 80095f0:	f7fa fd8e 	bl	8004110 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80095f4:	2280      	movs	r2, #128	@ 0x80
 80095f6:	2101      	movs	r1, #1
 80095f8:	4803      	ldr	r0, [pc, #12]	@ (8009608 <USBD_LL_Init+0x94>)
 80095fa:	f7fa fd89 	bl	8004110 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}
 8009608:	2000401c 	.word	0x2000401c

0800960c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009614:	2300      	movs	r3, #0
 8009616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009618:	2300      	movs	r3, #0
 800961a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009622:	4618      	mov	r0, r3
 8009624:	f7f9 fc97 	bl	8002f56 <HAL_PCD_Start>
 8009628:	4603      	mov	r3, r0
 800962a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800962c:	7bfb      	ldrb	r3, [r7, #15]
 800962e:	4618      	mov	r0, r3
 8009630:	f000 f942 	bl	80098b8 <USBD_Get_USB_Status>
 8009634:	4603      	mov	r3, r0
 8009636:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009638:	7bbb      	ldrb	r3, [r7, #14]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b084      	sub	sp, #16
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
 800964a:	4608      	mov	r0, r1
 800964c:	4611      	mov	r1, r2
 800964e:	461a      	mov	r2, r3
 8009650:	4603      	mov	r3, r0
 8009652:	70fb      	strb	r3, [r7, #3]
 8009654:	460b      	mov	r3, r1
 8009656:	70bb      	strb	r3, [r7, #2]
 8009658:	4613      	mov	r3, r2
 800965a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009660:	2300      	movs	r3, #0
 8009662:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800966a:	78bb      	ldrb	r3, [r7, #2]
 800966c:	883a      	ldrh	r2, [r7, #0]
 800966e:	78f9      	ldrb	r1, [r7, #3]
 8009670:	f7fa f96b 	bl	800394a <HAL_PCD_EP_Open>
 8009674:	4603      	mov	r3, r0
 8009676:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009678:	7bfb      	ldrb	r3, [r7, #15]
 800967a:	4618      	mov	r0, r3
 800967c:	f000 f91c 	bl	80098b8 <USBD_Get_USB_Status>
 8009680:	4603      	mov	r3, r0
 8009682:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009684:	7bbb      	ldrb	r3, [r7, #14]
}
 8009686:	4618      	mov	r0, r3
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b084      	sub	sp, #16
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
 8009696:	460b      	mov	r3, r1
 8009698:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800969e:	2300      	movs	r3, #0
 80096a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096a8:	78fa      	ldrb	r2, [r7, #3]
 80096aa:	4611      	mov	r1, r2
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7fa f9b4 	bl	8003a1a <HAL_PCD_EP_Close>
 80096b2:	4603      	mov	r3, r0
 80096b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096b6:	7bfb      	ldrb	r3, [r7, #15]
 80096b8:	4618      	mov	r0, r3
 80096ba:	f000 f8fd 	bl	80098b8 <USBD_Get_USB_Status>
 80096be:	4603      	mov	r3, r0
 80096c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3710      	adds	r7, #16
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	460b      	mov	r3, r1
 80096d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096d8:	2300      	movs	r3, #0
 80096da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096dc:	2300      	movs	r3, #0
 80096de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096e6:	78fa      	ldrb	r2, [r7, #3]
 80096e8:	4611      	mov	r1, r2
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7fa fa6c 	bl	8003bc8 <HAL_PCD_EP_SetStall>
 80096f0:	4603      	mov	r3, r0
 80096f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
 80096f6:	4618      	mov	r0, r3
 80096f8:	f000 f8de 	bl	80098b8 <USBD_Get_USB_Status>
 80096fc:	4603      	mov	r3, r0
 80096fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009700:	7bbb      	ldrb	r3, [r7, #14]
}
 8009702:	4618      	mov	r0, r3
 8009704:	3710      	adds	r7, #16
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b084      	sub	sp, #16
 800970e:	af00      	add	r7, sp, #0
 8009710:	6078      	str	r0, [r7, #4]
 8009712:	460b      	mov	r3, r1
 8009714:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009724:	78fa      	ldrb	r2, [r7, #3]
 8009726:	4611      	mov	r1, r2
 8009728:	4618      	mov	r0, r3
 800972a:	f7fa fab0 	bl	8003c8e <HAL_PCD_EP_ClrStall>
 800972e:	4603      	mov	r3, r0
 8009730:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009732:	7bfb      	ldrb	r3, [r7, #15]
 8009734:	4618      	mov	r0, r3
 8009736:	f000 f8bf 	bl	80098b8 <USBD_Get_USB_Status>
 800973a:	4603      	mov	r3, r0
 800973c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800973e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	460b      	mov	r3, r1
 8009752:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800975a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800975c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009760:	2b00      	cmp	r3, #0
 8009762:	da0b      	bge.n	800977c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009764:	78fb      	ldrb	r3, [r7, #3]
 8009766:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800976a:	68f9      	ldr	r1, [r7, #12]
 800976c:	4613      	mov	r3, r2
 800976e:	00db      	lsls	r3, r3, #3
 8009770:	4413      	add	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	440b      	add	r3, r1
 8009776:	3316      	adds	r3, #22
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	e00b      	b.n	8009794 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800977c:	78fb      	ldrb	r3, [r7, #3]
 800977e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009782:	68f9      	ldr	r1, [r7, #12]
 8009784:	4613      	mov	r3, r2
 8009786:	00db      	lsls	r3, r3, #3
 8009788:	4413      	add	r3, r2
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	440b      	add	r3, r1
 800978e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009792:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009794:	4618      	mov	r0, r3
 8009796:	3714      	adds	r7, #20
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
 80097a8:	460b      	mov	r3, r1
 80097aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097b0:	2300      	movs	r3, #0
 80097b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097ba:	78fa      	ldrb	r2, [r7, #3]
 80097bc:	4611      	mov	r1, r2
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fa f89f 	bl	8003902 <HAL_PCD_SetAddress>
 80097c4:	4603      	mov	r3, r0
 80097c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097c8:	7bfb      	ldrb	r3, [r7, #15]
 80097ca:	4618      	mov	r0, r3
 80097cc:	f000 f874 	bl	80098b8 <USBD_Get_USB_Status>
 80097d0:	4603      	mov	r3, r0
 80097d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b086      	sub	sp, #24
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	60f8      	str	r0, [r7, #12]
 80097e6:	607a      	str	r2, [r7, #4]
 80097e8:	603b      	str	r3, [r7, #0]
 80097ea:	460b      	mov	r3, r1
 80097ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ee:	2300      	movs	r3, #0
 80097f0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097f2:	2300      	movs	r3, #0
 80097f4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80097fc:	7af9      	ldrb	r1, [r7, #11]
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	f7fa f9a7 	bl	8003b54 <HAL_PCD_EP_Transmit>
 8009806:	4603      	mov	r3, r0
 8009808:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800980a:	7dfb      	ldrb	r3, [r7, #23]
 800980c:	4618      	mov	r0, r3
 800980e:	f000 f853 	bl	80098b8 <USBD_Get_USB_Status>
 8009812:	4603      	mov	r3, r0
 8009814:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009816:	7dbb      	ldrb	r3, [r7, #22]
}
 8009818:	4618      	mov	r0, r3
 800981a:	3718      	adds	r7, #24
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	607a      	str	r2, [r7, #4]
 800982a:	603b      	str	r3, [r7, #0]
 800982c:	460b      	mov	r3, r1
 800982e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800983e:	7af9      	ldrb	r1, [r7, #11]
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	f7fa f933 	bl	8003aae <HAL_PCD_EP_Receive>
 8009848:	4603      	mov	r3, r0
 800984a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800984c:	7dfb      	ldrb	r3, [r7, #23]
 800984e:	4618      	mov	r0, r3
 8009850:	f000 f832 	bl	80098b8 <USBD_Get_USB_Status>
 8009854:	4603      	mov	r3, r0
 8009856:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009858:	7dbb      	ldrb	r3, [r7, #22]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3718      	adds	r7, #24
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b082      	sub	sp, #8
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	460b      	mov	r3, r1
 800986c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009874:	78fa      	ldrb	r2, [r7, #3]
 8009876:	4611      	mov	r1, r2
 8009878:	4618      	mov	r0, r3
 800987a:	f7fa f953 	bl	8003b24 <HAL_PCD_EP_GetRxCount>
 800987e:	4603      	mov	r3, r0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3708      	adds	r7, #8
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009890:	4b03      	ldr	r3, [pc, #12]	@ (80098a0 <USBD_static_malloc+0x18>)
}
 8009892:	4618      	mov	r0, r3
 8009894:	370c      	adds	r7, #12
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	20004500 	.word	0x20004500

080098a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]

}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b085      	sub	sp, #20
 80098bc:	af00      	add	r7, sp, #0
 80098be:	4603      	mov	r3, r0
 80098c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80098c6:	79fb      	ldrb	r3, [r7, #7]
 80098c8:	2b03      	cmp	r3, #3
 80098ca:	d817      	bhi.n	80098fc <USBD_Get_USB_Status+0x44>
 80098cc:	a201      	add	r2, pc, #4	@ (adr r2, 80098d4 <USBD_Get_USB_Status+0x1c>)
 80098ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d2:	bf00      	nop
 80098d4:	080098e5 	.word	0x080098e5
 80098d8:	080098eb 	.word	0x080098eb
 80098dc:	080098f1 	.word	0x080098f1
 80098e0:	080098f7 	.word	0x080098f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	73fb      	strb	r3, [r7, #15]
    break;
 80098e8:	e00b      	b.n	8009902 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80098ea:	2303      	movs	r3, #3
 80098ec:	73fb      	strb	r3, [r7, #15]
    break;
 80098ee:	e008      	b.n	8009902 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80098f0:	2301      	movs	r3, #1
 80098f2:	73fb      	strb	r3, [r7, #15]
    break;
 80098f4:	e005      	b.n	8009902 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80098f6:	2303      	movs	r3, #3
 80098f8:	73fb      	strb	r3, [r7, #15]
    break;
 80098fa:	e002      	b.n	8009902 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80098fc:	2303      	movs	r3, #3
 80098fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009900:	bf00      	nop
  }
  return usb_status;
 8009902:	7bfb      	ldrb	r3, [r7, #15]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3714      	adds	r7, #20
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <atoi>:
 8009910:	220a      	movs	r2, #10
 8009912:	2100      	movs	r1, #0
 8009914:	f000 b87a 	b.w	8009a0c <strtol>

08009918 <_strtol_l.constprop.0>:
 8009918:	2b24      	cmp	r3, #36	@ 0x24
 800991a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800991e:	4686      	mov	lr, r0
 8009920:	4690      	mov	r8, r2
 8009922:	d801      	bhi.n	8009928 <_strtol_l.constprop.0+0x10>
 8009924:	2b01      	cmp	r3, #1
 8009926:	d106      	bne.n	8009936 <_strtol_l.constprop.0+0x1e>
 8009928:	f000 fa70 	bl	8009e0c <__errno>
 800992c:	2316      	movs	r3, #22
 800992e:	6003      	str	r3, [r0, #0]
 8009930:	2000      	movs	r0, #0
 8009932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009936:	4834      	ldr	r0, [pc, #208]	@ (8009a08 <_strtol_l.constprop.0+0xf0>)
 8009938:	460d      	mov	r5, r1
 800993a:	462a      	mov	r2, r5
 800993c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009940:	5d06      	ldrb	r6, [r0, r4]
 8009942:	f016 0608 	ands.w	r6, r6, #8
 8009946:	d1f8      	bne.n	800993a <_strtol_l.constprop.0+0x22>
 8009948:	2c2d      	cmp	r4, #45	@ 0x2d
 800994a:	d12d      	bne.n	80099a8 <_strtol_l.constprop.0+0x90>
 800994c:	782c      	ldrb	r4, [r5, #0]
 800994e:	2601      	movs	r6, #1
 8009950:	1c95      	adds	r5, r2, #2
 8009952:	f033 0210 	bics.w	r2, r3, #16
 8009956:	d109      	bne.n	800996c <_strtol_l.constprop.0+0x54>
 8009958:	2c30      	cmp	r4, #48	@ 0x30
 800995a:	d12a      	bne.n	80099b2 <_strtol_l.constprop.0+0x9a>
 800995c:	782a      	ldrb	r2, [r5, #0]
 800995e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009962:	2a58      	cmp	r2, #88	@ 0x58
 8009964:	d125      	bne.n	80099b2 <_strtol_l.constprop.0+0x9a>
 8009966:	786c      	ldrb	r4, [r5, #1]
 8009968:	2310      	movs	r3, #16
 800996a:	3502      	adds	r5, #2
 800996c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009970:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009974:	2200      	movs	r2, #0
 8009976:	fbbc f9f3 	udiv	r9, ip, r3
 800997a:	4610      	mov	r0, r2
 800997c:	fb03 ca19 	mls	sl, r3, r9, ip
 8009980:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009984:	2f09      	cmp	r7, #9
 8009986:	d81b      	bhi.n	80099c0 <_strtol_l.constprop.0+0xa8>
 8009988:	463c      	mov	r4, r7
 800998a:	42a3      	cmp	r3, r4
 800998c:	dd27      	ble.n	80099de <_strtol_l.constprop.0+0xc6>
 800998e:	1c57      	adds	r7, r2, #1
 8009990:	d007      	beq.n	80099a2 <_strtol_l.constprop.0+0x8a>
 8009992:	4581      	cmp	r9, r0
 8009994:	d320      	bcc.n	80099d8 <_strtol_l.constprop.0+0xc0>
 8009996:	d101      	bne.n	800999c <_strtol_l.constprop.0+0x84>
 8009998:	45a2      	cmp	sl, r4
 800999a:	db1d      	blt.n	80099d8 <_strtol_l.constprop.0+0xc0>
 800999c:	fb00 4003 	mla	r0, r0, r3, r4
 80099a0:	2201      	movs	r2, #1
 80099a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099a6:	e7eb      	b.n	8009980 <_strtol_l.constprop.0+0x68>
 80099a8:	2c2b      	cmp	r4, #43	@ 0x2b
 80099aa:	bf04      	itt	eq
 80099ac:	782c      	ldrbeq	r4, [r5, #0]
 80099ae:	1c95      	addeq	r5, r2, #2
 80099b0:	e7cf      	b.n	8009952 <_strtol_l.constprop.0+0x3a>
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1da      	bne.n	800996c <_strtol_l.constprop.0+0x54>
 80099b6:	2c30      	cmp	r4, #48	@ 0x30
 80099b8:	bf0c      	ite	eq
 80099ba:	2308      	moveq	r3, #8
 80099bc:	230a      	movne	r3, #10
 80099be:	e7d5      	b.n	800996c <_strtol_l.constprop.0+0x54>
 80099c0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80099c4:	2f19      	cmp	r7, #25
 80099c6:	d801      	bhi.n	80099cc <_strtol_l.constprop.0+0xb4>
 80099c8:	3c37      	subs	r4, #55	@ 0x37
 80099ca:	e7de      	b.n	800998a <_strtol_l.constprop.0+0x72>
 80099cc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80099d0:	2f19      	cmp	r7, #25
 80099d2:	d804      	bhi.n	80099de <_strtol_l.constprop.0+0xc6>
 80099d4:	3c57      	subs	r4, #87	@ 0x57
 80099d6:	e7d8      	b.n	800998a <_strtol_l.constprop.0+0x72>
 80099d8:	f04f 32ff 	mov.w	r2, #4294967295
 80099dc:	e7e1      	b.n	80099a2 <_strtol_l.constprop.0+0x8a>
 80099de:	1c53      	adds	r3, r2, #1
 80099e0:	d108      	bne.n	80099f4 <_strtol_l.constprop.0+0xdc>
 80099e2:	2322      	movs	r3, #34	@ 0x22
 80099e4:	f8ce 3000 	str.w	r3, [lr]
 80099e8:	4660      	mov	r0, ip
 80099ea:	f1b8 0f00 	cmp.w	r8, #0
 80099ee:	d0a0      	beq.n	8009932 <_strtol_l.constprop.0+0x1a>
 80099f0:	1e69      	subs	r1, r5, #1
 80099f2:	e006      	b.n	8009a02 <_strtol_l.constprop.0+0xea>
 80099f4:	b106      	cbz	r6, 80099f8 <_strtol_l.constprop.0+0xe0>
 80099f6:	4240      	negs	r0, r0
 80099f8:	f1b8 0f00 	cmp.w	r8, #0
 80099fc:	d099      	beq.n	8009932 <_strtol_l.constprop.0+0x1a>
 80099fe:	2a00      	cmp	r2, #0
 8009a00:	d1f6      	bne.n	80099f0 <_strtol_l.constprop.0+0xd8>
 8009a02:	f8c8 1000 	str.w	r1, [r8]
 8009a06:	e794      	b.n	8009932 <_strtol_l.constprop.0+0x1a>
 8009a08:	0800af65 	.word	0x0800af65

08009a0c <strtol>:
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	460a      	mov	r2, r1
 8009a10:	4601      	mov	r1, r0
 8009a12:	4802      	ldr	r0, [pc, #8]	@ (8009a1c <strtol+0x10>)
 8009a14:	6800      	ldr	r0, [r0, #0]
 8009a16:	f7ff bf7f 	b.w	8009918 <_strtol_l.constprop.0>
 8009a1a:	bf00      	nop
 8009a1c:	20000134 	.word	0x20000134

08009a20 <std>:
 8009a20:	2300      	movs	r3, #0
 8009a22:	b510      	push	{r4, lr}
 8009a24:	4604      	mov	r4, r0
 8009a26:	e9c0 3300 	strd	r3, r3, [r0]
 8009a2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a2e:	6083      	str	r3, [r0, #8]
 8009a30:	8181      	strh	r1, [r0, #12]
 8009a32:	6643      	str	r3, [r0, #100]	@ 0x64
 8009a34:	81c2      	strh	r2, [r0, #14]
 8009a36:	6183      	str	r3, [r0, #24]
 8009a38:	4619      	mov	r1, r3
 8009a3a:	2208      	movs	r2, #8
 8009a3c:	305c      	adds	r0, #92	@ 0x5c
 8009a3e:	f000 f928 	bl	8009c92 <memset>
 8009a42:	4b0d      	ldr	r3, [pc, #52]	@ (8009a78 <std+0x58>)
 8009a44:	6263      	str	r3, [r4, #36]	@ 0x24
 8009a46:	4b0d      	ldr	r3, [pc, #52]	@ (8009a7c <std+0x5c>)
 8009a48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a80 <std+0x60>)
 8009a4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a84 <std+0x64>)
 8009a50:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a52:	4b0d      	ldr	r3, [pc, #52]	@ (8009a88 <std+0x68>)
 8009a54:	6224      	str	r4, [r4, #32]
 8009a56:	429c      	cmp	r4, r3
 8009a58:	d006      	beq.n	8009a68 <std+0x48>
 8009a5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a5e:	4294      	cmp	r4, r2
 8009a60:	d002      	beq.n	8009a68 <std+0x48>
 8009a62:	33d0      	adds	r3, #208	@ 0xd0
 8009a64:	429c      	cmp	r4, r3
 8009a66:	d105      	bne.n	8009a74 <std+0x54>
 8009a68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a70:	f000 b9f6 	b.w	8009e60 <__retarget_lock_init_recursive>
 8009a74:	bd10      	pop	{r4, pc}
 8009a76:	bf00      	nop
 8009a78:	08009c0d 	.word	0x08009c0d
 8009a7c:	08009c2f 	.word	0x08009c2f
 8009a80:	08009c67 	.word	0x08009c67
 8009a84:	08009c8b 	.word	0x08009c8b
 8009a88:	20004720 	.word	0x20004720

08009a8c <stdio_exit_handler>:
 8009a8c:	4a02      	ldr	r2, [pc, #8]	@ (8009a98 <stdio_exit_handler+0xc>)
 8009a8e:	4903      	ldr	r1, [pc, #12]	@ (8009a9c <stdio_exit_handler+0x10>)
 8009a90:	4803      	ldr	r0, [pc, #12]	@ (8009aa0 <stdio_exit_handler+0x14>)
 8009a92:	f000 b869 	b.w	8009b68 <_fwalk_sglue>
 8009a96:	bf00      	nop
 8009a98:	20000128 	.word	0x20000128
 8009a9c:	0800a795 	.word	0x0800a795
 8009aa0:	20000138 	.word	0x20000138

08009aa4 <cleanup_stdio>:
 8009aa4:	6841      	ldr	r1, [r0, #4]
 8009aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8009ad8 <cleanup_stdio+0x34>)
 8009aa8:	4299      	cmp	r1, r3
 8009aaa:	b510      	push	{r4, lr}
 8009aac:	4604      	mov	r4, r0
 8009aae:	d001      	beq.n	8009ab4 <cleanup_stdio+0x10>
 8009ab0:	f000 fe70 	bl	800a794 <_fflush_r>
 8009ab4:	68a1      	ldr	r1, [r4, #8]
 8009ab6:	4b09      	ldr	r3, [pc, #36]	@ (8009adc <cleanup_stdio+0x38>)
 8009ab8:	4299      	cmp	r1, r3
 8009aba:	d002      	beq.n	8009ac2 <cleanup_stdio+0x1e>
 8009abc:	4620      	mov	r0, r4
 8009abe:	f000 fe69 	bl	800a794 <_fflush_r>
 8009ac2:	68e1      	ldr	r1, [r4, #12]
 8009ac4:	4b06      	ldr	r3, [pc, #24]	@ (8009ae0 <cleanup_stdio+0x3c>)
 8009ac6:	4299      	cmp	r1, r3
 8009ac8:	d004      	beq.n	8009ad4 <cleanup_stdio+0x30>
 8009aca:	4620      	mov	r0, r4
 8009acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ad0:	f000 be60 	b.w	800a794 <_fflush_r>
 8009ad4:	bd10      	pop	{r4, pc}
 8009ad6:	bf00      	nop
 8009ad8:	20004720 	.word	0x20004720
 8009adc:	20004788 	.word	0x20004788
 8009ae0:	200047f0 	.word	0x200047f0

08009ae4 <global_stdio_init.part.0>:
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8009b14 <global_stdio_init.part.0+0x30>)
 8009ae8:	4c0b      	ldr	r4, [pc, #44]	@ (8009b18 <global_stdio_init.part.0+0x34>)
 8009aea:	4a0c      	ldr	r2, [pc, #48]	@ (8009b1c <global_stdio_init.part.0+0x38>)
 8009aec:	601a      	str	r2, [r3, #0]
 8009aee:	4620      	mov	r0, r4
 8009af0:	2200      	movs	r2, #0
 8009af2:	2104      	movs	r1, #4
 8009af4:	f7ff ff94 	bl	8009a20 <std>
 8009af8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009afc:	2201      	movs	r2, #1
 8009afe:	2109      	movs	r1, #9
 8009b00:	f7ff ff8e 	bl	8009a20 <std>
 8009b04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009b08:	2202      	movs	r2, #2
 8009b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b0e:	2112      	movs	r1, #18
 8009b10:	f7ff bf86 	b.w	8009a20 <std>
 8009b14:	20004858 	.word	0x20004858
 8009b18:	20004720 	.word	0x20004720
 8009b1c:	08009a8d 	.word	0x08009a8d

08009b20 <__sfp_lock_acquire>:
 8009b20:	4801      	ldr	r0, [pc, #4]	@ (8009b28 <__sfp_lock_acquire+0x8>)
 8009b22:	f000 b99e 	b.w	8009e62 <__retarget_lock_acquire_recursive>
 8009b26:	bf00      	nop
 8009b28:	20004861 	.word	0x20004861

08009b2c <__sfp_lock_release>:
 8009b2c:	4801      	ldr	r0, [pc, #4]	@ (8009b34 <__sfp_lock_release+0x8>)
 8009b2e:	f000 b999 	b.w	8009e64 <__retarget_lock_release_recursive>
 8009b32:	bf00      	nop
 8009b34:	20004861 	.word	0x20004861

08009b38 <__sinit>:
 8009b38:	b510      	push	{r4, lr}
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	f7ff fff0 	bl	8009b20 <__sfp_lock_acquire>
 8009b40:	6a23      	ldr	r3, [r4, #32]
 8009b42:	b11b      	cbz	r3, 8009b4c <__sinit+0x14>
 8009b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b48:	f7ff bff0 	b.w	8009b2c <__sfp_lock_release>
 8009b4c:	4b04      	ldr	r3, [pc, #16]	@ (8009b60 <__sinit+0x28>)
 8009b4e:	6223      	str	r3, [r4, #32]
 8009b50:	4b04      	ldr	r3, [pc, #16]	@ (8009b64 <__sinit+0x2c>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1f5      	bne.n	8009b44 <__sinit+0xc>
 8009b58:	f7ff ffc4 	bl	8009ae4 <global_stdio_init.part.0>
 8009b5c:	e7f2      	b.n	8009b44 <__sinit+0xc>
 8009b5e:	bf00      	nop
 8009b60:	08009aa5 	.word	0x08009aa5
 8009b64:	20004858 	.word	0x20004858

08009b68 <_fwalk_sglue>:
 8009b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b6c:	4607      	mov	r7, r0
 8009b6e:	4688      	mov	r8, r1
 8009b70:	4614      	mov	r4, r2
 8009b72:	2600      	movs	r6, #0
 8009b74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b78:	f1b9 0901 	subs.w	r9, r9, #1
 8009b7c:	d505      	bpl.n	8009b8a <_fwalk_sglue+0x22>
 8009b7e:	6824      	ldr	r4, [r4, #0]
 8009b80:	2c00      	cmp	r4, #0
 8009b82:	d1f7      	bne.n	8009b74 <_fwalk_sglue+0xc>
 8009b84:	4630      	mov	r0, r6
 8009b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b8a:	89ab      	ldrh	r3, [r5, #12]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d907      	bls.n	8009ba0 <_fwalk_sglue+0x38>
 8009b90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b94:	3301      	adds	r3, #1
 8009b96:	d003      	beq.n	8009ba0 <_fwalk_sglue+0x38>
 8009b98:	4629      	mov	r1, r5
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	47c0      	blx	r8
 8009b9e:	4306      	orrs	r6, r0
 8009ba0:	3568      	adds	r5, #104	@ 0x68
 8009ba2:	e7e9      	b.n	8009b78 <_fwalk_sglue+0x10>

08009ba4 <sniprintf>:
 8009ba4:	b40c      	push	{r2, r3}
 8009ba6:	b530      	push	{r4, r5, lr}
 8009ba8:	4b17      	ldr	r3, [pc, #92]	@ (8009c08 <sniprintf+0x64>)
 8009baa:	1e0c      	subs	r4, r1, #0
 8009bac:	681d      	ldr	r5, [r3, #0]
 8009bae:	b09d      	sub	sp, #116	@ 0x74
 8009bb0:	da08      	bge.n	8009bc4 <sniprintf+0x20>
 8009bb2:	238b      	movs	r3, #139	@ 0x8b
 8009bb4:	602b      	str	r3, [r5, #0]
 8009bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bba:	b01d      	add	sp, #116	@ 0x74
 8009bbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bc0:	b002      	add	sp, #8
 8009bc2:	4770      	bx	lr
 8009bc4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009bc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009bcc:	bf14      	ite	ne
 8009bce:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009bd2:	4623      	moveq	r3, r4
 8009bd4:	9304      	str	r3, [sp, #16]
 8009bd6:	9307      	str	r3, [sp, #28]
 8009bd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009bdc:	9002      	str	r0, [sp, #8]
 8009bde:	9006      	str	r0, [sp, #24]
 8009be0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009be4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009be6:	ab21      	add	r3, sp, #132	@ 0x84
 8009be8:	a902      	add	r1, sp, #8
 8009bea:	4628      	mov	r0, r5
 8009bec:	9301      	str	r3, [sp, #4]
 8009bee:	f000 fac3 	bl	800a178 <_svfiprintf_r>
 8009bf2:	1c43      	adds	r3, r0, #1
 8009bf4:	bfbc      	itt	lt
 8009bf6:	238b      	movlt	r3, #139	@ 0x8b
 8009bf8:	602b      	strlt	r3, [r5, #0]
 8009bfa:	2c00      	cmp	r4, #0
 8009bfc:	d0dd      	beq.n	8009bba <sniprintf+0x16>
 8009bfe:	9b02      	ldr	r3, [sp, #8]
 8009c00:	2200      	movs	r2, #0
 8009c02:	701a      	strb	r2, [r3, #0]
 8009c04:	e7d9      	b.n	8009bba <sniprintf+0x16>
 8009c06:	bf00      	nop
 8009c08:	20000134 	.word	0x20000134

08009c0c <__sread>:
 8009c0c:	b510      	push	{r4, lr}
 8009c0e:	460c      	mov	r4, r1
 8009c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c14:	f000 f8d6 	bl	8009dc4 <_read_r>
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	bfab      	itete	ge
 8009c1c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009c1e:	89a3      	ldrhlt	r3, [r4, #12]
 8009c20:	181b      	addge	r3, r3, r0
 8009c22:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009c26:	bfac      	ite	ge
 8009c28:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009c2a:	81a3      	strhlt	r3, [r4, #12]
 8009c2c:	bd10      	pop	{r4, pc}

08009c2e <__swrite>:
 8009c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c32:	461f      	mov	r7, r3
 8009c34:	898b      	ldrh	r3, [r1, #12]
 8009c36:	05db      	lsls	r3, r3, #23
 8009c38:	4605      	mov	r5, r0
 8009c3a:	460c      	mov	r4, r1
 8009c3c:	4616      	mov	r6, r2
 8009c3e:	d505      	bpl.n	8009c4c <__swrite+0x1e>
 8009c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c44:	2302      	movs	r3, #2
 8009c46:	2200      	movs	r2, #0
 8009c48:	f000 f8aa 	bl	8009da0 <_lseek_r>
 8009c4c:	89a3      	ldrh	r3, [r4, #12]
 8009c4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c52:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c56:	81a3      	strh	r3, [r4, #12]
 8009c58:	4632      	mov	r2, r6
 8009c5a:	463b      	mov	r3, r7
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c62:	f000 b8c1 	b.w	8009de8 <_write_r>

08009c66 <__sseek>:
 8009c66:	b510      	push	{r4, lr}
 8009c68:	460c      	mov	r4, r1
 8009c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c6e:	f000 f897 	bl	8009da0 <_lseek_r>
 8009c72:	1c43      	adds	r3, r0, #1
 8009c74:	89a3      	ldrh	r3, [r4, #12]
 8009c76:	bf15      	itete	ne
 8009c78:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009c7a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009c7e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009c82:	81a3      	strheq	r3, [r4, #12]
 8009c84:	bf18      	it	ne
 8009c86:	81a3      	strhne	r3, [r4, #12]
 8009c88:	bd10      	pop	{r4, pc}

08009c8a <__sclose>:
 8009c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c8e:	f000 b877 	b.w	8009d80 <_close_r>

08009c92 <memset>:
 8009c92:	4402      	add	r2, r0
 8009c94:	4603      	mov	r3, r0
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d100      	bne.n	8009c9c <memset+0xa>
 8009c9a:	4770      	bx	lr
 8009c9c:	f803 1b01 	strb.w	r1, [r3], #1
 8009ca0:	e7f9      	b.n	8009c96 <memset+0x4>

08009ca2 <strncmp>:
 8009ca2:	b510      	push	{r4, lr}
 8009ca4:	b16a      	cbz	r2, 8009cc2 <strncmp+0x20>
 8009ca6:	3901      	subs	r1, #1
 8009ca8:	1884      	adds	r4, r0, r2
 8009caa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d103      	bne.n	8009cbe <strncmp+0x1c>
 8009cb6:	42a0      	cmp	r0, r4
 8009cb8:	d001      	beq.n	8009cbe <strncmp+0x1c>
 8009cba:	2a00      	cmp	r2, #0
 8009cbc:	d1f5      	bne.n	8009caa <strncmp+0x8>
 8009cbe:	1ad0      	subs	r0, r2, r3
 8009cc0:	bd10      	pop	{r4, pc}
 8009cc2:	4610      	mov	r0, r2
 8009cc4:	e7fc      	b.n	8009cc0 <strncmp+0x1e>
	...

08009cc8 <strtok>:
 8009cc8:	4b16      	ldr	r3, [pc, #88]	@ (8009d24 <strtok+0x5c>)
 8009cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cce:	681f      	ldr	r7, [r3, #0]
 8009cd0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009cd2:	4605      	mov	r5, r0
 8009cd4:	460e      	mov	r6, r1
 8009cd6:	b9ec      	cbnz	r4, 8009d14 <strtok+0x4c>
 8009cd8:	2050      	movs	r0, #80	@ 0x50
 8009cda:	f000 f93b 	bl	8009f54 <malloc>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	6478      	str	r0, [r7, #68]	@ 0x44
 8009ce2:	b920      	cbnz	r0, 8009cee <strtok+0x26>
 8009ce4:	4b10      	ldr	r3, [pc, #64]	@ (8009d28 <strtok+0x60>)
 8009ce6:	4811      	ldr	r0, [pc, #68]	@ (8009d2c <strtok+0x64>)
 8009ce8:	215b      	movs	r1, #91	@ 0x5b
 8009cea:	f000 f8cb 	bl	8009e84 <__assert_func>
 8009cee:	e9c0 4400 	strd	r4, r4, [r0]
 8009cf2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009cf6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009cfa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009cfe:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009d02:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009d06:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009d0a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009d0e:	6184      	str	r4, [r0, #24]
 8009d10:	7704      	strb	r4, [r0, #28]
 8009d12:	6244      	str	r4, [r0, #36]	@ 0x24
 8009d14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d16:	4631      	mov	r1, r6
 8009d18:	4628      	mov	r0, r5
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d20:	f000 b806 	b.w	8009d30 <__strtok_r>
 8009d24:	20000134 	.word	0x20000134
 8009d28:	0800b065 	.word	0x0800b065
 8009d2c:	0800b07c 	.word	0x0800b07c

08009d30 <__strtok_r>:
 8009d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d32:	4604      	mov	r4, r0
 8009d34:	b908      	cbnz	r0, 8009d3a <__strtok_r+0xa>
 8009d36:	6814      	ldr	r4, [r2, #0]
 8009d38:	b144      	cbz	r4, 8009d4c <__strtok_r+0x1c>
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009d40:	460f      	mov	r7, r1
 8009d42:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009d46:	b91e      	cbnz	r6, 8009d50 <__strtok_r+0x20>
 8009d48:	b965      	cbnz	r5, 8009d64 <__strtok_r+0x34>
 8009d4a:	6015      	str	r5, [r2, #0]
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	e005      	b.n	8009d5c <__strtok_r+0x2c>
 8009d50:	42b5      	cmp	r5, r6
 8009d52:	d1f6      	bne.n	8009d42 <__strtok_r+0x12>
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d1f0      	bne.n	8009d3a <__strtok_r+0xa>
 8009d58:	6014      	str	r4, [r2, #0]
 8009d5a:	7003      	strb	r3, [r0, #0]
 8009d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d5e:	461c      	mov	r4, r3
 8009d60:	e00c      	b.n	8009d7c <__strtok_r+0x4c>
 8009d62:	b915      	cbnz	r5, 8009d6a <__strtok_r+0x3a>
 8009d64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009d68:	460e      	mov	r6, r1
 8009d6a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009d6e:	42ab      	cmp	r3, r5
 8009d70:	d1f7      	bne.n	8009d62 <__strtok_r+0x32>
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d0f3      	beq.n	8009d5e <__strtok_r+0x2e>
 8009d76:	2300      	movs	r3, #0
 8009d78:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009d7c:	6014      	str	r4, [r2, #0]
 8009d7e:	e7ed      	b.n	8009d5c <__strtok_r+0x2c>

08009d80 <_close_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4d06      	ldr	r5, [pc, #24]	@ (8009d9c <_close_r+0x1c>)
 8009d84:	2300      	movs	r3, #0
 8009d86:	4604      	mov	r4, r0
 8009d88:	4608      	mov	r0, r1
 8009d8a:	602b      	str	r3, [r5, #0]
 8009d8c:	f7f7 fbe0 	bl	8001550 <_close>
 8009d90:	1c43      	adds	r3, r0, #1
 8009d92:	d102      	bne.n	8009d9a <_close_r+0x1a>
 8009d94:	682b      	ldr	r3, [r5, #0]
 8009d96:	b103      	cbz	r3, 8009d9a <_close_r+0x1a>
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	bd38      	pop	{r3, r4, r5, pc}
 8009d9c:	2000485c 	.word	0x2000485c

08009da0 <_lseek_r>:
 8009da0:	b538      	push	{r3, r4, r5, lr}
 8009da2:	4d07      	ldr	r5, [pc, #28]	@ (8009dc0 <_lseek_r+0x20>)
 8009da4:	4604      	mov	r4, r0
 8009da6:	4608      	mov	r0, r1
 8009da8:	4611      	mov	r1, r2
 8009daa:	2200      	movs	r2, #0
 8009dac:	602a      	str	r2, [r5, #0]
 8009dae:	461a      	mov	r2, r3
 8009db0:	f7f7 fbf5 	bl	800159e <_lseek>
 8009db4:	1c43      	adds	r3, r0, #1
 8009db6:	d102      	bne.n	8009dbe <_lseek_r+0x1e>
 8009db8:	682b      	ldr	r3, [r5, #0]
 8009dba:	b103      	cbz	r3, 8009dbe <_lseek_r+0x1e>
 8009dbc:	6023      	str	r3, [r4, #0]
 8009dbe:	bd38      	pop	{r3, r4, r5, pc}
 8009dc0:	2000485c 	.word	0x2000485c

08009dc4 <_read_r>:
 8009dc4:	b538      	push	{r3, r4, r5, lr}
 8009dc6:	4d07      	ldr	r5, [pc, #28]	@ (8009de4 <_read_r+0x20>)
 8009dc8:	4604      	mov	r4, r0
 8009dca:	4608      	mov	r0, r1
 8009dcc:	4611      	mov	r1, r2
 8009dce:	2200      	movs	r2, #0
 8009dd0:	602a      	str	r2, [r5, #0]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	f7f7 fb83 	bl	80014de <_read>
 8009dd8:	1c43      	adds	r3, r0, #1
 8009dda:	d102      	bne.n	8009de2 <_read_r+0x1e>
 8009ddc:	682b      	ldr	r3, [r5, #0]
 8009dde:	b103      	cbz	r3, 8009de2 <_read_r+0x1e>
 8009de0:	6023      	str	r3, [r4, #0]
 8009de2:	bd38      	pop	{r3, r4, r5, pc}
 8009de4:	2000485c 	.word	0x2000485c

08009de8 <_write_r>:
 8009de8:	b538      	push	{r3, r4, r5, lr}
 8009dea:	4d07      	ldr	r5, [pc, #28]	@ (8009e08 <_write_r+0x20>)
 8009dec:	4604      	mov	r4, r0
 8009dee:	4608      	mov	r0, r1
 8009df0:	4611      	mov	r1, r2
 8009df2:	2200      	movs	r2, #0
 8009df4:	602a      	str	r2, [r5, #0]
 8009df6:	461a      	mov	r2, r3
 8009df8:	f7f7 fb8e 	bl	8001518 <_write>
 8009dfc:	1c43      	adds	r3, r0, #1
 8009dfe:	d102      	bne.n	8009e06 <_write_r+0x1e>
 8009e00:	682b      	ldr	r3, [r5, #0]
 8009e02:	b103      	cbz	r3, 8009e06 <_write_r+0x1e>
 8009e04:	6023      	str	r3, [r4, #0]
 8009e06:	bd38      	pop	{r3, r4, r5, pc}
 8009e08:	2000485c 	.word	0x2000485c

08009e0c <__errno>:
 8009e0c:	4b01      	ldr	r3, [pc, #4]	@ (8009e14 <__errno+0x8>)
 8009e0e:	6818      	ldr	r0, [r3, #0]
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	20000134 	.word	0x20000134

08009e18 <__libc_init_array>:
 8009e18:	b570      	push	{r4, r5, r6, lr}
 8009e1a:	4d0d      	ldr	r5, [pc, #52]	@ (8009e50 <__libc_init_array+0x38>)
 8009e1c:	4c0d      	ldr	r4, [pc, #52]	@ (8009e54 <__libc_init_array+0x3c>)
 8009e1e:	1b64      	subs	r4, r4, r5
 8009e20:	10a4      	asrs	r4, r4, #2
 8009e22:	2600      	movs	r6, #0
 8009e24:	42a6      	cmp	r6, r4
 8009e26:	d109      	bne.n	8009e3c <__libc_init_array+0x24>
 8009e28:	4d0b      	ldr	r5, [pc, #44]	@ (8009e58 <__libc_init_array+0x40>)
 8009e2a:	4c0c      	ldr	r4, [pc, #48]	@ (8009e5c <__libc_init_array+0x44>)
 8009e2c:	f000 fff0 	bl	800ae10 <_init>
 8009e30:	1b64      	subs	r4, r4, r5
 8009e32:	10a4      	asrs	r4, r4, #2
 8009e34:	2600      	movs	r6, #0
 8009e36:	42a6      	cmp	r6, r4
 8009e38:	d105      	bne.n	8009e46 <__libc_init_array+0x2e>
 8009e3a:	bd70      	pop	{r4, r5, r6, pc}
 8009e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e40:	4798      	blx	r3
 8009e42:	3601      	adds	r6, #1
 8009e44:	e7ee      	b.n	8009e24 <__libc_init_array+0xc>
 8009e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e4a:	4798      	blx	r3
 8009e4c:	3601      	adds	r6, #1
 8009e4e:	e7f2      	b.n	8009e36 <__libc_init_array+0x1e>
 8009e50:	0800b150 	.word	0x0800b150
 8009e54:	0800b150 	.word	0x0800b150
 8009e58:	0800b150 	.word	0x0800b150
 8009e5c:	0800b154 	.word	0x0800b154

08009e60 <__retarget_lock_init_recursive>:
 8009e60:	4770      	bx	lr

08009e62 <__retarget_lock_acquire_recursive>:
 8009e62:	4770      	bx	lr

08009e64 <__retarget_lock_release_recursive>:
 8009e64:	4770      	bx	lr

08009e66 <memcpy>:
 8009e66:	440a      	add	r2, r1
 8009e68:	4291      	cmp	r1, r2
 8009e6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e6e:	d100      	bne.n	8009e72 <memcpy+0xc>
 8009e70:	4770      	bx	lr
 8009e72:	b510      	push	{r4, lr}
 8009e74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e7c:	4291      	cmp	r1, r2
 8009e7e:	d1f9      	bne.n	8009e74 <memcpy+0xe>
 8009e80:	bd10      	pop	{r4, pc}
	...

08009e84 <__assert_func>:
 8009e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e86:	4614      	mov	r4, r2
 8009e88:	461a      	mov	r2, r3
 8009e8a:	4b09      	ldr	r3, [pc, #36]	@ (8009eb0 <__assert_func+0x2c>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4605      	mov	r5, r0
 8009e90:	68d8      	ldr	r0, [r3, #12]
 8009e92:	b954      	cbnz	r4, 8009eaa <__assert_func+0x26>
 8009e94:	4b07      	ldr	r3, [pc, #28]	@ (8009eb4 <__assert_func+0x30>)
 8009e96:	461c      	mov	r4, r3
 8009e98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e9c:	9100      	str	r1, [sp, #0]
 8009e9e:	462b      	mov	r3, r5
 8009ea0:	4905      	ldr	r1, [pc, #20]	@ (8009eb8 <__assert_func+0x34>)
 8009ea2:	f000 fc9f 	bl	800a7e4 <fiprintf>
 8009ea6:	f000 fcd9 	bl	800a85c <abort>
 8009eaa:	4b04      	ldr	r3, [pc, #16]	@ (8009ebc <__assert_func+0x38>)
 8009eac:	e7f4      	b.n	8009e98 <__assert_func+0x14>
 8009eae:	bf00      	nop
 8009eb0:	20000134 	.word	0x20000134
 8009eb4:	0800b111 	.word	0x0800b111
 8009eb8:	0800b0e3 	.word	0x0800b0e3
 8009ebc:	0800b0d6 	.word	0x0800b0d6

08009ec0 <_free_r>:
 8009ec0:	b538      	push	{r3, r4, r5, lr}
 8009ec2:	4605      	mov	r5, r0
 8009ec4:	2900      	cmp	r1, #0
 8009ec6:	d041      	beq.n	8009f4c <_free_r+0x8c>
 8009ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ecc:	1f0c      	subs	r4, r1, #4
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	bfb8      	it	lt
 8009ed2:	18e4      	addlt	r4, r4, r3
 8009ed4:	f000 f8e8 	bl	800a0a8 <__malloc_lock>
 8009ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8009f50 <_free_r+0x90>)
 8009eda:	6813      	ldr	r3, [r2, #0]
 8009edc:	b933      	cbnz	r3, 8009eec <_free_r+0x2c>
 8009ede:	6063      	str	r3, [r4, #4]
 8009ee0:	6014      	str	r4, [r2, #0]
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ee8:	f000 b8e4 	b.w	800a0b4 <__malloc_unlock>
 8009eec:	42a3      	cmp	r3, r4
 8009eee:	d908      	bls.n	8009f02 <_free_r+0x42>
 8009ef0:	6820      	ldr	r0, [r4, #0]
 8009ef2:	1821      	adds	r1, r4, r0
 8009ef4:	428b      	cmp	r3, r1
 8009ef6:	bf01      	itttt	eq
 8009ef8:	6819      	ldreq	r1, [r3, #0]
 8009efa:	685b      	ldreq	r3, [r3, #4]
 8009efc:	1809      	addeq	r1, r1, r0
 8009efe:	6021      	streq	r1, [r4, #0]
 8009f00:	e7ed      	b.n	8009ede <_free_r+0x1e>
 8009f02:	461a      	mov	r2, r3
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	b10b      	cbz	r3, 8009f0c <_free_r+0x4c>
 8009f08:	42a3      	cmp	r3, r4
 8009f0a:	d9fa      	bls.n	8009f02 <_free_r+0x42>
 8009f0c:	6811      	ldr	r1, [r2, #0]
 8009f0e:	1850      	adds	r0, r2, r1
 8009f10:	42a0      	cmp	r0, r4
 8009f12:	d10b      	bne.n	8009f2c <_free_r+0x6c>
 8009f14:	6820      	ldr	r0, [r4, #0]
 8009f16:	4401      	add	r1, r0
 8009f18:	1850      	adds	r0, r2, r1
 8009f1a:	4283      	cmp	r3, r0
 8009f1c:	6011      	str	r1, [r2, #0]
 8009f1e:	d1e0      	bne.n	8009ee2 <_free_r+0x22>
 8009f20:	6818      	ldr	r0, [r3, #0]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	6053      	str	r3, [r2, #4]
 8009f26:	4408      	add	r0, r1
 8009f28:	6010      	str	r0, [r2, #0]
 8009f2a:	e7da      	b.n	8009ee2 <_free_r+0x22>
 8009f2c:	d902      	bls.n	8009f34 <_free_r+0x74>
 8009f2e:	230c      	movs	r3, #12
 8009f30:	602b      	str	r3, [r5, #0]
 8009f32:	e7d6      	b.n	8009ee2 <_free_r+0x22>
 8009f34:	6820      	ldr	r0, [r4, #0]
 8009f36:	1821      	adds	r1, r4, r0
 8009f38:	428b      	cmp	r3, r1
 8009f3a:	bf04      	itt	eq
 8009f3c:	6819      	ldreq	r1, [r3, #0]
 8009f3e:	685b      	ldreq	r3, [r3, #4]
 8009f40:	6063      	str	r3, [r4, #4]
 8009f42:	bf04      	itt	eq
 8009f44:	1809      	addeq	r1, r1, r0
 8009f46:	6021      	streq	r1, [r4, #0]
 8009f48:	6054      	str	r4, [r2, #4]
 8009f4a:	e7ca      	b.n	8009ee2 <_free_r+0x22>
 8009f4c:	bd38      	pop	{r3, r4, r5, pc}
 8009f4e:	bf00      	nop
 8009f50:	20004868 	.word	0x20004868

08009f54 <malloc>:
 8009f54:	4b02      	ldr	r3, [pc, #8]	@ (8009f60 <malloc+0xc>)
 8009f56:	4601      	mov	r1, r0
 8009f58:	6818      	ldr	r0, [r3, #0]
 8009f5a:	f000 b825 	b.w	8009fa8 <_malloc_r>
 8009f5e:	bf00      	nop
 8009f60:	20000134 	.word	0x20000134

08009f64 <sbrk_aligned>:
 8009f64:	b570      	push	{r4, r5, r6, lr}
 8009f66:	4e0f      	ldr	r6, [pc, #60]	@ (8009fa4 <sbrk_aligned+0x40>)
 8009f68:	460c      	mov	r4, r1
 8009f6a:	6831      	ldr	r1, [r6, #0]
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	b911      	cbnz	r1, 8009f76 <sbrk_aligned+0x12>
 8009f70:	f000 fc64 	bl	800a83c <_sbrk_r>
 8009f74:	6030      	str	r0, [r6, #0]
 8009f76:	4621      	mov	r1, r4
 8009f78:	4628      	mov	r0, r5
 8009f7a:	f000 fc5f 	bl	800a83c <_sbrk_r>
 8009f7e:	1c43      	adds	r3, r0, #1
 8009f80:	d103      	bne.n	8009f8a <sbrk_aligned+0x26>
 8009f82:	f04f 34ff 	mov.w	r4, #4294967295
 8009f86:	4620      	mov	r0, r4
 8009f88:	bd70      	pop	{r4, r5, r6, pc}
 8009f8a:	1cc4      	adds	r4, r0, #3
 8009f8c:	f024 0403 	bic.w	r4, r4, #3
 8009f90:	42a0      	cmp	r0, r4
 8009f92:	d0f8      	beq.n	8009f86 <sbrk_aligned+0x22>
 8009f94:	1a21      	subs	r1, r4, r0
 8009f96:	4628      	mov	r0, r5
 8009f98:	f000 fc50 	bl	800a83c <_sbrk_r>
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	d1f2      	bne.n	8009f86 <sbrk_aligned+0x22>
 8009fa0:	e7ef      	b.n	8009f82 <sbrk_aligned+0x1e>
 8009fa2:	bf00      	nop
 8009fa4:	20004864 	.word	0x20004864

08009fa8 <_malloc_r>:
 8009fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fac:	1ccd      	adds	r5, r1, #3
 8009fae:	f025 0503 	bic.w	r5, r5, #3
 8009fb2:	3508      	adds	r5, #8
 8009fb4:	2d0c      	cmp	r5, #12
 8009fb6:	bf38      	it	cc
 8009fb8:	250c      	movcc	r5, #12
 8009fba:	2d00      	cmp	r5, #0
 8009fbc:	4606      	mov	r6, r0
 8009fbe:	db01      	blt.n	8009fc4 <_malloc_r+0x1c>
 8009fc0:	42a9      	cmp	r1, r5
 8009fc2:	d904      	bls.n	8009fce <_malloc_r+0x26>
 8009fc4:	230c      	movs	r3, #12
 8009fc6:	6033      	str	r3, [r6, #0]
 8009fc8:	2000      	movs	r0, #0
 8009fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0a4 <_malloc_r+0xfc>
 8009fd2:	f000 f869 	bl	800a0a8 <__malloc_lock>
 8009fd6:	f8d8 3000 	ldr.w	r3, [r8]
 8009fda:	461c      	mov	r4, r3
 8009fdc:	bb44      	cbnz	r4, 800a030 <_malloc_r+0x88>
 8009fde:	4629      	mov	r1, r5
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	f7ff ffbf 	bl	8009f64 <sbrk_aligned>
 8009fe6:	1c43      	adds	r3, r0, #1
 8009fe8:	4604      	mov	r4, r0
 8009fea:	d158      	bne.n	800a09e <_malloc_r+0xf6>
 8009fec:	f8d8 4000 	ldr.w	r4, [r8]
 8009ff0:	4627      	mov	r7, r4
 8009ff2:	2f00      	cmp	r7, #0
 8009ff4:	d143      	bne.n	800a07e <_malloc_r+0xd6>
 8009ff6:	2c00      	cmp	r4, #0
 8009ff8:	d04b      	beq.n	800a092 <_malloc_r+0xea>
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	4639      	mov	r1, r7
 8009ffe:	4630      	mov	r0, r6
 800a000:	eb04 0903 	add.w	r9, r4, r3
 800a004:	f000 fc1a 	bl	800a83c <_sbrk_r>
 800a008:	4581      	cmp	r9, r0
 800a00a:	d142      	bne.n	800a092 <_malloc_r+0xea>
 800a00c:	6821      	ldr	r1, [r4, #0]
 800a00e:	1a6d      	subs	r5, r5, r1
 800a010:	4629      	mov	r1, r5
 800a012:	4630      	mov	r0, r6
 800a014:	f7ff ffa6 	bl	8009f64 <sbrk_aligned>
 800a018:	3001      	adds	r0, #1
 800a01a:	d03a      	beq.n	800a092 <_malloc_r+0xea>
 800a01c:	6823      	ldr	r3, [r4, #0]
 800a01e:	442b      	add	r3, r5
 800a020:	6023      	str	r3, [r4, #0]
 800a022:	f8d8 3000 	ldr.w	r3, [r8]
 800a026:	685a      	ldr	r2, [r3, #4]
 800a028:	bb62      	cbnz	r2, 800a084 <_malloc_r+0xdc>
 800a02a:	f8c8 7000 	str.w	r7, [r8]
 800a02e:	e00f      	b.n	800a050 <_malloc_r+0xa8>
 800a030:	6822      	ldr	r2, [r4, #0]
 800a032:	1b52      	subs	r2, r2, r5
 800a034:	d420      	bmi.n	800a078 <_malloc_r+0xd0>
 800a036:	2a0b      	cmp	r2, #11
 800a038:	d917      	bls.n	800a06a <_malloc_r+0xc2>
 800a03a:	1961      	adds	r1, r4, r5
 800a03c:	42a3      	cmp	r3, r4
 800a03e:	6025      	str	r5, [r4, #0]
 800a040:	bf18      	it	ne
 800a042:	6059      	strne	r1, [r3, #4]
 800a044:	6863      	ldr	r3, [r4, #4]
 800a046:	bf08      	it	eq
 800a048:	f8c8 1000 	streq.w	r1, [r8]
 800a04c:	5162      	str	r2, [r4, r5]
 800a04e:	604b      	str	r3, [r1, #4]
 800a050:	4630      	mov	r0, r6
 800a052:	f000 f82f 	bl	800a0b4 <__malloc_unlock>
 800a056:	f104 000b 	add.w	r0, r4, #11
 800a05a:	1d23      	adds	r3, r4, #4
 800a05c:	f020 0007 	bic.w	r0, r0, #7
 800a060:	1ac2      	subs	r2, r0, r3
 800a062:	bf1c      	itt	ne
 800a064:	1a1b      	subne	r3, r3, r0
 800a066:	50a3      	strne	r3, [r4, r2]
 800a068:	e7af      	b.n	8009fca <_malloc_r+0x22>
 800a06a:	6862      	ldr	r2, [r4, #4]
 800a06c:	42a3      	cmp	r3, r4
 800a06e:	bf0c      	ite	eq
 800a070:	f8c8 2000 	streq.w	r2, [r8]
 800a074:	605a      	strne	r2, [r3, #4]
 800a076:	e7eb      	b.n	800a050 <_malloc_r+0xa8>
 800a078:	4623      	mov	r3, r4
 800a07a:	6864      	ldr	r4, [r4, #4]
 800a07c:	e7ae      	b.n	8009fdc <_malloc_r+0x34>
 800a07e:	463c      	mov	r4, r7
 800a080:	687f      	ldr	r7, [r7, #4]
 800a082:	e7b6      	b.n	8009ff2 <_malloc_r+0x4a>
 800a084:	461a      	mov	r2, r3
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	42a3      	cmp	r3, r4
 800a08a:	d1fb      	bne.n	800a084 <_malloc_r+0xdc>
 800a08c:	2300      	movs	r3, #0
 800a08e:	6053      	str	r3, [r2, #4]
 800a090:	e7de      	b.n	800a050 <_malloc_r+0xa8>
 800a092:	230c      	movs	r3, #12
 800a094:	6033      	str	r3, [r6, #0]
 800a096:	4630      	mov	r0, r6
 800a098:	f000 f80c 	bl	800a0b4 <__malloc_unlock>
 800a09c:	e794      	b.n	8009fc8 <_malloc_r+0x20>
 800a09e:	6005      	str	r5, [r0, #0]
 800a0a0:	e7d6      	b.n	800a050 <_malloc_r+0xa8>
 800a0a2:	bf00      	nop
 800a0a4:	20004868 	.word	0x20004868

0800a0a8 <__malloc_lock>:
 800a0a8:	4801      	ldr	r0, [pc, #4]	@ (800a0b0 <__malloc_lock+0x8>)
 800a0aa:	f7ff beda 	b.w	8009e62 <__retarget_lock_acquire_recursive>
 800a0ae:	bf00      	nop
 800a0b0:	20004860 	.word	0x20004860

0800a0b4 <__malloc_unlock>:
 800a0b4:	4801      	ldr	r0, [pc, #4]	@ (800a0bc <__malloc_unlock+0x8>)
 800a0b6:	f7ff bed5 	b.w	8009e64 <__retarget_lock_release_recursive>
 800a0ba:	bf00      	nop
 800a0bc:	20004860 	.word	0x20004860

0800a0c0 <__ssputs_r>:
 800a0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0c4:	688e      	ldr	r6, [r1, #8]
 800a0c6:	461f      	mov	r7, r3
 800a0c8:	42be      	cmp	r6, r7
 800a0ca:	680b      	ldr	r3, [r1, #0]
 800a0cc:	4682      	mov	sl, r0
 800a0ce:	460c      	mov	r4, r1
 800a0d0:	4690      	mov	r8, r2
 800a0d2:	d82d      	bhi.n	800a130 <__ssputs_r+0x70>
 800a0d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a0dc:	d026      	beq.n	800a12c <__ssputs_r+0x6c>
 800a0de:	6965      	ldr	r5, [r4, #20]
 800a0e0:	6909      	ldr	r1, [r1, #16]
 800a0e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0e6:	eba3 0901 	sub.w	r9, r3, r1
 800a0ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0ee:	1c7b      	adds	r3, r7, #1
 800a0f0:	444b      	add	r3, r9
 800a0f2:	106d      	asrs	r5, r5, #1
 800a0f4:	429d      	cmp	r5, r3
 800a0f6:	bf38      	it	cc
 800a0f8:	461d      	movcc	r5, r3
 800a0fa:	0553      	lsls	r3, r2, #21
 800a0fc:	d527      	bpl.n	800a14e <__ssputs_r+0x8e>
 800a0fe:	4629      	mov	r1, r5
 800a100:	f7ff ff52 	bl	8009fa8 <_malloc_r>
 800a104:	4606      	mov	r6, r0
 800a106:	b360      	cbz	r0, 800a162 <__ssputs_r+0xa2>
 800a108:	6921      	ldr	r1, [r4, #16]
 800a10a:	464a      	mov	r2, r9
 800a10c:	f7ff feab 	bl	8009e66 <memcpy>
 800a110:	89a3      	ldrh	r3, [r4, #12]
 800a112:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a11a:	81a3      	strh	r3, [r4, #12]
 800a11c:	6126      	str	r6, [r4, #16]
 800a11e:	6165      	str	r5, [r4, #20]
 800a120:	444e      	add	r6, r9
 800a122:	eba5 0509 	sub.w	r5, r5, r9
 800a126:	6026      	str	r6, [r4, #0]
 800a128:	60a5      	str	r5, [r4, #8]
 800a12a:	463e      	mov	r6, r7
 800a12c:	42be      	cmp	r6, r7
 800a12e:	d900      	bls.n	800a132 <__ssputs_r+0x72>
 800a130:	463e      	mov	r6, r7
 800a132:	6820      	ldr	r0, [r4, #0]
 800a134:	4632      	mov	r2, r6
 800a136:	4641      	mov	r1, r8
 800a138:	f000 fb66 	bl	800a808 <memmove>
 800a13c:	68a3      	ldr	r3, [r4, #8]
 800a13e:	1b9b      	subs	r3, r3, r6
 800a140:	60a3      	str	r3, [r4, #8]
 800a142:	6823      	ldr	r3, [r4, #0]
 800a144:	4433      	add	r3, r6
 800a146:	6023      	str	r3, [r4, #0]
 800a148:	2000      	movs	r0, #0
 800a14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a14e:	462a      	mov	r2, r5
 800a150:	f000 fb8b 	bl	800a86a <_realloc_r>
 800a154:	4606      	mov	r6, r0
 800a156:	2800      	cmp	r0, #0
 800a158:	d1e0      	bne.n	800a11c <__ssputs_r+0x5c>
 800a15a:	6921      	ldr	r1, [r4, #16]
 800a15c:	4650      	mov	r0, sl
 800a15e:	f7ff feaf 	bl	8009ec0 <_free_r>
 800a162:	230c      	movs	r3, #12
 800a164:	f8ca 3000 	str.w	r3, [sl]
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a16e:	81a3      	strh	r3, [r4, #12]
 800a170:	f04f 30ff 	mov.w	r0, #4294967295
 800a174:	e7e9      	b.n	800a14a <__ssputs_r+0x8a>
	...

0800a178 <_svfiprintf_r>:
 800a178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a17c:	4698      	mov	r8, r3
 800a17e:	898b      	ldrh	r3, [r1, #12]
 800a180:	061b      	lsls	r3, r3, #24
 800a182:	b09d      	sub	sp, #116	@ 0x74
 800a184:	4607      	mov	r7, r0
 800a186:	460d      	mov	r5, r1
 800a188:	4614      	mov	r4, r2
 800a18a:	d510      	bpl.n	800a1ae <_svfiprintf_r+0x36>
 800a18c:	690b      	ldr	r3, [r1, #16]
 800a18e:	b973      	cbnz	r3, 800a1ae <_svfiprintf_r+0x36>
 800a190:	2140      	movs	r1, #64	@ 0x40
 800a192:	f7ff ff09 	bl	8009fa8 <_malloc_r>
 800a196:	6028      	str	r0, [r5, #0]
 800a198:	6128      	str	r0, [r5, #16]
 800a19a:	b930      	cbnz	r0, 800a1aa <_svfiprintf_r+0x32>
 800a19c:	230c      	movs	r3, #12
 800a19e:	603b      	str	r3, [r7, #0]
 800a1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a4:	b01d      	add	sp, #116	@ 0x74
 800a1a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1aa:	2340      	movs	r3, #64	@ 0x40
 800a1ac:	616b      	str	r3, [r5, #20]
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1b2:	2320      	movs	r3, #32
 800a1b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1bc:	2330      	movs	r3, #48	@ 0x30
 800a1be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a35c <_svfiprintf_r+0x1e4>
 800a1c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1c6:	f04f 0901 	mov.w	r9, #1
 800a1ca:	4623      	mov	r3, r4
 800a1cc:	469a      	mov	sl, r3
 800a1ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1d2:	b10a      	cbz	r2, 800a1d8 <_svfiprintf_r+0x60>
 800a1d4:	2a25      	cmp	r2, #37	@ 0x25
 800a1d6:	d1f9      	bne.n	800a1cc <_svfiprintf_r+0x54>
 800a1d8:	ebba 0b04 	subs.w	fp, sl, r4
 800a1dc:	d00b      	beq.n	800a1f6 <_svfiprintf_r+0x7e>
 800a1de:	465b      	mov	r3, fp
 800a1e0:	4622      	mov	r2, r4
 800a1e2:	4629      	mov	r1, r5
 800a1e4:	4638      	mov	r0, r7
 800a1e6:	f7ff ff6b 	bl	800a0c0 <__ssputs_r>
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	f000 80a7 	beq.w	800a33e <_svfiprintf_r+0x1c6>
 800a1f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1f2:	445a      	add	r2, fp
 800a1f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1f6:	f89a 3000 	ldrb.w	r3, [sl]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	f000 809f 	beq.w	800a33e <_svfiprintf_r+0x1c6>
 800a200:	2300      	movs	r3, #0
 800a202:	f04f 32ff 	mov.w	r2, #4294967295
 800a206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a20a:	f10a 0a01 	add.w	sl, sl, #1
 800a20e:	9304      	str	r3, [sp, #16]
 800a210:	9307      	str	r3, [sp, #28]
 800a212:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a216:	931a      	str	r3, [sp, #104]	@ 0x68
 800a218:	4654      	mov	r4, sl
 800a21a:	2205      	movs	r2, #5
 800a21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a220:	484e      	ldr	r0, [pc, #312]	@ (800a35c <_svfiprintf_r+0x1e4>)
 800a222:	f7f5 ffed 	bl	8000200 <memchr>
 800a226:	9a04      	ldr	r2, [sp, #16]
 800a228:	b9d8      	cbnz	r0, 800a262 <_svfiprintf_r+0xea>
 800a22a:	06d0      	lsls	r0, r2, #27
 800a22c:	bf44      	itt	mi
 800a22e:	2320      	movmi	r3, #32
 800a230:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a234:	0711      	lsls	r1, r2, #28
 800a236:	bf44      	itt	mi
 800a238:	232b      	movmi	r3, #43	@ 0x2b
 800a23a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a23e:	f89a 3000 	ldrb.w	r3, [sl]
 800a242:	2b2a      	cmp	r3, #42	@ 0x2a
 800a244:	d015      	beq.n	800a272 <_svfiprintf_r+0xfa>
 800a246:	9a07      	ldr	r2, [sp, #28]
 800a248:	4654      	mov	r4, sl
 800a24a:	2000      	movs	r0, #0
 800a24c:	f04f 0c0a 	mov.w	ip, #10
 800a250:	4621      	mov	r1, r4
 800a252:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a256:	3b30      	subs	r3, #48	@ 0x30
 800a258:	2b09      	cmp	r3, #9
 800a25a:	d94b      	bls.n	800a2f4 <_svfiprintf_r+0x17c>
 800a25c:	b1b0      	cbz	r0, 800a28c <_svfiprintf_r+0x114>
 800a25e:	9207      	str	r2, [sp, #28]
 800a260:	e014      	b.n	800a28c <_svfiprintf_r+0x114>
 800a262:	eba0 0308 	sub.w	r3, r0, r8
 800a266:	fa09 f303 	lsl.w	r3, r9, r3
 800a26a:	4313      	orrs	r3, r2
 800a26c:	9304      	str	r3, [sp, #16]
 800a26e:	46a2      	mov	sl, r4
 800a270:	e7d2      	b.n	800a218 <_svfiprintf_r+0xa0>
 800a272:	9b03      	ldr	r3, [sp, #12]
 800a274:	1d19      	adds	r1, r3, #4
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	9103      	str	r1, [sp, #12]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	bfbb      	ittet	lt
 800a27e:	425b      	neglt	r3, r3
 800a280:	f042 0202 	orrlt.w	r2, r2, #2
 800a284:	9307      	strge	r3, [sp, #28]
 800a286:	9307      	strlt	r3, [sp, #28]
 800a288:	bfb8      	it	lt
 800a28a:	9204      	strlt	r2, [sp, #16]
 800a28c:	7823      	ldrb	r3, [r4, #0]
 800a28e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a290:	d10a      	bne.n	800a2a8 <_svfiprintf_r+0x130>
 800a292:	7863      	ldrb	r3, [r4, #1]
 800a294:	2b2a      	cmp	r3, #42	@ 0x2a
 800a296:	d132      	bne.n	800a2fe <_svfiprintf_r+0x186>
 800a298:	9b03      	ldr	r3, [sp, #12]
 800a29a:	1d1a      	adds	r2, r3, #4
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	9203      	str	r2, [sp, #12]
 800a2a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2a4:	3402      	adds	r4, #2
 800a2a6:	9305      	str	r3, [sp, #20]
 800a2a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a36c <_svfiprintf_r+0x1f4>
 800a2ac:	7821      	ldrb	r1, [r4, #0]
 800a2ae:	2203      	movs	r2, #3
 800a2b0:	4650      	mov	r0, sl
 800a2b2:	f7f5 ffa5 	bl	8000200 <memchr>
 800a2b6:	b138      	cbz	r0, 800a2c8 <_svfiprintf_r+0x150>
 800a2b8:	9b04      	ldr	r3, [sp, #16]
 800a2ba:	eba0 000a 	sub.w	r0, r0, sl
 800a2be:	2240      	movs	r2, #64	@ 0x40
 800a2c0:	4082      	lsls	r2, r0
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	3401      	adds	r4, #1
 800a2c6:	9304      	str	r3, [sp, #16]
 800a2c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2cc:	4824      	ldr	r0, [pc, #144]	@ (800a360 <_svfiprintf_r+0x1e8>)
 800a2ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2d2:	2206      	movs	r2, #6
 800a2d4:	f7f5 ff94 	bl	8000200 <memchr>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d036      	beq.n	800a34a <_svfiprintf_r+0x1d2>
 800a2dc:	4b21      	ldr	r3, [pc, #132]	@ (800a364 <_svfiprintf_r+0x1ec>)
 800a2de:	bb1b      	cbnz	r3, 800a328 <_svfiprintf_r+0x1b0>
 800a2e0:	9b03      	ldr	r3, [sp, #12]
 800a2e2:	3307      	adds	r3, #7
 800a2e4:	f023 0307 	bic.w	r3, r3, #7
 800a2e8:	3308      	adds	r3, #8
 800a2ea:	9303      	str	r3, [sp, #12]
 800a2ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ee:	4433      	add	r3, r6
 800a2f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2f2:	e76a      	b.n	800a1ca <_svfiprintf_r+0x52>
 800a2f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2f8:	460c      	mov	r4, r1
 800a2fa:	2001      	movs	r0, #1
 800a2fc:	e7a8      	b.n	800a250 <_svfiprintf_r+0xd8>
 800a2fe:	2300      	movs	r3, #0
 800a300:	3401      	adds	r4, #1
 800a302:	9305      	str	r3, [sp, #20]
 800a304:	4619      	mov	r1, r3
 800a306:	f04f 0c0a 	mov.w	ip, #10
 800a30a:	4620      	mov	r0, r4
 800a30c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a310:	3a30      	subs	r2, #48	@ 0x30
 800a312:	2a09      	cmp	r2, #9
 800a314:	d903      	bls.n	800a31e <_svfiprintf_r+0x1a6>
 800a316:	2b00      	cmp	r3, #0
 800a318:	d0c6      	beq.n	800a2a8 <_svfiprintf_r+0x130>
 800a31a:	9105      	str	r1, [sp, #20]
 800a31c:	e7c4      	b.n	800a2a8 <_svfiprintf_r+0x130>
 800a31e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a322:	4604      	mov	r4, r0
 800a324:	2301      	movs	r3, #1
 800a326:	e7f0      	b.n	800a30a <_svfiprintf_r+0x192>
 800a328:	ab03      	add	r3, sp, #12
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	462a      	mov	r2, r5
 800a32e:	4b0e      	ldr	r3, [pc, #56]	@ (800a368 <_svfiprintf_r+0x1f0>)
 800a330:	a904      	add	r1, sp, #16
 800a332:	4638      	mov	r0, r7
 800a334:	f3af 8000 	nop.w
 800a338:	1c42      	adds	r2, r0, #1
 800a33a:	4606      	mov	r6, r0
 800a33c:	d1d6      	bne.n	800a2ec <_svfiprintf_r+0x174>
 800a33e:	89ab      	ldrh	r3, [r5, #12]
 800a340:	065b      	lsls	r3, r3, #25
 800a342:	f53f af2d 	bmi.w	800a1a0 <_svfiprintf_r+0x28>
 800a346:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a348:	e72c      	b.n	800a1a4 <_svfiprintf_r+0x2c>
 800a34a:	ab03      	add	r3, sp, #12
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	462a      	mov	r2, r5
 800a350:	4b05      	ldr	r3, [pc, #20]	@ (800a368 <_svfiprintf_r+0x1f0>)
 800a352:	a904      	add	r1, sp, #16
 800a354:	4638      	mov	r0, r7
 800a356:	f000 f879 	bl	800a44c <_printf_i>
 800a35a:	e7ed      	b.n	800a338 <_svfiprintf_r+0x1c0>
 800a35c:	0800b112 	.word	0x0800b112
 800a360:	0800b11c 	.word	0x0800b11c
 800a364:	00000000 	.word	0x00000000
 800a368:	0800a0c1 	.word	0x0800a0c1
 800a36c:	0800b118 	.word	0x0800b118

0800a370 <_printf_common>:
 800a370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a374:	4616      	mov	r6, r2
 800a376:	4698      	mov	r8, r3
 800a378:	688a      	ldr	r2, [r1, #8]
 800a37a:	690b      	ldr	r3, [r1, #16]
 800a37c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a380:	4293      	cmp	r3, r2
 800a382:	bfb8      	it	lt
 800a384:	4613      	movlt	r3, r2
 800a386:	6033      	str	r3, [r6, #0]
 800a388:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a38c:	4607      	mov	r7, r0
 800a38e:	460c      	mov	r4, r1
 800a390:	b10a      	cbz	r2, 800a396 <_printf_common+0x26>
 800a392:	3301      	adds	r3, #1
 800a394:	6033      	str	r3, [r6, #0]
 800a396:	6823      	ldr	r3, [r4, #0]
 800a398:	0699      	lsls	r1, r3, #26
 800a39a:	bf42      	ittt	mi
 800a39c:	6833      	ldrmi	r3, [r6, #0]
 800a39e:	3302      	addmi	r3, #2
 800a3a0:	6033      	strmi	r3, [r6, #0]
 800a3a2:	6825      	ldr	r5, [r4, #0]
 800a3a4:	f015 0506 	ands.w	r5, r5, #6
 800a3a8:	d106      	bne.n	800a3b8 <_printf_common+0x48>
 800a3aa:	f104 0a19 	add.w	sl, r4, #25
 800a3ae:	68e3      	ldr	r3, [r4, #12]
 800a3b0:	6832      	ldr	r2, [r6, #0]
 800a3b2:	1a9b      	subs	r3, r3, r2
 800a3b4:	42ab      	cmp	r3, r5
 800a3b6:	dc26      	bgt.n	800a406 <_printf_common+0x96>
 800a3b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a3bc:	6822      	ldr	r2, [r4, #0]
 800a3be:	3b00      	subs	r3, #0
 800a3c0:	bf18      	it	ne
 800a3c2:	2301      	movne	r3, #1
 800a3c4:	0692      	lsls	r2, r2, #26
 800a3c6:	d42b      	bmi.n	800a420 <_printf_common+0xb0>
 800a3c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a3cc:	4641      	mov	r1, r8
 800a3ce:	4638      	mov	r0, r7
 800a3d0:	47c8      	blx	r9
 800a3d2:	3001      	adds	r0, #1
 800a3d4:	d01e      	beq.n	800a414 <_printf_common+0xa4>
 800a3d6:	6823      	ldr	r3, [r4, #0]
 800a3d8:	6922      	ldr	r2, [r4, #16]
 800a3da:	f003 0306 	and.w	r3, r3, #6
 800a3de:	2b04      	cmp	r3, #4
 800a3e0:	bf02      	ittt	eq
 800a3e2:	68e5      	ldreq	r5, [r4, #12]
 800a3e4:	6833      	ldreq	r3, [r6, #0]
 800a3e6:	1aed      	subeq	r5, r5, r3
 800a3e8:	68a3      	ldr	r3, [r4, #8]
 800a3ea:	bf0c      	ite	eq
 800a3ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3f0:	2500      	movne	r5, #0
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	bfc4      	itt	gt
 800a3f6:	1a9b      	subgt	r3, r3, r2
 800a3f8:	18ed      	addgt	r5, r5, r3
 800a3fa:	2600      	movs	r6, #0
 800a3fc:	341a      	adds	r4, #26
 800a3fe:	42b5      	cmp	r5, r6
 800a400:	d11a      	bne.n	800a438 <_printf_common+0xc8>
 800a402:	2000      	movs	r0, #0
 800a404:	e008      	b.n	800a418 <_printf_common+0xa8>
 800a406:	2301      	movs	r3, #1
 800a408:	4652      	mov	r2, sl
 800a40a:	4641      	mov	r1, r8
 800a40c:	4638      	mov	r0, r7
 800a40e:	47c8      	blx	r9
 800a410:	3001      	adds	r0, #1
 800a412:	d103      	bne.n	800a41c <_printf_common+0xac>
 800a414:	f04f 30ff 	mov.w	r0, #4294967295
 800a418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a41c:	3501      	adds	r5, #1
 800a41e:	e7c6      	b.n	800a3ae <_printf_common+0x3e>
 800a420:	18e1      	adds	r1, r4, r3
 800a422:	1c5a      	adds	r2, r3, #1
 800a424:	2030      	movs	r0, #48	@ 0x30
 800a426:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a42a:	4422      	add	r2, r4
 800a42c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a430:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a434:	3302      	adds	r3, #2
 800a436:	e7c7      	b.n	800a3c8 <_printf_common+0x58>
 800a438:	2301      	movs	r3, #1
 800a43a:	4622      	mov	r2, r4
 800a43c:	4641      	mov	r1, r8
 800a43e:	4638      	mov	r0, r7
 800a440:	47c8      	blx	r9
 800a442:	3001      	adds	r0, #1
 800a444:	d0e6      	beq.n	800a414 <_printf_common+0xa4>
 800a446:	3601      	adds	r6, #1
 800a448:	e7d9      	b.n	800a3fe <_printf_common+0x8e>
	...

0800a44c <_printf_i>:
 800a44c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a450:	7e0f      	ldrb	r7, [r1, #24]
 800a452:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a454:	2f78      	cmp	r7, #120	@ 0x78
 800a456:	4691      	mov	r9, r2
 800a458:	4680      	mov	r8, r0
 800a45a:	460c      	mov	r4, r1
 800a45c:	469a      	mov	sl, r3
 800a45e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a462:	d807      	bhi.n	800a474 <_printf_i+0x28>
 800a464:	2f62      	cmp	r7, #98	@ 0x62
 800a466:	d80a      	bhi.n	800a47e <_printf_i+0x32>
 800a468:	2f00      	cmp	r7, #0
 800a46a:	f000 80d2 	beq.w	800a612 <_printf_i+0x1c6>
 800a46e:	2f58      	cmp	r7, #88	@ 0x58
 800a470:	f000 80b9 	beq.w	800a5e6 <_printf_i+0x19a>
 800a474:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a478:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a47c:	e03a      	b.n	800a4f4 <_printf_i+0xa8>
 800a47e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a482:	2b15      	cmp	r3, #21
 800a484:	d8f6      	bhi.n	800a474 <_printf_i+0x28>
 800a486:	a101      	add	r1, pc, #4	@ (adr r1, 800a48c <_printf_i+0x40>)
 800a488:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a48c:	0800a4e5 	.word	0x0800a4e5
 800a490:	0800a4f9 	.word	0x0800a4f9
 800a494:	0800a475 	.word	0x0800a475
 800a498:	0800a475 	.word	0x0800a475
 800a49c:	0800a475 	.word	0x0800a475
 800a4a0:	0800a475 	.word	0x0800a475
 800a4a4:	0800a4f9 	.word	0x0800a4f9
 800a4a8:	0800a475 	.word	0x0800a475
 800a4ac:	0800a475 	.word	0x0800a475
 800a4b0:	0800a475 	.word	0x0800a475
 800a4b4:	0800a475 	.word	0x0800a475
 800a4b8:	0800a5f9 	.word	0x0800a5f9
 800a4bc:	0800a523 	.word	0x0800a523
 800a4c0:	0800a5b3 	.word	0x0800a5b3
 800a4c4:	0800a475 	.word	0x0800a475
 800a4c8:	0800a475 	.word	0x0800a475
 800a4cc:	0800a61b 	.word	0x0800a61b
 800a4d0:	0800a475 	.word	0x0800a475
 800a4d4:	0800a523 	.word	0x0800a523
 800a4d8:	0800a475 	.word	0x0800a475
 800a4dc:	0800a475 	.word	0x0800a475
 800a4e0:	0800a5bb 	.word	0x0800a5bb
 800a4e4:	6833      	ldr	r3, [r6, #0]
 800a4e6:	1d1a      	adds	r2, r3, #4
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	6032      	str	r2, [r6, #0]
 800a4ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e09d      	b.n	800a634 <_printf_i+0x1e8>
 800a4f8:	6833      	ldr	r3, [r6, #0]
 800a4fa:	6820      	ldr	r0, [r4, #0]
 800a4fc:	1d19      	adds	r1, r3, #4
 800a4fe:	6031      	str	r1, [r6, #0]
 800a500:	0606      	lsls	r6, r0, #24
 800a502:	d501      	bpl.n	800a508 <_printf_i+0xbc>
 800a504:	681d      	ldr	r5, [r3, #0]
 800a506:	e003      	b.n	800a510 <_printf_i+0xc4>
 800a508:	0645      	lsls	r5, r0, #25
 800a50a:	d5fb      	bpl.n	800a504 <_printf_i+0xb8>
 800a50c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a510:	2d00      	cmp	r5, #0
 800a512:	da03      	bge.n	800a51c <_printf_i+0xd0>
 800a514:	232d      	movs	r3, #45	@ 0x2d
 800a516:	426d      	negs	r5, r5
 800a518:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a51c:	4859      	ldr	r0, [pc, #356]	@ (800a684 <_printf_i+0x238>)
 800a51e:	230a      	movs	r3, #10
 800a520:	e011      	b.n	800a546 <_printf_i+0xfa>
 800a522:	6821      	ldr	r1, [r4, #0]
 800a524:	6833      	ldr	r3, [r6, #0]
 800a526:	0608      	lsls	r0, r1, #24
 800a528:	f853 5b04 	ldr.w	r5, [r3], #4
 800a52c:	d402      	bmi.n	800a534 <_printf_i+0xe8>
 800a52e:	0649      	lsls	r1, r1, #25
 800a530:	bf48      	it	mi
 800a532:	b2ad      	uxthmi	r5, r5
 800a534:	2f6f      	cmp	r7, #111	@ 0x6f
 800a536:	4853      	ldr	r0, [pc, #332]	@ (800a684 <_printf_i+0x238>)
 800a538:	6033      	str	r3, [r6, #0]
 800a53a:	bf14      	ite	ne
 800a53c:	230a      	movne	r3, #10
 800a53e:	2308      	moveq	r3, #8
 800a540:	2100      	movs	r1, #0
 800a542:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a546:	6866      	ldr	r6, [r4, #4]
 800a548:	60a6      	str	r6, [r4, #8]
 800a54a:	2e00      	cmp	r6, #0
 800a54c:	bfa2      	ittt	ge
 800a54e:	6821      	ldrge	r1, [r4, #0]
 800a550:	f021 0104 	bicge.w	r1, r1, #4
 800a554:	6021      	strge	r1, [r4, #0]
 800a556:	b90d      	cbnz	r5, 800a55c <_printf_i+0x110>
 800a558:	2e00      	cmp	r6, #0
 800a55a:	d04b      	beq.n	800a5f4 <_printf_i+0x1a8>
 800a55c:	4616      	mov	r6, r2
 800a55e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a562:	fb03 5711 	mls	r7, r3, r1, r5
 800a566:	5dc7      	ldrb	r7, [r0, r7]
 800a568:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a56c:	462f      	mov	r7, r5
 800a56e:	42bb      	cmp	r3, r7
 800a570:	460d      	mov	r5, r1
 800a572:	d9f4      	bls.n	800a55e <_printf_i+0x112>
 800a574:	2b08      	cmp	r3, #8
 800a576:	d10b      	bne.n	800a590 <_printf_i+0x144>
 800a578:	6823      	ldr	r3, [r4, #0]
 800a57a:	07df      	lsls	r7, r3, #31
 800a57c:	d508      	bpl.n	800a590 <_printf_i+0x144>
 800a57e:	6923      	ldr	r3, [r4, #16]
 800a580:	6861      	ldr	r1, [r4, #4]
 800a582:	4299      	cmp	r1, r3
 800a584:	bfde      	ittt	le
 800a586:	2330      	movle	r3, #48	@ 0x30
 800a588:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a58c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a590:	1b92      	subs	r2, r2, r6
 800a592:	6122      	str	r2, [r4, #16]
 800a594:	f8cd a000 	str.w	sl, [sp]
 800a598:	464b      	mov	r3, r9
 800a59a:	aa03      	add	r2, sp, #12
 800a59c:	4621      	mov	r1, r4
 800a59e:	4640      	mov	r0, r8
 800a5a0:	f7ff fee6 	bl	800a370 <_printf_common>
 800a5a4:	3001      	adds	r0, #1
 800a5a6:	d14a      	bne.n	800a63e <_printf_i+0x1f2>
 800a5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ac:	b004      	add	sp, #16
 800a5ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b2:	6823      	ldr	r3, [r4, #0]
 800a5b4:	f043 0320 	orr.w	r3, r3, #32
 800a5b8:	6023      	str	r3, [r4, #0]
 800a5ba:	4833      	ldr	r0, [pc, #204]	@ (800a688 <_printf_i+0x23c>)
 800a5bc:	2778      	movs	r7, #120	@ 0x78
 800a5be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a5c2:	6823      	ldr	r3, [r4, #0]
 800a5c4:	6831      	ldr	r1, [r6, #0]
 800a5c6:	061f      	lsls	r7, r3, #24
 800a5c8:	f851 5b04 	ldr.w	r5, [r1], #4
 800a5cc:	d402      	bmi.n	800a5d4 <_printf_i+0x188>
 800a5ce:	065f      	lsls	r7, r3, #25
 800a5d0:	bf48      	it	mi
 800a5d2:	b2ad      	uxthmi	r5, r5
 800a5d4:	6031      	str	r1, [r6, #0]
 800a5d6:	07d9      	lsls	r1, r3, #31
 800a5d8:	bf44      	itt	mi
 800a5da:	f043 0320 	orrmi.w	r3, r3, #32
 800a5de:	6023      	strmi	r3, [r4, #0]
 800a5e0:	b11d      	cbz	r5, 800a5ea <_printf_i+0x19e>
 800a5e2:	2310      	movs	r3, #16
 800a5e4:	e7ac      	b.n	800a540 <_printf_i+0xf4>
 800a5e6:	4827      	ldr	r0, [pc, #156]	@ (800a684 <_printf_i+0x238>)
 800a5e8:	e7e9      	b.n	800a5be <_printf_i+0x172>
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	f023 0320 	bic.w	r3, r3, #32
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	e7f6      	b.n	800a5e2 <_printf_i+0x196>
 800a5f4:	4616      	mov	r6, r2
 800a5f6:	e7bd      	b.n	800a574 <_printf_i+0x128>
 800a5f8:	6833      	ldr	r3, [r6, #0]
 800a5fa:	6825      	ldr	r5, [r4, #0]
 800a5fc:	6961      	ldr	r1, [r4, #20]
 800a5fe:	1d18      	adds	r0, r3, #4
 800a600:	6030      	str	r0, [r6, #0]
 800a602:	062e      	lsls	r6, r5, #24
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	d501      	bpl.n	800a60c <_printf_i+0x1c0>
 800a608:	6019      	str	r1, [r3, #0]
 800a60a:	e002      	b.n	800a612 <_printf_i+0x1c6>
 800a60c:	0668      	lsls	r0, r5, #25
 800a60e:	d5fb      	bpl.n	800a608 <_printf_i+0x1bc>
 800a610:	8019      	strh	r1, [r3, #0]
 800a612:	2300      	movs	r3, #0
 800a614:	6123      	str	r3, [r4, #16]
 800a616:	4616      	mov	r6, r2
 800a618:	e7bc      	b.n	800a594 <_printf_i+0x148>
 800a61a:	6833      	ldr	r3, [r6, #0]
 800a61c:	1d1a      	adds	r2, r3, #4
 800a61e:	6032      	str	r2, [r6, #0]
 800a620:	681e      	ldr	r6, [r3, #0]
 800a622:	6862      	ldr	r2, [r4, #4]
 800a624:	2100      	movs	r1, #0
 800a626:	4630      	mov	r0, r6
 800a628:	f7f5 fdea 	bl	8000200 <memchr>
 800a62c:	b108      	cbz	r0, 800a632 <_printf_i+0x1e6>
 800a62e:	1b80      	subs	r0, r0, r6
 800a630:	6060      	str	r0, [r4, #4]
 800a632:	6863      	ldr	r3, [r4, #4]
 800a634:	6123      	str	r3, [r4, #16]
 800a636:	2300      	movs	r3, #0
 800a638:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a63c:	e7aa      	b.n	800a594 <_printf_i+0x148>
 800a63e:	6923      	ldr	r3, [r4, #16]
 800a640:	4632      	mov	r2, r6
 800a642:	4649      	mov	r1, r9
 800a644:	4640      	mov	r0, r8
 800a646:	47d0      	blx	sl
 800a648:	3001      	adds	r0, #1
 800a64a:	d0ad      	beq.n	800a5a8 <_printf_i+0x15c>
 800a64c:	6823      	ldr	r3, [r4, #0]
 800a64e:	079b      	lsls	r3, r3, #30
 800a650:	d413      	bmi.n	800a67a <_printf_i+0x22e>
 800a652:	68e0      	ldr	r0, [r4, #12]
 800a654:	9b03      	ldr	r3, [sp, #12]
 800a656:	4298      	cmp	r0, r3
 800a658:	bfb8      	it	lt
 800a65a:	4618      	movlt	r0, r3
 800a65c:	e7a6      	b.n	800a5ac <_printf_i+0x160>
 800a65e:	2301      	movs	r3, #1
 800a660:	4632      	mov	r2, r6
 800a662:	4649      	mov	r1, r9
 800a664:	4640      	mov	r0, r8
 800a666:	47d0      	blx	sl
 800a668:	3001      	adds	r0, #1
 800a66a:	d09d      	beq.n	800a5a8 <_printf_i+0x15c>
 800a66c:	3501      	adds	r5, #1
 800a66e:	68e3      	ldr	r3, [r4, #12]
 800a670:	9903      	ldr	r1, [sp, #12]
 800a672:	1a5b      	subs	r3, r3, r1
 800a674:	42ab      	cmp	r3, r5
 800a676:	dcf2      	bgt.n	800a65e <_printf_i+0x212>
 800a678:	e7eb      	b.n	800a652 <_printf_i+0x206>
 800a67a:	2500      	movs	r5, #0
 800a67c:	f104 0619 	add.w	r6, r4, #25
 800a680:	e7f5      	b.n	800a66e <_printf_i+0x222>
 800a682:	bf00      	nop
 800a684:	0800b123 	.word	0x0800b123
 800a688:	0800b134 	.word	0x0800b134

0800a68c <__sflush_r>:
 800a68c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a694:	0716      	lsls	r6, r2, #28
 800a696:	4605      	mov	r5, r0
 800a698:	460c      	mov	r4, r1
 800a69a:	d454      	bmi.n	800a746 <__sflush_r+0xba>
 800a69c:	684b      	ldr	r3, [r1, #4]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	dc02      	bgt.n	800a6a8 <__sflush_r+0x1c>
 800a6a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	dd48      	ble.n	800a73a <__sflush_r+0xae>
 800a6a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6aa:	2e00      	cmp	r6, #0
 800a6ac:	d045      	beq.n	800a73a <__sflush_r+0xae>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a6b4:	682f      	ldr	r7, [r5, #0]
 800a6b6:	6a21      	ldr	r1, [r4, #32]
 800a6b8:	602b      	str	r3, [r5, #0]
 800a6ba:	d030      	beq.n	800a71e <__sflush_r+0x92>
 800a6bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a6be:	89a3      	ldrh	r3, [r4, #12]
 800a6c0:	0759      	lsls	r1, r3, #29
 800a6c2:	d505      	bpl.n	800a6d0 <__sflush_r+0x44>
 800a6c4:	6863      	ldr	r3, [r4, #4]
 800a6c6:	1ad2      	subs	r2, r2, r3
 800a6c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a6ca:	b10b      	cbz	r3, 800a6d0 <__sflush_r+0x44>
 800a6cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a6ce:	1ad2      	subs	r2, r2, r3
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a6d4:	6a21      	ldr	r1, [r4, #32]
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	47b0      	blx	r6
 800a6da:	1c43      	adds	r3, r0, #1
 800a6dc:	89a3      	ldrh	r3, [r4, #12]
 800a6de:	d106      	bne.n	800a6ee <__sflush_r+0x62>
 800a6e0:	6829      	ldr	r1, [r5, #0]
 800a6e2:	291d      	cmp	r1, #29
 800a6e4:	d82b      	bhi.n	800a73e <__sflush_r+0xb2>
 800a6e6:	4a2a      	ldr	r2, [pc, #168]	@ (800a790 <__sflush_r+0x104>)
 800a6e8:	410a      	asrs	r2, r1
 800a6ea:	07d6      	lsls	r6, r2, #31
 800a6ec:	d427      	bmi.n	800a73e <__sflush_r+0xb2>
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	6062      	str	r2, [r4, #4]
 800a6f2:	04d9      	lsls	r1, r3, #19
 800a6f4:	6922      	ldr	r2, [r4, #16]
 800a6f6:	6022      	str	r2, [r4, #0]
 800a6f8:	d504      	bpl.n	800a704 <__sflush_r+0x78>
 800a6fa:	1c42      	adds	r2, r0, #1
 800a6fc:	d101      	bne.n	800a702 <__sflush_r+0x76>
 800a6fe:	682b      	ldr	r3, [r5, #0]
 800a700:	b903      	cbnz	r3, 800a704 <__sflush_r+0x78>
 800a702:	6560      	str	r0, [r4, #84]	@ 0x54
 800a704:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a706:	602f      	str	r7, [r5, #0]
 800a708:	b1b9      	cbz	r1, 800a73a <__sflush_r+0xae>
 800a70a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a70e:	4299      	cmp	r1, r3
 800a710:	d002      	beq.n	800a718 <__sflush_r+0x8c>
 800a712:	4628      	mov	r0, r5
 800a714:	f7ff fbd4 	bl	8009ec0 <_free_r>
 800a718:	2300      	movs	r3, #0
 800a71a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a71c:	e00d      	b.n	800a73a <__sflush_r+0xae>
 800a71e:	2301      	movs	r3, #1
 800a720:	4628      	mov	r0, r5
 800a722:	47b0      	blx	r6
 800a724:	4602      	mov	r2, r0
 800a726:	1c50      	adds	r0, r2, #1
 800a728:	d1c9      	bne.n	800a6be <__sflush_r+0x32>
 800a72a:	682b      	ldr	r3, [r5, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d0c6      	beq.n	800a6be <__sflush_r+0x32>
 800a730:	2b1d      	cmp	r3, #29
 800a732:	d001      	beq.n	800a738 <__sflush_r+0xac>
 800a734:	2b16      	cmp	r3, #22
 800a736:	d11e      	bne.n	800a776 <__sflush_r+0xea>
 800a738:	602f      	str	r7, [r5, #0]
 800a73a:	2000      	movs	r0, #0
 800a73c:	e022      	b.n	800a784 <__sflush_r+0xf8>
 800a73e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a742:	b21b      	sxth	r3, r3
 800a744:	e01b      	b.n	800a77e <__sflush_r+0xf2>
 800a746:	690f      	ldr	r7, [r1, #16]
 800a748:	2f00      	cmp	r7, #0
 800a74a:	d0f6      	beq.n	800a73a <__sflush_r+0xae>
 800a74c:	0793      	lsls	r3, r2, #30
 800a74e:	680e      	ldr	r6, [r1, #0]
 800a750:	bf08      	it	eq
 800a752:	694b      	ldreq	r3, [r1, #20]
 800a754:	600f      	str	r7, [r1, #0]
 800a756:	bf18      	it	ne
 800a758:	2300      	movne	r3, #0
 800a75a:	eba6 0807 	sub.w	r8, r6, r7
 800a75e:	608b      	str	r3, [r1, #8]
 800a760:	f1b8 0f00 	cmp.w	r8, #0
 800a764:	dde9      	ble.n	800a73a <__sflush_r+0xae>
 800a766:	6a21      	ldr	r1, [r4, #32]
 800a768:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a76a:	4643      	mov	r3, r8
 800a76c:	463a      	mov	r2, r7
 800a76e:	4628      	mov	r0, r5
 800a770:	47b0      	blx	r6
 800a772:	2800      	cmp	r0, #0
 800a774:	dc08      	bgt.n	800a788 <__sflush_r+0xfc>
 800a776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a77a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a77e:	81a3      	strh	r3, [r4, #12]
 800a780:	f04f 30ff 	mov.w	r0, #4294967295
 800a784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a788:	4407      	add	r7, r0
 800a78a:	eba8 0800 	sub.w	r8, r8, r0
 800a78e:	e7e7      	b.n	800a760 <__sflush_r+0xd4>
 800a790:	dfbffffe 	.word	0xdfbffffe

0800a794 <_fflush_r>:
 800a794:	b538      	push	{r3, r4, r5, lr}
 800a796:	690b      	ldr	r3, [r1, #16]
 800a798:	4605      	mov	r5, r0
 800a79a:	460c      	mov	r4, r1
 800a79c:	b913      	cbnz	r3, 800a7a4 <_fflush_r+0x10>
 800a79e:	2500      	movs	r5, #0
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	b118      	cbz	r0, 800a7ae <_fflush_r+0x1a>
 800a7a6:	6a03      	ldr	r3, [r0, #32]
 800a7a8:	b90b      	cbnz	r3, 800a7ae <_fflush_r+0x1a>
 800a7aa:	f7ff f9c5 	bl	8009b38 <__sinit>
 800a7ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d0f3      	beq.n	800a79e <_fflush_r+0xa>
 800a7b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a7b8:	07d0      	lsls	r0, r2, #31
 800a7ba:	d404      	bmi.n	800a7c6 <_fflush_r+0x32>
 800a7bc:	0599      	lsls	r1, r3, #22
 800a7be:	d402      	bmi.n	800a7c6 <_fflush_r+0x32>
 800a7c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7c2:	f7ff fb4e 	bl	8009e62 <__retarget_lock_acquire_recursive>
 800a7c6:	4628      	mov	r0, r5
 800a7c8:	4621      	mov	r1, r4
 800a7ca:	f7ff ff5f 	bl	800a68c <__sflush_r>
 800a7ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a7d0:	07da      	lsls	r2, r3, #31
 800a7d2:	4605      	mov	r5, r0
 800a7d4:	d4e4      	bmi.n	800a7a0 <_fflush_r+0xc>
 800a7d6:	89a3      	ldrh	r3, [r4, #12]
 800a7d8:	059b      	lsls	r3, r3, #22
 800a7da:	d4e1      	bmi.n	800a7a0 <_fflush_r+0xc>
 800a7dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a7de:	f7ff fb41 	bl	8009e64 <__retarget_lock_release_recursive>
 800a7e2:	e7dd      	b.n	800a7a0 <_fflush_r+0xc>

0800a7e4 <fiprintf>:
 800a7e4:	b40e      	push	{r1, r2, r3}
 800a7e6:	b503      	push	{r0, r1, lr}
 800a7e8:	4601      	mov	r1, r0
 800a7ea:	ab03      	add	r3, sp, #12
 800a7ec:	4805      	ldr	r0, [pc, #20]	@ (800a804 <fiprintf+0x20>)
 800a7ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7f2:	6800      	ldr	r0, [r0, #0]
 800a7f4:	9301      	str	r3, [sp, #4]
 800a7f6:	f000 f88f 	bl	800a918 <_vfiprintf_r>
 800a7fa:	b002      	add	sp, #8
 800a7fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a800:	b003      	add	sp, #12
 800a802:	4770      	bx	lr
 800a804:	20000134 	.word	0x20000134

0800a808 <memmove>:
 800a808:	4288      	cmp	r0, r1
 800a80a:	b510      	push	{r4, lr}
 800a80c:	eb01 0402 	add.w	r4, r1, r2
 800a810:	d902      	bls.n	800a818 <memmove+0x10>
 800a812:	4284      	cmp	r4, r0
 800a814:	4623      	mov	r3, r4
 800a816:	d807      	bhi.n	800a828 <memmove+0x20>
 800a818:	1e43      	subs	r3, r0, #1
 800a81a:	42a1      	cmp	r1, r4
 800a81c:	d008      	beq.n	800a830 <memmove+0x28>
 800a81e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a822:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a826:	e7f8      	b.n	800a81a <memmove+0x12>
 800a828:	4402      	add	r2, r0
 800a82a:	4601      	mov	r1, r0
 800a82c:	428a      	cmp	r2, r1
 800a82e:	d100      	bne.n	800a832 <memmove+0x2a>
 800a830:	bd10      	pop	{r4, pc}
 800a832:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a836:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a83a:	e7f7      	b.n	800a82c <memmove+0x24>

0800a83c <_sbrk_r>:
 800a83c:	b538      	push	{r3, r4, r5, lr}
 800a83e:	4d06      	ldr	r5, [pc, #24]	@ (800a858 <_sbrk_r+0x1c>)
 800a840:	2300      	movs	r3, #0
 800a842:	4604      	mov	r4, r0
 800a844:	4608      	mov	r0, r1
 800a846:	602b      	str	r3, [r5, #0]
 800a848:	f7f6 feb6 	bl	80015b8 <_sbrk>
 800a84c:	1c43      	adds	r3, r0, #1
 800a84e:	d102      	bne.n	800a856 <_sbrk_r+0x1a>
 800a850:	682b      	ldr	r3, [r5, #0]
 800a852:	b103      	cbz	r3, 800a856 <_sbrk_r+0x1a>
 800a854:	6023      	str	r3, [r4, #0]
 800a856:	bd38      	pop	{r3, r4, r5, pc}
 800a858:	2000485c 	.word	0x2000485c

0800a85c <abort>:
 800a85c:	b508      	push	{r3, lr}
 800a85e:	2006      	movs	r0, #6
 800a860:	f000 fa2e 	bl	800acc0 <raise>
 800a864:	2001      	movs	r0, #1
 800a866:	f7f6 fe2f 	bl	80014c8 <_exit>

0800a86a <_realloc_r>:
 800a86a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a86e:	4680      	mov	r8, r0
 800a870:	4615      	mov	r5, r2
 800a872:	460c      	mov	r4, r1
 800a874:	b921      	cbnz	r1, 800a880 <_realloc_r+0x16>
 800a876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a87a:	4611      	mov	r1, r2
 800a87c:	f7ff bb94 	b.w	8009fa8 <_malloc_r>
 800a880:	b92a      	cbnz	r2, 800a88e <_realloc_r+0x24>
 800a882:	f7ff fb1d 	bl	8009ec0 <_free_r>
 800a886:	2400      	movs	r4, #0
 800a888:	4620      	mov	r0, r4
 800a88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a88e:	f000 fa33 	bl	800acf8 <_malloc_usable_size_r>
 800a892:	4285      	cmp	r5, r0
 800a894:	4606      	mov	r6, r0
 800a896:	d802      	bhi.n	800a89e <_realloc_r+0x34>
 800a898:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a89c:	d8f4      	bhi.n	800a888 <_realloc_r+0x1e>
 800a89e:	4629      	mov	r1, r5
 800a8a0:	4640      	mov	r0, r8
 800a8a2:	f7ff fb81 	bl	8009fa8 <_malloc_r>
 800a8a6:	4607      	mov	r7, r0
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	d0ec      	beq.n	800a886 <_realloc_r+0x1c>
 800a8ac:	42b5      	cmp	r5, r6
 800a8ae:	462a      	mov	r2, r5
 800a8b0:	4621      	mov	r1, r4
 800a8b2:	bf28      	it	cs
 800a8b4:	4632      	movcs	r2, r6
 800a8b6:	f7ff fad6 	bl	8009e66 <memcpy>
 800a8ba:	4621      	mov	r1, r4
 800a8bc:	4640      	mov	r0, r8
 800a8be:	f7ff faff 	bl	8009ec0 <_free_r>
 800a8c2:	463c      	mov	r4, r7
 800a8c4:	e7e0      	b.n	800a888 <_realloc_r+0x1e>

0800a8c6 <__sfputc_r>:
 800a8c6:	6893      	ldr	r3, [r2, #8]
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	b410      	push	{r4}
 800a8ce:	6093      	str	r3, [r2, #8]
 800a8d0:	da08      	bge.n	800a8e4 <__sfputc_r+0x1e>
 800a8d2:	6994      	ldr	r4, [r2, #24]
 800a8d4:	42a3      	cmp	r3, r4
 800a8d6:	db01      	blt.n	800a8dc <__sfputc_r+0x16>
 800a8d8:	290a      	cmp	r1, #10
 800a8da:	d103      	bne.n	800a8e4 <__sfputc_r+0x1e>
 800a8dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8e0:	f000 b932 	b.w	800ab48 <__swbuf_r>
 800a8e4:	6813      	ldr	r3, [r2, #0]
 800a8e6:	1c58      	adds	r0, r3, #1
 800a8e8:	6010      	str	r0, [r2, #0]
 800a8ea:	7019      	strb	r1, [r3, #0]
 800a8ec:	4608      	mov	r0, r1
 800a8ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <__sfputs_r>:
 800a8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f6:	4606      	mov	r6, r0
 800a8f8:	460f      	mov	r7, r1
 800a8fa:	4614      	mov	r4, r2
 800a8fc:	18d5      	adds	r5, r2, r3
 800a8fe:	42ac      	cmp	r4, r5
 800a900:	d101      	bne.n	800a906 <__sfputs_r+0x12>
 800a902:	2000      	movs	r0, #0
 800a904:	e007      	b.n	800a916 <__sfputs_r+0x22>
 800a906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a90a:	463a      	mov	r2, r7
 800a90c:	4630      	mov	r0, r6
 800a90e:	f7ff ffda 	bl	800a8c6 <__sfputc_r>
 800a912:	1c43      	adds	r3, r0, #1
 800a914:	d1f3      	bne.n	800a8fe <__sfputs_r+0xa>
 800a916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a918 <_vfiprintf_r>:
 800a918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a91c:	460d      	mov	r5, r1
 800a91e:	b09d      	sub	sp, #116	@ 0x74
 800a920:	4614      	mov	r4, r2
 800a922:	4698      	mov	r8, r3
 800a924:	4606      	mov	r6, r0
 800a926:	b118      	cbz	r0, 800a930 <_vfiprintf_r+0x18>
 800a928:	6a03      	ldr	r3, [r0, #32]
 800a92a:	b90b      	cbnz	r3, 800a930 <_vfiprintf_r+0x18>
 800a92c:	f7ff f904 	bl	8009b38 <__sinit>
 800a930:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a932:	07d9      	lsls	r1, r3, #31
 800a934:	d405      	bmi.n	800a942 <_vfiprintf_r+0x2a>
 800a936:	89ab      	ldrh	r3, [r5, #12]
 800a938:	059a      	lsls	r2, r3, #22
 800a93a:	d402      	bmi.n	800a942 <_vfiprintf_r+0x2a>
 800a93c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a93e:	f7ff fa90 	bl	8009e62 <__retarget_lock_acquire_recursive>
 800a942:	89ab      	ldrh	r3, [r5, #12]
 800a944:	071b      	lsls	r3, r3, #28
 800a946:	d501      	bpl.n	800a94c <_vfiprintf_r+0x34>
 800a948:	692b      	ldr	r3, [r5, #16]
 800a94a:	b99b      	cbnz	r3, 800a974 <_vfiprintf_r+0x5c>
 800a94c:	4629      	mov	r1, r5
 800a94e:	4630      	mov	r0, r6
 800a950:	f000 f938 	bl	800abc4 <__swsetup_r>
 800a954:	b170      	cbz	r0, 800a974 <_vfiprintf_r+0x5c>
 800a956:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a958:	07dc      	lsls	r4, r3, #31
 800a95a:	d504      	bpl.n	800a966 <_vfiprintf_r+0x4e>
 800a95c:	f04f 30ff 	mov.w	r0, #4294967295
 800a960:	b01d      	add	sp, #116	@ 0x74
 800a962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a966:	89ab      	ldrh	r3, [r5, #12]
 800a968:	0598      	lsls	r0, r3, #22
 800a96a:	d4f7      	bmi.n	800a95c <_vfiprintf_r+0x44>
 800a96c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a96e:	f7ff fa79 	bl	8009e64 <__retarget_lock_release_recursive>
 800a972:	e7f3      	b.n	800a95c <_vfiprintf_r+0x44>
 800a974:	2300      	movs	r3, #0
 800a976:	9309      	str	r3, [sp, #36]	@ 0x24
 800a978:	2320      	movs	r3, #32
 800a97a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a97e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a982:	2330      	movs	r3, #48	@ 0x30
 800a984:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ab34 <_vfiprintf_r+0x21c>
 800a988:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a98c:	f04f 0901 	mov.w	r9, #1
 800a990:	4623      	mov	r3, r4
 800a992:	469a      	mov	sl, r3
 800a994:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a998:	b10a      	cbz	r2, 800a99e <_vfiprintf_r+0x86>
 800a99a:	2a25      	cmp	r2, #37	@ 0x25
 800a99c:	d1f9      	bne.n	800a992 <_vfiprintf_r+0x7a>
 800a99e:	ebba 0b04 	subs.w	fp, sl, r4
 800a9a2:	d00b      	beq.n	800a9bc <_vfiprintf_r+0xa4>
 800a9a4:	465b      	mov	r3, fp
 800a9a6:	4622      	mov	r2, r4
 800a9a8:	4629      	mov	r1, r5
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f7ff ffa2 	bl	800a8f4 <__sfputs_r>
 800a9b0:	3001      	adds	r0, #1
 800a9b2:	f000 80a7 	beq.w	800ab04 <_vfiprintf_r+0x1ec>
 800a9b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9b8:	445a      	add	r2, fp
 800a9ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9bc:	f89a 3000 	ldrb.w	r3, [sl]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	f000 809f 	beq.w	800ab04 <_vfiprintf_r+0x1ec>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9d0:	f10a 0a01 	add.w	sl, sl, #1
 800a9d4:	9304      	str	r3, [sp, #16]
 800a9d6:	9307      	str	r3, [sp, #28]
 800a9d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9dc:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9de:	4654      	mov	r4, sl
 800a9e0:	2205      	movs	r2, #5
 800a9e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9e6:	4853      	ldr	r0, [pc, #332]	@ (800ab34 <_vfiprintf_r+0x21c>)
 800a9e8:	f7f5 fc0a 	bl	8000200 <memchr>
 800a9ec:	9a04      	ldr	r2, [sp, #16]
 800a9ee:	b9d8      	cbnz	r0, 800aa28 <_vfiprintf_r+0x110>
 800a9f0:	06d1      	lsls	r1, r2, #27
 800a9f2:	bf44      	itt	mi
 800a9f4:	2320      	movmi	r3, #32
 800a9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9fa:	0713      	lsls	r3, r2, #28
 800a9fc:	bf44      	itt	mi
 800a9fe:	232b      	movmi	r3, #43	@ 0x2b
 800aa00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa04:	f89a 3000 	ldrb.w	r3, [sl]
 800aa08:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa0a:	d015      	beq.n	800aa38 <_vfiprintf_r+0x120>
 800aa0c:	9a07      	ldr	r2, [sp, #28]
 800aa0e:	4654      	mov	r4, sl
 800aa10:	2000      	movs	r0, #0
 800aa12:	f04f 0c0a 	mov.w	ip, #10
 800aa16:	4621      	mov	r1, r4
 800aa18:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa1c:	3b30      	subs	r3, #48	@ 0x30
 800aa1e:	2b09      	cmp	r3, #9
 800aa20:	d94b      	bls.n	800aaba <_vfiprintf_r+0x1a2>
 800aa22:	b1b0      	cbz	r0, 800aa52 <_vfiprintf_r+0x13a>
 800aa24:	9207      	str	r2, [sp, #28]
 800aa26:	e014      	b.n	800aa52 <_vfiprintf_r+0x13a>
 800aa28:	eba0 0308 	sub.w	r3, r0, r8
 800aa2c:	fa09 f303 	lsl.w	r3, r9, r3
 800aa30:	4313      	orrs	r3, r2
 800aa32:	9304      	str	r3, [sp, #16]
 800aa34:	46a2      	mov	sl, r4
 800aa36:	e7d2      	b.n	800a9de <_vfiprintf_r+0xc6>
 800aa38:	9b03      	ldr	r3, [sp, #12]
 800aa3a:	1d19      	adds	r1, r3, #4
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	9103      	str	r1, [sp, #12]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	bfbb      	ittet	lt
 800aa44:	425b      	neglt	r3, r3
 800aa46:	f042 0202 	orrlt.w	r2, r2, #2
 800aa4a:	9307      	strge	r3, [sp, #28]
 800aa4c:	9307      	strlt	r3, [sp, #28]
 800aa4e:	bfb8      	it	lt
 800aa50:	9204      	strlt	r2, [sp, #16]
 800aa52:	7823      	ldrb	r3, [r4, #0]
 800aa54:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa56:	d10a      	bne.n	800aa6e <_vfiprintf_r+0x156>
 800aa58:	7863      	ldrb	r3, [r4, #1]
 800aa5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa5c:	d132      	bne.n	800aac4 <_vfiprintf_r+0x1ac>
 800aa5e:	9b03      	ldr	r3, [sp, #12]
 800aa60:	1d1a      	adds	r2, r3, #4
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	9203      	str	r2, [sp, #12]
 800aa66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa6a:	3402      	adds	r4, #2
 800aa6c:	9305      	str	r3, [sp, #20]
 800aa6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ab44 <_vfiprintf_r+0x22c>
 800aa72:	7821      	ldrb	r1, [r4, #0]
 800aa74:	2203      	movs	r2, #3
 800aa76:	4650      	mov	r0, sl
 800aa78:	f7f5 fbc2 	bl	8000200 <memchr>
 800aa7c:	b138      	cbz	r0, 800aa8e <_vfiprintf_r+0x176>
 800aa7e:	9b04      	ldr	r3, [sp, #16]
 800aa80:	eba0 000a 	sub.w	r0, r0, sl
 800aa84:	2240      	movs	r2, #64	@ 0x40
 800aa86:	4082      	lsls	r2, r0
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	3401      	adds	r4, #1
 800aa8c:	9304      	str	r3, [sp, #16]
 800aa8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa92:	4829      	ldr	r0, [pc, #164]	@ (800ab38 <_vfiprintf_r+0x220>)
 800aa94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa98:	2206      	movs	r2, #6
 800aa9a:	f7f5 fbb1 	bl	8000200 <memchr>
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	d03f      	beq.n	800ab22 <_vfiprintf_r+0x20a>
 800aaa2:	4b26      	ldr	r3, [pc, #152]	@ (800ab3c <_vfiprintf_r+0x224>)
 800aaa4:	bb1b      	cbnz	r3, 800aaee <_vfiprintf_r+0x1d6>
 800aaa6:	9b03      	ldr	r3, [sp, #12]
 800aaa8:	3307      	adds	r3, #7
 800aaaa:	f023 0307 	bic.w	r3, r3, #7
 800aaae:	3308      	adds	r3, #8
 800aab0:	9303      	str	r3, [sp, #12]
 800aab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aab4:	443b      	add	r3, r7
 800aab6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aab8:	e76a      	b.n	800a990 <_vfiprintf_r+0x78>
 800aaba:	fb0c 3202 	mla	r2, ip, r2, r3
 800aabe:	460c      	mov	r4, r1
 800aac0:	2001      	movs	r0, #1
 800aac2:	e7a8      	b.n	800aa16 <_vfiprintf_r+0xfe>
 800aac4:	2300      	movs	r3, #0
 800aac6:	3401      	adds	r4, #1
 800aac8:	9305      	str	r3, [sp, #20]
 800aaca:	4619      	mov	r1, r3
 800aacc:	f04f 0c0a 	mov.w	ip, #10
 800aad0:	4620      	mov	r0, r4
 800aad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aad6:	3a30      	subs	r2, #48	@ 0x30
 800aad8:	2a09      	cmp	r2, #9
 800aada:	d903      	bls.n	800aae4 <_vfiprintf_r+0x1cc>
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d0c6      	beq.n	800aa6e <_vfiprintf_r+0x156>
 800aae0:	9105      	str	r1, [sp, #20]
 800aae2:	e7c4      	b.n	800aa6e <_vfiprintf_r+0x156>
 800aae4:	fb0c 2101 	mla	r1, ip, r1, r2
 800aae8:	4604      	mov	r4, r0
 800aaea:	2301      	movs	r3, #1
 800aaec:	e7f0      	b.n	800aad0 <_vfiprintf_r+0x1b8>
 800aaee:	ab03      	add	r3, sp, #12
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	462a      	mov	r2, r5
 800aaf4:	4b12      	ldr	r3, [pc, #72]	@ (800ab40 <_vfiprintf_r+0x228>)
 800aaf6:	a904      	add	r1, sp, #16
 800aaf8:	4630      	mov	r0, r6
 800aafa:	f3af 8000 	nop.w
 800aafe:	4607      	mov	r7, r0
 800ab00:	1c78      	adds	r0, r7, #1
 800ab02:	d1d6      	bne.n	800aab2 <_vfiprintf_r+0x19a>
 800ab04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab06:	07d9      	lsls	r1, r3, #31
 800ab08:	d405      	bmi.n	800ab16 <_vfiprintf_r+0x1fe>
 800ab0a:	89ab      	ldrh	r3, [r5, #12]
 800ab0c:	059a      	lsls	r2, r3, #22
 800ab0e:	d402      	bmi.n	800ab16 <_vfiprintf_r+0x1fe>
 800ab10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab12:	f7ff f9a7 	bl	8009e64 <__retarget_lock_release_recursive>
 800ab16:	89ab      	ldrh	r3, [r5, #12]
 800ab18:	065b      	lsls	r3, r3, #25
 800ab1a:	f53f af1f 	bmi.w	800a95c <_vfiprintf_r+0x44>
 800ab1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab20:	e71e      	b.n	800a960 <_vfiprintf_r+0x48>
 800ab22:	ab03      	add	r3, sp, #12
 800ab24:	9300      	str	r3, [sp, #0]
 800ab26:	462a      	mov	r2, r5
 800ab28:	4b05      	ldr	r3, [pc, #20]	@ (800ab40 <_vfiprintf_r+0x228>)
 800ab2a:	a904      	add	r1, sp, #16
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	f7ff fc8d 	bl	800a44c <_printf_i>
 800ab32:	e7e4      	b.n	800aafe <_vfiprintf_r+0x1e6>
 800ab34:	0800b112 	.word	0x0800b112
 800ab38:	0800b11c 	.word	0x0800b11c
 800ab3c:	00000000 	.word	0x00000000
 800ab40:	0800a8f5 	.word	0x0800a8f5
 800ab44:	0800b118 	.word	0x0800b118

0800ab48 <__swbuf_r>:
 800ab48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab4a:	460e      	mov	r6, r1
 800ab4c:	4614      	mov	r4, r2
 800ab4e:	4605      	mov	r5, r0
 800ab50:	b118      	cbz	r0, 800ab5a <__swbuf_r+0x12>
 800ab52:	6a03      	ldr	r3, [r0, #32]
 800ab54:	b90b      	cbnz	r3, 800ab5a <__swbuf_r+0x12>
 800ab56:	f7fe ffef 	bl	8009b38 <__sinit>
 800ab5a:	69a3      	ldr	r3, [r4, #24]
 800ab5c:	60a3      	str	r3, [r4, #8]
 800ab5e:	89a3      	ldrh	r3, [r4, #12]
 800ab60:	071a      	lsls	r2, r3, #28
 800ab62:	d501      	bpl.n	800ab68 <__swbuf_r+0x20>
 800ab64:	6923      	ldr	r3, [r4, #16]
 800ab66:	b943      	cbnz	r3, 800ab7a <__swbuf_r+0x32>
 800ab68:	4621      	mov	r1, r4
 800ab6a:	4628      	mov	r0, r5
 800ab6c:	f000 f82a 	bl	800abc4 <__swsetup_r>
 800ab70:	b118      	cbz	r0, 800ab7a <__swbuf_r+0x32>
 800ab72:	f04f 37ff 	mov.w	r7, #4294967295
 800ab76:	4638      	mov	r0, r7
 800ab78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab7a:	6823      	ldr	r3, [r4, #0]
 800ab7c:	6922      	ldr	r2, [r4, #16]
 800ab7e:	1a98      	subs	r0, r3, r2
 800ab80:	6963      	ldr	r3, [r4, #20]
 800ab82:	b2f6      	uxtb	r6, r6
 800ab84:	4283      	cmp	r3, r0
 800ab86:	4637      	mov	r7, r6
 800ab88:	dc05      	bgt.n	800ab96 <__swbuf_r+0x4e>
 800ab8a:	4621      	mov	r1, r4
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	f7ff fe01 	bl	800a794 <_fflush_r>
 800ab92:	2800      	cmp	r0, #0
 800ab94:	d1ed      	bne.n	800ab72 <__swbuf_r+0x2a>
 800ab96:	68a3      	ldr	r3, [r4, #8]
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	60a3      	str	r3, [r4, #8]
 800ab9c:	6823      	ldr	r3, [r4, #0]
 800ab9e:	1c5a      	adds	r2, r3, #1
 800aba0:	6022      	str	r2, [r4, #0]
 800aba2:	701e      	strb	r6, [r3, #0]
 800aba4:	6962      	ldr	r2, [r4, #20]
 800aba6:	1c43      	adds	r3, r0, #1
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d004      	beq.n	800abb6 <__swbuf_r+0x6e>
 800abac:	89a3      	ldrh	r3, [r4, #12]
 800abae:	07db      	lsls	r3, r3, #31
 800abb0:	d5e1      	bpl.n	800ab76 <__swbuf_r+0x2e>
 800abb2:	2e0a      	cmp	r6, #10
 800abb4:	d1df      	bne.n	800ab76 <__swbuf_r+0x2e>
 800abb6:	4621      	mov	r1, r4
 800abb8:	4628      	mov	r0, r5
 800abba:	f7ff fdeb 	bl	800a794 <_fflush_r>
 800abbe:	2800      	cmp	r0, #0
 800abc0:	d0d9      	beq.n	800ab76 <__swbuf_r+0x2e>
 800abc2:	e7d6      	b.n	800ab72 <__swbuf_r+0x2a>

0800abc4 <__swsetup_r>:
 800abc4:	b538      	push	{r3, r4, r5, lr}
 800abc6:	4b29      	ldr	r3, [pc, #164]	@ (800ac6c <__swsetup_r+0xa8>)
 800abc8:	4605      	mov	r5, r0
 800abca:	6818      	ldr	r0, [r3, #0]
 800abcc:	460c      	mov	r4, r1
 800abce:	b118      	cbz	r0, 800abd8 <__swsetup_r+0x14>
 800abd0:	6a03      	ldr	r3, [r0, #32]
 800abd2:	b90b      	cbnz	r3, 800abd8 <__swsetup_r+0x14>
 800abd4:	f7fe ffb0 	bl	8009b38 <__sinit>
 800abd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abdc:	0719      	lsls	r1, r3, #28
 800abde:	d422      	bmi.n	800ac26 <__swsetup_r+0x62>
 800abe0:	06da      	lsls	r2, r3, #27
 800abe2:	d407      	bmi.n	800abf4 <__swsetup_r+0x30>
 800abe4:	2209      	movs	r2, #9
 800abe6:	602a      	str	r2, [r5, #0]
 800abe8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abec:	81a3      	strh	r3, [r4, #12]
 800abee:	f04f 30ff 	mov.w	r0, #4294967295
 800abf2:	e033      	b.n	800ac5c <__swsetup_r+0x98>
 800abf4:	0758      	lsls	r0, r3, #29
 800abf6:	d512      	bpl.n	800ac1e <__swsetup_r+0x5a>
 800abf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abfa:	b141      	cbz	r1, 800ac0e <__swsetup_r+0x4a>
 800abfc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac00:	4299      	cmp	r1, r3
 800ac02:	d002      	beq.n	800ac0a <__swsetup_r+0x46>
 800ac04:	4628      	mov	r0, r5
 800ac06:	f7ff f95b 	bl	8009ec0 <_free_r>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac0e:	89a3      	ldrh	r3, [r4, #12]
 800ac10:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ac14:	81a3      	strh	r3, [r4, #12]
 800ac16:	2300      	movs	r3, #0
 800ac18:	6063      	str	r3, [r4, #4]
 800ac1a:	6923      	ldr	r3, [r4, #16]
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	89a3      	ldrh	r3, [r4, #12]
 800ac20:	f043 0308 	orr.w	r3, r3, #8
 800ac24:	81a3      	strh	r3, [r4, #12]
 800ac26:	6923      	ldr	r3, [r4, #16]
 800ac28:	b94b      	cbnz	r3, 800ac3e <__swsetup_r+0x7a>
 800ac2a:	89a3      	ldrh	r3, [r4, #12]
 800ac2c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ac30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac34:	d003      	beq.n	800ac3e <__swsetup_r+0x7a>
 800ac36:	4621      	mov	r1, r4
 800ac38:	4628      	mov	r0, r5
 800ac3a:	f000 f88b 	bl	800ad54 <__smakebuf_r>
 800ac3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac42:	f013 0201 	ands.w	r2, r3, #1
 800ac46:	d00a      	beq.n	800ac5e <__swsetup_r+0x9a>
 800ac48:	2200      	movs	r2, #0
 800ac4a:	60a2      	str	r2, [r4, #8]
 800ac4c:	6962      	ldr	r2, [r4, #20]
 800ac4e:	4252      	negs	r2, r2
 800ac50:	61a2      	str	r2, [r4, #24]
 800ac52:	6922      	ldr	r2, [r4, #16]
 800ac54:	b942      	cbnz	r2, 800ac68 <__swsetup_r+0xa4>
 800ac56:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ac5a:	d1c5      	bne.n	800abe8 <__swsetup_r+0x24>
 800ac5c:	bd38      	pop	{r3, r4, r5, pc}
 800ac5e:	0799      	lsls	r1, r3, #30
 800ac60:	bf58      	it	pl
 800ac62:	6962      	ldrpl	r2, [r4, #20]
 800ac64:	60a2      	str	r2, [r4, #8]
 800ac66:	e7f4      	b.n	800ac52 <__swsetup_r+0x8e>
 800ac68:	2000      	movs	r0, #0
 800ac6a:	e7f7      	b.n	800ac5c <__swsetup_r+0x98>
 800ac6c:	20000134 	.word	0x20000134

0800ac70 <_raise_r>:
 800ac70:	291f      	cmp	r1, #31
 800ac72:	b538      	push	{r3, r4, r5, lr}
 800ac74:	4605      	mov	r5, r0
 800ac76:	460c      	mov	r4, r1
 800ac78:	d904      	bls.n	800ac84 <_raise_r+0x14>
 800ac7a:	2316      	movs	r3, #22
 800ac7c:	6003      	str	r3, [r0, #0]
 800ac7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac82:	bd38      	pop	{r3, r4, r5, pc}
 800ac84:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ac86:	b112      	cbz	r2, 800ac8e <_raise_r+0x1e>
 800ac88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac8c:	b94b      	cbnz	r3, 800aca2 <_raise_r+0x32>
 800ac8e:	4628      	mov	r0, r5
 800ac90:	f000 f830 	bl	800acf4 <_getpid_r>
 800ac94:	4622      	mov	r2, r4
 800ac96:	4601      	mov	r1, r0
 800ac98:	4628      	mov	r0, r5
 800ac9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac9e:	f000 b817 	b.w	800acd0 <_kill_r>
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d00a      	beq.n	800acbc <_raise_r+0x4c>
 800aca6:	1c59      	adds	r1, r3, #1
 800aca8:	d103      	bne.n	800acb2 <_raise_r+0x42>
 800acaa:	2316      	movs	r3, #22
 800acac:	6003      	str	r3, [r0, #0]
 800acae:	2001      	movs	r0, #1
 800acb0:	e7e7      	b.n	800ac82 <_raise_r+0x12>
 800acb2:	2100      	movs	r1, #0
 800acb4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800acb8:	4620      	mov	r0, r4
 800acba:	4798      	blx	r3
 800acbc:	2000      	movs	r0, #0
 800acbe:	e7e0      	b.n	800ac82 <_raise_r+0x12>

0800acc0 <raise>:
 800acc0:	4b02      	ldr	r3, [pc, #8]	@ (800accc <raise+0xc>)
 800acc2:	4601      	mov	r1, r0
 800acc4:	6818      	ldr	r0, [r3, #0]
 800acc6:	f7ff bfd3 	b.w	800ac70 <_raise_r>
 800acca:	bf00      	nop
 800accc:	20000134 	.word	0x20000134

0800acd0 <_kill_r>:
 800acd0:	b538      	push	{r3, r4, r5, lr}
 800acd2:	4d07      	ldr	r5, [pc, #28]	@ (800acf0 <_kill_r+0x20>)
 800acd4:	2300      	movs	r3, #0
 800acd6:	4604      	mov	r4, r0
 800acd8:	4608      	mov	r0, r1
 800acda:	4611      	mov	r1, r2
 800acdc:	602b      	str	r3, [r5, #0]
 800acde:	f7f6 fbe3 	bl	80014a8 <_kill>
 800ace2:	1c43      	adds	r3, r0, #1
 800ace4:	d102      	bne.n	800acec <_kill_r+0x1c>
 800ace6:	682b      	ldr	r3, [r5, #0]
 800ace8:	b103      	cbz	r3, 800acec <_kill_r+0x1c>
 800acea:	6023      	str	r3, [r4, #0]
 800acec:	bd38      	pop	{r3, r4, r5, pc}
 800acee:	bf00      	nop
 800acf0:	2000485c 	.word	0x2000485c

0800acf4 <_getpid_r>:
 800acf4:	f7f6 bbd0 	b.w	8001498 <_getpid>

0800acf8 <_malloc_usable_size_r>:
 800acf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acfc:	1f18      	subs	r0, r3, #4
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	bfbc      	itt	lt
 800ad02:	580b      	ldrlt	r3, [r1, r0]
 800ad04:	18c0      	addlt	r0, r0, r3
 800ad06:	4770      	bx	lr

0800ad08 <__swhatbuf_r>:
 800ad08:	b570      	push	{r4, r5, r6, lr}
 800ad0a:	460c      	mov	r4, r1
 800ad0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad10:	2900      	cmp	r1, #0
 800ad12:	b096      	sub	sp, #88	@ 0x58
 800ad14:	4615      	mov	r5, r2
 800ad16:	461e      	mov	r6, r3
 800ad18:	da0d      	bge.n	800ad36 <__swhatbuf_r+0x2e>
 800ad1a:	89a3      	ldrh	r3, [r4, #12]
 800ad1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad20:	f04f 0100 	mov.w	r1, #0
 800ad24:	bf14      	ite	ne
 800ad26:	2340      	movne	r3, #64	@ 0x40
 800ad28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad2c:	2000      	movs	r0, #0
 800ad2e:	6031      	str	r1, [r6, #0]
 800ad30:	602b      	str	r3, [r5, #0]
 800ad32:	b016      	add	sp, #88	@ 0x58
 800ad34:	bd70      	pop	{r4, r5, r6, pc}
 800ad36:	466a      	mov	r2, sp
 800ad38:	f000 f848 	bl	800adcc <_fstat_r>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	dbec      	blt.n	800ad1a <__swhatbuf_r+0x12>
 800ad40:	9901      	ldr	r1, [sp, #4]
 800ad42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ad46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ad4a:	4259      	negs	r1, r3
 800ad4c:	4159      	adcs	r1, r3
 800ad4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad52:	e7eb      	b.n	800ad2c <__swhatbuf_r+0x24>

0800ad54 <__smakebuf_r>:
 800ad54:	898b      	ldrh	r3, [r1, #12]
 800ad56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad58:	079d      	lsls	r5, r3, #30
 800ad5a:	4606      	mov	r6, r0
 800ad5c:	460c      	mov	r4, r1
 800ad5e:	d507      	bpl.n	800ad70 <__smakebuf_r+0x1c>
 800ad60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	6123      	str	r3, [r4, #16]
 800ad68:	2301      	movs	r3, #1
 800ad6a:	6163      	str	r3, [r4, #20]
 800ad6c:	b003      	add	sp, #12
 800ad6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad70:	ab01      	add	r3, sp, #4
 800ad72:	466a      	mov	r2, sp
 800ad74:	f7ff ffc8 	bl	800ad08 <__swhatbuf_r>
 800ad78:	9f00      	ldr	r7, [sp, #0]
 800ad7a:	4605      	mov	r5, r0
 800ad7c:	4639      	mov	r1, r7
 800ad7e:	4630      	mov	r0, r6
 800ad80:	f7ff f912 	bl	8009fa8 <_malloc_r>
 800ad84:	b948      	cbnz	r0, 800ad9a <__smakebuf_r+0x46>
 800ad86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad8a:	059a      	lsls	r2, r3, #22
 800ad8c:	d4ee      	bmi.n	800ad6c <__smakebuf_r+0x18>
 800ad8e:	f023 0303 	bic.w	r3, r3, #3
 800ad92:	f043 0302 	orr.w	r3, r3, #2
 800ad96:	81a3      	strh	r3, [r4, #12]
 800ad98:	e7e2      	b.n	800ad60 <__smakebuf_r+0xc>
 800ad9a:	89a3      	ldrh	r3, [r4, #12]
 800ad9c:	6020      	str	r0, [r4, #0]
 800ad9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ada2:	81a3      	strh	r3, [r4, #12]
 800ada4:	9b01      	ldr	r3, [sp, #4]
 800ada6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800adaa:	b15b      	cbz	r3, 800adc4 <__smakebuf_r+0x70>
 800adac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adb0:	4630      	mov	r0, r6
 800adb2:	f000 f81d 	bl	800adf0 <_isatty_r>
 800adb6:	b128      	cbz	r0, 800adc4 <__smakebuf_r+0x70>
 800adb8:	89a3      	ldrh	r3, [r4, #12]
 800adba:	f023 0303 	bic.w	r3, r3, #3
 800adbe:	f043 0301 	orr.w	r3, r3, #1
 800adc2:	81a3      	strh	r3, [r4, #12]
 800adc4:	89a3      	ldrh	r3, [r4, #12]
 800adc6:	431d      	orrs	r5, r3
 800adc8:	81a5      	strh	r5, [r4, #12]
 800adca:	e7cf      	b.n	800ad6c <__smakebuf_r+0x18>

0800adcc <_fstat_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4d07      	ldr	r5, [pc, #28]	@ (800adec <_fstat_r+0x20>)
 800add0:	2300      	movs	r3, #0
 800add2:	4604      	mov	r4, r0
 800add4:	4608      	mov	r0, r1
 800add6:	4611      	mov	r1, r2
 800add8:	602b      	str	r3, [r5, #0]
 800adda:	f7f6 fbc5 	bl	8001568 <_fstat>
 800adde:	1c43      	adds	r3, r0, #1
 800ade0:	d102      	bne.n	800ade8 <_fstat_r+0x1c>
 800ade2:	682b      	ldr	r3, [r5, #0]
 800ade4:	b103      	cbz	r3, 800ade8 <_fstat_r+0x1c>
 800ade6:	6023      	str	r3, [r4, #0]
 800ade8:	bd38      	pop	{r3, r4, r5, pc}
 800adea:	bf00      	nop
 800adec:	2000485c 	.word	0x2000485c

0800adf0 <_isatty_r>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	4d06      	ldr	r5, [pc, #24]	@ (800ae0c <_isatty_r+0x1c>)
 800adf4:	2300      	movs	r3, #0
 800adf6:	4604      	mov	r4, r0
 800adf8:	4608      	mov	r0, r1
 800adfa:	602b      	str	r3, [r5, #0]
 800adfc:	f7f6 fbc4 	bl	8001588 <_isatty>
 800ae00:	1c43      	adds	r3, r0, #1
 800ae02:	d102      	bne.n	800ae0a <_isatty_r+0x1a>
 800ae04:	682b      	ldr	r3, [r5, #0]
 800ae06:	b103      	cbz	r3, 800ae0a <_isatty_r+0x1a>
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	bd38      	pop	{r3, r4, r5, pc}
 800ae0c:	2000485c 	.word	0x2000485c

0800ae10 <_init>:
 800ae10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae12:	bf00      	nop
 800ae14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae16:	bc08      	pop	{r3}
 800ae18:	469e      	mov	lr, r3
 800ae1a:	4770      	bx	lr

0800ae1c <_fini>:
 800ae1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae1e:	bf00      	nop
 800ae20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae22:	bc08      	pop	{r3}
 800ae24:	469e      	mov	lr, r3
 800ae26:	4770      	bx	lr
